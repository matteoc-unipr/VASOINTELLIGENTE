
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136b0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f48  080137e8  080137e8  000237e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014730  08014730  0003e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014730  08014730  00024730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014738  08014738  0003e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014738  08014738  00024738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08014740  08014740  00024740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000108  20000000  08014748  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b98  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          000015e0  20000108  20000108  00040108  2**2
                  ALLOC
 12 RAM1_region   00000000  200016e8  200016e8  0003e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  200016e8  200016e8  00040108  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY
 16 .comment      00000043  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY
 17 .debug_info   00061240  00000000  00000000  0003e645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000ce89  00000000  00000000  0009f885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001b52b  00000000  00000000  000ac70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000032c8  00000000  00000000  000c7c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000028c2  00000000  00000000  000caf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002db8d  00000000  00000000  000cd7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0005974a  00000000  00000000  000fb357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000e536b  00000000  00000000  00154aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  000090cc  00000000  00000000  00239e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000099  00000000  00000000  00242ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000108 	.word	0x20000108
 8000154:	00000000 	.word	0x00000000
 8000158:	080137d0 	.word	0x080137d0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000010c 	.word	0x2000010c
 8000174:	080137d0 	.word	0x080137d0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__gesf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpsf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__lesf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpsf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpsf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b46:	d011      	beq.n	8000b6c <__cmpsf2+0x40>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b4e:	bf18      	it	ne
 8000b50:	ea90 0f01 	teqne	r0, r1
 8000b54:	bf58      	it	pl
 8000b56:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b5a:	bf88      	it	hi
 8000b5c:	17c8      	asrhi	r0, r1, #31
 8000b5e:	bf38      	it	cc
 8000b60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b64:	bf18      	it	ne
 8000b66:	f040 0001 	orrne.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b70:	d102      	bne.n	8000b78 <__cmpsf2+0x4c>
 8000b72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b76:	d105      	bne.n	8000b84 <__cmpsf2+0x58>
 8000b78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b7c:	d1e4      	bne.n	8000b48 <__cmpsf2+0x1c>
 8000b7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b82:	d0e1      	beq.n	8000b48 <__cmpsf2+0x1c>
 8000b84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_cfrcmple>:
 8000b8c:	4684      	mov	ip, r0
 8000b8e:	4608      	mov	r0, r1
 8000b90:	4661      	mov	r1, ip
 8000b92:	e7ff      	b.n	8000b94 <__aeabi_cfcmpeq>

08000b94 <__aeabi_cfcmpeq>:
 8000b94:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b96:	f7ff ffc9 	bl	8000b2c <__cmpsf2>
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	bf48      	it	mi
 8000b9e:	f110 0f00 	cmnmi.w	r0, #0
 8000ba2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ba4 <__aeabi_fcmpeq>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff fff4 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bac:	bf0c      	ite	eq
 8000bae:	2001      	moveq	r0, #1
 8000bb0:	2000      	movne	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fcmplt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffea 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_fcmple>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffe0 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bd4:	bf94      	ite	ls
 8000bd6:	2001      	movls	r0, #1
 8000bd8:	2000      	movhi	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_fcmpge>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffd2 	bl	8000b8c <__aeabi_cfrcmple>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_fcmpgt>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffc8 	bl	8000b8c <__aeabi_cfrcmple>
 8000bfc:	bf34      	ite	cc
 8000bfe:	2001      	movcc	r0, #1
 8000c00:	2000      	movcs	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_f2iz>:
 8000c08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c10:	d30f      	bcc.n	8000c32 <__aeabi_f2iz+0x2a>
 8000c12:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_f2iz+0x30>
 8000c1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c24:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c28:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2c:	bf18      	it	ne
 8000c2e:	4240      	negne	r0, r0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr
 8000c38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c3c:	d101      	bne.n	8000c42 <__aeabi_f2iz+0x3a>
 8000c3e:	0242      	lsls	r2, r0, #9
 8000c40:	d105      	bne.n	8000c4e <__aeabi_f2iz+0x46>
 8000c42:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	bf08      	it	eq
 8000c48:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c4c:	4770      	bx	lr
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_f2uiz>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	d20e      	bcs.n	8000c76 <__aeabi_f2uiz+0x22>
 8000c58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c5c:	d30b      	bcc.n	8000c76 <__aeabi_f2uiz+0x22>
 8000c5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c66:	d409      	bmi.n	8000c7c <__aeabi_f2uiz+0x28>
 8000c68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c70:	fa23 f002 	lsr.w	r0, r3, r2
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr
 8000c7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c80:	d101      	bne.n	8000c86 <__aeabi_f2uiz+0x32>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d102      	bne.n	8000c8c <__aeabi_f2uiz+0x38>
 8000c86:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8a:	4770      	bx	lr
 8000c8c:	f04f 0000 	mov.w	r0, #0
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__aeabi_uldivmod>:
 8000c94:	b953      	cbnz	r3, 8000cac <__aeabi_uldivmod+0x18>
 8000c96:	b94a      	cbnz	r2, 8000cac <__aeabi_uldivmod+0x18>
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	2800      	cmpeq	r0, #0
 8000c9e:	bf1c      	itt	ne
 8000ca0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca8:	f000 b970 	b.w	8000f8c <__aeabi_idiv0>
 8000cac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb4:	f000 f806 	bl	8000cc4 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4770      	bx	lr

08000cc4 <__udivmoddi4>:
 8000cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc8:	9e08      	ldr	r6, [sp, #32]
 8000cca:	460d      	mov	r5, r1
 8000ccc:	4604      	mov	r4, r0
 8000cce:	460f      	mov	r7, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14a      	bne.n	8000d6a <__udivmoddi4+0xa6>
 8000cd4:	428a      	cmp	r2, r1
 8000cd6:	4694      	mov	ip, r2
 8000cd8:	d965      	bls.n	8000da6 <__udivmoddi4+0xe2>
 8000cda:	fab2 f382 	clz	r3, r2
 8000cde:	b143      	cbz	r3, 8000cf2 <__udivmoddi4+0x2e>
 8000ce0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce4:	f1c3 0220 	rsb	r2, r3, #32
 8000ce8:	409f      	lsls	r7, r3
 8000cea:	fa20 f202 	lsr.w	r2, r0, r2
 8000cee:	4317      	orrs	r7, r2
 8000cf0:	409c      	lsls	r4, r3
 8000cf2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cf6:	fa1f f58c 	uxth.w	r5, ip
 8000cfa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cfe:	0c22      	lsrs	r2, r4, #16
 8000d00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d08:	fb01 f005 	mul.w	r0, r1, r5
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x62>
 8000d10:	eb1c 0202 	adds.w	r2, ip, r2
 8000d14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d18:	f080 811b 	bcs.w	8000f52 <__udivmoddi4+0x28e>
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	f240 8118 	bls.w	8000f52 <__udivmoddi4+0x28e>
 8000d22:	3902      	subs	r1, #2
 8000d24:	4462      	add	r2, ip
 8000d26:	1a12      	subs	r2, r2, r0
 8000d28:	b2a4      	uxth	r4, r4
 8000d2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d36:	fb00 f505 	mul.w	r5, r0, r5
 8000d3a:	42a5      	cmp	r5, r4
 8000d3c:	d90a      	bls.n	8000d54 <__udivmoddi4+0x90>
 8000d3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d46:	f080 8106 	bcs.w	8000f56 <__udivmoddi4+0x292>
 8000d4a:	42a5      	cmp	r5, r4
 8000d4c:	f240 8103 	bls.w	8000f56 <__udivmoddi4+0x292>
 8000d50:	4464      	add	r4, ip
 8000d52:	3802      	subs	r0, #2
 8000d54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d58:	1b64      	subs	r4, r4, r5
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	b11e      	cbz	r6, 8000d66 <__udivmoddi4+0xa2>
 8000d5e:	40dc      	lsrs	r4, r3
 8000d60:	2300      	movs	r3, #0
 8000d62:	e9c6 4300 	strd	r4, r3, [r6]
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0xbc>
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f000 80ec 	beq.w	8000f4c <__udivmoddi4+0x288>
 8000d74:	2100      	movs	r1, #0
 8000d76:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d80:	fab3 f183 	clz	r1, r3
 8000d84:	2900      	cmp	r1, #0
 8000d86:	d149      	bne.n	8000e1c <__udivmoddi4+0x158>
 8000d88:	42ab      	cmp	r3, r5
 8000d8a:	d302      	bcc.n	8000d92 <__udivmoddi4+0xce>
 8000d8c:	4282      	cmp	r2, r0
 8000d8e:	f200 80f7 	bhi.w	8000f80 <__udivmoddi4+0x2bc>
 8000d92:	1a84      	subs	r4, r0, r2
 8000d94:	eb65 0203 	sbc.w	r2, r5, r3
 8000d98:	2001      	movs	r0, #1
 8000d9a:	4617      	mov	r7, r2
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d0e2      	beq.n	8000d66 <__udivmoddi4+0xa2>
 8000da0:	e9c6 4700 	strd	r4, r7, [r6]
 8000da4:	e7df      	b.n	8000d66 <__udivmoddi4+0xa2>
 8000da6:	b902      	cbnz	r2, 8000daa <__udivmoddi4+0xe6>
 8000da8:	deff      	udf	#255	; 0xff
 8000daa:	fab2 f382 	clz	r3, r2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f040 808f 	bne.w	8000ed2 <__udivmoddi4+0x20e>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dba:	fa1f fe8c 	uxth.w	lr, ip
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc4:	fb07 2015 	mls	r0, r7, r5, r2
 8000dc8:	0c22      	lsrs	r2, r4, #16
 8000dca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dce:	fb0e f005 	mul.w	r0, lr, r5
 8000dd2:	4290      	cmp	r0, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x124>
 8000dd6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dda:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x122>
 8000de0:	4290      	cmp	r0, r2
 8000de2:	f200 80ca 	bhi.w	8000f7a <__udivmoddi4+0x2b6>
 8000de6:	4645      	mov	r5, r8
 8000de8:	1a12      	subs	r2, r2, r0
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df0:	fb07 2210 	mls	r2, r7, r0, r2
 8000df4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x14e>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e08:	d202      	bcs.n	8000e10 <__udivmoddi4+0x14c>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	f200 80ba 	bhi.w	8000f84 <__udivmoddi4+0x2c0>
 8000e10:	4610      	mov	r0, r2
 8000e12:	eba4 040e 	sub.w	r4, r4, lr
 8000e16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1a:	e79f      	b.n	8000d5c <__udivmoddi4+0x98>
 8000e1c:	f1c1 0720 	rsb	r7, r1, #32
 8000e20:	408b      	lsls	r3, r1
 8000e22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e32:	40fd      	lsrs	r5, r7
 8000e34:	4323      	orrs	r3, r4
 8000e36:	fa00 f901 	lsl.w	r9, r0, r1
 8000e3a:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000e3e:	fa1f fe8c 	uxth.w	lr, ip
 8000e42:	fbb5 f8f0 	udiv	r8, r5, r0
 8000e46:	0c1c      	lsrs	r4, r3, #16
 8000e48:	fb00 5518 	mls	r5, r0, r8, r5
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	d90b      	bls.n	8000e74 <__udivmoddi4+0x1b0>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e64:	f080 8087 	bcs.w	8000f76 <__udivmoddi4+0x2b2>
 8000e68:	42a5      	cmp	r5, r4
 8000e6a:	f240 8084 	bls.w	8000f76 <__udivmoddi4+0x2b2>
 8000e6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e72:	4464      	add	r4, ip
 8000e74:	1b64      	subs	r4, r4, r5
 8000e76:	b29d      	uxth	r5, r3
 8000e78:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7c:	fb00 4413 	mls	r4, r0, r3, r4
 8000e80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e88:	45a6      	cmp	lr, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x1da>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e94:	d26b      	bcs.n	8000f6e <__udivmoddi4+0x2aa>
 8000e96:	45a6      	cmp	lr, r4
 8000e98:	d969      	bls.n	8000f6e <__udivmoddi4+0x2aa>
 8000e9a:	3b02      	subs	r3, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000ea2:	fba0 8302 	umull	r8, r3, r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	429c      	cmp	r4, r3
 8000eac:	46c6      	mov	lr, r8
 8000eae:	461d      	mov	r5, r3
 8000eb0:	d355      	bcc.n	8000f5e <__udivmoddi4+0x29a>
 8000eb2:	d052      	beq.n	8000f5a <__udivmoddi4+0x296>
 8000eb4:	b156      	cbz	r6, 8000ecc <__udivmoddi4+0x208>
 8000eb6:	ebb9 030e 	subs.w	r3, r9, lr
 8000eba:	eb64 0405 	sbc.w	r4, r4, r5
 8000ebe:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec2:	40cb      	lsrs	r3, r1
 8000ec4:	40cc      	lsrs	r4, r1
 8000ec6:	431f      	orrs	r7, r3
 8000ec8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c3 0120 	rsb	r1, r3, #32
 8000ed6:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eda:	fa20 f201 	lsr.w	r2, r0, r1
 8000ede:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee2:	409d      	lsls	r5, r3
 8000ee4:	432a      	orrs	r2, r5
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef2:	fb07 1510 	mls	r5, r7, r0, r1
 8000ef6:	0c11      	lsrs	r1, r2, #16
 8000ef8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000efc:	fb00 f50e 	mul.w	r5, r0, lr
 8000f00:	428d      	cmp	r5, r1
 8000f02:	fa04 f403 	lsl.w	r4, r4, r3
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x256>
 8000f08:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f10:	d22f      	bcs.n	8000f72 <__udivmoddi4+0x2ae>
 8000f12:	428d      	cmp	r5, r1
 8000f14:	d92d      	bls.n	8000f72 <__udivmoddi4+0x2ae>
 8000f16:	3802      	subs	r0, #2
 8000f18:	4461      	add	r1, ip
 8000f1a:	1b49      	subs	r1, r1, r5
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f22:	fb07 1115 	mls	r1, r7, r5, r1
 8000f26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f2a:	fb05 f10e 	mul.w	r1, r5, lr
 8000f2e:	4291      	cmp	r1, r2
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x280>
 8000f32:	eb1c 0202 	adds.w	r2, ip, r2
 8000f36:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f3a:	d216      	bcs.n	8000f6a <__udivmoddi4+0x2a6>
 8000f3c:	4291      	cmp	r1, r2
 8000f3e:	d914      	bls.n	8000f6a <__udivmoddi4+0x2a6>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	1a52      	subs	r2, r2, r1
 8000f46:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f4a:	e739      	b.n	8000dc0 <__udivmoddi4+0xfc>
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xa2>
 8000f52:	4639      	mov	r1, r7
 8000f54:	e6e7      	b.n	8000d26 <__udivmoddi4+0x62>
 8000f56:	4610      	mov	r0, r2
 8000f58:	e6fc      	b.n	8000d54 <__udivmoddi4+0x90>
 8000f5a:	45c1      	cmp	r9, r8
 8000f5c:	d2aa      	bcs.n	8000eb4 <__udivmoddi4+0x1f0>
 8000f5e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f62:	eb63 050c 	sbc.w	r5, r3, ip
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a4      	b.n	8000eb4 <__udivmoddi4+0x1f0>
 8000f6a:	4645      	mov	r5, r8
 8000f6c:	e7ea      	b.n	8000f44 <__udivmoddi4+0x280>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e795      	b.n	8000e9e <__udivmoddi4+0x1da>
 8000f72:	4640      	mov	r0, r8
 8000f74:	e7d1      	b.n	8000f1a <__udivmoddi4+0x256>
 8000f76:	46d0      	mov	r8, sl
 8000f78:	e77c      	b.n	8000e74 <__udivmoddi4+0x1b0>
 8000f7a:	3d02      	subs	r5, #2
 8000f7c:	4462      	add	r2, ip
 8000f7e:	e733      	b.n	8000de8 <__udivmoddi4+0x124>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e70b      	b.n	8000d9c <__udivmoddi4+0xd8>
 8000f84:	4464      	add	r4, ip
 8000f86:	3802      	subs	r0, #2
 8000f88:	e743      	b.n	8000e12 <__udivmoddi4+0x14e>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init()
{
 8000f90:	b500      	push	{lr}
 8000f92:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f94:	2300      	movs	r3, #0
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f9c:	4819      	ldr	r0, [pc, #100]	; (8001004 <MX_ADC_Init+0x74>)
 8000f9e:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <MX_ADC_Init+0x78>)
 8000fa0:	6002      	str	r2, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000fa6:	6042      	str	r2, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa8:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000faa:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fac:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fae:	2204      	movs	r2, #4
 8000fb0:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000fb2:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000fb4:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000fb6:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc0:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc2:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000fc4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fcc:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5  ;
 8000fce:	6343      	str	r3, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5  ;
 8000fd0:	6383      	str	r3, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000fd2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000fd6:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fd8:	f002 faaa 	bl	8003530 <HAL_ADC_Init>
 8000fdc:	b960      	cbnz	r0, 8000ff8 <MX_ADC_Init+0x68>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_ADC_Init+0x7c>)
 8000fe0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000fe6:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fe8:	a901      	add	r1, sp, #4
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_ADC_Init+0x74>)
 8000fec:	f002 fc1a 	bl	8003824 <HAL_ADC_ConfigChannel>
 8000ff0:	b928      	cbnz	r0, 8000ffe <MX_ADC_Init+0x6e>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ff2:	b005      	add	sp, #20
 8000ff4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ff8:	f000 faf6 	bl	80015e8 <Error_Handler>
 8000ffc:	e7ef      	b.n	8000fde <MX_ADC_Init+0x4e>
    Error_Handler();
 8000ffe:	f000 faf3 	bl	80015e8 <Error_Handler>
}
 8001002:	e7f6      	b.n	8000ff2 <MX_ADC_Init+0x62>
 8001004:	20000124 	.word	0x20000124
 8001008:	40012400 	.word	0x40012400
 800100c:	14000020 	.word	0x14000020

08001010 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001010:	b500      	push	{lr}
 8001012:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	2300      	movs	r3, #0
 8001016:	9303      	str	r3, [sp, #12]
 8001018:	9304      	str	r3, [sp, #16]
 800101a:	9305      	str	r3, [sp, #20]
 800101c:	9306      	str	r3, [sp, #24]
 800101e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC)
 8001020:	6802      	ldr	r2, [r0, #0]
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_ADC_MspInit+0x58>)
 8001024:	429a      	cmp	r2, r3
 8001026:	d002      	beq.n	800102e <HAL_ADC_MspInit+0x1e>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001028:	b009      	add	sp, #36	; 0x24
 800102a:	f85d fb04 	ldr.w	pc, [sp], #4
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800102e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001032:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001038:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800103a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800103c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001040:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001042:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001044:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001046:	f042 0202 	orr.w	r2, r2, #2
 800104a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001054:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001056:	2302      	movs	r3, #2
 8001058:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105a:	2303      	movs	r3, #3
 800105c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	a903      	add	r1, sp, #12
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <HAL_ADC_MspInit+0x5c>)
 8001062:	f003 fb7b 	bl	800475c <HAL_GPIO_Init>
}
 8001066:	e7df      	b.n	8001028 <HAL_ADC_MspInit+0x18>
 8001068:	40012400 	.word	0x40012400
 800106c:	48000400 	.word	0x48000400

08001070 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b508      	push	{r3, lr}

  if(adcHandle->Instance==ADC)
 8001072:	6802      	ldr	r2, [r0, #0]
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_ADC_MspDeInit+0x24>)
 8001076:	429a      	cmp	r2, r3
 8001078:	d000      	beq.n	800107c <HAL_ADC_MspDeInit+0xc>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800107a:	bd08      	pop	{r3, pc}
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800107c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001080:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001082:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001086:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 8001088:	2102      	movs	r1, #2
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <HAL_ADC_MspDeInit+0x28>)
 800108c:	f003 fc38 	bl	8004900 <HAL_GPIO_DeInit>
}
 8001090:	e7f3      	b.n	800107a <HAL_ADC_MspDeInit+0xa>
 8001092:	bf00      	nop
 8001094:	40012400 	.word	0x40012400
 8001098:	48000400 	.word	0x48000400

0800109c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800109c:	b530      	push	{r4, r5, lr}
 800109e:	b085      	sub	sp, #20
 80010a0:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 80010a2:	2300      	movs	r3, #0
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 80010aa:	f7ff ff71 	bl	8000f90 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80010ae:	4816      	ldr	r0, [pc, #88]	; (8001108 <ADC_ReadChannels+0x6c>)
 80010b0:	f002 fe76 	bl	8003da0 <HAL_ADCEx_Calibration_Start>
 80010b4:	b9f8      	cbnz	r0, 80010f6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80010b6:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010bc:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010be:	a901      	add	r1, sp, #4
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <ADC_ReadChannels+0x6c>)
 80010c2:	f002 fbaf 	bl	8003824 <HAL_ADC_ConfigChannel>
 80010c6:	b9c8      	cbnz	r0, 80010fc <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80010c8:	480f      	ldr	r0, [pc, #60]	; (8001108 <ADC_ReadChannels+0x6c>)
 80010ca:	f002 fd6d 	bl	8003ba8 <HAL_ADC_Start>
 80010ce:	b9c0      	cbnz	r0, 8001102 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80010d0:	4c0d      	ldr	r4, [pc, #52]	; (8001108 <ADC_ReadChannels+0x6c>)
 80010d2:	f04f 31ff 	mov.w	r1, #4294967295
 80010d6:	4620      	mov	r0, r4
 80010d8:	f002 fb42 	bl	8003760 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80010dc:	4620      	mov	r0, r4
 80010de:	f002 fe3f 	bl	8003d60 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80010e2:	4620      	mov	r0, r4
 80010e4:	f002 fb9b 	bl	800381e <HAL_ADC_GetValue>
 80010e8:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 80010ea:	4620      	mov	r0, r4
 80010ec:	f002 fdd8 	bl	8003ca0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80010f0:	4628      	mov	r0, r5
 80010f2:	b005      	add	sp, #20
 80010f4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80010f6:	f000 fa77 	bl	80015e8 <Error_Handler>
 80010fa:	e7dc      	b.n	80010b6 <ADC_ReadChannels+0x1a>
    Error_Handler();
 80010fc:	f000 fa74 	bl	80015e8 <Error_Handler>
 8001100:	e7e2      	b.n	80010c8 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8001102:	f000 fa71 	bl	80015e8 <Error_Handler>
 8001106:	e7e3      	b.n	80010d0 <ADC_ReadChannels+0x34>
 8001108:	20000124 	.word	0x20000124

0800110c <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <SYS_InitMeasurement+0x8>)
 800110e:	4a02      	ldr	r2, [pc, #8]	; (8001118 <SYS_InitMeasurement+0xc>)
 8001110:	601a      	str	r2, [r3, #0]
}
 8001112:	4770      	bx	lr
 8001114:	20000124 	.word	0x20000124
 8001118:	40012400 	.word	0x40012400

0800111c <SYS_GetBatteryLevel>:
{
 800111c:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <SYS_GetBatteryLevel+0x38>)
 8001120:	f7ff ffbc 	bl	800109c <ADC_ReadChannels>
  if (measuredLevel == 0)
 8001124:	b1a0      	cbz	r0, 8001150 <SYS_GetBatteryLevel+0x34>
 8001126:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <SYS_GetBatteryLevel+0x3c>)
 800112a:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 800112e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001132:	4290      	cmp	r0, r2
 8001134:	d007      	beq.n	8001146 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001136:	f640 42e4 	movw	r2, #3300	; 0xce4
 800113a:	fb02 f000 	mul.w	r0, r2, r0
 800113e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001142:	b280      	uxth	r0, r0
 8001144:	e005      	b.n	8001152 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <SYS_GetBatteryLevel+0x40>)
 8001148:	fbb0 f0f3 	udiv	r0, r0, r3
 800114c:	b280      	uxth	r0, r0
 800114e:	e000      	b.n	8001152 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001150:	2000      	movs	r0, #0
}
 8001152:	bd08      	pop	{r3, pc}
 8001154:	b4002000 	.word	0xb4002000
 8001158:	1fff7500 	.word	0x1fff7500
 800115c:	004c08d8 	.word	0x004c08d8

08001160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001160:	b500      	push	{lr}
 8001162:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001168:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800116a:	f042 0204 	orr.w	r2, r2, #4
 800116e:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001172:	f002 0204 	and.w	r2, r2, #4
 8001176:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001178:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800117a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800118a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2102      	movs	r1, #2
 8001190:	200f      	movs	r0, #15
 8001192:	f002 feb7 	bl	8003f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001196:	200f      	movs	r0, #15
 8001198:	f002 feec 	bl	8003f74 <HAL_NVIC_EnableIRQ>

}
 800119c:	b003      	add	sp, #12
 800119e:	f85d fb04 	ldr.w	pc, [sp], #4

080011a2 <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80011a2:	2300      	movs	r3, #0
 80011a4:	e001      	b.n	80011aa <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80011a6:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 80011a8:	3308      	adds	r3, #8
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d20a      	bcs.n	80011c4 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 80011ae:	6842      	ldr	r2, [r0, #4]
 80011b0:	f8d0 c000 	ldr.w	ip, [r0]
 80011b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80011b8:	bf08      	it	eq
 80011ba:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 80011be:	d0f2      	beq.n	80011a6 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 80011c0:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 80011c2:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 80011c4:	2000      	movs	r0, #0
 80011c6:	4770      	bx	lr

080011c8 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 80011c8:	b130      	cbz	r0, 80011d8 <FLASH_IF_INT_Read+0x10>
{
 80011ca:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 80011cc:	b139      	cbz	r1, 80011de <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80011ce:	b292      	uxth	r2, r2
 80011d0:	f011 fda4 	bl	8012d1c <UTIL_MEM_cpy_8>
  return ret_status;
 80011d4:	2000      	movs	r0, #0
}
 80011d6:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 80011d8:	f06f 0005 	mvn.w	r0, #5
}
 80011dc:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 80011de:	f06f 0005 	mvn.w	r0, #5
 80011e2:	e7f8      	b.n	80011d6 <FLASH_IF_INT_Read+0xe>

080011e4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80011e4:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80011e6:	f003 f995 	bl	8004514 <HAL_FLASH_Unlock>
 80011ea:	b978      	cbnz	r0, 800120c <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <FLASH_IF_INT_Clear_Error+0x30>)
 80011ee:	699a      	ldr	r2, [r3, #24]
 80011f0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80011f4:	619a      	str	r2, [r3, #24]
 80011f6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80011fa:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80011fc:	f003 f9a2 	bl	8004544 <HAL_FLASH_Lock>
 8001200:	b908      	cbnz	r0, 8001206 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 8001202:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001204:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001206:	f06f 0004 	mvn.w	r0, #4
 800120a:	e7fb      	b.n	8001204 <FLASH_IF_INT_Clear_Error+0x20>
 800120c:	f06f 0004 	mvn.w	r0, #4
 8001210:	e7f8      	b.n	8001204 <FLASH_IF_INT_Clear_Error+0x20>
 8001212:	bf00      	nop
 8001214:	58004000 	.word	0x58004000

08001218 <FLASH_IF_INT_Erase>:
{
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 8001220:	2800      	cmp	r0, #0
 8001222:	d039      	beq.n	8001298 <FLASH_IF_INT_Erase+0x80>
 8001224:	460e      	mov	r6, r1
 8001226:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001228:	f7ff ffdc 	bl	80011e4 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 800122c:	4605      	mov	r5, r0
 800122e:	b110      	cbz	r0, 8001236 <FLASH_IF_INT_Erase+0x1e>
}
 8001230:	4628      	mov	r0, r5
 8001232:	b004      	add	sp, #16
 8001234:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001236:	f003 f96d 	bl	8004514 <HAL_FLASH_Unlock>
 800123a:	bb80      	cbnz	r0, 800129e <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800123c:	2302      	movs	r3, #2
 800123e:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 8001240:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8001244:	4817      	ldr	r0, [pc, #92]	; (80012a4 <FLASH_IF_INT_Erase+0x8c>)
 8001246:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <FLASH_IF_INT_Erase+0x90>)
 800124c:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 8001250:	fbb3 fcf1 	udiv	ip, r3, r1
 8001254:	fb01 331c 	mls	r3, r1, ip, r3
 8001258:	0adb      	lsrs	r3, r3, #11
 800125a:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 800125c:	19a1      	adds	r1, r4, r6
 800125e:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8001262:	3901      	subs	r1, #1
 8001264:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	; 0x5e0
 8001268:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 800126c:	fbb1 f0f2 	udiv	r0, r1, r2
 8001270:	fb02 1110 	mls	r1, r2, r0, r1
 8001274:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 8001278:	3301      	adds	r3, #1
 800127a:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 800127c:	a903      	add	r1, sp, #12
 800127e:	4668      	mov	r0, sp
 8001280:	f003 fa2c 	bl	80046dc <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8001284:	b118      	cbz	r0, 800128e <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001286:	2802      	cmp	r0, #2
 8001288:	d004      	beq.n	8001294 <FLASH_IF_INT_Erase+0x7c>
 800128a:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 800128e:	f003 f959 	bl	8004544 <HAL_FLASH_Lock>
 8001292:	e7cd      	b.n	8001230 <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001294:	2501      	movs	r5, #1
 8001296:	e7fa      	b.n	800128e <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 8001298:	f06f 0505 	mvn.w	r5, #5
 800129c:	e7c8      	b.n	8001230 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 800129e:	f06f 0504 	mvn.w	r5, #4
 80012a2:	e7c5      	b.n	8001230 <FLASH_IF_INT_Erase+0x18>
 80012a4:	1fff7000 	.word	0x1fff7000
 80012a8:	03fffc00 	.word	0x03fffc00

080012ac <FLASH_IF_INT_Write>:
{
 80012ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b0:	b089      	sub	sp, #36	; 0x24
 80012b2:	9003      	str	r0, [sp, #12]
 80012b4:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 80012b6:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80012b8:	2800      	cmp	r0, #0
 80012ba:	f000 80a9 	beq.w	8001410 <FLASH_IF_INT_Write+0x164>
 80012be:	4683      	mov	fp, r0
 80012c0:	2900      	cmp	r1, #0
 80012c2:	f000 80a9 	beq.w	8001418 <FLASH_IF_INT_Write+0x16c>
 80012c6:	f012 0f07 	tst.w	r2, #7
 80012ca:	f040 80a9 	bne.w	8001420 <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80012ce:	f010 0307 	ands.w	r3, r0, #7
 80012d2:	9305      	str	r3, [sp, #20]
 80012d4:	f040 80a8 	bne.w	8001428 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 80012d8:	f7ff ff84 	bl	80011e4 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80012dc:	9002      	str	r0, [sp, #8]
 80012de:	b118      	cbz	r0, 80012e8 <FLASH_IF_INT_Write+0x3c>
}
 80012e0:	9802      	ldr	r0, [sp, #8]
 80012e2:	b009      	add	sp, #36	; 0x24
 80012e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80012e8:	f003 f914 	bl	8004514 <HAL_FLASH_Unlock>
 80012ec:	2800      	cmp	r0, #0
 80012ee:	f040 809f 	bne.w	8001430 <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 80012f2:	9c03      	ldr	r4, [sp, #12]
 80012f4:	f104 4278 	add.w	r2, r4, #4160749568	; 0xf8000000
 80012f8:	4b4f      	ldr	r3, [pc, #316]	; (8001438 <FLASH_IF_INT_Write+0x18c>)
 80012fa:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 80012fe:	494f      	ldr	r1, [pc, #316]	; (800143c <FLASH_IF_INT_Write+0x190>)
 8001300:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 8001304:	fbb2 f3f1 	udiv	r3, r2, r1
 8001308:	fb01 2213 	mls	r2, r1, r3, r2
 800130c:	0ad3      	lsrs	r3, r2, #11
 800130e:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001310:	9b04      	ldr	r3, [sp, #16]
 8001312:	18e3      	adds	r3, r4, r3
 8001314:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001318:	3b01      	subs	r3, #1
 800131a:	fbb3 f0f1 	udiv	r0, r3, r1
 800131e:	fb01 3310 	mls	r3, r1, r0, r3
 8001322:	0adb      	lsrs	r3, r3, #11
 8001324:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001328:	3301      	adds	r3, #1
 800132a:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 800132c:	2b01      	cmp	r3, #1
 800132e:	d906      	bls.n	800133e <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001330:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8001334:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 8001338:	f8dd a018 	ldr.w	sl, [sp, #24]
 800133c:	e02f      	b.n	800139e <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 800133e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8001342:	e7f9      	b.n	8001338 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 8001344:	46c8      	mov	r8, r9
          current_source = uSource;
 8001346:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 8001348:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800134a:	9d05      	ldr	r5, [sp, #20]
 800134c:	4545      	cmp	r5, r8
 800134e:	d215      	bcs.n	800137c <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001350:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001352:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001356:	4621      	mov	r1, r4
 8001358:	2001      	movs	r0, #1
 800135a:	f003 f937 	bl	80045cc <HAL_FLASH_Program>
 800135e:	b950      	cbnz	r0, 8001376 <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001360:	6820      	ldr	r0, [r4, #0]
 8001362:	6862      	ldr	r2, [r4, #4]
 8001364:	59e9      	ldr	r1, [r5, r7]
 8001366:	6873      	ldr	r3, [r6, #4]
 8001368:	429a      	cmp	r2, r3
 800136a:	bf08      	it	eq
 800136c:	4288      	cmpeq	r0, r1
 800136e:	d141      	bne.n	80013f4 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 8001370:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001372:	3508      	adds	r5, #8
 8001374:	e7ea      	b.n	800134c <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 8001376:	f06f 0303 	mvn.w	r3, #3
 800137a:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 800137c:	9b02      	ldr	r3, [sp, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d13f      	bne.n	8001402 <FLASH_IF_INT_Write+0x156>
        uDest += length;
 8001382:	44cb      	add	fp, r9
        uSource += length;
 8001384:	9b01      	ldr	r3, [sp, #4]
 8001386:	444b      	add	r3, r9
 8001388:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 800138a:	9b04      	ldr	r3, [sp, #16]
 800138c:	eba3 0909 	sub.w	r9, r3, r9
 8001390:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 8001394:	bf28      	it	cs
 8001396:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800139a:	f10a 0a01 	add.w	sl, sl, #1
 800139e:	9b06      	ldr	r3, [sp, #24]
 80013a0:	9a07      	ldr	r2, [sp, #28]
 80013a2:	4413      	add	r3, r2
 80013a4:	4553      	cmp	r3, sl
 80013a6:	d92c      	bls.n	8001402 <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80013a8:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 80013ac:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80013ae:	4649      	mov	r1, r9
 80013b0:	9803      	ldr	r0, [sp, #12]
 80013b2:	f7ff fef6 	bl	80011a2 <FLASH_IF_INT_IsEmpty>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	d0c4      	beq.n	8001344 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <FLASH_IF_INT_Write+0x194>)
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	b1e8      	cbz	r0, 80013fc <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80013c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013c4:	4621      	mov	r1, r4
 80013c6:	f7ff feff 	bl	80011c8 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <FLASH_IF_INT_Write+0x194>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f3cb 000a 	ubfx	r0, fp, #0, #11
 80013d2:	fa1f f289 	uxth.w	r2, r9
 80013d6:	9901      	ldr	r1, [sp, #4]
 80013d8:	4418      	add	r0, r3
 80013da:	f011 fc9f 	bl	8012d1c <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80013de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff ff18 	bl	8001218 <FLASH_IF_INT_Erase>
 80013e8:	b970      	cbnz	r0, 8001408 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <FLASH_IF_INT_Write+0x194>)
 80013ec:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 80013ee:	f44f 6800 	mov.w	r8, #2048	; 0x800
 80013f2:	e7aa      	b.n	800134a <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 80013f4:	f06f 0303 	mvn.w	r3, #3
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	e7bf      	b.n	800137c <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 80013fc:	f06f 0305 	mvn.w	r3, #5
 8001400:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 8001402:	f003 f89f 	bl	8004544 <HAL_FLASH_Lock>
 8001406:	e76b      	b.n	80012e0 <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001408:	f06f 0301 	mvn.w	r3, #1
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	e7f8      	b.n	8001402 <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 8001410:	f06f 0305 	mvn.w	r3, #5
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	e763      	b.n	80012e0 <FLASH_IF_INT_Write+0x34>
 8001418:	f06f 0305 	mvn.w	r3, #5
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	e75f      	b.n	80012e0 <FLASH_IF_INT_Write+0x34>
 8001420:	f06f 0305 	mvn.w	r3, #5
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	e75b      	b.n	80012e0 <FLASH_IF_INT_Write+0x34>
 8001428:	f06f 0305 	mvn.w	r3, #5
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	e757      	b.n	80012e0 <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001430:	f06f 0304 	mvn.w	r3, #4
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	e753      	b.n	80012e0 <FLASH_IF_INT_Write+0x34>
 8001438:	1fff7000 	.word	0x1fff7000
 800143c:	03fffc00 	.word	0x03fffc00
 8001440:	20000188 	.word	0x20000188

08001444 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 8001444:	4b01      	ldr	r3, [pc, #4]	; (800144c <FLASH_IF_Init+0x8>)
 8001446:	6018      	str	r0, [r3, #0]
}
 8001448:	2000      	movs	r0, #0
 800144a:	4770      	bx	lr
 800144c:	20000188 	.word	0x20000188

08001450 <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001450:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001454:	d30e      	bcc.n	8001474 <FLASH_IF_Write+0x24>
{
 8001456:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <FLASH_IF_Write+0x30>)
 800145a:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <FLASH_IF_Write+0x34>)
 8001460:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001464:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001468:	3b01      	subs	r3, #1
 800146a:	4298      	cmp	r0, r3
 800146c:	d805      	bhi.n	800147a <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800146e:	f7ff ff1d 	bl	80012ac <FLASH_IF_INT_Write>
}
 8001472:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001478:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800147a:	f04f 30ff 	mov.w	r0, #4294967295
 800147e:	e7f8      	b.n	8001472 <FLASH_IF_Write+0x22>
 8001480:	1fff7000 	.word	0x1fff7000
 8001484:	03fffc00 	.word	0x03fffc00

08001488 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001488:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800148c:	d30e      	bcc.n	80014ac <FLASH_IF_Read+0x24>
{
 800148e:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <FLASH_IF_Read+0x30>)
 8001492:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <FLASH_IF_Read+0x34>)
 8001498:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 800149c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80014a0:	3b01      	subs	r3, #1
 80014a2:	4299      	cmp	r1, r3
 80014a4:	d805      	bhi.n	80014b2 <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80014a6:	f7ff fe8f 	bl	80011c8 <FLASH_IF_INT_Read>
}
 80014aa:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80014b0:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014b2:	f04f 30ff 	mov.w	r0, #4294967295
 80014b6:	e7f8      	b.n	80014aa <FLASH_IF_Read+0x22>
 80014b8:	1fff7000 	.word	0x1fff7000
 80014bc:	03fffc00 	.word	0x03fffc00

080014c0 <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80014c0:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80014c4:	d30e      	bcc.n	80014e4 <FLASH_IF_Erase+0x24>
{
 80014c6:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <FLASH_IF_Erase+0x30>)
 80014ca:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <FLASH_IF_Erase+0x34>)
 80014d0:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 80014d4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80014d8:	3b01      	subs	r3, #1
 80014da:	4298      	cmp	r0, r3
 80014dc:	d805      	bhi.n	80014ea <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80014de:	f7ff fe9b 	bl	8001218 <FLASH_IF_INT_Erase>
}
 80014e2:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80014e8:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014ea:	f04f 30ff 	mov.w	r0, #4294967295
 80014ee:	e7f8      	b.n	80014e2 <FLASH_IF_Erase+0x22>
 80014f0:	1fff7000 	.word	0x1fff7000
 80014f4:	03fffc00 	.word	0x03fffc00

080014f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014fc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	2400      	movs	r4, #0
 8001500:	9403      	str	r4, [sp, #12]
 8001502:	9404      	str	r4, [sp, #16]
 8001504:	9405      	str	r4, [sp, #20]
 8001506:	9406      	str	r4, [sp, #24]
 8001508:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001510:	f042 0201 	orr.w	r2, r2, #1
 8001514:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001518:	f002 0201 	and.w	r2, r2, #1
 800151c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800151e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001522:	f042 0202 	orr.w	r2, r2, #2
 8001526:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800152a:	f002 0202 	and.w	r2, r2, #2
 800152e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001530:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001534:	f042 0204 	orr.w	r2, r2, #4
 8001538:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800153a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001542:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001544:	4e26      	ldr	r6, [pc, #152]	; (80015e0 <MX_GPIO_Init+0xe8>)
 8001546:	4622      	mov	r2, r4
 8001548:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 800154c:	4630      	mov	r0, r6
 800154e:	f003 fa55 	bl	80049fc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001552:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8001556:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2501      	movs	r5, #1
 800155a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155e:	2302      	movs	r3, #2
 8001560:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	a903      	add	r1, sp, #12
 8001564:	4630      	mov	r0, r6
 8001566:	f003 f8f9 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 800156a:	f04f 0803 	mov.w	r8, #3
 800156e:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001572:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 8001576:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001578:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	a903      	add	r1, sp, #12
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f003 f8ec 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001584:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001588:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	a903      	add	r1, sp, #12
 8001594:	4630      	mov	r0, r6
 8001596:	f003 f8e1 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800159a:	2340      	movs	r3, #64	; 0x40
 800159c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800159e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80015a2:	a903      	add	r1, sp, #12
 80015a4:	480f      	ldr	r0, [pc, #60]	; (80015e4 <MX_GPIO_Init+0xec>)
 80015a6:	f003 f8d9 	bl	800475c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015aa:	4622      	mov	r2, r4
 80015ac:	4621      	mov	r1, r4
 80015ae:	2006      	movs	r0, #6
 80015b0:	f002 fca8 	bl	8003f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015b4:	2006      	movs	r0, #6
 80015b6:	f002 fcdd 	bl	8003f74 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80015ba:	4622      	mov	r2, r4
 80015bc:	4621      	mov	r1, r4
 80015be:	2007      	movs	r0, #7
 80015c0:	f002 fca0 	bl	8003f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015c4:	2007      	movs	r0, #7
 80015c6:	f002 fcd5 	bl	8003f74 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015ca:	4622      	mov	r2, r4
 80015cc:	4621      	mov	r1, r4
 80015ce:	2016      	movs	r0, #22
 80015d0:	f002 fc98 	bl	8003f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015d4:	2016      	movs	r0, #22
 80015d6:	f002 fccd 	bl	8003f74 <HAL_NVIC_EnableIRQ>

}
 80015da:	b008      	add	sp, #32
 80015dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015e0:	48000400 	.word	0x48000400
 80015e4:	48000800 	.word	0x48000800

080015e8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ea:	e7fe      	b.n	80015ea <Error_Handler+0x2>

080015ec <SystemClock_Config>:
{
 80015ec:	b510      	push	{r4, lr}
 80015ee:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f0:	2248      	movs	r2, #72	; 0x48
 80015f2:	2100      	movs	r1, #0
 80015f4:	a808      	add	r0, sp, #32
 80015f6:	f012 f82f 	bl	8013658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fa:	2400      	movs	r4, #0
 80015fc:	9401      	str	r4, [sp, #4]
 80015fe:	9402      	str	r4, [sp, #8]
 8001600:	9403      	str	r4, [sp, #12]
 8001602:	9404      	str	r4, [sp, #16]
 8001604:	9405      	str	r4, [sp, #20]
 8001606:	9406      	str	r4, [sp, #24]
 8001608:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 800160a:	f004 f801 	bl	8005610 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800160e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001612:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001616:	f023 0318 	bic.w	r3, r3, #24
 800161a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001622:	6813      	ldr	r3, [r2, #0]
 8001624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001638:	2324      	movs	r3, #36	; 0x24
 800163a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800163c:	2381      	movs	r3, #129	; 0x81
 800163e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001644:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001646:	23b0      	movs	r3, #176	; 0xb0
 8001648:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800164a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	a808      	add	r0, sp, #32
 800164e:	f004 f979 	bl	8005944 <HAL_RCC_OscConfig>
 8001652:	b970      	cbnz	r0, 8001672 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001654:	234f      	movs	r3, #79	; 0x4f
 8001656:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001658:	2300      	movs	r3, #0
 800165a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001660:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001662:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001664:	2102      	movs	r1, #2
 8001666:	a801      	add	r0, sp, #4
 8001668:	f004 fc9e 	bl	8005fa8 <HAL_RCC_ClockConfig>
 800166c:	b918      	cbnz	r0, 8001676 <SystemClock_Config+0x8a>
}
 800166e:	b01a      	add	sp, #104	; 0x68
 8001670:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001672:	f7ff ffb9 	bl	80015e8 <Error_Handler>
    Error_Handler();
 8001676:	f7ff ffb7 	bl	80015e8 <Error_Handler>

0800167a <main>:
{
 800167a:	b508      	push	{r3, lr}
  HAL_Init();
 800167c:	f001 ff0a 	bl	8003494 <HAL_Init>
  SystemClock_Config();
 8001680:	f7ff ffb4 	bl	80015ec <SystemClock_Config>
  MX_GPIO_Init();
 8001684:	f7ff ff38 	bl	80014f8 <MX_GPIO_Init>
  BSP_I2C2_Init();
 8001688:	f000 f988 	bl	800199c <BSP_I2C2_Init>
  MX_LoRaWAN_Init();
 800168c:	f000 fea2 	bl	80023d4 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 8001690:	f000 fea6 	bl	80023e0 <MX_LoRaWAN_Process>
  while (1)
 8001694:	e7fc      	b.n	8001690 <main+0x16>
	...

08001698 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001698:	b500      	push	{lr}
 800169a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800169c:	222c      	movs	r2, #44	; 0x2c
 800169e:	2100      	movs	r1, #0
 80016a0:	a801      	add	r0, sp, #4
 80016a2:	f011 ffd9 	bl	8013658 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016a6:	4819      	ldr	r0, [pc, #100]	; (800170c <MX_RTC_Init+0x74>)
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <MX_RTC_Init+0x78>)
 80016aa:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80016ac:	231f      	movs	r3, #31
 80016ae:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016b4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016b6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016bc:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80016be:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80016c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016c6:	f004 ffd3 	bl	8006670 <HAL_RTC_Init>
 80016ca:	b9a8      	cbnz	r0, 80016f8 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <MX_RTC_Init+0x74>)
 80016ce:	f005 f911 	bl	80068f4 <HAL_RTCEx_SetSSRU_IT>
 80016d2:	b9a0      	cbnz	r0, 80016fe <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80016d4:	2200      	movs	r2, #0
 80016d6:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80016d8:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80016da:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80016dc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016e0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80016e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80016e8:	a901      	add	r1, sp, #4
 80016ea:	4808      	ldr	r0, [pc, #32]	; (800170c <MX_RTC_Init+0x74>)
 80016ec:	f005 f826 	bl	800673c <HAL_RTC_SetAlarm_IT>
 80016f0:	b940      	cbnz	r0, 8001704 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016f2:	b00d      	add	sp, #52	; 0x34
 80016f4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80016f8:	f7ff ff76 	bl	80015e8 <Error_Handler>
 80016fc:	e7e6      	b.n	80016cc <MX_RTC_Init+0x34>
    Error_Handler();
 80016fe:	f7ff ff73 	bl	80015e8 <Error_Handler>
 8001702:	e7e7      	b.n	80016d4 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001704:	f7ff ff70 	bl	80015e8 <Error_Handler>
}
 8001708:	e7f3      	b.n	80016f2 <MX_RTC_Init+0x5a>
 800170a:	bf00      	nop
 800170c:	2000018c 	.word	0x2000018c
 8001710:	40002800 	.word	0x40002800

08001714 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001714:	b510      	push	{r4, lr}
 8001716:	b090      	sub	sp, #64	; 0x40
 8001718:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800171a:	2238      	movs	r2, #56	; 0x38
 800171c:	2100      	movs	r1, #0
 800171e:	a802      	add	r0, sp, #8
 8001720:	f011 ff9a 	bl	8013658 <memset>
  if(rtcHandle->Instance==RTC)
 8001724:	6822      	ldr	r2, [r4, #0]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_RTC_MspInit+0x7c>)
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800172c:	b010      	add	sp, #64	; 0x40
 800172e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001734:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173a:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800173c:	a802      	add	r0, sp, #8
 800173e:	f004 fd87 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 8001742:	bb08      	cbnz	r0, 8001788 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001748:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800174c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001750:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001754:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800175a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001762:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001764:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	4611      	mov	r1, r2
 800176a:	2002      	movs	r0, #2
 800176c:	f002 fbca 	bl	8003f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001770:	2002      	movs	r0, #2
 8001772:	f002 fbff 	bl	8003f74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	4611      	mov	r1, r2
 800177a:	202a      	movs	r0, #42	; 0x2a
 800177c:	f002 fbc2 	bl	8003f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001780:	202a      	movs	r0, #42	; 0x2a
 8001782:	f002 fbf7 	bl	8003f74 <HAL_NVIC_EnableIRQ>
}
 8001786:	e7d1      	b.n	800172c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001788:	f7ff ff2e 	bl	80015e8 <Error_Handler>
 800178c:	e7da      	b.n	8001744 <HAL_RTC_MspInit+0x30>
 800178e:	bf00      	nop
 8001790:	40002800 	.word	0x40002800

08001794 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001794:	4770      	bx	lr

08001796 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001796:	4770      	bx	lr

08001798 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001798:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800179a:	f001 fe91 	bl	80034c0 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800179e:	2001      	movs	r0, #1
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <PWR_EnterStopMode+0x14>)
 80017a2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80017a6:	f003 ff97 	bl	80056d8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80017aa:	bd08      	pop	{r3, pc}
 80017ac:	58000400 	.word	0x58000400

080017b0 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80017b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80017b2:	f001 fe8c 	bl	80034ce <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80017b6:	bd08      	pop	{r3, pc}

080017b8 <PWR_ExitStopMode>:
{
 80017b8:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80017ba:	f001 fe88 	bl	80034ce <HAL_ResumeTick>
  vcom_Resume();
 80017be:	f000 fd19 	bl	80021f4 <vcom_Resume>
}
 80017c2:	bd08      	pop	{r3, pc}

080017c4 <PWR_EnterSleepMode>:
{
 80017c4:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 80017c6:	f001 fe7b 	bl	80034c0 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80017ca:	2101      	movs	r1, #1
 80017cc:	2000      	movs	r0, #0
 80017ce:	f003 ff27 	bl	8005620 <HAL_PWR_EnterSLEEPMode>
}
 80017d2:	bd08      	pop	{r3, pc}

080017d4 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d4:	4770      	bx	lr

080017d6 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <NMI_Handler>

080017d8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <HardFault_Handler>

080017da <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <MemManage_Handler>

080017dc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <BusFault_Handler>

080017de <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <UsageFault_Handler>

080017e0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e0:	4770      	bx	lr

080017e2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	4770      	bx	lr

080017e4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e6:	4770      	bx	lr

080017e8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80017e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80017ea:	4802      	ldr	r0, [pc, #8]	; (80017f4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 80017ec:	f005 f8ae 	bl	800694c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80017f0:	bd08      	pop	{r3, pc}
 80017f2:	bf00      	nop
 80017f4:	2000018c 	.word	0x2000018c

080017f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f003 f90c 	bl	8004a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001800:	bd08      	pop	{r3, pc}

08001802 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001802:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001804:	2002      	movs	r0, #2
 8001806:	f003 f907 	bl	8004a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800180a:	bd08      	pop	{r3, pc}

0800180c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800180c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800180e:	4802      	ldr	r0, [pc, #8]	; (8001818 <DMA1_Channel5_IRQHandler+0xc>)
 8001810:	f002 fdce 	bl	80043b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001814:	bd08      	pop	{r3, pc}
 8001816:	bf00      	nop
 8001818:	20000230 	.word	0x20000230

0800181c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 800181c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 800181e:	2040      	movs	r0, #64	; 0x40
 8001820:	f003 f8fa 	bl	8004a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001824:	bd08      	pop	{r3, pc}
	...

08001828 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800182a:	4802      	ldr	r0, [pc, #8]	; (8001834 <USART2_IRQHandler+0xc>)
 800182c:	f005 fd4c 	bl	80072c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001830:	bd08      	pop	{r3, pc}
 8001832:	bf00      	nop
 8001834:	20000290 	.word	0x20000290

08001838 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800183a:	4802      	ldr	r0, [pc, #8]	; (8001844 <RTC_Alarm_IRQHandler+0xc>)
 800183c:	f004 fe92 	bl	8006564 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001840:	bd08      	pop	{r3, pc}
 8001842:	bf00      	nop
 8001844:	2000018c 	.word	0x2000018c

08001848 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800184a:	4802      	ldr	r0, [pc, #8]	; (8001854 <SUBGHZ_Radio_IRQHandler+0xc>)
 800184c:	f005 fb32 	bl	8006eb4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001850:	bd08      	pop	{r3, pc}
 8001852:	bf00      	nop
 8001854:	2000021c 	.word	0x2000021c

08001858 <I2C2_MspInit>:

  return ret;
}

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185a:	b097      	sub	sp, #92	; 0x5c
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800185c:	2238      	movs	r2, #56	; 0x38
 800185e:	2100      	movs	r1, #0
 8001860:	a803      	add	r0, sp, #12
 8001862:	f011 fef9 	bl	8013658 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800186a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800186e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001870:	a803      	add	r0, sp, #12
 8001872:	f004 fced 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001876:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800187a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001882:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800188a:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001892:	2712      	movs	r7, #18
 8001894:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2500      	movs	r5, #0
 8001898:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 800189c:	2604      	movs	r6, #4
 800189e:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 80018a0:	a911      	add	r1, sp, #68	; 0x44
 80018a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a6:	f002 ff59 	bl	800475c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 80018aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018ae:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b0:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 80018b6:	9615      	str	r6, [sp, #84]	; 0x54
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 80018b8:	a911      	add	r1, sp, #68	; 0x44
 80018ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018be:	f002 ff4d 	bl	800475c <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018c8:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80018d2:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 80018d4:	b017      	add	sp, #92	; 0x5c
 80018d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018d8 <BSP_I2C2_WriteReg>:
{
 80018d8:	b510      	push	{r4, lr}
 80018da:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80018dc:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80018e0:	9402      	str	r4, [sp, #8]
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	9200      	str	r2, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	460a      	mov	r2, r1
 80018ea:	4601      	mov	r1, r0
 80018ec:	4808      	ldr	r0, [pc, #32]	; (8001910 <BSP_I2C2_WriteReg+0x38>)
 80018ee:	f003 fc83 	bl	80051f8 <HAL_I2C_Mem_Write>
 80018f2:	b910      	cbnz	r0, 80018fa <BSP_I2C2_WriteReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 80018f4:	2000      	movs	r0, #0
}
 80018f6:	b004      	add	sp, #16
 80018f8:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <BSP_I2C2_WriteReg+0x38>)
 80018fc:	f003 fe2b 	bl	8005556 <HAL_I2C_GetError>
 8001900:	2804      	cmp	r0, #4
 8001902:	d002      	beq.n	800190a <BSP_I2C2_WriteReg+0x32>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001904:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8001908:	e7f5      	b.n	80018f6 <BSP_I2C2_WriteReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800190a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800190e:	e7f2      	b.n	80018f6 <BSP_I2C2_WriteReg+0x1e>
 8001910:	200001c8 	.word	0x200001c8

08001914 <BSP_I2C2_ReadReg>:
{
 8001914:	b510      	push	{r4, lr}
 8001916:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001918:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800191c:	9402      	str	r4, [sp, #8]
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	9200      	str	r2, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	460a      	mov	r2, r1
 8001926:	4601      	mov	r1, r0
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <BSP_I2C2_ReadReg+0x38>)
 800192a:	f003 fd39 	bl	80053a0 <HAL_I2C_Mem_Read>
 800192e:	b910      	cbnz	r0, 8001936 <BSP_I2C2_ReadReg+0x22>
  int32_t ret = BSP_ERROR_NONE;
 8001930:	2000      	movs	r0, #0
}
 8001932:	b004      	add	sp, #16
 8001934:	bd10      	pop	{r4, pc}
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <BSP_I2C2_ReadReg+0x38>)
 8001938:	f003 fe0d 	bl	8005556 <HAL_I2C_GetError>
 800193c:	2804      	cmp	r0, #4
 800193e:	d002      	beq.n	8001946 <BSP_I2C2_ReadReg+0x32>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001940:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8001944:	e7f5      	b.n	8001932 <BSP_I2C2_ReadReg+0x1e>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001946:	f06f 0065 	mvn.w	r0, #101	; 0x65
 800194a:	e7f2      	b.n	8001932 <BSP_I2C2_ReadReg+0x1e>
 800194c:	200001c8 	.word	0x200001c8

08001950 <MX_I2C2_Init>:
{
 8001950:	b538      	push	{r3, r4, r5, lr}
 8001952:	4604      	mov	r4, r0
  hi2c->Instance = I2C2;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_I2C2_Init+0x44>)
 8001956:	6003      	str	r3, [r0, #0]
  hi2c->Init.Timing = 0x20303E5D;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C2_Init+0x48>)
 800195a:	6043      	str	r3, [r0, #4]
  hi2c->Init.OwnAddress1 = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	6083      	str	r3, [r0, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001960:	2201      	movs	r2, #1
 8001962:	60c2      	str	r2, [r0, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001964:	6103      	str	r3, [r0, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001966:	6143      	str	r3, [r0, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001968:	6183      	str	r3, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800196a:	61c3      	str	r3, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800196c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800196e:	f003 fa69 	bl	8004e44 <HAL_I2C_Init>
 8001972:	4605      	mov	r5, r0
 8001974:	b100      	cbz	r0, 8001978 <MX_I2C2_Init+0x28>
    ret = HAL_ERROR;
 8001976:	2501      	movs	r5, #1
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001978:	2100      	movs	r1, #0
 800197a:	4620      	mov	r0, r4
 800197c:	f003 fded 	bl	800555a <HAL_I2CEx_ConfigAnalogFilter>
 8001980:	b100      	cbz	r0, 8001984 <MX_I2C2_Init+0x34>
    ret = HAL_ERROR;
 8001982:	2501      	movs	r5, #1
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001984:	2100      	movs	r1, #0
 8001986:	4620      	mov	r0, r4
 8001988:	f003 fe15 	bl	80055b6 <HAL_I2CEx_ConfigDigitalFilter>
 800198c:	b100      	cbz	r0, 8001990 <MX_I2C2_Init+0x40>
    ret = HAL_ERROR;
 800198e:	2501      	movs	r5, #1
}
 8001990:	4628      	mov	r0, r5
 8001992:	bd38      	pop	{r3, r4, r5, pc}
 8001994:	40005800 	.word	0x40005800
 8001998:	20303e5d 	.word	0x20303e5d

0800199c <BSP_I2C2_Init>:
  hi2c2.Instance  = I2C2;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <BSP_I2C2_Init+0x4c>)
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <BSP_I2C2_Init+0x50>)
 80019a0:	601a      	str	r2, [r3, #0]
  if(I2C2InitCounter++ == 0)
 80019a2:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <BSP_I2C2_Init+0x54>)
 80019a4:	6813      	ldr	r3, [r2, #0]
 80019a6:	1c59      	adds	r1, r3, #1
 80019a8:	6011      	str	r1, [r2, #0]
 80019aa:	b10b      	cbz	r3, 80019b0 <BSP_I2C2_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 80019ac:	2000      	movs	r0, #0
}
 80019ae:	4770      	bx	lr
{
 80019b0:	b510      	push	{r4, lr}
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <BSP_I2C2_Init+0x4c>)
 80019b4:	f003 fdcc 	bl	8005550 <HAL_I2C_GetState>
 80019b8:	b108      	cbz	r0, 80019be <BSP_I2C2_Init+0x22>
  int32_t ret = BSP_ERROR_NONE;
 80019ba:	2000      	movs	r0, #0
}
 80019bc:	bd10      	pop	{r4, pc}
      I2C2_MspInit(&hi2c2);
 80019be:	4c0a      	ldr	r4, [pc, #40]	; (80019e8 <BSP_I2C2_Init+0x4c>)
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff ff49 	bl	8001858 <I2C2_MspInit>
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff ffc2 	bl	8001950 <MX_I2C2_Init>
 80019cc:	b948      	cbnz	r0, 80019e2 <BSP_I2C2_Init+0x46>
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4620      	mov	r0, r4
 80019d2:	f003 fdc2 	bl	800555a <HAL_I2CEx_ConfigAnalogFilter>
 80019d6:	b908      	cbnz	r0, 80019dc <BSP_I2C2_Init+0x40>
          ret = BSP_ERROR_NONE;
 80019d8:	2000      	movs	r0, #0
  return ret;
 80019da:	e7ef      	b.n	80019bc <BSP_I2C2_Init+0x20>
          ret = BSP_ERROR_BUS_FAILURE;
 80019dc:	f06f 0007 	mvn.w	r0, #7
 80019e0:	e7ec      	b.n	80019bc <BSP_I2C2_Init+0x20>
          ret = BSP_ERROR_BUS_FAILURE;
 80019e2:	f06f 0007 	mvn.w	r0, #7
 80019e6:	e7e9      	b.n	80019bc <BSP_I2C2_Init+0x20>
 80019e8:	200001c8 	.word	0x200001c8
 80019ec:	40005800 	.word	0x40005800
 80019f0:	200001c4 	.word	0x200001c4

080019f4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80019f4:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_SUBGHZ_Init+0x18>)
 80019f8:	2308      	movs	r3, #8
 80019fa:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80019fc:	f004 ffdc 	bl	80069b8 <HAL_SUBGHZ_Init>
 8001a00:	b900      	cbnz	r0, 8001a04 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001a02:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a04:	f7ff fdf0 	bl	80015e8 <Error_Handler>
}
 8001a08:	e7fb      	b.n	8001a02 <MX_SUBGHZ_Init+0xe>
 8001a0a:	bf00      	nop
 8001a0c:	2000021c 	.word	0x2000021c

08001a10 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001a10:	b500      	push	{lr}
 8001a12:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a28:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	2032      	movs	r0, #50	; 0x32
 8001a30:	f002 fa68 	bl	8003f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001a34:	2032      	movs	r0, #50	; 0x32
 8001a36:	f002 fa9d 	bl	8003f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001a3a:	b003      	add	sp, #12
 8001a3c:	f85d fb04 	ldr.w	pc, [sp], #4

08001a40 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001a40:	b40c      	push	{r2, r3}
 8001a42:	b500      	push	{lr}
 8001a44:	b083      	sub	sp, #12
 8001a46:	ab04      	add	r3, sp, #16
 8001a48:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001a4c:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001a4e:	f011 fd3f 	bl	80134d0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001a52:	b003      	add	sp, #12
 8001a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a58:	b002      	add	sp, #8
 8001a5a:	4770      	bx	lr

08001a5c <TimestampNow>:
{
 8001a5c:	b530      	push	{r4, r5, lr}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	4604      	mov	r4, r0
 8001a62:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001a64:	a802      	add	r0, sp, #8
 8001a66:	f011 faa7 	bl	8012fb8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001a6a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	9b02      	ldr	r3, [sp, #8]
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <TimestampNow+0x2c>)
 8001a74:	2110      	movs	r1, #16
 8001a76:	4620      	mov	r0, r4
 8001a78:	f7ff ffe2 	bl	8001a40 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7fe fb7b 	bl	8000178 <strlen>
 8001a82:	8028      	strh	r0, [r5, #0]
}
 8001a84:	b005      	add	sp, #20
 8001a86:	bd30      	pop	{r4, r5, pc}
 8001a88:	08013888 	.word	0x08013888

08001a8c <SystemApp_Init>:
{
 8001a8c:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a92:	6893      	ldr	r3, [r2, #8]
 8001a94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a98:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001a9a:	f011 fb11 	bl	80130c0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001a9e:	2401      	movs	r4, #1
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <SystemApp_Init+0x54>)
 8001aa2:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001aa4:	f000 f8c0 	bl	8001c28 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001aa8:	f010 ffae 	bl	8012a08 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <SystemApp_Init+0x58>)
 8001aae:	f010 ffc5 	bl	8012a3c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <SystemApp_Init+0x5c>)
 8001ab4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ab8:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001aba:	2002      	movs	r0, #2
 8001abc:	f010 ffc4 	bl	8012a48 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001ac0:	f7ff fb24 	bl	800110c <SYS_InitMeasurement>
  EnvSensors_Init();
 8001ac4:	f000 f92c 	bl	8001d20 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001ac8:	f011 f8ce 	bl	8012c68 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001acc:	4621      	mov	r1, r4
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f011 f8ea 	bl	8012ca8 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f011 f8d0 	bl	8012c7c <UTIL_LPM_SetStopMode>
}
 8001adc:	bd10      	pop	{r4, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000228 	.word	0x20000228
 8001ae4:	08001a5d 	.word	0x08001a5d
 8001ae8:	58004000 	.word	0x58004000

08001aec <UTIL_SEQ_Idle>:
{
 8001aec:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001aee:	f011 f8f1 	bl	8012cd4 <UTIL_LPM_EnterLowPower>
}
 8001af2:	bd08      	pop	{r3, pc}

08001af4 <GetBatteryLevel>:
{
 8001af4:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001af6:	f7ff fb11 	bl	800111c <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001afa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d80d      	bhi.n	8001b1e <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001b02:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001b06:	d30c      	bcc.n	8001b22 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001b08:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001b0c:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001b10:	0040      	lsls	r0, r0, #1
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <GetBatteryLevel+0x34>)
 8001b14:	fba3 3000 	umull	r3, r0, r3, r0
 8001b18:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001b1c:	e000      	b.n	8001b20 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001b1e:	20fe      	movs	r0, #254	; 0xfe
}
 8001b20:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001b22:	2000      	movs	r0, #0
 8001b24:	e7fc      	b.n	8001b20 <GetBatteryLevel+0x2c>
 8001b26:	bf00      	nop
 8001b28:	1b4e81b5 	.word	0x1b4e81b5

08001b2c <GetTemperatureLevel>:
{
 8001b2c:	b500      	push	{lr}
 8001b2e:	b089      	sub	sp, #36	; 0x24
  EnvSensors_Read(&sensor_data);
 8001b30:	a801      	add	r0, sp, #4
 8001b32:	f000 f8c5 	bl	8001cc0 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001b36:	9801      	ldr	r0, [sp, #4]
 8001b38:	f7ff f866 	bl	8000c08 <__aeabi_f2iz>
}
 8001b3c:	b200      	sxth	r0, r0
 8001b3e:	b009      	add	sp, #36	; 0x24
 8001b40:	f85d fb04 	ldr.w	pc, [sp], #4

08001b44 <GetUniqueId>:
{
 8001b44:	b538      	push	{r3, r4, r5, lr}
 8001b46:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <GetUniqueId+0x68>)
 8001b4a:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b52:	d013      	beq.n	8001b7c <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001b54:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001b56:	0a1a      	lsrs	r2, r3, #8
 8001b58:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001b5a:	0c1a      	lsrs	r2, r3, #16
 8001b5c:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001b5e:	0e1b      	lsrs	r3, r3, #24
 8001b60:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <GetUniqueId+0x68>)
 8001b64:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001b68:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001b6a:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001b6e:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001b70:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001b72:	0c1a      	lsrs	r2, r3, #16
 8001b74:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001b76:	0e1b      	lsrs	r3, r3, #24
 8001b78:	7003      	strb	r3, [r0, #0]
}
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b7c:	f001 fcae 	bl	80034dc <HAL_GetUIDw0>
 8001b80:	4605      	mov	r5, r0
 8001b82:	f001 fcb7 	bl	80034f4 <HAL_GetUIDw2>
 8001b86:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001b88:	f001 fcae 	bl	80034e8 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001b8c:	0e2b      	lsrs	r3, r5, #24
 8001b8e:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001b90:	0c2b      	lsrs	r3, r5, #16
 8001b92:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001b94:	0a2b      	lsrs	r3, r5, #8
 8001b96:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001b98:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001b9a:	0e03      	lsrs	r3, r0, #24
 8001b9c:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001b9e:	0c03      	lsrs	r3, r0, #16
 8001ba0:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001ba2:	0a03      	lsrs	r3, r0, #8
 8001ba4:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001ba6:	7020      	strb	r0, [r4, #0]
 8001ba8:	e7e7      	b.n	8001b7a <GetUniqueId+0x36>
 8001baa:	bf00      	nop
 8001bac:	1fff7000 	.word	0x1fff7000

08001bb0 <GetDevAddr>:
{
 8001bb0:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <GetDevAddr+0x2c>)
 8001bb4:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001bb8:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbe:	d000      	beq.n	8001bc2 <GetDevAddr+0x12>
}
 8001bc0:	bd38      	pop	{r3, r4, r5, pc}
 8001bc2:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001bc4:	f001 fc8a 	bl	80034dc <HAL_GetUIDw0>
 8001bc8:	4605      	mov	r5, r0
 8001bca:	f001 fc8d 	bl	80034e8 <HAL_GetUIDw1>
 8001bce:	4045      	eors	r5, r0
 8001bd0:	f001 fc90 	bl	80034f4 <HAL_GetUIDw2>
 8001bd4:	4045      	eors	r5, r0
 8001bd6:	6025      	str	r5, [r4, #0]
}
 8001bd8:	e7f2      	b.n	8001bc0 <GetDevAddr+0x10>
 8001bda:	bf00      	nop
 8001bdc:	1fff7000 	.word	0x1fff7000

08001be0 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001be0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001be2:	2101      	movs	r1, #1
 8001be4:	2002      	movs	r0, #2
 8001be6:	f011 f849 	bl	8012c7c <UTIL_LPM_SetStopMode>
}
 8001bea:	bd08      	pop	{r3, pc}

08001bec <UTIL_ADV_TRACE_PostSendHook>:
{
 8001bec:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f011 f843 	bl	8012c7c <UTIL_LPM_SetStopMode>
}
 8001bf6:	bd08      	pop	{r3, pc}

08001bf8 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	4770      	bx	lr

08001bfc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001bfc:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <HAL_GetTick+0x14>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b90b      	cbnz	r3, 8001c08 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001c04:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001c06:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001c08:	f000 f8be 	bl	8001d88 <TIMER_IF_GetTimerValue>
 8001c0c:	e7fb      	b.n	8001c06 <HAL_GetTick+0xa>
 8001c0e:	bf00      	nop
 8001c10:	20000228 	.word	0x20000228

08001c14 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c14:	b500      	push	{lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c1a:	9801      	ldr	r0, [sp, #4]
 8001c1c:	f000 f99a 	bl	8001f54 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c20:	b003      	add	sp, #12
 8001c22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001c28 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2a:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c2c:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <DBG_Init+0x90>)
 8001c2e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001c3a:	f001 fc61 	bl	8003500 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001c3e:	f001 fc67 	bl	8003510 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001c42:	f001 fc6d 	bl	8003520 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001c46:	2400      	movs	r4, #0
 8001c48:	9403      	str	r4, [sp, #12]
 8001c4a:	9404      	str	r4, [sp, #16]
 8001c4c:	9405      	str	r4, [sp, #20]
 8001c4e:	9406      	str	r4, [sp, #24]
 8001c50:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c60:	f042 0202 	orr.w	r2, r2, #2
 8001c64:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c68:	f002 0202 	and.w	r2, r2, #2
 8001c6c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001c6e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c72:	f042 0202 	orr.w	r2, r2, #2
 8001c76:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c80:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001c82:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001c86:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001c88:	4d0c      	ldr	r5, [pc, #48]	; (8001cbc <DBG_Init+0x94>)
 8001c8a:	a903      	add	r1, sp, #12
 8001c8c:	4628      	mov	r0, r5
 8001c8e:	f002 fd65 	bl	800475c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001c92:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001c96:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001c98:	a903      	add	r1, sp, #12
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f002 fd5e 	bl	800475c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	4639      	mov	r1, r7
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f002 fea9 	bl	80049fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001caa:	4622      	mov	r2, r4
 8001cac:	4631      	mov	r1, r6
 8001cae:	4628      	mov	r0, r5
 8001cb0:	f002 fea4 	bl	80049fc <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001cb4:	b009      	add	sp, #36	; 0x24
 8001cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb8:	58000800 	.word	0x58000800
 8001cbc:	48000400 	.word	0x48000400

08001cc0 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc2:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (HTS221_Read_Temperature());
 8001cc4:	f000 fb02 	bl	80022cc <HTS221_Read_Temperature>
 8001cc8:	4606      	mov	r6, r0
  HUMIDITY_Value = (HTS221_Read_Humidity());
 8001cca:	f000 fb0d 	bl	80022e8 <HTS221_Read_Humidity>
 8001cce:	4607      	mov	r7, r0
  LIGHT_Value = drv_Light_Read(&hi2c2, c);
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	480f      	ldr	r0, [pc, #60]	; (8001d10 <EnvSensors_Read+0x50>)
 8001cd4:	f000 fb27 	bl	8002326 <drv_Light_Read>
 8001cd8:	f7fe ffbc 	bl	8000c54 <__aeabi_f2uiz>
 8001cdc:	4605      	mov	r5, r0

  TERRAIN_HUMIDITY_Value = drv_terrain_humi_Read();
 8001cde:	f000 fb4d 	bl	800237c <drv_terrain_humi_Read>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001ce2:	6067      	str	r7, [r4, #4]
  sensor_data->temperature = TEMPERATURE_Value;
 8001ce4:	6026      	str	r6, [r4, #0]
  sensor_data->terrain_humidity    = ((TERRAIN_HUMIDITY_Value - dry_value)*100) / (wet_value - dry_value);
 8001ce6:	f5a0 632a 	sub.w	r3, r0, #2720	; 0xaa0
 8001cea:	2264      	movs	r2, #100	; 0x64
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <EnvSensors_Read+0x54>)
 8001cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf6:	441a      	add	r2, r3
 8001cf8:	17db      	asrs	r3, r3, #31
 8001cfa:	eba3 23e2 	sub.w	r3, r3, r2, asr #11
 8001cfe:	60e3      	str	r3, [r4, #12]
  sensor_data->light       = LIGHT_Value;
 8001d00:	60a5      	str	r5, [r4, #8]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <EnvSensors_Read+0x58>)
 8001d04:	6123      	str	r3, [r4, #16]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <EnvSensors_Read+0x5c>)
 8001d08:	6163      	str	r3, [r4, #20]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200001c8 	.word	0x200001c8
 8001d14:	d00d00d1 	.word	0xd00d00d1
 8001d18:	003e090d 	.word	0x003e090d
 8001d1c:	000503ab 	.word	0x000503ab

08001d20 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001d20:	b508      	push	{r3, lr}

  HTS221_USER_Init();
 8001d22:	f000 faa7 	bl	8002274 <HTS221_USER_Init>
  drv_Light_Enable(&hi2c2);
 8001d26:	4802      	ldr	r0, [pc, #8]	; (8001d30 <EnvSensors_Init+0x10>)
 8001d28:	f000 faec 	bl	8002304 <drv_Light_Enable>
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	bd08      	pop	{r3, pc}
 8001d30:	200001c8 	.word	0x200001c8

08001d34 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <TIMER_IF_SetTimerContext+0x1c>)
 8001d36:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d38:	e001      	b.n	8001d3e <TIMER_IF_SetTimerContext+0xa>
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <TIMER_IF_SetTimerContext+0x1c>)
 8001d3c:	6898      	ldr	r0, [r3, #8]
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <TIMER_IF_SetTimerContext+0x1c>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4283      	cmp	r3, r0
 8001d44:	d1f9      	bne.n	8001d3a <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001d46:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001d48:	4b02      	ldr	r3, [pc, #8]	; (8001d54 <TIMER_IF_SetTimerContext+0x20>)
 8001d4a:	6018      	str	r0, [r3, #0]
}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40002800 	.word	0x40002800
 8001d54:	2000022c 	.word	0x2000022c

08001d58 <TIMER_IF_GetTimerContext>:
}
 8001d58:	4b01      	ldr	r3, [pc, #4]	; (8001d60 <TIMER_IF_GetTimerContext+0x8>)
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	2000022c 	.word	0x2000022c

08001d64 <TIMER_IF_GetTimerElapsedTime>:
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d66:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d68:	e001      	b.n	8001d6e <TIMER_IF_GetTimerElapsedTime+0xa>
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d6c:	6898      	ldr	r0, [r3, #8]
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4283      	cmp	r3, r0
 8001d74:	d1f9      	bne.n	8001d6a <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001d76:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	1ac0      	subs	r0, r0, r3
 8001d7e:	4770      	bx	lr
 8001d80:	40002800 	.word	0x40002800
 8001d84:	2000022c 	.word	0x2000022c

08001d88 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <TIMER_IF_GetTimerValue+0x20>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b153      	cbz	r3, 8001da4 <TIMER_IF_GetTimerValue+0x1c>
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <TIMER_IF_GetTimerValue+0x24>)
 8001d90:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d92:	e001      	b.n	8001d98 <TIMER_IF_GetTimerValue+0x10>
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <TIMER_IF_GetTimerValue+0x24>)
 8001d96:	6898      	ldr	r0, [r3, #8]
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <TIMER_IF_GetTimerValue+0x24>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4283      	cmp	r3, r0
 8001d9e:	d1f9      	bne.n	8001d94 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001da0:	43c0      	mvns	r0, r0
 8001da2:	4770      	bx	lr
  uint32_t ret = 0;
 8001da4:	2000      	movs	r0, #0
}
 8001da6:	4770      	bx	lr
 8001da8:	20000229 	.word	0x20000229
 8001dac:	40002800 	.word	0x40002800

08001db0 <TIMER_IF_GetMinimumTimeout>:
}
 8001db0:	2003      	movs	r0, #3
 8001db2:	4770      	bx	lr

08001db4 <TIMER_IF_Convert_ms2Tick>:
{
 8001db4:	b508      	push	{r3, lr}
 8001db6:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	0280      	lsls	r0, r0, #10
 8001dc0:	0d89      	lsrs	r1, r1, #22
 8001dc2:	f7fe ff67 	bl	8000c94 <__aeabi_uldivmod>
}
 8001dc6:	bd08      	pop	{r3, pc}

08001dc8 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001dc8:	0ec2      	lsrs	r2, r0, #27
 8001dca:	0143      	lsls	r3, r0, #5
 8001dcc:	1a1b      	subs	r3, r3, r0
 8001dce:	f162 0200 	sbc.w	r2, r2, #0
 8001dd2:	0092      	lsls	r2, r2, #2
 8001dd4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	181b      	adds	r3, r3, r0
 8001ddc:	f142 0000 	adc.w	r0, r2, #0
 8001de0:	00c0      	lsls	r0, r0, #3
 8001de2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001de6:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001dea:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001dee:	4770      	bx	lr

08001df0 <TIMER_IF_StopTimer>:
{
 8001df0:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <TIMER_IF_StopTimer+0x20>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001df8:	4c06      	ldr	r4, [pc, #24]	; (8001e14 <TIMER_IF_StopTimer+0x24>)
 8001dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f004 fb70 	bl	80064e4 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
 8001e08:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	bd10      	pop	{r4, pc}
 8001e0e:	bf00      	nop
 8001e10:	40002800 	.word	0x40002800
 8001e14:	2000018c 	.word	0x2000018c

08001e18 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001e18:	b508      	push	{r3, lr}
 8001e1a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4802      	ldr	r0, [pc, #8]	; (8001e28 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001e20:	f004 fda9 	bl	8006976 <HAL_RTCEx_BKUPWrite>
}
 8001e24:	bd08      	pop	{r3, pc}
 8001e26:	bf00      	nop
 8001e28:	2000018c 	.word	0x2000018c

08001e2c <TIMER_IF_Init>:
{
 8001e2c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <TIMER_IF_Init+0x40>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b10b      	cbz	r3, 8001e38 <TIMER_IF_Init+0xc>
}
 8001e34:	2000      	movs	r0, #0
 8001e36:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e38:	4c0d      	ldr	r4, [pc, #52]	; (8001e70 <TIMER_IF_Init+0x44>)
 8001e3a:	f04f 35ff 	mov.w	r5, #4294967295
 8001e3e:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001e40:	f7ff fc2a 	bl	8001698 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001e44:	f7ff ffd4 	bl	8001df0 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f004 fb49 	bl	80064e4 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e52:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001e54:	4620      	mov	r0, r4
 8001e56:	f004 fd2d 	bl	80068b4 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff ffdc 	bl	8001e18 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001e60:	f7ff ff68 	bl	8001d34 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001e64:	4b01      	ldr	r3, [pc, #4]	; (8001e6c <TIMER_IF_Init+0x40>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	e7e3      	b.n	8001e34 <TIMER_IF_Init+0x8>
 8001e6c:	20000229 	.word	0x20000229
 8001e70:	2000018c 	.word	0x2000018c

08001e74 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001e74:	b508      	push	{r3, lr}
 8001e76:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4802      	ldr	r0, [pc, #8]	; (8001e84 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001e7c:	f004 fd7b 	bl	8006976 <HAL_RTCEx_BKUPWrite>
}
 8001e80:	bd08      	pop	{r3, pc}
 8001e82:	bf00      	nop
 8001e84:	2000018c 	.word	0x2000018c

08001e88 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001e88:	b508      	push	{r3, lr}
 8001e8a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	4802      	ldr	r0, [pc, #8]	; (8001e98 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001e90:	f004 fd71 	bl	8006976 <HAL_RTCEx_BKUPWrite>
}
 8001e94:	bd08      	pop	{r3, pc}
 8001e96:	bf00      	nop
 8001e98:	2000018c 	.word	0x2000018c

08001e9c <TIMER_IF_StartTimer>:
{
 8001e9c:	b510      	push	{r4, lr}
 8001e9e:	b08c      	sub	sp, #48	; 0x30
 8001ea0:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001ea2:	222c      	movs	r2, #44	; 0x2c
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	a801      	add	r0, sp, #4
 8001ea8:	f011 fbd6 	bl	8013658 <memset>
  TIMER_IF_StopTimer();
 8001eac:	f7ff ffa0 	bl	8001df0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <TIMER_IF_StartTimer+0x48>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001eba:	43e4      	mvns	r4, r4
 8001ebc:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ebe:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001ec0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ec4:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eca:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	a901      	add	r1, sp, #4
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <TIMER_IF_StartTimer+0x4c>)
 8001ed2:	f004 fc33 	bl	800673c <HAL_RTC_SetAlarm_IT>
 8001ed6:	b910      	cbnz	r0, 8001ede <TIMER_IF_StartTimer+0x42>
}
 8001ed8:	2000      	movs	r0, #0
 8001eda:	b00c      	add	sp, #48	; 0x30
 8001edc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001ede:	f7ff fb83 	bl	80015e8 <Error_Handler>
 8001ee2:	e7f9      	b.n	8001ed8 <TIMER_IF_StartTimer+0x3c>
 8001ee4:	2000022c 	.word	0x2000022c
 8001ee8:	2000018c 	.word	0x2000018c

08001eec <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001eec:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001eee:	2102      	movs	r1, #2
 8001ef0:	4801      	ldr	r0, [pc, #4]	; (8001ef8 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001ef2:	f004 fd47 	bl	8006984 <HAL_RTCEx_BKUPRead>
}
 8001ef6:	bd08      	pop	{r3, pc}
 8001ef8:	2000018c 	.word	0x2000018c

08001efc <TIMER_IF_GetTime>:
{
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	4605      	mov	r5, r0
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <TIMER_IF_GetTime+0x34>)
 8001f02:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f04:	e001      	b.n	8001f0a <TIMER_IF_GetTime+0xe>
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <TIMER_IF_GetTime+0x34>)
 8001f08:	689c      	ldr	r4, [r3, #8]
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <TIMER_IF_GetTime+0x34>)
 8001f0c:	6892      	ldr	r2, [r2, #8]
 8001f0e:	42a2      	cmp	r2, r4
 8001f10:	d1f9      	bne.n	8001f06 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001f12:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001f14:	f7ff ffea 	bl	8001eec <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001f18:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001f1a:	0aa4      	lsrs	r4, r4, #10
 8001f1c:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001f20:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001f24:	f7ff ff50 	bl	8001dc8 <TIMER_IF_Convert_Tick2ms>
 8001f28:	8028      	strh	r0, [r5, #0]
}
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	bd38      	pop	{r3, r4, r5, pc}
 8001f2e:	bf00      	nop
 8001f30:	40002800 	.word	0x40002800

08001f34 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001f34:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001f36:	2100      	movs	r1, #0
 8001f38:	4801      	ldr	r0, [pc, #4]	; (8001f40 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001f3a:	f004 fd23 	bl	8006984 <HAL_RTCEx_BKUPRead>
}
 8001f3e:	bd08      	pop	{r3, pc}
 8001f40:	2000018c 	.word	0x2000018c

08001f44 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001f44:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001f46:	2101      	movs	r1, #1
 8001f48:	4801      	ldr	r0, [pc, #4]	; (8001f50 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001f4a:	f004 fd1b 	bl	8006984 <HAL_RTCEx_BKUPRead>
}
 8001f4e:	bd08      	pop	{r3, pc}
 8001f50:	2000018c 	.word	0x2000018c

08001f54 <TIMER_IF_DelayMs>:
{
 8001f54:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001f56:	f7ff ff2d 	bl	8001db4 <TIMER_IF_Convert_ms2Tick>
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <TIMER_IF_DelayMs+0x3c>)
 8001f5c:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f5e:	e001      	b.n	8001f64 <TIMER_IF_DelayMs+0x10>
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <TIMER_IF_DelayMs+0x3c>)
 8001f62:	6899      	ldr	r1, [r3, #8]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <TIMER_IF_DelayMs+0x3c>)
 8001f66:	6892      	ldr	r2, [r2, #8]
 8001f68:	428a      	cmp	r2, r1
 8001f6a:	d1f9      	bne.n	8001f60 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001f6c:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f6e:	e00a      	b.n	8001f86 <TIMER_IF_DelayMs+0x32>
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <TIMER_IF_DelayMs+0x3c>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <TIMER_IF_DelayMs+0x3c>)
 8001f76:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1f9      	bne.n	8001f70 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001f7c:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f7e:	1a5b      	subs	r3, r3, r1
 8001f80:	4283      	cmp	r3, r0
 8001f82:	d203      	bcs.n	8001f8c <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001f84:	bf00      	nop
 8001f86:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <TIMER_IF_DelayMs+0x3c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f8a:	e7f3      	b.n	8001f74 <TIMER_IF_DelayMs+0x20>
}
 8001f8c:	bd08      	pop	{r3, pc}
 8001f8e:	bf00      	nop
 8001f90:	40002800 	.word	0x40002800

08001f94 <HAL_RTC_AlarmAEventCallback>:
{
 8001f94:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001f96:	f011 f9b7 	bl	8013308 <UTIL_TIMER_IRQ_Handler>
}
 8001f9a:	bd08      	pop	{r3, pc}

08001f9c <HAL_RTCEx_SSRUEventCallback>:
{
 8001f9c:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001f9e:	f7ff ffa5 	bl	8001eec <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001fa2:	3001      	adds	r0, #1
 8001fa4:	f7ff ff38 	bl	8001e18 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001fa8:	bd08      	pop	{r3, pc}
	...

08001fac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fac:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fae:	4817      	ldr	r0, [pc, #92]	; (800200c <MX_USART2_UART_Init+0x60>)
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <MX_USART2_UART_Init+0x64>)
 8001fb2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001fb4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001fb8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fbe:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fca:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fcc:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fce:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fd0:	f006 f834 	bl	800803c <HAL_UART_Init>
 8001fd4:	b970      	cbnz	r0, 8001ff4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <MX_USART2_UART_Init+0x60>)
 8001fda:	f006 f9e4 	bl	80083a6 <HAL_UARTEx_SetTxFifoThreshold>
 8001fde:	b960      	cbnz	r0, 8001ffa <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	480a      	ldr	r0, [pc, #40]	; (800200c <MX_USART2_UART_Init+0x60>)
 8001fe4:	f006 fa04 	bl	80083f0 <HAL_UARTEx_SetRxFifoThreshold>
 8001fe8:	b950      	cbnz	r0, 8002000 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001fea:	4808      	ldr	r0, [pc, #32]	; (800200c <MX_USART2_UART_Init+0x60>)
 8001fec:	f006 f9b7 	bl	800835e <HAL_UARTEx_EnableFifoMode>
 8001ff0:	b948      	cbnz	r0, 8002006 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ff2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001ff4:	f7ff faf8 	bl	80015e8 <Error_Handler>
 8001ff8:	e7ed      	b.n	8001fd6 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001ffa:	f7ff faf5 	bl	80015e8 <Error_Handler>
 8001ffe:	e7ef      	b.n	8001fe0 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002000:	f7ff faf2 	bl	80015e8 <Error_Handler>
 8002004:	e7f1      	b.n	8001fea <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002006:	f7ff faef 	bl	80015e8 <Error_Handler>
}
 800200a:	e7f2      	b.n	8001ff2 <MX_USART2_UART_Init+0x46>
 800200c:	20000290 	.word	0x20000290
 8002010:	40004400 	.word	0x40004400

08002014 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002014:	b530      	push	{r4, r5, lr}
 8002016:	b097      	sub	sp, #92	; 0x5c
 8002018:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	2100      	movs	r1, #0
 800201c:	9111      	str	r1, [sp, #68]	; 0x44
 800201e:	9112      	str	r1, [sp, #72]	; 0x48
 8002020:	9113      	str	r1, [sp, #76]	; 0x4c
 8002022:	9114      	str	r1, [sp, #80]	; 0x50
 8002024:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002026:	2238      	movs	r2, #56	; 0x38
 8002028:	a803      	add	r0, sp, #12
 800202a:	f011 fb15 	bl	8013658 <memset>
  if(uartHandle->Instance==USART2)
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_UART_MspInit+0xd4>)
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002036:	b017      	add	sp, #92	; 0x5c
 8002038:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800203a:	2302      	movs	r3, #2
 800203c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_UART_MspInit+0xd8>)
 8002040:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002042:	a803      	add	r0, sp, #12
 8002044:	f004 f904 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 8002048:	2800      	cmp	r0, #0
 800204a:	d144      	bne.n	80020d6 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002050:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002052:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002056:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800205a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800205e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002060:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800206a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002072:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002074:	230c      	movs	r3, #12
 8002076:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2500      	movs	r5, #0
 800207e:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002084:	2307      	movs	r3, #7
 8002086:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	a911      	add	r1, sp, #68	; 0x44
 800208a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208e:	f002 fb65 	bl	800475c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002092:	4817      	ldr	r0, [pc, #92]	; (80020f0 <HAL_UART_MspInit+0xdc>)
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_UART_MspInit+0xe0>)
 8002096:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002098:	2314      	movs	r3, #20
 800209a:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800209c:	2310      	movs	r3, #16
 800209e:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a0:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a6:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a8:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020aa:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020ac:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80020ae:	f001 fff1 	bl	8004094 <HAL_DMA_Init>
 80020b2:	b998      	cbnz	r0, 80020dc <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80020b4:	2110      	movs	r1, #16
 80020b6:	480e      	ldr	r0, [pc, #56]	; (80020f0 <HAL_UART_MspInit+0xdc>)
 80020b8:	f002 f9ee 	bl	8004498 <HAL_DMA_ConfigChannelAttributes>
 80020bc:	b988      	cbnz	r0, 80020e2 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_UART_MspInit+0xdc>)
 80020c0:	67e3      	str	r3, [r4, #124]	; 0x7c
 80020c2:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2102      	movs	r1, #2
 80020c8:	2025      	movs	r0, #37	; 0x25
 80020ca:	f001 ff1b 	bl	8003f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ce:	2025      	movs	r0, #37	; 0x25
 80020d0:	f001 ff50 	bl	8003f74 <HAL_NVIC_EnableIRQ>
}
 80020d4:	e7af      	b.n	8002036 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80020d6:	f7ff fa87 	bl	80015e8 <Error_Handler>
 80020da:	e7b7      	b.n	800204c <HAL_UART_MspInit+0x38>
      Error_Handler();
 80020dc:	f7ff fa84 	bl	80015e8 <Error_Handler>
 80020e0:	e7e8      	b.n	80020b4 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 80020e2:	f7ff fa81 	bl	80015e8 <Error_Handler>
 80020e6:	e7ea      	b.n	80020be <HAL_UART_MspInit+0xaa>
 80020e8:	40004400 	.word	0x40004400
 80020ec:	000c0004 	.word	0x000c0004
 80020f0:	20000230 	.word	0x20000230
 80020f4:	40020058 	.word	0x40020058

080020f8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 80020f8:	6802      	ldr	r2, [r0, #0]
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_UART_MspDeInit+0x34>)
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d000      	beq.n	8002102 <HAL_UART_MspDeInit+0xa>
 8002100:	4770      	bx	lr
{
 8002102:	b510      	push	{r4, lr}
 8002104:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800210a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800210c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002110:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8002112:	210c      	movs	r1, #12
 8002114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002118:	f002 fbf2 	bl	8004900 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800211c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800211e:	f002 f82b 	bl	8004178 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002122:	2025      	movs	r0, #37	; 0x25
 8002124:	f001 ff34 	bl	8003f90 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002128:	bd10      	pop	{r4, pc}
 800212a:	bf00      	nop
 800212c:	40004400 	.word	0x40004400

08002130 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002130:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <vcom_Init+0x20>)
 8002134:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002136:	f7ff f813 	bl	8001160 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800213a:	f7ff ff37 	bl	8001fac <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <vcom_Init+0x24>)
 8002140:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002144:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002148:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800214c:	2000      	movs	r0, #0
 800214e:	bd08      	pop	{r3, pc}
 8002150:	20000328 	.word	0x20000328
 8002154:	58000800 	.word	0x58000800

08002158 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002158:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002160:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002168:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800216c:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800216e:	4804      	ldr	r0, [pc, #16]	; (8002180 <vcom_DeInit+0x28>)
 8002170:	f7ff ffc2 	bl	80020f8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002174:	200f      	movs	r0, #15
 8002176:	f001 ff0b 	bl	8003f90 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800217a:	2000      	movs	r0, #0
 800217c:	bd08      	pop	{r3, pc}
 800217e:	bf00      	nop
 8002180:	20000290 	.word	0x20000290

08002184 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002184:	b508      	push	{r3, lr}
 8002186:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002188:	4601      	mov	r1, r0
 800218a:	4802      	ldr	r0, [pc, #8]	; (8002194 <vcom_Trace_DMA+0x10>)
 800218c:	f004 ffd8 	bl	8007140 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002190:	2000      	movs	r0, #0
 8002192:	bd08      	pop	{r3, pc}
 8002194:	20000290 	.word	0x20000290

08002198 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002198:	b510      	push	{r4, lr}
 800219a:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <vcom_ReceiveInit+0x50>)
 800219e:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80021a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021a4:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80021a6:	ab02      	add	r3, sp, #8
 80021a8:	e913 0006 	ldmdb	r3, {r1, r2}
 80021ac:	480f      	ldr	r0, [pc, #60]	; (80021ec <vcom_ReceiveInit+0x54>)
 80021ae:	f006 f87e 	bl	80082ae <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <vcom_ReceiveInit+0x54>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69da      	ldr	r2, [r3, #28]
 80021b8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80021bc:	d1f9      	bne.n	80021b2 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80021be:	69da      	ldr	r2, [r3, #28]
 80021c0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80021c4:	d0fb      	beq.n	80021be <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80021cc:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80021ce:	4c07      	ldr	r4, [pc, #28]	; (80021ec <vcom_ReceiveInit+0x54>)
 80021d0:	4620      	mov	r0, r4
 80021d2:	f006 f8ad 	bl	8008330 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80021d6:	2201      	movs	r2, #1
 80021d8:	4905      	ldr	r1, [pc, #20]	; (80021f0 <vcom_ReceiveInit+0x58>)
 80021da:	4620      	mov	r0, r4
 80021dc:	f006 f800 	bl	80081e0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80021e0:	2000      	movs	r0, #0
 80021e2:	b002      	add	sp, #8
 80021e4:	bd10      	pop	{r4, pc}
 80021e6:	bf00      	nop
 80021e8:	20000324 	.word	0x20000324
 80021ec:	20000290 	.word	0x20000290
 80021f0:	2000032c 	.word	0x2000032c

080021f4 <vcom_Resume>:

void vcom_Resume(void)
{
 80021f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021f6:	4807      	ldr	r0, [pc, #28]	; (8002214 <vcom_Resume+0x20>)
 80021f8:	f005 ff20 	bl	800803c <HAL_UART_Init>
 80021fc:	b920      	cbnz	r0, 8002208 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021fe:	4806      	ldr	r0, [pc, #24]	; (8002218 <vcom_Resume+0x24>)
 8002200:	f001 ff48 	bl	8004094 <HAL_DMA_Init>
 8002204:	b918      	cbnz	r0, 800220e <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002206:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002208:	f7ff f9ee 	bl	80015e8 <Error_Handler>
 800220c:	e7f7      	b.n	80021fe <vcom_Resume+0xa>
    Error_Handler();
 800220e:	f7ff f9eb 	bl	80015e8 <Error_Handler>
}
 8002212:	e7f8      	b.n	8002206 <vcom_Resume+0x12>
 8002214:	20000290 	.word	0x20000290
 8002218:	20000230 	.word	0x20000230

0800221c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800221c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800221e:	6802      	ldr	r2, [r0, #0]
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <HAL_UART_TxCpltCallback+0x18>)
 8002222:	429a      	cmp	r2, r3
 8002224:	d000      	beq.n	8002228 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002226:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_UART_TxCpltCallback+0x1c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2000      	movs	r0, #0
 800222e:	4798      	blx	r3
}
 8002230:	e7f9      	b.n	8002226 <HAL_UART_TxCpltCallback+0xa>
 8002232:	bf00      	nop
 8002234:	40004400 	.word	0x40004400
 8002238:	20000328 	.word	0x20000328

0800223c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 800223c:	6802      	ldr	r2, [r0, #0]
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_UART_RxCpltCallback+0x2c>)
 8002240:	429a      	cmp	r2, r3
 8002242:	d000      	beq.n	8002246 <HAL_UART_RxCpltCallback+0xa>
 8002244:	4770      	bx	lr
{
 8002246:	b510      	push	{r4, lr}
 8002248:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_UART_RxCpltCallback+0x30>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b12b      	cbz	r3, 800225c <HAL_UART_RxCpltCallback+0x20>
 8002250:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002254:	b912      	cbnz	r2, 800225c <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002256:	2101      	movs	r1, #1
 8002258:	4805      	ldr	r0, [pc, #20]	; (8002270 <HAL_UART_RxCpltCallback+0x34>)
 800225a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800225c:	2201      	movs	r2, #1
 800225e:	4904      	ldr	r1, [pc, #16]	; (8002270 <HAL_UART_RxCpltCallback+0x34>)
 8002260:	4620      	mov	r0, r4
 8002262:	f005 ffbd 	bl	80081e0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002266:	bd10      	pop	{r4, pc}
 8002268:	40004400 	.word	0x40004400
 800226c:	20000324 	.word	0x20000324
 8002270:	2000032c 	.word	0x2000032c

08002274 <HTS221_USER_Init>:

static HTS221_Object_t HTS221_OB_Handle;
static HTS221_IO_t HTS221_IO_Handle;

void HTS221_USER_Init(void)
{
 8002274:	b510      	push	{r4, lr}
 8002276:	b082      	sub	sp, #8
	float dr=-1;
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <HTS221_USER_Init+0x44>)
 800227a:	9301      	str	r3, [sp, #4]
	HTS221_IO_Handle.Address=0xBE;
 800227c:	490f      	ldr	r1, [pc, #60]	; (80022bc <HTS221_USER_Init+0x48>)
 800227e:	23be      	movs	r3, #190	; 0xbe
 8002280:	730b      	strb	r3, [r1, #12]
	HTS221_IO_Handle.BusType=0;
 8002282:	2300      	movs	r3, #0
 8002284:	608b      	str	r3, [r1, #8]
	HTS221_IO_Handle.WriteReg=BSP_I2C2_WriteReg;
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HTS221_USER_Init+0x4c>)
 8002288:	610b      	str	r3, [r1, #16]
	HTS221_IO_Handle.ReadReg=BSP_I2C2_ReadReg;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HTS221_USER_Init+0x50>)
 800228c:	614b      	str	r3, [r1, #20]

	HTS221_RegisterBusIO(&HTS221_OB_Handle, &HTS221_IO_Handle);
 800228e:	4c0e      	ldr	r4, [pc, #56]	; (80022c8 <HTS221_USER_Init+0x54>)
 8002290:	4620      	mov	r0, r4
 8002292:	f000 feeb 	bl	800306c <HTS221_RegisterBusIO>
	HTS221_HUM_Enable(&HTS221_OB_Handle);
 8002296:	4620      	mov	r0, r4
 8002298:	f000 fdd9 	bl	8002e4e <HTS221_HUM_Enable>
	HTS221_TEMP_Enable(&HTS221_OB_Handle);
 800229c:	4620      	mov	r0, r4
 800229e:	f000 fdef 	bl	8002e80 <HTS221_TEMP_Enable>
	HTS221_TEMP_SetOutputDataRate(&HTS221_OB_Handle, 1);
 80022a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80022a6:	4620      	mov	r0, r4
 80022a8:	f000 fe22 	bl	8002ef0 <HTS221_TEMP_SetOutputDataRate>
	HTS221_TEMP_GetOutputDataRate(&HTS221_OB_Handle, &dr);
 80022ac:	a901      	add	r1, sp, #4
 80022ae:	4620      	mov	r0, r4
 80022b0:	f000 fe4c 	bl	8002f4c <HTS221_TEMP_GetOutputDataRate>
}
 80022b4:	b002      	add	sp, #8
 80022b6:	bd10      	pop	{r4, pc}
 80022b8:	bf800000 	.word	0xbf800000
 80022bc:	20000330 	.word	0x20000330
 80022c0:	080018d9 	.word	0x080018d9
 80022c4:	08001915 	.word	0x08001915
 80022c8:	20000350 	.word	0x20000350

080022cc <HTS221_Read_Temperature>:
float HTS221_Read_Temperature(void)
{
 80022cc:	b500      	push	{lr}
 80022ce:	b083      	sub	sp, #12
	float hts221_temp=0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	9301      	str	r3, [sp, #4]
	HTS221_TEMP_GetTemperature(&HTS221_OB_Handle, &hts221_temp);
 80022d4:	a901      	add	r1, sp, #4
 80022d6:	4803      	ldr	r0, [pc, #12]	; (80022e4 <HTS221_Read_Temperature+0x18>)
 80022d8:	f000 fe8a 	bl	8002ff0 <HTS221_TEMP_GetTemperature>
	return hts221_temp;
}
 80022dc:	9801      	ldr	r0, [sp, #4]
 80022de:	b003      	add	sp, #12
 80022e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80022e4:	20000350 	.word	0x20000350

080022e8 <HTS221_Read_Humidity>:
float HTS221_Read_Humidity(void)
{
 80022e8:	b500      	push	{lr}
 80022ea:	b083      	sub	sp, #12
	float hts221_humi=0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	9301      	str	r3, [sp, #4]
	HTS221_HUM_GetHumidity(&HTS221_OB_Handle, &hts221_humi);
 80022f0:	a901      	add	r1, sp, #4
 80022f2:	4803      	ldr	r0, [pc, #12]	; (8002300 <HTS221_Read_Humidity+0x18>)
 80022f4:	f000 fe2e 	bl	8002f54 <HTS221_HUM_GetHumidity>
	return hts221_humi;
}
 80022f8:	9801      	ldr	r0, [sp, #4]
 80022fa:	b003      	add	sp, #12
 80022fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002300:	20000350 	.word	0x20000350

08002304 <drv_Light_Enable>:

/**
 * Enable light sensor
 */
int32_t drv_Light_Enable(I2C_HandleTypeDef* p_handle)
{
 8002304:	b500      	push	{lr}
 8002306:	b085      	sub	sp, #20
	HAL_StatusTypeDef ret;

	uint8_t buf[2] = {0xA0, 0x03};
 8002308:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800230c:	f8ad 300c 	strh.w	r3, [sp, #12]

	ret = HAL_I2C_Master_Transmit(p_handle, SNS_LIGHT_ADDR, buf, 2, SNS_LIGHT_TIMEOUT);
 8002310:	f242 7310 	movw	r3, #10000	; 0x2710
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2302      	movs	r3, #2
 8002318:	aa03      	add	r2, sp, #12
 800231a:	2152      	movs	r1, #82	; 0x52
 800231c:	f002 fdf0 	bl	8004f00 <HAL_I2C_Master_Transmit>
}
 8002320:	b005      	add	sp, #20
 8002322:	f85d fb04 	ldr.w	pc, [sp], #4

08002326 <drv_Light_Read>:
 *
 * p_handle:   pointer to communication (I2C) structure
 * p_temp: 	   pointer to destination light intensity variable
 */
float drv_Light_Read(I2C_HandleTypeDef* p_handle, float p_light)
{
 8002326:	b510      	push	{r4, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	4604      	mov	r4, r0
    HAL_StatusTypeDef ret;
    uint8_t buf[2];
    uint16_t tmp;

    /* Read light sensor */
    buf[0] = SNS_LIGHT_CMD_REG;
 800232c:	23ac      	movs	r3, #172	; 0xac
 800232e:	f88d 300c 	strb.w	r3, [sp, #12]

    ret = HAL_I2C_Master_Transmit(p_handle, SNS_LIGHT_ADDR, buf, 1, SNS_LIGHT_TIMEOUT);
 8002332:	f242 7310 	movw	r3, #10000	; 0x2710
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2301      	movs	r3, #1
 800233a:	aa03      	add	r2, sp, #12
 800233c:	2152      	movs	r1, #82	; 0x52
 800233e:	f002 fddf 	bl	8004f00 <HAL_I2C_Master_Transmit>
    if (ret != HAL_OK)
 8002342:	b118      	cbz	r0, 800234c <drv_Light_Read+0x26>
    {
        return (int32_t)HAL_ERROR;
 8002344:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
            tmp = ((uint16_t)buf[0] << 8) + buf[1];
            p_light = (float)tmp;
            return p_light;
        }
    }
}
 8002348:	b004      	add	sp, #16
 800234a:	bd10      	pop	{r4, pc}
        ret = HAL_I2C_Master_Receive(p_handle, SNS_LIGHT_ADDR, buf, 2, SNS_LIGHT_TIMEOUT);
 800234c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2302      	movs	r3, #2
 8002354:	aa03      	add	r2, sp, #12
 8002356:	2152      	movs	r1, #82	; 0x52
 8002358:	4620      	mov	r0, r4
 800235a:	f002 fe8f 	bl	800507c <HAL_I2C_Master_Receive>
        if (ret != HAL_OK)
 800235e:	b948      	cbnz	r0, 8002374 <drv_Light_Read+0x4e>
            tmp = ((uint16_t)buf[0] << 8) + buf[1];
 8002360:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002364:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002368:	eb00 2003 	add.w	r0, r0, r3, lsl #8
            p_light = (float)tmp;
 800236c:	b280      	uxth	r0, r0
 800236e:	f7fe fa2d 	bl	80007cc <__aeabi_ui2f>
            return p_light;
 8002372:	e7e9      	b.n	8002348 <drv_Light_Read+0x22>
            return (int32_t)HAL_ERROR;
 8002374:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002378:	e7e6      	b.n	8002348 <drv_Light_Read+0x22>
	...

0800237c <drv_terrain_humi_Read>:

extern ADC_HandleTypeDef hadc;
//ADC_HandleTypeDef new_hadc;

uint16_t drv_terrain_humi_Read()
{
 800237c:	b530      	push	{r4, r5, lr}
 800237e:	b097      	sub	sp, #92	; 0x5c

	MX_ADC_Init(hadc);
 8002380:	4c13      	ldr	r4, [pc, #76]	; (80023d0 <drv_terrain_humi_Read+0x54>)
 8002382:	2254      	movs	r2, #84	; 0x54
 8002384:	f104 0110 	add.w	r1, r4, #16
 8002388:	4668      	mov	r0, sp
 800238a:	f011 f991 	bl	80136b0 <memcpy>
 800238e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002392:	f7fe fdfd 	bl	8000f90 <MX_ADC_Init>

    /* Start Calibration */
    if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8002396:	4620      	mov	r0, r4
 8002398:	f001 fd02 	bl	8003da0 <HAL_ADCEx_Calibration_Start>
 800239c:	b990      	cbnz	r0, 80023c4 <drv_terrain_humi_Read+0x48>
    {
      Error_Handler();
    }

    if (HAL_ADC_Start(&hadc) != HAL_OK)
 800239e:	480c      	ldr	r0, [pc, #48]	; (80023d0 <drv_terrain_humi_Read+0x54>)
 80023a0:	f001 fc02 	bl	8003ba8 <HAL_ADC_Start>
 80023a4:	b988      	cbnz	r0, 80023ca <drv_terrain_humi_Read+0x4e>
    {
      /* Start Error */
      Error_Handler();
    }
    HAL_ADC_PollForConversion(&hadc, 10);
 80023a6:	4d0a      	ldr	r5, [pc, #40]	; (80023d0 <drv_terrain_humi_Read+0x54>)
 80023a8:	210a      	movs	r1, #10
 80023aa:	4628      	mov	r0, r5
 80023ac:	f001 f9d8 	bl	8003760 <HAL_ADC_PollForConversion>

     uint16_t value = HAL_ADC_GetValue(&hadc);
 80023b0:	4628      	mov	r0, r5
 80023b2:	f001 fa34 	bl	800381e <HAL_ADC_GetValue>
 80023b6:	b284      	uxth	r4, r0

     HAL_ADC_DeInit(&hadc);
 80023b8:	4628      	mov	r0, r5
 80023ba:	f001 fc71 	bl	8003ca0 <HAL_ADC_DeInit>

     return value;
}
 80023be:	4620      	mov	r0, r4
 80023c0:	b017      	add	sp, #92	; 0x5c
 80023c2:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80023c4:	f7ff f910 	bl	80015e8 <Error_Handler>
 80023c8:	e7e9      	b.n	800239e <drv_terrain_humi_Read+0x22>
      Error_Handler();
 80023ca:	f7ff f90d 	bl	80015e8 <Error_Handler>
 80023ce:	e7ea      	b.n	80023a6 <drv_terrain_humi_Read+0x2a>
 80023d0:	20000124 	.word	0x20000124

080023d4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80023d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80023d6:	f7ff fb59 	bl	8001a8c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */

  LoRaWAN_Init();
 80023da:	f000 fbaf 	bl	8002b3c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80023de:	bd08      	pop	{r3, pc}

080023e0 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80023e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80023e2:	f04f 30ff 	mov.w	r0, #4294967295
 80023e6:	f010 fce1 	bl	8012dac <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80023ea:	bd08      	pop	{r3, pc}

080023ec <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 80023ec:	4770      	bx	lr
	...

080023f0 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80023f0:	4b01      	ldr	r3, [pc, #4]	; (80023f8 <OnTxFrameCtrlChanged+0x8>)
 80023f2:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000058 	.word	0x20000058

080023fc <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80023fc:	4b01      	ldr	r3, [pc, #4]	; (8002404 <OnPingSlotPeriodicityChanged+0x8>)
 80023fe:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000058 	.word	0x20000058

08002408 <OnBeaconStatusChange>:
  if (params != NULL)
 8002408:	2800      	cmp	r0, #0
 800240a:	d03f      	beq.n	800248c <OnBeaconStatusChange+0x84>
{
 800240c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002410:	b08c      	sub	sp, #48	; 0x30
 8002412:	4603      	mov	r3, r0
    switch (params->State)
 8002414:	7842      	ldrb	r2, [r0, #1]
 8002416:	2a02      	cmp	r2, #2
 8002418:	d00a      	beq.n	8002430 <OnBeaconStatusChange+0x28>
 800241a:	2a03      	cmp	r2, #3
 800241c:	d02f      	beq.n	800247e <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <OnBeaconStatusChange+0x88>)
 8002420:	2200      	movs	r2, #0
 8002422:	4611      	mov	r1, r2
 8002424:	2002      	movs	r0, #2
 8002426:	f010 fb63 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 800242a:	b00c      	add	sp, #48	; 0x30
 800242c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002430:	7c02      	ldrb	r2, [r0, #16]
 8002432:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002436:	f990 0014 	ldrsb.w	r0, [r0, #20]
 800243a:	7d9c      	ldrb	r4, [r3, #22]
 800243c:	7ddd      	ldrb	r5, [r3, #23]
 800243e:	7e1e      	ldrb	r6, [r3, #24]
 8002440:	7e5f      	ldrb	r7, [r3, #25]
 8002442:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8002446:	f893 e01b 	ldrb.w	lr, [r3, #27]
 800244a:	f893 801c 	ldrb.w	r8, [r3, #28]
 800244e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002452:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002456:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800245a:	9708      	str	r7, [sp, #32]
 800245c:	9607      	str	r6, [sp, #28]
 800245e:	9506      	str	r5, [sp, #24]
 8002460:	9405      	str	r4, [sp, #20]
 8002462:	685c      	ldr	r4, [r3, #4]
 8002464:	9404      	str	r4, [sp, #16]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	9303      	str	r3, [sp, #12]
 800246a:	9002      	str	r0, [sp, #8]
 800246c:	9101      	str	r1, [sp, #4]
 800246e:	9200      	str	r2, [sp, #0]
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <OnBeaconStatusChange+0x8c>)
 8002472:	2200      	movs	r2, #0
 8002474:	4611      	mov	r1, r2
 8002476:	2002      	movs	r0, #2
 8002478:	f010 fb3a 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800247c:	e7d5      	b.n	800242a <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <OnBeaconStatusChange+0x90>)
 8002480:	2200      	movs	r2, #0
 8002482:	4611      	mov	r1, r2
 8002484:	2002      	movs	r0, #2
 8002486:	f010 fb33 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 800248a:	e7ce      	b.n	800242a <OnBeaconStatusChange+0x22>
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	080138e4 	.word	0x080138e4
 8002494:	080138fc 	.word	0x080138fc
 8002498:	08013970 	.word	0x08013970

0800249c <OnClassChange>:
{
 800249c:	b500      	push	{lr}
 800249e:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <OnClassChange+0x1c>)
 80024a2:	5c1b      	ldrb	r3, [r3, r0]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <OnClassChange+0x20>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	4611      	mov	r1, r2
 80024ac:	2002      	movs	r0, #2
 80024ae:	f010 fb1f 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 80024b2:	b003      	add	sp, #12
 80024b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80024b8:	080139ac 	.word	0x080139ac
 80024bc:	08013990 	.word	0x08013990

080024c0 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80024c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80024c2:	2801      	cmp	r0, #1
 80024c4:	d006      	beq.n	80024d4 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <OnNvmDataChange+0x24>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	4611      	mov	r1, r2
 80024cc:	2002      	movs	r0, #2
 80024ce:	f010 fb0f 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80024d2:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <OnNvmDataChange+0x28>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	4611      	mov	r1, r2
 80024da:	2002      	movs	r0, #2
 80024dc:	f010 fb08 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
 80024e0:	e7f7      	b.n	80024d2 <OnNvmDataChange+0x12>
 80024e2:	bf00      	nop
 80024e4:	080139c4 	.word	0x080139c4
 80024e8:	080139b0 	.word	0x080139b0

080024ec <OnTxTimerEvent>:
{
 80024ec:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80024ee:	2100      	movs	r1, #0
 80024f0:	2002      	movs	r0, #2
 80024f2:	f010 fc27 	bl	8012d44 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 80024f6:	4802      	ldr	r0, [pc, #8]	; (8002500 <OnTxTimerEvent+0x14>)
 80024f8:	f010 fea6 	bl	8013248 <UTIL_TIMER_Start>
}
 80024fc:	bd08      	pop	{r3, pc}
 80024fe:	bf00      	nop
 8002500:	200004d8 	.word	0x200004d8

08002504 <OnMacProcessNotify>:
{
 8002504:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002506:	2100      	movs	r1, #0
 8002508:	2001      	movs	r0, #1
 800250a:	f010 fc1b 	bl	8012d44 <UTIL_SEQ_SetTask>
}
 800250e:	bd08      	pop	{r3, pc}

08002510 <OnSystemReset>:
{
 8002510:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002512:	f006 fc4b 	bl	8008dac <LmHandlerHalt>
 8002516:	b100      	cbz	r0, 800251a <OnSystemReset+0xa>
}
 8002518:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800251a:	f006 f905 	bl	8008728 <LmHandlerJoinStatus>
 800251e:	2801      	cmp	r0, #1
 8002520:	d1fa      	bne.n	8002518 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002522:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002526:	4905      	ldr	r1, [pc, #20]	; (800253c <OnSystemReset+0x2c>)
 8002528:	68ca      	ldr	r2, [r1, #12]
 800252a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <OnSystemReset+0x30>)
 8002530:	4313      	orrs	r3, r2
 8002532:	60cb      	str	r3, [r1, #12]
 8002534:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002538:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800253a:	e7fd      	b.n	8002538 <OnSystemReset+0x28>
 800253c:	e000ed00 	.word	0xe000ed00
 8002540:	05fa0004 	.word	0x05fa0004

08002544 <OnTxPeriodicityChanged>:
{
 8002544:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <OnTxPeriodicityChanged+0x28>)
 8002548:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800254a:	b910      	cbnz	r0, 8002552 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800254c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002550:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002552:	4c07      	ldr	r4, [pc, #28]	; (8002570 <OnTxPeriodicityChanged+0x2c>)
 8002554:	4620      	mov	r0, r4
 8002556:	f010 fe1d 	bl	8013194 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800255a:	4b04      	ldr	r3, [pc, #16]	; (800256c <OnTxPeriodicityChanged+0x28>)
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	4620      	mov	r0, r4
 8002560:	f010 feb8 	bl	80132d4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002564:	4620      	mov	r0, r4
 8002566:	f010 fe6f 	bl	8013248 <UTIL_TIMER_Start>
}
 800256a:	bd10      	pop	{r4, pc}
 800256c:	20000070 	.word	0x20000070
 8002570:	200004d8 	.word	0x200004d8

08002574 <OnTxData>:
  if ((params != NULL))
 8002574:	2800      	cmp	r0, #0
 8002576:	d042      	beq.n	80025fe <OnTxData+0x8a>
{
 8002578:	b510      	push	{r4, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800257e:	7803      	ldrb	r3, [r0, #0]
 8002580:	b90b      	cbnz	r3, 8002586 <OnTxData+0x12>
}
 8002582:	b004      	add	sp, #16
 8002584:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002586:	2201      	movs	r2, #1
 8002588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800258c:	481c      	ldr	r0, [pc, #112]	; (8002600 <OnTxData+0x8c>)
 800258e:	f002 fa35 	bl	80049fc <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 8002592:	481c      	ldr	r0, [pc, #112]	; (8002604 <OnTxData+0x90>)
 8002594:	f010 fe58 	bl	8013248 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <OnTxData+0x94>)
 800259a:	2200      	movs	r2, #0
 800259c:	4611      	mov	r1, r2
 800259e:	2002      	movs	r0, #2
 80025a0:	f010 faa6 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80025a4:	7c23      	ldrb	r3, [r4, #16]
 80025a6:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80025aa:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80025ae:	9103      	str	r1, [sp, #12]
 80025b0:	9202      	str	r2, [sp, #8]
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	68e3      	ldr	r3, [r4, #12]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <OnTxData+0x98>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	4611      	mov	r1, r2
 80025be:	2003      	movs	r0, #3
 80025c0:	f010 fa96 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <OnTxData+0x9c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	4611      	mov	r1, r2
 80025ca:	2003      	movs	r0, #3
 80025cc:	f010 fa90 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80025d0:	7a23      	ldrb	r3, [r4, #8]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d10c      	bne.n	80025f0 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80025d6:	7a63      	ldrb	r3, [r4, #9]
 80025d8:	b143      	cbz	r3, 80025ec <OnTxData+0x78>
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <OnTxData+0xa0>)
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <OnTxData+0xa4>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	4611      	mov	r1, r2
 80025e4:	2003      	movs	r0, #3
 80025e6:	f010 fa83 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
 80025ea:	e7ca      	b.n	8002582 <OnTxData+0xe>
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <OnTxData+0xa8>)
 80025ee:	e7f5      	b.n	80025dc <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <OnTxData+0xac>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	4611      	mov	r1, r2
 80025f6:	2003      	movs	r0, #3
 80025f8:	f010 fa7a 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 80025fc:	e7c1      	b.n	8002582 <OnTxData+0xe>
 80025fe:	4770      	bx	lr
 8002600:	48000400 	.word	0x48000400
 8002604:	200004c0 	.word	0x200004c0
 8002608:	080139e4 	.word	0x080139e4
 800260c:	08013a18 	.word	0x08013a18
 8002610:	08013a4c 	.word	0x08013a4c
 8002614:	080139d8 	.word	0x080139d8
 8002618:	08013a5c 	.word	0x08013a5c
 800261c:	080139dc 	.word	0x080139dc
 8002620:	08013a70 	.word	0x08013a70

08002624 <OnJoinRequest>:
  if (joinParams != NULL)
 8002624:	2800      	cmp	r0, #0
 8002626:	d039      	beq.n	800269c <OnJoinRequest+0x78>
{
 8002628:	b510      	push	{r4, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800262e:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8002632:	b9fb      	cbnz	r3, 8002674 <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002634:	481a      	ldr	r0, [pc, #104]	; (80026a0 <OnJoinRequest+0x7c>)
 8002636:	f010 fdad 	bl	8013194 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800263a:	2200      	movs	r2, #0
 800263c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002640:	4818      	ldr	r0, [pc, #96]	; (80026a4 <OnJoinRequest+0x80>)
 8002642:	f002 f9db 	bl	80049fc <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <OnJoinRequest+0x84>)
 8002648:	2200      	movs	r2, #0
 800264a:	4611      	mov	r1, r2
 800264c:	2002      	movs	r0, #2
 800264e:	f010 fa4f 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8002652:	79e3      	ldrb	r3, [r4, #7]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d006      	beq.n	8002666 <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <OnJoinRequest+0x88>)
 800265a:	2200      	movs	r2, #0
 800265c:	4611      	mov	r1, r2
 800265e:	2002      	movs	r0, #2
 8002660:	f010 fa46 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
 8002664:	e00c      	b.n	8002680 <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <OnJoinRequest+0x8c>)
 8002668:	2200      	movs	r2, #0
 800266a:	4611      	mov	r1, r2
 800266c:	2002      	movs	r0, #2
 800266e:	f010 fa3f 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
 8002672:	e005      	b.n	8002680 <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <OnJoinRequest+0x90>)
 8002676:	2200      	movs	r2, #0
 8002678:	4611      	mov	r1, r2
 800267a:	2002      	movs	r0, #2
 800267c:	f010 fa38 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 8002680:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002684:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8002688:	9201      	str	r2, [sp, #4]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <OnJoinRequest+0x94>)
 800268e:	2200      	movs	r2, #0
 8002690:	4611      	mov	r1, r2
 8002692:	2003      	movs	r0, #3
 8002694:	f010 fa2c 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002698:	b002      	add	sp, #8
 800269a:	bd10      	pop	{r4, pc}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000478 	.word	0x20000478
 80026a4:	48000400 	.word	0x48000400
 80026a8:	08013a80 	.word	0x08013a80
 80026ac:	08013ab8 	.word	0x08013ab8
 80026b0:	08013a98 	.word	0x08013a98
 80026b4:	08013ad8 	.word	0x08013ad8
 80026b8:	08013af4 	.word	0x08013af4

080026bc <OnStopJoinTimerEvent>:
{
 80026bc:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <OnStopJoinTimerEvent+0x3c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d013      	beq.n	80026ee <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80026c6:	4c0d      	ldr	r4, [pc, #52]	; (80026fc <OnStopJoinTimerEvent+0x40>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ce:	4620      	mov	r0, r4
 80026d0:	f002 f994 	bl	80049fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80026d4:	2200      	movs	r2, #0
 80026d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026da:	4620      	mov	r0, r4
 80026dc:	f002 f98e 	bl	80049fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80026e0:	2200      	movs	r2, #0
 80026e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026e6:	4620      	mov	r0, r4
 80026e8:	f002 f988 	bl	80049fc <HAL_GPIO_WritePin>
}
 80026ec:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80026ee:	2100      	movs	r1, #0
 80026f0:	2008      	movs	r0, #8
 80026f2:	f010 fb27 	bl	8012d44 <UTIL_SEQ_SetTask>
 80026f6:	e7e6      	b.n	80026c6 <OnStopJoinTimerEvent+0xa>
 80026f8:	20000000 	.word	0x20000000
 80026fc:	48000400 	.word	0x48000400

08002700 <OnRxTimerLedEvent>:
{
 8002700:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002702:	2200      	movs	r2, #0
 8002704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002708:	4801      	ldr	r0, [pc, #4]	; (8002710 <OnRxTimerLedEvent+0x10>)
 800270a:	f002 f977 	bl	80049fc <HAL_GPIO_WritePin>
}
 800270e:	bd08      	pop	{r3, pc}
 8002710:	48000400 	.word	0x48000400

08002714 <OnTxTimerLedEvent>:
{
 8002714:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002716:	2200      	movs	r2, #0
 8002718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800271c:	4801      	ldr	r0, [pc, #4]	; (8002724 <OnTxTimerLedEvent+0x10>)
 800271e:	f002 f96d 	bl	80049fc <HAL_GPIO_WritePin>
}
 8002722:	bd08      	pop	{r3, pc}
 8002724:	48000400 	.word	0x48000400

08002728 <OnRxData>:
  if (params != NULL)
 8002728:	2900      	cmp	r1, #0
 800272a:	d06e      	beq.n	800280a <OnRxData+0xe2>
{
 800272c:	b570      	push	{r4, r5, r6, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	4604      	mov	r4, r0
 8002732:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002734:	2201      	movs	r2, #1
 8002736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800273a:	4834      	ldr	r0, [pc, #208]	; (800280c <OnRxData+0xe4>)
 800273c:	f002 f95e 	bl	80049fc <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002740:	4833      	ldr	r0, [pc, #204]	; (8002810 <OnRxData+0xe8>)
 8002742:	f010 fd81 	bl	8013248 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002746:	782e      	ldrb	r6, [r5, #0]
 8002748:	2e00      	cmp	r6, #0
 800274a:	d042      	beq.n	80027d2 <OnRxData+0xaa>
      if (appData != NULL)
 800274c:	2c00      	cmp	r4, #0
 800274e:	d03f      	beq.n	80027d0 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002750:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 8002752:	6863      	ldr	r3, [r4, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d03c      	beq.n	80027d2 <OnRxData+0xaa>
          switch (appData->Port)
 8002758:	2e02      	cmp	r6, #2
 800275a:	d016      	beq.n	800278a <OnRxData+0x62>
 800275c:	2e03      	cmp	r6, #3
 800275e:	d138      	bne.n	80027d2 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002760:	7862      	ldrb	r2, [r4, #1]
 8002762:	2a01      	cmp	r2, #1
 8002764:	d135      	bne.n	80027d2 <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d006      	beq.n	800277a <OnRxData+0x52>
 800276c:	2b02      	cmp	r3, #2
 800276e:	d008      	beq.n	8002782 <OnRxData+0x5a>
 8002770:	bb7b      	cbnz	r3, 80027d2 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 8002772:	2000      	movs	r0, #0
 8002774:	f006 f8aa 	bl	80088cc <LmHandlerRequestClass>
                    break;
 8002778:	e02b      	b.n	80027d2 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 800277a:	2001      	movs	r0, #1
 800277c:	f006 f8a6 	bl	80088cc <LmHandlerRequestClass>
                    break;
 8002780:	e027      	b.n	80027d2 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 8002782:	2002      	movs	r0, #2
 8002784:	f006 f8a2 	bl	80088cc <LmHandlerRequestClass>
                    break;
 8002788:	e023      	b.n	80027d2 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800278a:	7862      	ldrb	r2, [r4, #1]
 800278c:	2a01      	cmp	r2, #1
 800278e:	d120      	bne.n	80027d2 <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <OnRxData+0xec>)
 8002798:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 800279a:	b963      	cbnz	r3, 80027b6 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <OnRxData+0xf0>)
 800279e:	2200      	movs	r2, #0
 80027a0:	4611      	mov	r1, r2
 80027a2:	2003      	movs	r0, #3
 80027a4:	f010 f9a4 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80027a8:	2200      	movs	r2, #0
 80027aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027ae:	4817      	ldr	r0, [pc, #92]	; (800280c <OnRxData+0xe4>)
 80027b0:	f002 f924 	bl	80049fc <HAL_GPIO_WritePin>
 80027b4:	e00d      	b.n	80027d2 <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80027b6:	4b19      	ldr	r3, [pc, #100]	; (800281c <OnRxData+0xf4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	4611      	mov	r1, r2
 80027bc:	2003      	movs	r0, #3
 80027be:	f010 f997 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80027c2:	2201      	movs	r2, #1
 80027c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027c8:	4810      	ldr	r0, [pc, #64]	; (800280c <OnRxData+0xe4>)
 80027ca:	f002 f917 	bl	80049fc <HAL_GPIO_WritePin>
 80027ce:	e000      	b.n	80027d2 <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80027d0:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80027d2:	7c2b      	ldrb	r3, [r5, #16]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d901      	bls.n	80027dc <OnRxData+0xb4>
}
 80027d8:	b006      	add	sp, #24
 80027da:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80027dc:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80027e0:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80027e4:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80027e8:	9005      	str	r0, [sp, #20]
 80027ea:	9104      	str	r1, [sp, #16]
 80027ec:	490c      	ldr	r1, [pc, #48]	; (8002820 <OnRxData+0xf8>)
 80027ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027f2:	9303      	str	r3, [sp, #12]
 80027f4:	9202      	str	r2, [sp, #8]
 80027f6:	9601      	str	r6, [sp, #4]
 80027f8:	68eb      	ldr	r3, [r5, #12]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <OnRxData+0xfc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	4611      	mov	r1, r2
 8002802:	2003      	movs	r0, #3
 8002804:	f010 f974 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002808:	e7e6      	b.n	80027d8 <OnRxData+0xb0>
 800280a:	4770      	bx	lr
 800280c:	48000400 	.word	0x48000400
 8002810:	20000490 	.word	0x20000490
 8002814:	20000476 	.word	0x20000476
 8002818:	08013b20 	.word	0x08013b20
 800281c:	08013b2c 	.word	0x08013b2c
 8002820:	08013d48 	.word	0x08013d48
 8002824:	08013b38 	.word	0x08013b38

08002828 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002828:	b538      	push	{r3, r4, r5, lr}
 800282a:	4604      	mov	r4, r0
 800282c:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800282e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002832:	4805      	ldr	r0, [pc, #20]	; (8002848 <OnStoreContextRequest+0x20>)
 8002834:	f7fe fe44 	bl	80014c0 <FLASH_IF_Erase>
 8002838:	b100      	cbz	r0, 800283c <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800283a:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800283c:	462a      	mov	r2, r5
 800283e:	4621      	mov	r1, r4
 8002840:	4801      	ldr	r0, [pc, #4]	; (8002848 <OnStoreContextRequest+0x20>)
 8002842:	f7fe fe05 	bl	8001450 <FLASH_IF_Write>
}
 8002846:	e7f8      	b.n	800283a <OnStoreContextRequest+0x12>
 8002848:	0803f000 	.word	0x0803f000

0800284c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800284c:	b508      	push	{r3, lr}
 800284e:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002850:	4901      	ldr	r1, [pc, #4]	; (8002858 <OnRestoreContextRequest+0xc>)
 8002852:	f7fe fe19 	bl	8001488 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002856:	bd08      	pop	{r3, pc}
 8002858:	0803f000 	.word	0x0803f000

0800285c <StopJoin>:
{
 800285c:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800285e:	4c1e      	ldr	r4, [pc, #120]	; (80028d8 <StopJoin+0x7c>)
 8002860:	2201      	movs	r2, #1
 8002862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002866:	4620      	mov	r0, r4
 8002868:	f002 f8c8 	bl	80049fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800286c:	2201      	movs	r2, #1
 800286e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002872:	4620      	mov	r0, r4
 8002874:	f002 f8c2 	bl	80049fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002878:	2201      	movs	r2, #1
 800287a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800287e:	4620      	mov	r0, r4
 8002880:	f002 f8bc 	bl	80049fc <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002884:	4815      	ldr	r0, [pc, #84]	; (80028dc <StopJoin+0x80>)
 8002886:	f010 fc85 	bl	8013194 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800288a:	f006 fa87 	bl	8008d9c <LmHandlerStop>
 800288e:	b148      	cbz	r0, 80028a4 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <StopJoin+0x84>)
 8002892:	2200      	movs	r2, #0
 8002894:	4611      	mov	r1, r2
 8002896:	2002      	movs	r0, #2
 8002898:	f010 f92a 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 800289c:	4811      	ldr	r0, [pc, #68]	; (80028e4 <StopJoin+0x88>)
 800289e:	f010 fcd3 	bl	8013248 <UTIL_TIMER_Start>
}
 80028a2:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <StopJoin+0x8c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	4611      	mov	r1, r2
 80028aa:	2002      	movs	r0, #2
 80028ac:	f010 f920 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80028b0:	4c0e      	ldr	r4, [pc, #56]	; (80028ec <StopJoin+0x90>)
 80028b2:	2501      	movs	r5, #1
 80028b4:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <StopJoin+0x94>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	4611      	mov	r1, r2
 80028bc:	2002      	movs	r0, #2
 80028be:	f010 f917 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80028c2:	480c      	ldr	r0, [pc, #48]	; (80028f4 <StopJoin+0x98>)
 80028c4:	f006 f8e2 	bl	8008a8c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80028c8:	4629      	mov	r1, r5
 80028ca:	7820      	ldrb	r0, [r4, #0]
 80028cc:	f005 fe9a 	bl	8008604 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80028d0:	4802      	ldr	r0, [pc, #8]	; (80028dc <StopJoin+0x80>)
 80028d2:	f010 fcb9 	bl	8013248 <UTIL_TIMER_Start>
 80028d6:	e7e1      	b.n	800289c <StopJoin+0x40>
 80028d8:	48000400 	.word	0x48000400
 80028dc:	200004d8 	.word	0x200004d8
 80028e0:	08013b80 	.word	0x08013b80
 80028e4:	200004a8 	.word	0x200004a8
 80028e8:	08013ba0 	.word	0x08013ba0
 80028ec:	20000000 	.word	0x20000000
 80028f0:	08013bb4 	.word	0x08013bb4
 80028f4:	20000058 	.word	0x20000058

080028f8 <StoreContext>:
{
 80028f8:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 80028fa:	f006 fae1 	bl	8008ec0 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 80028fe:	f110 0f08 	cmn.w	r0, #8
 8002902:	d003      	beq.n	800290c <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002904:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002908:	d007      	beq.n	800291a <StoreContext+0x22>
}
 800290a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <StoreContext+0x30>)
 800290e:	2200      	movs	r2, #0
 8002910:	4611      	mov	r1, r2
 8002912:	2002      	movs	r0, #2
 8002914:	f010 f8ec 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
 8002918:	e7f7      	b.n	800290a <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <StoreContext+0x34>)
 800291c:	2200      	movs	r2, #0
 800291e:	4611      	mov	r1, r2
 8002920:	2002      	movs	r0, #2
 8002922:	f010 f8e5 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002926:	e7f0      	b.n	800290a <StoreContext+0x12>
 8002928:	08013bd4 	.word	0x08013bd4
 800292c:	08013bec 	.word	0x08013bec

08002930 <SendTxData>:
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b08b      	sub	sp, #44	; 0x2c
  uint8_t batteryLevel = GetBatteryLevel();
 8002934:	f7ff f8de 	bl	8001af4 <GetBatteryLevel>
 8002938:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 800293a:	f005 ff07 	bl	800874c <LmHandlerIsBusy>
 800293e:	b188      	cbz	r0, 8002964 <SendTxData+0x34>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002940:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002942:	4c69      	ldr	r4, [pc, #420]	; (8002ae8 <SendTxData+0x1b8>)
 8002944:	4620      	mov	r0, r4
 8002946:	f010 fc25 	bl	8013194 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800294a:	4b68      	ldr	r3, [pc, #416]	; (8002aec <SendTxData+0x1bc>)
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	42a9      	cmp	r1, r5
 8002950:	bf38      	it	cc
 8002952:	4629      	movcc	r1, r5
 8002954:	4620      	mov	r0, r4
 8002956:	f010 fcbd 	bl	80132d4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800295a:	4620      	mov	r0, r4
 800295c:	f010 fc74 	bl	8013248 <UTIL_TIMER_Start>
}
 8002960:	b00b      	add	sp, #44	; 0x2c
 8002962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EnvSensors_Read(&sensor_data);
 8002964:	a803      	add	r0, sp, #12
 8002966:	f7ff f9ab 	bl	8001cc0 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800296a:	9400      	str	r4, [sp, #0]
 800296c:	4b60      	ldr	r3, [pc, #384]	; (8002af0 <SendTxData+0x1c0>)
 800296e:	2201      	movs	r2, #1
 8002970:	2100      	movs	r1, #0
 8002972:	2002      	movs	r0, #2
 8002974:	f010 f8bc 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8002978:	9803      	ldr	r0, [sp, #12]
 800297a:	f7fe f945 	bl	8000c08 <__aeabi_f2iz>
 800297e:	b200      	sxth	r0, r0
 8002980:	9000      	str	r0, [sp, #0]
 8002982:	4b5c      	ldr	r3, [pc, #368]	; (8002af4 <SendTxData+0x1c4>)
 8002984:	2201      	movs	r2, #1
 8002986:	2100      	movs	r1, #0
 8002988:	2002      	movs	r0, #2
 800298a:	f010 f8b1 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "humi: %d\r\n", (uint16_t)(sensor_data.humidity));
 800298e:	9804      	ldr	r0, [sp, #16]
 8002990:	f7fe f960 	bl	8000c54 <__aeabi_f2uiz>
 8002994:	b280      	uxth	r0, r0
 8002996:	9000      	str	r0, [sp, #0]
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <SendTxData+0x1c8>)
 800299a:	2201      	movs	r2, #1
 800299c:	2100      	movs	r1, #0
 800299e:	2002      	movs	r0, #2
 80029a0:	f010 f8a6 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "light: %d\r\n", (uint16_t)(sensor_data.light));
 80029a4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	4b54      	ldr	r3, [pc, #336]	; (8002afc <SendTxData+0x1cc>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	2100      	movs	r1, #0
 80029b0:	2002      	movs	r0, #2
 80029b2:	f010 f89d 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "terr_humi: %d\r\n", (uint16_t)(sensor_data.terrain_humidity));
 80029b6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <SendTxData+0x1d0>)
 80029be:	2201      	movs	r2, #1
 80029c0:	2100      	movs	r1, #0
 80029c2:	2002      	movs	r0, #2
 80029c4:	f010 f894 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 80029c8:	4c4e      	ldr	r4, [pc, #312]	; (8002b04 <SendTxData+0x1d4>)
 80029ca:	2302      	movs	r3, #2
 80029cc:	7023      	strb	r3, [r4, #0]
    humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 80029ce:	494e      	ldr	r1, [pc, #312]	; (8002b08 <SendTxData+0x1d8>)
 80029d0:	9804      	ldr	r0, [sp, #16]
 80029d2:	f7fd ff53 	bl	800087c <__aeabi_fmul>
 80029d6:	f7fe f93d 	bl	8000c54 <__aeabi_f2uiz>
 80029da:	b285      	uxth	r5, r0
    temperature = (int16_t)(sensor_data.temperature);
 80029dc:	9803      	ldr	r0, [sp, #12]
 80029de:	f7fe f913 	bl	8000c08 <__aeabi_f2iz>
    terrain_humidity = (uint16_t)(sensor_data.terrain_humidity * 10); /* in %*10  */
 80029e2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80029e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80029ea:	0059      	lsls	r1, r3, #1
    light = (uint16_t)(sensor_data.light);
 80029ec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    AppData.Buffer[i++] = AppLedStateOn;
 80029f0:	4e46      	ldr	r6, [pc, #280]	; (8002b0c <SendTxData+0x1dc>)
 80029f2:	f896 c000 	ldrb.w	ip, [r6]
 80029f6:	6866      	ldr	r6, [r4, #4]
 80029f8:	f886 c000 	strb.w	ip, [r6]
    AppData.Buffer[i++] = (uint8_t)((terrain_humidity >> 8) & 0xFF);
 80029fc:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8002a00:	6866      	ldr	r6, [r4, #4]
 8002a02:	7073      	strb	r3, [r6, #1]
    AppData.Buffer[i++] = (uint8_t)(terrain_humidity & 0xFF);
 8002a04:	6863      	ldr	r3, [r4, #4]
 8002a06:	7099      	strb	r1, [r3, #2]
    AppData.Buffer[i++] = (uint8_t)((light >> 8) & 0xFF);
 8002a08:	6863      	ldr	r3, [r4, #4]
 8002a0a:	0a11      	lsrs	r1, r2, #8
 8002a0c:	70d9      	strb	r1, [r3, #3]
    AppData.Buffer[i++] = (uint8_t)(light & 0xFF);
 8002a0e:	6863      	ldr	r3, [r4, #4]
 8002a10:	711a      	strb	r2, [r3, #4]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8002a12:	6863      	ldr	r3, [r4, #4]
 8002a14:	7158      	strb	r0, [r3, #5]
    AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8002a16:	6863      	ldr	r3, [r4, #4]
 8002a18:	0a2a      	lsrs	r2, r5, #8
 8002a1a:	719a      	strb	r2, [r3, #6]
    AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8002a1c:	6863      	ldr	r3, [r4, #4]
 8002a1e:	71dd      	strb	r5, [r3, #7]
    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002a20:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <SendTxData+0x1e0>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d002      	beq.n	8002a2e <SendTxData+0xfe>
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d000      	beq.n	8002a2e <SendTxData+0xfe>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8002a2c:	b9c3      	cbnz	r3, 8002a60 <SendTxData+0x130>
      AppData.Buffer[i++] = 0;
 8002a2e:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <SendTxData+0x1d4>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	721a      	strb	r2, [r3, #8]
      AppData.Buffer[i++] = 0;
 8002a36:	725a      	strb	r2, [r3, #9]
      AppData.Buffer[i++] = 0;
 8002a38:	729a      	strb	r2, [r3, #10]
      AppData.Buffer[i++] = 0;
 8002a3a:	72da      	strb	r2, [r3, #11]
 8002a3c:	220c      	movs	r2, #12
    AppData.BufferSize = i;
 8002a3e:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <SendTxData+0x1d4>)
 8002a40:	705a      	strb	r2, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002a42:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <SendTxData+0x1e4>)
 8002a44:	7a5b      	ldrb	r3, [r3, #9]
 8002a46:	bb33      	cbnz	r3, 8002a96 <SendTxData+0x166>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <SendTxData+0x1e0>)
 8002a4c:	78d9      	ldrb	r1, [r3, #3]
 8002a4e:	482d      	ldr	r0, [pc, #180]	; (8002b04 <SendTxData+0x1d4>)
 8002a50:	f005 fe92 	bl	8008778 <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 8002a54:	b368      	cbz	r0, 8002ab2 <SendTxData+0x182>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002a56:	f110 0f06 	cmn.w	r0, #6
 8002a5a:	d032      	beq.n	8002ac2 <SendTxData+0x192>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002a5c:	2500      	movs	r5, #0
 8002a5e:	e770      	b.n	8002942 <SendTxData+0x12>
      latitude = sensor_data.latitude;
 8002a60:	9d07      	ldr	r5, [sp, #28]
      longitude = sensor_data.longitude;
 8002a62:	9c08      	ldr	r4, [sp, #32]
      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002a64:	4e27      	ldr	r6, [pc, #156]	; (8002b04 <SendTxData+0x1d4>)
 8002a66:	6877      	ldr	r7, [r6, #4]
 8002a68:	f7ff f844 	bl	8001af4 <GetBatteryLevel>
 8002a6c:	7238      	strb	r0, [r7, #8]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002a6e:	6873      	ldr	r3, [r6, #4]
 8002a70:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002a74:	725a      	strb	r2, [r3, #9]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002a76:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002a7a:	729a      	strb	r2, [r3, #10]
      AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002a7c:	72dd      	strb	r5, [r3, #11]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002a7e:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002a82:	731a      	strb	r2, [r3, #12]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002a84:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002a88:	735a      	strb	r2, [r3, #13]
      AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002a8a:	739c      	strb	r4, [r3, #14]
      AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	73da      	strb	r2, [r3, #15]
      AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002a90:	741a      	strb	r2, [r3, #16]
 8002a92:	2211      	movs	r2, #17
 8002a94:	e7d3      	b.n	8002a3e <SendTxData+0x10e>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002a96:	f005 fe47 	bl	8008728 <LmHandlerJoinStatus>
 8002a9a:	2801      	cmp	r0, #1
 8002a9c:	d1d4      	bne.n	8002a48 <SendTxData+0x118>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002a9e:	481d      	ldr	r0, [pc, #116]	; (8002b14 <SendTxData+0x1e4>)
 8002aa0:	f010 fb78 	bl	8013194 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002aaa:	481b      	ldr	r0, [pc, #108]	; (8002b18 <SendTxData+0x1e8>)
 8002aac:	f001 ffa6 	bl	80049fc <HAL_GPIO_WritePin>
 8002ab0:	e7ca      	b.n	8002a48 <SendTxData+0x118>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <SendTxData+0x1ec>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4610      	mov	r0, r2
 8002aba:	f010 f819 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002abe:	2500      	movs	r5, #0
 8002ac0:	e73f      	b.n	8002942 <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002ac2:	f005 fe2b 	bl	800871c <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8002ac6:	4605      	mov	r5, r0
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	f43f af3a 	beq.w	8002942 <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002ace:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <SendTxData+0x1f0>)
 8002ad0:	fba3 2300 	umull	r2, r3, r3, r0
 8002ad4:	099b      	lsrs	r3, r3, #6
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <SendTxData+0x1f4>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	2100      	movs	r1, #0
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f010 f806 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
 8002ae4:	e72d      	b.n	8002942 <SendTxData+0x12>
 8002ae6:	bf00      	nop
 8002ae8:	200004d8 	.word	0x200004d8
 8002aec:	20000070 	.word	0x20000070
 8002af0:	08013c04 	.word	0x08013c04
 8002af4:	08013c10 	.word	0x08013c10
 8002af8:	08013c1c 	.word	0x08013c1c
 8002afc:	08013c28 	.word	0x08013c28
 8002b00:	08013c34 	.word	0x08013c34
 8002b04:	20000004 	.word	0x20000004
 8002b08:	41200000 	.word	0x41200000
 8002b0c:	20000476 	.word	0x20000476
 8002b10:	20000058 	.word	0x20000058
 8002b14:	20000478 	.word	0x20000478
 8002b18:	48000400 	.word	0x48000400
 8002b1c:	08013c44 	.word	0x08013c44
 8002b20:	10624dd3 	.word	0x10624dd3
 8002b24:	08013c54 	.word	0x08013c54

08002b28 <OnJoinTimerLedEvent>:
{
 8002b28:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002b2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b2e:	4802      	ldr	r0, [pc, #8]	; (8002b38 <OnJoinTimerLedEvent+0x10>)
 8002b30:	f001 ff69 	bl	8004a06 <HAL_GPIO_TogglePin>
}
 8002b34:	bd08      	pop	{r3, pc}
 8002b36:	bf00      	nop
 8002b38:	48000400 	.word	0x48000400

08002b3c <LoRaWAN_Init>:
{
 8002b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3e:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8002b40:	2400      	movs	r4, #0
 8002b42:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002b44:	9402      	str	r4, [sp, #8]
 8002b46:	2703      	movs	r7, #3
 8002b48:	9701      	str	r7, [sp, #4]
 8002b4a:	2601      	movs	r6, #1
 8002b4c:	9600      	str	r6, [sp, #0]
 8002b4e:	4b4f      	ldr	r3, [pc, #316]	; (8002c8c <LoRaWAN_Init+0x150>)
 8002b50:	4622      	mov	r2, r4
 8002b52:	4621      	mov	r1, r4
 8002b54:	2002      	movs	r0, #2
 8002b56:	f00f ffcb 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002b5a:	9402      	str	r4, [sp, #8]
 8002b5c:	2305      	movs	r3, #5
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	2502      	movs	r5, #2
 8002b62:	9500      	str	r5, [sp, #0]
 8002b64:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <LoRaWAN_Init+0x154>)
 8002b66:	4622      	mov	r2, r4
 8002b68:	4621      	mov	r1, r4
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	f00f ffc0 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002b70:	9402      	str	r4, [sp, #8]
 8002b72:	9701      	str	r7, [sp, #4]
 8002b74:	9600      	str	r6, [sp, #0]
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <LoRaWAN_Init+0x158>)
 8002b78:	4622      	mov	r2, r4
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	f00f ffb7 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002b82:	a905      	add	r1, sp, #20
 8002b84:	4620      	mov	r0, r4
 8002b86:	f006 f8f3 	bl	8008d70 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002b8a:	9b05      	ldr	r3, [sp, #20]
 8002b8c:	0e1a      	lsrs	r2, r3, #24
 8002b8e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002b92:	9102      	str	r1, [sp, #8]
 8002b94:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002b98:	9301      	str	r3, [sp, #4]
 8002b9a:	9200      	str	r2, [sp, #0]
 8002b9c:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <LoRaWAN_Init+0x15c>)
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f00f ffa4 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002ba8:	a905      	add	r1, sp, #20
 8002baa:	4630      	mov	r0, r6
 8002bac:	f006 f8e0 	bl	8008d70 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002bb0:	9b05      	ldr	r3, [sp, #20]
 8002bb2:	0e1a      	lsrs	r2, r3, #24
 8002bb4:	b2d9      	uxtb	r1, r3
 8002bb6:	9103      	str	r1, [sp, #12]
 8002bb8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002bbc:	9102      	str	r1, [sp, #8]
 8002bbe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	9200      	str	r2, [sp, #0]
 8002bc6:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <LoRaWAN_Init+0x160>)
 8002bc8:	4622      	mov	r2, r4
 8002bca:	4621      	mov	r1, r4
 8002bcc:	4628      	mov	r0, r5
 8002bce:	f00f ff8f 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002bd2:	9400      	str	r4, [sp, #0]
 8002bd4:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <LoRaWAN_Init+0x164>)
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bdc:	4831      	ldr	r0, [pc, #196]	; (8002ca4 <LoRaWAN_Init+0x168>)
 8002bde:	f010 fa7b 	bl	80130d8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002be2:	9400      	str	r4, [sp, #0]
 8002be4:	4b30      	ldr	r3, [pc, #192]	; (8002ca8 <LoRaWAN_Init+0x16c>)
 8002be6:	4622      	mov	r2, r4
 8002be8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bec:	482f      	ldr	r0, [pc, #188]	; (8002cac <LoRaWAN_Init+0x170>)
 8002bee:	f010 fa73 	bl	80130d8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002bf2:	9400      	str	r4, [sp, #0]
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <LoRaWAN_Init+0x174>)
 8002bf6:	4632      	mov	r2, r6
 8002bf8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bfc:	482d      	ldr	r0, [pc, #180]	; (8002cb4 <LoRaWAN_Init+0x178>)
 8002bfe:	f010 fa6b 	bl	80130d8 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7fe fc1e 	bl	8001444 <FLASH_IF_Init>
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	d13b      	bne.n	8002c84 <LoRaWAN_Init+0x148>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002c0c:	2400      	movs	r4, #0
 8002c0e:	9400      	str	r4, [sp, #0]
 8002c10:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <LoRaWAN_Init+0x17c>)
 8002c12:	4622      	mov	r2, r4
 8002c14:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002c18:	4828      	ldr	r0, [pc, #160]	; (8002cbc <LoRaWAN_Init+0x180>)
 8002c1a:	f010 fa5d 	bl	80130d8 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002c1e:	4a28      	ldr	r2, [pc, #160]	; (8002cc0 <LoRaWAN_Init+0x184>)
 8002c20:	4621      	mov	r1, r4
 8002c22:	2001      	movs	r0, #1
 8002c24:	f010 f958 	bl	8012ed8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002c28:	4a26      	ldr	r2, [pc, #152]	; (8002cc4 <LoRaWAN_Init+0x188>)
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	2002      	movs	r0, #2
 8002c2e:	f010 f953 	bl	8012ed8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8002c32:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <LoRaWAN_Init+0x18c>)
 8002c34:	4621      	mov	r1, r4
 8002c36:	2004      	movs	r0, #4
 8002c38:	f010 f94e 	bl	8012ed8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002c3c:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <LoRaWAN_Init+0x190>)
 8002c3e:	4621      	mov	r1, r4
 8002c40:	2008      	movs	r0, #8
 8002c42:	f010 f949 	bl	8012ed8 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002c46:	f000 f861 	bl	8002d0c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002c4a:	4921      	ldr	r1, [pc, #132]	; (8002cd0 <LoRaWAN_Init+0x194>)
 8002c4c:	4821      	ldr	r0, [pc, #132]	; (8002cd4 <LoRaWAN_Init+0x198>)
 8002c4e:	f006 f843 	bl	8008cd8 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002c52:	4821      	ldr	r0, [pc, #132]	; (8002cd8 <LoRaWAN_Init+0x19c>)
 8002c54:	f005 ff1a 	bl	8008a8c <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002c58:	4816      	ldr	r0, [pc, #88]	; (8002cb4 <LoRaWAN_Init+0x178>)
 8002c5a:	f010 faf5 	bl	8013248 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002c5e:	4621      	mov	r1, r4
 8002c60:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <LoRaWAN_Init+0x1a0>)
 8002c62:	7818      	ldrb	r0, [r3, #0]
 8002c64:	f005 fcce 	bl	8008604 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002c68:	4d1d      	ldr	r5, [pc, #116]	; (8002ce0 <LoRaWAN_Init+0x1a4>)
 8002c6a:	9400      	str	r4, [sp, #0]
 8002c6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <LoRaWAN_Init+0x1a8>)
 8002c6e:	4622      	mov	r2, r4
 8002c70:	491d      	ldr	r1, [pc, #116]	; (8002ce8 <LoRaWAN_Init+0x1ac>)
 8002c72:	6809      	ldr	r1, [r1, #0]
 8002c74:	4628      	mov	r0, r5
 8002c76:	f010 fa2f 	bl	80130d8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f010 fae4 	bl	8013248 <UTIL_TIMER_Start>
}
 8002c80:	b007      	add	sp, #28
 8002c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002c84:	f7fe fcb0 	bl	80015e8 <Error_Handler>
 8002c88:	e7c0      	b.n	8002c0c <LoRaWAN_Init+0xd0>
 8002c8a:	bf00      	nop
 8002c8c:	08013c74 	.word	0x08013c74
 8002c90:	08013c98 	.word	0x08013c98
 8002c94:	08013cbc 	.word	0x08013cbc
 8002c98:	08013ce0 	.word	0x08013ce0
 8002c9c:	08013d04 	.word	0x08013d04
 8002ca0:	08002715 	.word	0x08002715
 8002ca4:	200004c0 	.word	0x200004c0
 8002ca8:	08002701 	.word	0x08002701
 8002cac:	20000490 	.word	0x20000490
 8002cb0:	08002b29 	.word	0x08002b29
 8002cb4:	20000478 	.word	0x20000478
 8002cb8:	080026bd 	.word	0x080026bd
 8002cbc:	200004a8 	.word	0x200004a8
 8002cc0:	08008885 	.word	0x08008885
 8002cc4:	08002931 	.word	0x08002931
 8002cc8:	080028f9 	.word	0x080028f9
 8002ccc:	0800285d 	.word	0x0800285d
 8002cd0:	01030000 	.word	0x01030000
 8002cd4:	2000000c 	.word	0x2000000c
 8002cd8:	20000058 	.word	0x20000058
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	200004d8 	.word	0x200004d8
 8002ce4:	080024ed 	.word	0x080024ed
 8002ce8:	20000070 	.word	0x20000070

08002cec <HAL_GPIO_EXTI_Callback>:
{
 8002cec:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002cee:	2802      	cmp	r0, #2
 8002cf0:	d002      	beq.n	8002cf8 <HAL_GPIO_EXTI_Callback+0xc>
 8002cf2:	2840      	cmp	r0, #64	; 0x40
 8002cf4:	d005      	beq.n	8002d02 <HAL_GPIO_EXTI_Callback+0x16>
}
 8002cf6:	bd08      	pop	{r3, pc}
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	2008      	movs	r0, #8
 8002cfc:	f010 f822 	bl	8012d44 <UTIL_SEQ_SetTask>
      break;
 8002d00:	e7f9      	b.n	8002cf6 <HAL_GPIO_EXTI_Callback+0xa>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8002d02:	2100      	movs	r1, #0
 8002d04:	2004      	movs	r0, #4
 8002d06:	f010 f81d 	bl	8012d44 <UTIL_SEQ_SetTask>
}
 8002d0a:	e7f4      	b.n	8002cf6 <HAL_GPIO_EXTI_Callback+0xa>

08002d0c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <LoraInfo_Init+0x1c>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002d12:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002d14:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002d16:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002d18:	2220      	movs	r2, #32
 8002d1a:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002d1c:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002d20:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002d26:	4770      	bx	lr
 8002d28:	200004f0 	.word	0x200004f0

08002d2c <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002d2c:	4800      	ldr	r0, [pc, #0]	; (8002d30 <LoraInfo_GetPtr+0x4>)
 8002d2e:	4770      	bx	lr
 8002d30:	200004f0 	.word	0x200004f0

08002d34 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002d34:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002d36:	f000 fb11 	bl	800335c <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d3a:	bd08      	pop	{r3, pc}

08002d3c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002d3c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002d3e:	f000 fb4f 	bl	80033e0 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002d42:	bd08      	pop	{r3, pc}

08002d44 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002d44:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002d46:	f000 fb99 	bl	800347c <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002d4a:	bd08      	pop	{r3, pc}

08002d4c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002d4c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002d4e:	f000 fb97 	bl	8003480 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d52:	bd08      	pop	{r3, pc}

08002d54 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002d54:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002d56:	f000 fb95 	bl	8003484 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d5a:	bd08      	pop	{r3, pc}

08002d5c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002d5c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002d5e:	f000 fb93 	bl	8003488 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002d62:	bd08      	pop	{r3, pc}

08002d64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d64:	480d      	ldr	r0, [pc, #52]	; (8002d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d68:	f000 fb93 	bl	8003492 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d6c:	480c      	ldr	r0, [pc, #48]	; (8002da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d6e:	490d      	ldr	r1, [pc, #52]	; (8002da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d70:	4a0d      	ldr	r2, [pc, #52]	; (8002da8 <LoopForever+0xe>)
  movs r3, #0
 8002d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d74:	e002      	b.n	8002d7c <LoopCopyDataInit>

08002d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7a:	3304      	adds	r3, #4

08002d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d80:	d3f9      	bcc.n	8002d76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d82:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d84:	4c0a      	ldr	r4, [pc, #40]	; (8002db0 <LoopForever+0x16>)
  movs r3, #0
 8002d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d88:	e001      	b.n	8002d8e <LoopFillZerobss>

08002d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d8c:	3204      	adds	r2, #4

08002d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d90:	d3fb      	bcc.n	8002d8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d92:	f010 fc69 	bl	8013668 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d96:	f7fe fc70 	bl	800167a <main>

08002d9a <LoopForever>:

LoopForever:
    b LoopForever
 8002d9a:	e7fe      	b.n	8002d9a <LoopForever>
  ldr   r0, =_estack
 8002d9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da4:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8002da8:	08014748 	.word	0x08014748
  ldr r2, =_sbss
 8002dac:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8002db0:	200016e8 	.word	0x200016e8

08002db4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002db4:	e7fe      	b.n	8002db4 <ADC_IRQHandler>

08002db6 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002db6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dba:	4604      	mov	r4, r0
 8002dbc:	460d      	mov	r5, r1
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002dbe:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8002dc2:	6846      	ldr	r6, [r0, #4]
 8002dc4:	4631      	mov	r1, r6
 8002dc6:	4648      	mov	r0, r9
 8002dc8:	f7fd fc4e 	bl	8000668 <__aeabi_fsub>
 8002dcc:	4629      	mov	r1, r5
 8002dce:	f7fd fd55 	bl	800087c <__aeabi_fmul>
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	68a7      	ldr	r7, [r4, #8]
 8002dd6:	4639      	mov	r1, r7
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f7fd fd4f 	bl	800087c <__aeabi_fmul>
 8002dde:	4606      	mov	r6, r0
 8002de0:	f8d4 8000 	ldr.w	r8, [r4]
 8002de4:	4641      	mov	r1, r8
 8002de6:	4648      	mov	r0, r9
 8002de8:	f7fd fd48 	bl	800087c <__aeabi_fmul>
 8002dec:	4601      	mov	r1, r0
 8002dee:	4630      	mov	r0, r6
 8002df0:	f7fd fc3a 	bl	8000668 <__aeabi_fsub>
 8002df4:	4601      	mov	r1, r0
 8002df6:	4628      	mov	r0, r5
 8002df8:	f7fd fc38 	bl	800066c <__addsf3>
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	4641      	mov	r1, r8
 8002e00:	4638      	mov	r0, r7
 8002e02:	f7fd fc31 	bl	8000668 <__aeabi_fsub>
 8002e06:	4601      	mov	r1, r0
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f7fd fdeb 	bl	80009e4 <__aeabi_fdiv>
}
 8002e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002e12 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e12:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002e14:	6884      	ldr	r4, [r0, #8]
 8002e16:	b92c      	cbnz	r4, 8002e24 <ReadRegWrap+0x12>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002e18:	6944      	ldr	r4, [r0, #20]
 8002e1a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002e1e:	7b00      	ldrb	r0, [r0, #12]
 8002e20:	47a0      	blx	r4
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8002e22:	bd10      	pop	{r4, pc}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002e24:	6944      	ldr	r4, [r0, #20]
 8002e26:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002e2a:	7b00      	ldrb	r0, [r0, #12]
 8002e2c:	47a0      	blx	r4
 8002e2e:	e7f8      	b.n	8002e22 <ReadRegWrap+0x10>

08002e30 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e30:	b510      	push	{r4, lr}
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002e32:	6884      	ldr	r4, [r0, #8]
 8002e34:	b92c      	cbnz	r4, 8002e42 <WriteRegWrap+0x12>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002e36:	6904      	ldr	r4, [r0, #16]
 8002e38:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002e3c:	7b00      	ldrb	r0, [r0, #12]
 8002e3e:	47a0      	blx	r4
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
  }
}
 8002e40:	bd10      	pop	{r4, pc}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002e42:	6904      	ldr	r4, [r0, #16]
 8002e44:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002e48:	7b00      	ldrb	r0, [r0, #12]
 8002e4a:	47a0      	blx	r4
 8002e4c:	e7f8      	b.n	8002e40 <WriteRegWrap+0x10>

08002e4e <HTS221_HUM_Enable>:
  if (pObj->hum_is_enabled == 1U)
 8002e4e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d012      	beq.n	8002e7c <HTS221_HUM_Enable+0x2e>
{
 8002e56:	b510      	push	{r4, lr}
 8002e58:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8002e5a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8002e5e:	b123      	cbz	r3, 8002e6a <HTS221_HUM_Enable+0x1c>
  pObj->hum_is_enabled = 1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  return HTS221_OK;
 8002e66:	2000      	movs	r0, #0
}
 8002e68:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	3020      	adds	r0, #32
 8002e6e:	f000 f98c 	bl	800318a <hts221_power_on_set>
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d0f4      	beq.n	8002e60 <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 8002e76:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7a:	e7f5      	b.n	8002e68 <HTS221_HUM_Enable+0x1a>
    return HTS221_OK;
 8002e7c:	2000      	movs	r0, #0
}
 8002e7e:	4770      	bx	lr

08002e80 <HTS221_TEMP_Enable>:
  if (pObj->temp_is_enabled == 1U)
 8002e80:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d012      	beq.n	8002eae <HTS221_TEMP_Enable+0x2e>
{
 8002e88:	b510      	push	{r4, lr}
 8002e8a:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 8002e8c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8002e90:	b123      	cbz	r3, 8002e9c <HTS221_TEMP_Enable+0x1c>
  pObj->temp_is_enabled = 1;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return HTS221_OK;
 8002e98:	2000      	movs	r0, #0
}
 8002e9a:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	3020      	adds	r0, #32
 8002ea0:	f000 f973 	bl	800318a <hts221_power_on_set>
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	d0f4      	beq.n	8002e92 <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	e7f5      	b.n	8002e9a <HTS221_TEMP_Enable+0x1a>
    return HTS221_OK;
 8002eae:	2000      	movs	r0, #0
}
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HTS221_SetOutputDataRate>:
{
 8002eb4:	b538      	push	{r3, r4, r5, lr}
 8002eb6:	4605      	mov	r5, r0
 8002eb8:	460c      	mov	r4, r1
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002eba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7fd fe84 	bl	8000bcc <__aeabi_fcmple>
 8002ec4:	b930      	cbnz	r0, 8002ed4 <HTS221_SetOutputDataRate+0x20>
 8002ec6:	4909      	ldr	r1, [pc, #36]	; (8002eec <HTS221_SetOutputDataRate+0x38>)
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f7fd fe7f 	bl	8000bcc <__aeabi_fcmple>
 8002ece:	b140      	cbz	r0, 8002ee2 <HTS221_SetOutputDataRate+0x2e>
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	e000      	b.n	8002ed6 <HTS221_SetOutputDataRate+0x22>
 8002ed4:	2101      	movs	r1, #1
  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002ed6:	f105 0020 	add.w	r0, r5, #32
 8002eda:	f000 f8f7 	bl	80030cc <hts221_data_rate_set>
 8002ede:	b910      	cbnz	r0, 8002ee6 <HTS221_SetOutputDataRate+0x32>
}
 8002ee0:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002ee2:	2103      	movs	r1, #3
 8002ee4:	e7f7      	b.n	8002ed6 <HTS221_SetOutputDataRate+0x22>
    return HTS221_ERROR;
 8002ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eea:	e7f9      	b.n	8002ee0 <HTS221_SetOutputDataRate+0x2c>
 8002eec:	40e00000 	.word	0x40e00000

08002ef0 <HTS221_TEMP_SetOutputDataRate>:
{
 8002ef0:	b508      	push	{r3, lr}
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002ef2:	f7ff ffdf 	bl	8002eb4 <HTS221_SetOutputDataRate>
}
 8002ef6:	bd08      	pop	{r3, pc}

08002ef8 <HTS221_GetOutputDataRate>:
{
 8002ef8:	b510      	push	{r4, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8002efe:	f10d 0107 	add.w	r1, sp, #7
 8002f02:	3020      	adds	r0, #32
 8002f04:	f000 f8fb 	bl	80030fe <hts221_data_rate_get>
 8002f08:	b9a8      	cbnz	r0, 8002f36 <HTS221_GetOutputDataRate+0x3e>
  switch (odr_low_level)
 8002f0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d814      	bhi.n	8002f3c <HTS221_GetOutputDataRate+0x44>
 8002f12:	e8df f003 	tbb	[pc, r3]
 8002f16:	0602      	.short	0x0602
 8002f18:	0d0a      	.short	0x0d0a
      *Odr = 0.0f;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6023      	str	r3, [r4, #0]
}
 8002f1e:	b002      	add	sp, #8
 8002f20:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8002f22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002f26:	6023      	str	r3, [r4, #0]
      break;
 8002f28:	e7f9      	b.n	8002f1e <HTS221_GetOutputDataRate+0x26>
      *Odr = 7.0f;
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HTS221_GetOutputDataRate+0x4c>)
 8002f2c:	6023      	str	r3, [r4, #0]
      break;
 8002f2e:	e7f6      	b.n	8002f1e <HTS221_GetOutputDataRate+0x26>
      *Odr = 12.5f;
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HTS221_GetOutputDataRate+0x50>)
 8002f32:	6023      	str	r3, [r4, #0]
      break;
 8002f34:	e7f3      	b.n	8002f1e <HTS221_GetOutputDataRate+0x26>
    return HTS221_ERROR;
 8002f36:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3a:	e7f0      	b.n	8002f1e <HTS221_GetOutputDataRate+0x26>
  switch (odr_low_level)
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	e7ed      	b.n	8002f1e <HTS221_GetOutputDataRate+0x26>
 8002f42:	bf00      	nop
 8002f44:	40e00000 	.word	0x40e00000
 8002f48:	41480000 	.word	0x41480000

08002f4c <HTS221_TEMP_GetOutputDataRate>:
{
 8002f4c:	b508      	push	{r3, lr}
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002f4e:	f7ff ffd3 	bl	8002ef8 <HTS221_GetOutputDataRate>
}
 8002f52:	bd08      	pop	{r3, pc}

08002f54 <HTS221_HUM_GetHumidity>:
{
 8002f54:	b530      	push	{r4, r5, lr}
 8002f56:	b087      	sub	sp, #28
 8002f58:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002f5a:	f100 0420 	add.w	r4, r0, #32
 8002f5e:	a901      	add	r1, sp, #4
 8002f60:	4620      	mov	r0, r4
 8002f62:	f000 f9a3 	bl	80032ac <hts221_hum_adc_point_0_get>
 8002f66:	bb88      	cbnz	r0, 8002fcc <HTS221_HUM_GetHumidity+0x78>
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002f68:	a902      	add	r1, sp, #8
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f000 f926 	bl	80031bc <hts221_hum_rh_point_0_get>
 8002f70:	bb78      	cbnz	r0, 8002fd2 <HTS221_HUM_GetHumidity+0x7e>
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002f72:	a903      	add	r1, sp, #12
 8002f74:	4620      	mov	r0, r4
 8002f76:	f000 f9af 	bl	80032d8 <hts221_hum_adc_point_1_get>
 8002f7a:	bb68      	cbnz	r0, 8002fd8 <HTS221_HUM_GetHumidity+0x84>
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002f7c:	a904      	add	r1, sp, #16
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f000 f932 	bl	80031e8 <hts221_hum_rh_point_1_get>
 8002f84:	bb58      	cbnz	r0, 8002fde <HTS221_HUM_GetHumidity+0x8a>
  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8002f8c:	a905      	add	r1, sp, #20
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f000 f8d7 	bl	8003142 <hts221_humidity_raw_get>
 8002f94:	4604      	mov	r4, r0
 8002f96:	bb28      	cbnz	r0, 8002fe4 <HTS221_HUM_GetHumidity+0x90>
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002f98:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8002f9c:	f7fd fc1a 	bl	80007d4 <__aeabi_i2f>
 8002fa0:	4601      	mov	r1, r0
 8002fa2:	a801      	add	r0, sp, #4
 8002fa4:	f7ff ff07 	bl	8002db6 <Linear_Interpolation>
 8002fa8:	6028      	str	r0, [r5, #0]
  if (*Value < 0.0f)
 8002faa:	2100      	movs	r1, #0
 8002fac:	f7fd fe04 	bl	8000bb8 <__aeabi_fcmplt>
 8002fb0:	b948      	cbnz	r0, 8002fc6 <HTS221_HUM_GetHumidity+0x72>
  if (*Value > 100.0f)
 8002fb2:	490e      	ldr	r1, [pc, #56]	; (8002fec <HTS221_HUM_GetHumidity+0x98>)
 8002fb4:	6828      	ldr	r0, [r5, #0]
 8002fb6:	f7fd fe1d 	bl	8000bf4 <__aeabi_fcmpgt>
 8002fba:	b108      	cbz	r0, 8002fc0 <HTS221_HUM_GetHumidity+0x6c>
    *Value = 100.0f;
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HTS221_HUM_GetHumidity+0x98>)
 8002fbe:	602b      	str	r3, [r5, #0]
}
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	b007      	add	sp, #28
 8002fc4:	bd30      	pop	{r4, r5, pc}
    *Value = 0.0f;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	602b      	str	r3, [r5, #0]
 8002fca:	e7f2      	b.n	8002fb2 <HTS221_HUM_GetHumidity+0x5e>
    return HTS221_ERROR;
 8002fcc:	f04f 34ff 	mov.w	r4, #4294967295
 8002fd0:	e7f6      	b.n	8002fc0 <HTS221_HUM_GetHumidity+0x6c>
    return HTS221_ERROR;
 8002fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8002fd6:	e7f3      	b.n	8002fc0 <HTS221_HUM_GetHumidity+0x6c>
    return HTS221_ERROR;
 8002fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8002fdc:	e7f0      	b.n	8002fc0 <HTS221_HUM_GetHumidity+0x6c>
    return HTS221_ERROR;
 8002fde:	f04f 34ff 	mov.w	r4, #4294967295
 8002fe2:	e7ed      	b.n	8002fc0 <HTS221_HUM_GetHumidity+0x6c>
    return HTS221_ERROR;
 8002fe4:	f04f 34ff 	mov.w	r4, #4294967295
 8002fe8:	e7ea      	b.n	8002fc0 <HTS221_HUM_GetHumidity+0x6c>
 8002fea:	bf00      	nop
 8002fec:	42c80000 	.word	0x42c80000

08002ff0 <HTS221_TEMP_GetTemperature>:
{
 8002ff0:	b530      	push	{r4, r5, lr}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8002ff6:	f100 0420 	add.w	r4, r0, #32
 8002ffa:	a901      	add	r1, sp, #4
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f000 f981 	bl	8003304 <hts221_temp_adc_point_0_get>
 8003002:	bb18      	cbnz	r0, 800304c <HTS221_TEMP_GetTemperature+0x5c>
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8003004:	a902      	add	r1, sp, #8
 8003006:	4620      	mov	r0, r4
 8003008:	f000 f904 	bl	8003214 <hts221_temp_deg_point_0_get>
 800300c:	bb08      	cbnz	r0, 8003052 <HTS221_TEMP_GetTemperature+0x62>
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 800300e:	a903      	add	r1, sp, #12
 8003010:	4620      	mov	r0, r4
 8003012:	f000 f98d 	bl	8003330 <hts221_temp_adc_point_1_get>
 8003016:	b9f8      	cbnz	r0, 8003058 <HTS221_TEMP_GetTemperature+0x68>
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8003018:	a904      	add	r1, sp, #16
 800301a:	4620      	mov	r0, r4
 800301c:	f000 f920 	bl	8003260 <hts221_temp_deg_point_1_get>
 8003020:	b9e8      	cbnz	r0, 800305e <HTS221_TEMP_GetTemperature+0x6e>
  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8003022:	2300      	movs	r3, #0
 8003024:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8003028:	a905      	add	r1, sp, #20
 800302a:	4620      	mov	r0, r4
 800302c:	f000 f89b 	bl	8003166 <hts221_temperature_raw_get>
 8003030:	4604      	mov	r4, r0
 8003032:	b9b8      	cbnz	r0, 8003064 <HTS221_TEMP_GetTemperature+0x74>
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003034:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8003038:	f7fd fbcc 	bl	80007d4 <__aeabi_i2f>
 800303c:	4601      	mov	r1, r0
 800303e:	a801      	add	r0, sp, #4
 8003040:	f7ff feb9 	bl	8002db6 <Linear_Interpolation>
 8003044:	6028      	str	r0, [r5, #0]
}
 8003046:	4620      	mov	r0, r4
 8003048:	b007      	add	sp, #28
 800304a:	bd30      	pop	{r4, r5, pc}
    return HTS221_ERROR;
 800304c:	f04f 34ff 	mov.w	r4, #4294967295
 8003050:	e7f9      	b.n	8003046 <HTS221_TEMP_GetTemperature+0x56>
    return HTS221_ERROR;
 8003052:	f04f 34ff 	mov.w	r4, #4294967295
 8003056:	e7f6      	b.n	8003046 <HTS221_TEMP_GetTemperature+0x56>
    return HTS221_ERROR;
 8003058:	f04f 34ff 	mov.w	r4, #4294967295
 800305c:	e7f3      	b.n	8003046 <HTS221_TEMP_GetTemperature+0x56>
    return HTS221_ERROR;
 800305e:	f04f 34ff 	mov.w	r4, #4294967295
 8003062:	e7f0      	b.n	8003046 <HTS221_TEMP_GetTemperature+0x56>
    return HTS221_ERROR;
 8003064:	f04f 34ff 	mov.w	r4, #4294967295
 8003068:	e7ed      	b.n	8003046 <HTS221_TEMP_GetTemperature+0x56>
	...

0800306c <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 800306c:	b1c8      	cbz	r0, 80030a2 <HTS221_RegisterBusIO+0x36>
{
 800306e:	b508      	push	{r3, lr}
 8003070:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8003072:	680a      	ldr	r2, [r1, #0]
 8003074:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003076:	6848      	ldr	r0, [r1, #4]
 8003078:	6058      	str	r0, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800307a:	6888      	ldr	r0, [r1, #8]
 800307c:	6098      	str	r0, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800307e:	7b08      	ldrb	r0, [r1, #12]
 8003080:	7318      	strb	r0, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003082:	6908      	ldr	r0, [r1, #16]
 8003084:	6118      	str	r0, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003086:	6948      	ldr	r0, [r1, #20]
 8003088:	6158      	str	r0, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800308a:	6988      	ldr	r0, [r1, #24]
 800308c:	6198      	str	r0, [r3, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800308e:	4808      	ldr	r0, [pc, #32]	; (80030b0 <HTS221_RegisterBusIO+0x44>)
 8003090:	6258      	str	r0, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003092:	4808      	ldr	r0, [pc, #32]	; (80030b4 <HTS221_RegisterBusIO+0x48>)
 8003094:	6218      	str	r0, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003096:	69c9      	ldr	r1, [r1, #28]
 8003098:	6299      	str	r1, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800309a:	62db      	str	r3, [r3, #44]	; 0x2c
    if (pObj->IO.Init != NULL)
 800309c:	b122      	cbz	r2, 80030a8 <HTS221_RegisterBusIO+0x3c>
      ret = pObj->IO.Init();
 800309e:	4790      	blx	r2
}
 80030a0:	bd08      	pop	{r3, pc}
    ret = HTS221_ERROR;
 80030a2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80030a6:	4770      	bx	lr
      ret = HTS221_ERROR;
 80030a8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80030ac:	e7f8      	b.n	80030a0 <HTS221_RegisterBusIO+0x34>
 80030ae:	bf00      	nop
 80030b0:	08002e13 	.word	0x08002e13
 80030b4:	08002e31 	.word	0x08002e31

080030b8 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80030b8:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80030ba:	6844      	ldr	r4, [r0, #4]
 80030bc:	68c0      	ldr	r0, [r0, #12]
 80030be:	47a0      	blx	r4

  return ret;
}
 80030c0:	bd10      	pop	{r4, pc}

080030c2 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80030c2:	b510      	push	{r4, lr}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80030c4:	6804      	ldr	r4, [r0, #0]
 80030c6:	68c0      	ldr	r0, [r0, #12]
 80030c8:	47a0      	blx	r4

  return ret;
}
 80030ca:	bd10      	pop	{r4, pc}

080030cc <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80030cc:	b530      	push	{r4, r5, lr}
 80030ce:	b083      	sub	sp, #12
 80030d0:	4604      	mov	r4, r0
 80030d2:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80030d4:	2301      	movs	r3, #1
 80030d6:	aa01      	add	r2, sp, #4
 80030d8:	2120      	movs	r1, #32
 80030da:	f7ff ffed 	bl	80030b8 <hts221_read_reg>

  if (ret == 0)
 80030de:	b108      	cbz	r0, 80030e4 <hts221_data_rate_set+0x18>
    reg.odr = (uint8_t)val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 80030e0:	b003      	add	sp, #12
 80030e2:	bd30      	pop	{r4, r5, pc}
    reg.odr = (uint8_t)val;
 80030e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80030e8:	f365 0301 	bfi	r3, r5, #0, #2
 80030ec:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80030f0:	2301      	movs	r3, #1
 80030f2:	aa01      	add	r2, sp, #4
 80030f4:	2120      	movs	r1, #32
 80030f6:	4620      	mov	r0, r4
 80030f8:	f7ff ffe3 	bl	80030c2 <hts221_write_reg>
  return ret;
 80030fc:	e7f0      	b.n	80030e0 <hts221_data_rate_set+0x14>

080030fe <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80030fe:	b510      	push	{r4, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	460c      	mov	r4, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003104:	2301      	movs	r3, #1
 8003106:	aa01      	add	r2, sp, #4
 8003108:	2120      	movs	r1, #32
 800310a:	f7ff ffd5 	bl	80030b8 <hts221_read_reg>

  switch (reg.odr)
 800310e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b03      	cmp	r3, #3
 8003118:	d810      	bhi.n	800313c <hts221_data_rate_get+0x3e>
 800311a:	e8df f003 	tbb	[pc, r3]
 800311e:	0602      	.short	0x0602
 8003120:	0c09      	.short	0x0c09
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8003122:	2300      	movs	r3, #0
 8003124:	7023      	strb	r3, [r4, #0]
      *val = HTS221_ODR_ND;
      break;
  }

  return ret;
}
 8003126:	b002      	add	sp, #8
 8003128:	bd10      	pop	{r4, pc}
      *val = HTS221_ODR_1Hz;
 800312a:	2301      	movs	r3, #1
 800312c:	7023      	strb	r3, [r4, #0]
      break;
 800312e:	e7fa      	b.n	8003126 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_7Hz;
 8003130:	2302      	movs	r3, #2
 8003132:	7023      	strb	r3, [r4, #0]
      break;
 8003134:	e7f7      	b.n	8003126 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_12Hz5;
 8003136:	2303      	movs	r3, #3
 8003138:	7023      	strb	r3, [r4, #0]
      break;
 800313a:	e7f4      	b.n	8003126 <hts221_data_rate_get+0x28>
      *val = HTS221_ODR_ND;
 800313c:	2304      	movs	r3, #4
 800313e:	7023      	strb	r3, [r4, #0]
  return ret;
 8003140:	e7f1      	b.n	8003126 <hts221_data_rate_get+0x28>

08003142 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003142:	b510      	push	{r4, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	460c      	mov	r4, r1
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003148:	2302      	movs	r3, #2
 800314a:	aa01      	add	r2, sp, #4
 800314c:	2128      	movs	r1, #40	; 0x28
 800314e:	f7ff ffb3 	bl	80030b8 <hts221_read_reg>
  *val = (int16_t)buff[1];
 8003152:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003156:	8022      	strh	r2, [r4, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003158:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800315c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003160:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8003162:	b002      	add	sp, #8
 8003164:	bd10      	pop	{r4, pc}

08003166 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003166:	b510      	push	{r4, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	460c      	mov	r4, r1
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800316c:	2302      	movs	r3, #2
 800316e:	aa01      	add	r2, sp, #4
 8003170:	212a      	movs	r1, #42	; 0x2a
 8003172:	f7ff ffa1 	bl	80030b8 <hts221_read_reg>
  *val = (int16_t)buff[1];
 8003176:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800317a:	8022      	strh	r2, [r4, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800317c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003180:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003184:	8023      	strh	r3, [r4, #0]

  return ret;
}
 8003186:	b002      	add	sp, #8
 8003188:	bd10      	pop	{r4, pc}

0800318a <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800318a:	b530      	push	{r4, r5, lr}
 800318c:	b083      	sub	sp, #12
 800318e:	4604      	mov	r4, r0
 8003190:	460d      	mov	r5, r1
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003192:	2301      	movs	r3, #1
 8003194:	aa01      	add	r2, sp, #4
 8003196:	2120      	movs	r1, #32
 8003198:	f7ff ff8e 	bl	80030b8 <hts221_read_reg>

  if (ret == 0)
 800319c:	b108      	cbz	r0, 80031a2 <hts221_power_on_set+0x18>
    reg.pd = val;
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
  }

  return ret;
}
 800319e:	b003      	add	sp, #12
 80031a0:	bd30      	pop	{r4, r5, pc}
    reg.pd = val;
 80031a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031a6:	f365 13c7 	bfi	r3, r5, #7, #1
 80031aa:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80031ae:	2301      	movs	r3, #1
 80031b0:	aa01      	add	r2, sp, #4
 80031b2:	2120      	movs	r1, #32
 80031b4:	4620      	mov	r0, r4
 80031b6:	f7ff ff84 	bl	80030c2 <hts221_write_reg>
  return ret;
 80031ba:	e7f0      	b.n	800319e <hts221_power_on_set+0x14>

080031bc <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80031bc:	b530      	push	{r4, r5, lr}
 80031be:	b083      	sub	sp, #12
 80031c0:	460d      	mov	r5, r1
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80031c2:	2301      	movs	r3, #1
 80031c4:	f10d 0207 	add.w	r2, sp, #7
 80031c8:	2130      	movs	r1, #48	; 0x30
 80031ca:	f7ff ff75 	bl	80030b8 <hts221_read_reg>
 80031ce:	4604      	mov	r4, r0
  *val = coeff / 2.0f;
 80031d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80031d4:	f7fd fafe 	bl	80007d4 <__aeabi_i2f>
 80031d8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80031dc:	f7fd fb4e 	bl	800087c <__aeabi_fmul>
 80031e0:	6028      	str	r0, [r5, #0]

  return ret;
}
 80031e2:	4620      	mov	r0, r4
 80031e4:	b003      	add	sp, #12
 80031e6:	bd30      	pop	{r4, r5, pc}

080031e8 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80031e8:	b530      	push	{r4, r5, lr}
 80031ea:	b083      	sub	sp, #12
 80031ec:	460d      	mov	r5, r1
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80031ee:	2301      	movs	r3, #1
 80031f0:	f10d 0207 	add.w	r2, sp, #7
 80031f4:	2131      	movs	r1, #49	; 0x31
 80031f6:	f7ff ff5f 	bl	80030b8 <hts221_read_reg>
 80031fa:	4604      	mov	r4, r0
  *val = coeff / 2.0f;
 80031fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003200:	f7fd fae8 	bl	80007d4 <__aeabi_i2f>
 8003204:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003208:	f7fd fb38 	bl	800087c <__aeabi_fmul>
 800320c:	6028      	str	r0, [r5, #0]

  return ret;
}
 800320e:	4620      	mov	r0, r4
 8003210:	b003      	add	sp, #12
 8003212:	bd30      	pop	{r4, r5, pc}

08003214 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	4604      	mov	r4, r0
 800321a:	460e      	mov	r6, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800321c:	2301      	movs	r3, #1
 800321e:	f10d 0203 	add.w	r2, sp, #3
 8003222:	2132      	movs	r1, #50	; 0x32
 8003224:	f7ff ff48 	bl	80030b8 <hts221_read_reg>

  if (ret == 0)
 8003228:	4605      	mov	r5, r0
 800322a:	b110      	cbz	r0, 8003232 <hts221_temp_deg_point_0_get+0x1e>
    coeff_h = reg.t0_msb;
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
  }

  return ret;
}
 800322c:	4628      	mov	r0, r5
 800322e:	b002      	add	sp, #8
 8003230:	bd70      	pop	{r4, r5, r6, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003232:	2301      	movs	r3, #1
 8003234:	aa01      	add	r2, sp, #4
 8003236:	2135      	movs	r1, #53	; 0x35
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff ff3d 	bl	80030b8 <hts221_read_reg>
 800323e:	4605      	mov	r5, r0
    coeff_h = reg.t0_msb;
 8003240:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003248:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800324c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8003250:	f7fd fac0 	bl	80007d4 <__aeabi_i2f>
 8003254:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8003258:	f7fd fb10 	bl	800087c <__aeabi_fmul>
 800325c:	6030      	str	r0, [r6, #0]
  return ret;
 800325e:	e7e5      	b.n	800322c <hts221_temp_deg_point_0_get+0x18>

08003260 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	4604      	mov	r4, r0
 8003266:	460e      	mov	r6, r1
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003268:	2301      	movs	r3, #1
 800326a:	f10d 0203 	add.w	r2, sp, #3
 800326e:	2133      	movs	r1, #51	; 0x33
 8003270:	f7ff ff22 	bl	80030b8 <hts221_read_reg>

  if (ret == 0)
 8003274:	4605      	mov	r5, r0
 8003276:	b110      	cbz	r0, 800327e <hts221_temp_deg_point_1_get+0x1e>
    coeff_h = reg.t1_msb;
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
  }

  return ret;
}
 8003278:	4628      	mov	r0, r5
 800327a:	b002      	add	sp, #8
 800327c:	bd70      	pop	{r4, r5, r6, pc}
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800327e:	2301      	movs	r3, #1
 8003280:	aa01      	add	r2, sp, #4
 8003282:	2135      	movs	r1, #53	; 0x35
 8003284:	4620      	mov	r0, r4
 8003286:	f7ff ff17 	bl	80030b8 <hts221_read_reg>
 800328a:	4605      	mov	r5, r0
    coeff_h = reg.t1_msb;
 800328c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003290:	f3c3 0381 	ubfx	r3, r3, #2, #2
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003294:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003298:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800329c:	f7fd fa9a 	bl	80007d4 <__aeabi_i2f>
 80032a0:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80032a4:	f7fd faea 	bl	800087c <__aeabi_fmul>
 80032a8:	6030      	str	r0, [r6, #0]
  return ret;
 80032aa:	e7e5      	b.n	8003278 <hts221_temp_deg_point_1_get+0x18>

080032ac <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80032ac:	b530      	push	{r4, r5, lr}
 80032ae:	b083      	sub	sp, #12
 80032b0:	460d      	mov	r5, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80032b2:	2302      	movs	r3, #2
 80032b4:	aa01      	add	r2, sp, #4
 80032b6:	2136      	movs	r1, #54	; 0x36
 80032b8:	f7ff fefe 	bl	80030b8 <hts221_read_reg>
 80032bc:	4604      	mov	r4, r0
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80032be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80032c2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80032c6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
  *val = coeff * 1.0f;
 80032ca:	b200      	sxth	r0, r0
 80032cc:	f7fd fa82 	bl	80007d4 <__aeabi_i2f>
 80032d0:	6028      	str	r0, [r5, #0]

  return ret;
}
 80032d2:	4620      	mov	r0, r4
 80032d4:	b003      	add	sp, #12
 80032d6:	bd30      	pop	{r4, r5, pc}

080032d8 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80032d8:	b530      	push	{r4, r5, lr}
 80032da:	b083      	sub	sp, #12
 80032dc:	460d      	mov	r5, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80032de:	2302      	movs	r3, #2
 80032e0:	aa01      	add	r2, sp, #4
 80032e2:	213a      	movs	r1, #58	; 0x3a
 80032e4:	f7ff fee8 	bl	80030b8 <hts221_read_reg>
 80032e8:	4604      	mov	r4, r0
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80032ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80032ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80032f2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
  *val = coeff * 1.0f;
 80032f6:	b200      	sxth	r0, r0
 80032f8:	f7fd fa6c 	bl	80007d4 <__aeabi_i2f>
 80032fc:	6028      	str	r0, [r5, #0]

  return ret;
}
 80032fe:	4620      	mov	r0, r4
 8003300:	b003      	add	sp, #12
 8003302:	bd30      	pop	{r4, r5, pc}

08003304 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003304:	b530      	push	{r4, r5, lr}
 8003306:	b083      	sub	sp, #12
 8003308:	460d      	mov	r5, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 800330a:	2302      	movs	r3, #2
 800330c:	aa01      	add	r2, sp, #4
 800330e:	213c      	movs	r1, #60	; 0x3c
 8003310:	f7ff fed2 	bl	80030b8 <hts221_read_reg>
 8003314:	4604      	mov	r4, r0
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003316:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800331a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800331e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
  *val = coeff * 1.0f;
 8003322:	b200      	sxth	r0, r0
 8003324:	f7fd fa56 	bl	80007d4 <__aeabi_i2f>
 8003328:	6028      	str	r0, [r5, #0]

  return ret;
}
 800332a:	4620      	mov	r0, r4
 800332c:	b003      	add	sp, #12
 800332e:	bd30      	pop	{r4, r5, pc}

08003330 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003330:	b530      	push	{r4, r5, lr}
 8003332:	b083      	sub	sp, #12
 8003334:	460d      	mov	r5, r1
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003336:	2302      	movs	r3, #2
 8003338:	aa01      	add	r2, sp, #4
 800333a:	213e      	movs	r1, #62	; 0x3e
 800333c:	f7ff febc 	bl	80030b8 <hts221_read_reg>
 8003340:	4604      	mov	r4, r0
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003342:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003346:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800334a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
  *val = coeff * 1.0f;
 800334e:	b200      	sxth	r0, r0
 8003350:	f7fd fa40 	bl	80007d4 <__aeabi_i2f>
 8003354:	6028      	str	r0, [r5, #0]

  return ret;
}
 8003356:	4620      	mov	r0, r4
 8003358:	b003      	add	sp, #12
 800335a:	bd30      	pop	{r4, r5, pc}

0800335c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800335c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003360:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003362:	2400      	movs	r4, #0
 8003364:	9401      	str	r4, [sp, #4]
 8003366:	9402      	str	r4, [sp, #8]
 8003368:	9403      	str	r4, [sp, #12]
 800336a:	9404      	str	r4, [sp, #16]
 800336c:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800336e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003374:	f042 0204 	orr.w	r2, r2, #4
 8003378:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800337a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003382:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003384:	2710      	movs	r7, #16
 8003386:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003388:	2301      	movs	r3, #1
 800338a:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338c:	2303      	movs	r3, #3
 800338e:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003390:	4d12      	ldr	r5, [pc, #72]	; (80033dc <BSP_RADIO_Init+0x80>)
 8003392:	a901      	add	r1, sp, #4
 8003394:	4628      	mov	r0, r5
 8003396:	f001 f9e1 	bl	800475c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800339a:	f04f 0820 	mov.w	r8, #32
 800339e:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80033a2:	a901      	add	r1, sp, #4
 80033a4:	4628      	mov	r0, r5
 80033a6:	f001 f9d9 	bl	800475c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80033aa:	2608      	movs	r6, #8
 80033ac:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80033ae:	a901      	add	r1, sp, #4
 80033b0:	4628      	mov	r0, r5
 80033b2:	f001 f9d3 	bl	800475c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80033b6:	4622      	mov	r2, r4
 80033b8:	4641      	mov	r1, r8
 80033ba:	4628      	mov	r0, r5
 80033bc:	f001 fb1e 	bl	80049fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80033c0:	4622      	mov	r2, r4
 80033c2:	4639      	mov	r1, r7
 80033c4:	4628      	mov	r0, r5
 80033c6:	f001 fb19 	bl	80049fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80033ca:	4622      	mov	r2, r4
 80033cc:	4631      	mov	r1, r6
 80033ce:	4628      	mov	r0, r5
 80033d0:	f001 fb14 	bl	80049fc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80033d4:	4620      	mov	r0, r4
 80033d6:	b006      	add	sp, #24
 80033d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033dc:	48000800 	.word	0x48000800

080033e0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80033e0:	b510      	push	{r4, lr}
  switch (Config)
 80033e2:	2803      	cmp	r0, #3
 80033e4:	d813      	bhi.n	800340e <BSP_RADIO_ConfigRFSwitch+0x2e>
 80033e6:	e8df f000 	tbb	[pc, r0]
 80033ea:	1402      	.short	0x1402
 80033ec:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80033ee:	4c22      	ldr	r4, [pc, #136]	; (8003478 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	2108      	movs	r1, #8
 80033f4:	4620      	mov	r0, r4
 80033f6:	f001 fb01 	bl	80049fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80033fa:	2200      	movs	r2, #0
 80033fc:	2110      	movs	r1, #16
 80033fe:	4620      	mov	r0, r4
 8003400:	f001 fafc 	bl	80049fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003404:	2200      	movs	r2, #0
 8003406:	2120      	movs	r1, #32
 8003408:	4620      	mov	r0, r4
 800340a:	f001 faf7 	bl	80049fc <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 800340e:	2000      	movs	r0, #0
 8003410:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003412:	4c19      	ldr	r4, [pc, #100]	; (8003478 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003414:	2201      	movs	r2, #1
 8003416:	2108      	movs	r1, #8
 8003418:	4620      	mov	r0, r4
 800341a:	f001 faef 	bl	80049fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800341e:	2201      	movs	r2, #1
 8003420:	2110      	movs	r1, #16
 8003422:	4620      	mov	r0, r4
 8003424:	f001 faea 	bl	80049fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003428:	2200      	movs	r2, #0
 800342a:	2120      	movs	r1, #32
 800342c:	4620      	mov	r0, r4
 800342e:	f001 fae5 	bl	80049fc <HAL_GPIO_WritePin>
      break;
 8003432:	e7ec      	b.n	800340e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003434:	4c10      	ldr	r4, [pc, #64]	; (8003478 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003436:	2201      	movs	r2, #1
 8003438:	2108      	movs	r1, #8
 800343a:	4620      	mov	r0, r4
 800343c:	f001 fade 	bl	80049fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003440:	2201      	movs	r2, #1
 8003442:	2110      	movs	r1, #16
 8003444:	4620      	mov	r0, r4
 8003446:	f001 fad9 	bl	80049fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800344a:	2201      	movs	r2, #1
 800344c:	2120      	movs	r1, #32
 800344e:	4620      	mov	r0, r4
 8003450:	f001 fad4 	bl	80049fc <HAL_GPIO_WritePin>
      break;
 8003454:	e7db      	b.n	800340e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003456:	4c08      	ldr	r4, [pc, #32]	; (8003478 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003458:	2201      	movs	r2, #1
 800345a:	2108      	movs	r1, #8
 800345c:	4620      	mov	r0, r4
 800345e:	f001 facd 	bl	80049fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003462:	2200      	movs	r2, #0
 8003464:	2110      	movs	r1, #16
 8003466:	4620      	mov	r0, r4
 8003468:	f001 fac8 	bl	80049fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800346c:	2201      	movs	r2, #1
 800346e:	2120      	movs	r1, #32
 8003470:	4620      	mov	r0, r4
 8003472:	f001 fac3 	bl	80049fc <HAL_GPIO_WritePin>
      break;
 8003476:	e7ca      	b.n	800340e <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003478:	48000800 	.word	0x48000800

0800347c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 800347c:	2000      	movs	r0, #0
 800347e:	4770      	bx	lr

08003480 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8003480:	2001      	movs	r0, #1
 8003482:	4770      	bx	lr

08003484 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003484:	2001      	movs	r0, #1
 8003486:	4770      	bx	lr

08003488 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003488:	b908      	cbnz	r0, 800348e <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800348a:	200f      	movs	r0, #15
 800348c:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800348e:	2016      	movs	r0, #22
  }

  return ret;
}
 8003490:	4770      	bx	lr

08003492 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003492:	4770      	bx	lr

08003494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003494:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003496:	2003      	movs	r0, #3
 8003498:	f000 fd22 	bl	8003ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800349c:	f002 fa42 	bl	8005924 <HAL_RCC_GetHCLKFreq>
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_Init+0x28>)
 80034a2:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034a4:	200f      	movs	r0, #15
 80034a6:	f7fe fba7 	bl	8001bf8 <HAL_InitTick>
 80034aa:	b110      	cbz	r0, 80034b2 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80034ac:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80034ae:	4620      	mov	r0, r4
 80034b0:	bd10      	pop	{r4, pc}
 80034b2:	4604      	mov	r4, r0
    HAL_MspInit();
 80034b4:	f7fe f98e 	bl	80017d4 <HAL_MspInit>
 80034b8:	e7f9      	b.n	80034ae <HAL_Init+0x1a>
 80034ba:	bf00      	nop
 80034bc:	20000074 	.word	0x20000074

080034c0 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80034c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80034c4:	6913      	ldr	r3, [r2, #16]
 80034c6:	f023 0302 	bic.w	r3, r3, #2
 80034ca:	6113      	str	r3, [r2, #16]
}
 80034cc:	4770      	bx	lr

080034ce <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80034ce:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80034d2:	6913      	ldr	r3, [r2, #16]
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	6113      	str	r3, [r2, #16]
}
 80034da:	4770      	bx	lr

080034dc <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 80034dc:	4b01      	ldr	r3, [pc, #4]	; (80034e4 <HAL_GetUIDw0+0x8>)
 80034de:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 80034e2:	4770      	bx	lr
 80034e4:	1fff7000 	.word	0x1fff7000

080034e8 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 80034e8:	4b01      	ldr	r3, [pc, #4]	; (80034f0 <HAL_GetUIDw1+0x8>)
 80034ea:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 80034ee:	4770      	bx	lr
 80034f0:	1fff7000 	.word	0x1fff7000

080034f4 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80034f4:	4b01      	ldr	r3, [pc, #4]	; (80034fc <HAL_GetUIDw2+0x8>)
 80034f6:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80034fa:	4770      	bx	lr
 80034fc:	1fff7000 	.word	0x1fff7000

08003500 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003500:	4a02      	ldr	r2, [pc, #8]	; (800350c <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8003502:	6853      	ldr	r3, [r2, #4]
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 800350a:	4770      	bx	lr
 800350c:	e0042000 	.word	0xe0042000

08003510 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003510:	4a02      	ldr	r2, [pc, #8]	; (800351c <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8003512:	6853      	ldr	r3, [r2, #4]
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 800351a:	4770      	bx	lr
 800351c:	e0042000 	.word	0xe0042000

08003520 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003520:	4a02      	ldr	r2, [pc, #8]	; (800352c <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8003522:	6853      	ldr	r3, [r2, #4]
 8003524:	f043 0304 	orr.w	r3, r3, #4
 8003528:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 800352a:	4770      	bx	lr
 800352c:	e0042000 	.word	0xe0042000

08003530 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003530:	b530      	push	{r4, r5, lr}
 8003532:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003534:	2300      	movs	r3, #0
 8003536:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003538:	2800      	cmp	r0, #0
 800353a:	f000 8106 	beq.w	800374a <HAL_ADC_Init+0x21a>
 800353e:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003540:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003542:	b1bb      	cbz	r3, 8003574 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003544:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003546:	6893      	ldr	r3, [r2, #8]
 8003548:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800354c:	d11f      	bne.n	800358e <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 800354e:	6893      	ldr	r3, [r2, #8]
 8003550:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003554:	f023 0317 	bic.w	r3, r3, #23
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800355e:	4b7c      	ldr	r3, [pc, #496]	; (8003750 <HAL_ADC_Init+0x220>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	099b      	lsrs	r3, r3, #6
 8003564:	4a7b      	ldr	r2, [pc, #492]	; (8003754 <HAL_ADC_Init+0x224>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	3301      	adds	r3, #1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003572:	e009      	b.n	8003588 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003574:	f7fd fd4c 	bl	8001010 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003578:	2300      	movs	r3, #0
 800357a:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800357c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003580:	e7e0      	b.n	8003544 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8003582:	9b01      	ldr	r3, [sp, #4]
 8003584:	3b01      	subs	r3, #1
 8003586:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003588:	9b01      	ldr	r3, [sp, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f9      	bne.n	8003582 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800358e:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003590:	6893      	ldr	r3, [r2, #8]
 8003592:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003596:	f040 809a 	bne.w	80036ce <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800359c:	f043 0310 	orr.w	r3, r3, #16
 80035a0:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80035aa:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035ac:	6893      	ldr	r3, [r2, #8]
 80035ae:	f013 0304 	ands.w	r3, r3, #4
 80035b2:	d000      	beq.n	80035b6 <HAL_ADC_Init+0x86>
 80035b4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80035b8:	f011 0f10 	tst.w	r1, #16
 80035bc:	f040 80be 	bne.w	800373c <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 80bb 	bne.w	800373c <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035d2:	6893      	ldr	r3, [r2, #8]
 80035d4:	f013 0f01 	tst.w	r3, #1
 80035d8:	d14f      	bne.n	800367a <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80035da:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80035dc:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80035de:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80035e2:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80035e4:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80035e8:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80035ea:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80035ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80035f0:	b109      	cbz	r1, 80035f6 <HAL_ADC_Init+0xc6>
 80035f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80035f6:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 80035f8:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80035fa:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035fc:	6921      	ldr	r1, [r4, #16]
 80035fe:	2900      	cmp	r1, #0
 8003600:	db67      	blt.n	80036d2 <HAL_ADC_Init+0x1a2>
 8003602:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003606:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003608:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800360c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003610:	f894 1020 	ldrb.w	r1, [r4, #32]
 8003614:	2901      	cmp	r1, #1
 8003616:	d05f      	beq.n	80036d8 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003618:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800361a:	b121      	cbz	r1, 8003626 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800361c:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003620:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003622:	4329      	orrs	r1, r5
 8003624:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003626:	68d1      	ldr	r1, [r2, #12]
 8003628:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 800362c:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 8003630:	4319      	orrs	r1, r3
 8003632:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003634:	6863      	ldr	r3, [r4, #4]
 8003636:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800363a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800363c:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800363e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8003642:	2901      	cmp	r1, #1
 8003644:	d055      	beq.n	80036f2 <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003646:	6821      	ldr	r1, [r4, #0]
 8003648:	690d      	ldr	r5, [r1, #16]
 800364a:	4b43      	ldr	r3, [pc, #268]	; (8003758 <HAL_ADC_Init+0x228>)
 800364c:	402b      	ands	r3, r5
 800364e:	4313      	orrs	r3, r2
 8003650:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003652:	6863      	ldr	r3, [r4, #4]
 8003654:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003658:	d00f      	beq.n	800367a <HAL_ADC_Init+0x14a>
 800365a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365e:	d00c      	beq.n	800367a <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003664:	d009      	beq.n	800367a <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003666:	493d      	ldr	r1, [pc, #244]	; (800375c <HAL_ADC_Init+0x22c>)
 8003668:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 800366c:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8003670:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800367a:	6821      	ldr	r1, [r4, #0]
 800367c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 800367e:	694a      	ldr	r2, [r1, #20]
 8003680:	f022 0207 	bic.w	r2, r2, #7
 8003684:	4313      	orrs	r3, r2
 8003686:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003688:	6822      	ldr	r2, [r4, #0]
 800368a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800368c:	6953      	ldr	r3, [r2, #20]
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003696:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003698:	6923      	ldr	r3, [r4, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d133      	bne.n	8003706 <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80036a2:	f063 030f 	orn	r3, r3, #15
 80036a6:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036a8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 80036b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d039      	beq.n	800372a <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036b8:	f023 0312 	bic.w	r3, r3, #18
 80036bc:	f043 0310 	orr.w	r3, r3, #16
 80036c0:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80036ca:	2001      	movs	r0, #1
 80036cc:	e03b      	b.n	8003746 <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ce:	2000      	movs	r0, #0
 80036d0:	e76c      	b.n	80035ac <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80036d2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80036d6:	e796      	b.n	8003606 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80036d8:	b915      	cbnz	r5, 80036e0 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036de:	e79b      	b.n	8003618 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036e0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80036e2:	f041 0120 	orr.w	r1, r1, #32
 80036e6:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80036ea:	f041 0101 	orr.w	r1, r1, #1
 80036ee:	65e1      	str	r1, [r4, #92]	; 0x5c
 80036f0:	e792      	b.n	8003618 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 80036f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036f4:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 80036f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80036f8:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 80036fa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80036fc:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80036fe:	431a      	orrs	r2, r3
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	e79f      	b.n	8003646 <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003706:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800370a:	d1cd      	bne.n	80036a8 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 800370c:	6821      	ldr	r1, [r4, #0]
 800370e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003710:	69e3      	ldr	r3, [r4, #28]
 8003712:	3b01      	subs	r3, #1
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	f003 031c 	and.w	r3, r3, #28
 800371a:	f06f 020f 	mvn.w	r2, #15
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003724:	4313      	orrs	r3, r2
 8003726:	628b      	str	r3, [r1, #40]	; 0x28
 8003728:	e7be      	b.n	80036a8 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 800372a:	2300      	movs	r3, #0
 800372c:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800372e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003730:	f023 0303 	bic.w	r3, r3, #3
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	65a3      	str	r3, [r4, #88]	; 0x58
 800373a:	e004      	b.n	8003746 <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800373e:	f043 0310 	orr.w	r3, r3, #16
 8003742:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003744:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003746:	b003      	add	sp, #12
 8003748:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800374a:	2001      	movs	r0, #1
 800374c:	e7fb      	b.n	8003746 <HAL_ADC_Init+0x216>
 800374e:	bf00      	nop
 8003750:	20000074 	.word	0x20000074
 8003754:	053e2d63 	.word	0x053e2d63
 8003758:	1ffffc02 	.word	0x1ffffc02
 800375c:	40012000 	.word	0x40012000

08003760 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	4604      	mov	r4, r0
 8003764:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003766:	6946      	ldr	r6, [r0, #20]
 8003768:	2e08      	cmp	r6, #8
 800376a:	d005      	beq.n	8003778 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800376c:	6803      	ldr	r3, [r0, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f013 0f01 	tst.w	r3, #1
 8003774:	d11e      	bne.n	80037b4 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003776:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003778:	f7fe fa40 	bl	8001bfc <HAL_GetTick>
 800377c:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4232      	tst	r2, r6
 8003784:	d11c      	bne.n	80037c0 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003786:	f1b5 3fff 	cmp.w	r5, #4294967295
 800378a:	d0f8      	beq.n	800377e <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800378c:	f7fe fa36 	bl	8001bfc <HAL_GetTick>
 8003790:	1bc3      	subs	r3, r0, r7
 8003792:	42ab      	cmp	r3, r5
 8003794:	d801      	bhi.n	800379a <HAL_ADC_PollForConversion+0x3a>
 8003796:	2d00      	cmp	r5, #0
 8003798:	d1f1      	bne.n	800377e <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4233      	tst	r3, r6
 80037a0:	d1ed      	bne.n	800377e <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80037aa:	2300      	movs	r3, #0
 80037ac:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 80037b0:	2003      	movs	r0, #3
 80037b2:	e028      	b.n	8003806 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80037b6:	f043 0320 	orr.w	r3, r3, #32
 80037ba:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80037bc:	2001      	movs	r0, #1
 80037be:	e022      	b.n	8003806 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037c0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80037c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c6:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80037ce:	d115      	bne.n	80037fc <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80037d0:	7ea2      	ldrb	r2, [r4, #26]
 80037d2:	b99a      	cbnz	r2, 80037fc <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	f012 0f08 	tst.w	r2, #8
 80037da:	d00f      	beq.n	80037fc <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	f012 0f04 	tst.w	r2, #4
 80037e2:	d111      	bne.n	8003808 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	f022 020c 	bic.w	r2, r2, #12
 80037ea:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80037ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80037fc:	7e20      	ldrb	r0, [r4, #24]
 80037fe:	b960      	cbnz	r0, 800381a <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	220c      	movs	r2, #12
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800380a:	f043 0320 	orr.w	r3, r3, #32
 800380e:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003810:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003818:	e7f0      	b.n	80037fc <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 800381a:	2000      	movs	r0, #0
 800381c:	e7f3      	b.n	8003806 <HAL_ADC_PollForConversion+0xa6>

0800381e <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800381e:	6803      	ldr	r3, [r0, #0]
 8003820:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003822:	4770      	bx	lr

08003824 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003824:	b470      	push	{r4, r5, r6}
 8003826:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003828:	2200      	movs	r2, #0
 800382a:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800382c:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800382e:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8003832:	2a01      	cmp	r2, #1
 8003834:	f000 8103 	beq.w	8003a3e <HAL_ADC_ConfigChannel+0x21a>
 8003838:	4603      	mov	r3, r0
 800383a:	2201      	movs	r2, #1
 800383c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003840:	6802      	ldr	r2, [r0, #0]
 8003842:	6890      	ldr	r0, [r2, #8]
 8003844:	f010 0f04 	tst.w	r0, #4
 8003848:	d00a      	beq.n	8003860 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800384a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800384c:	f042 0220 	orr.w	r2, r2, #32
 8003850:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003852:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 800385a:	b003      	add	sp, #12
 800385c:	bc70      	pop	{r4, r5, r6}
 800385e:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003860:	6848      	ldr	r0, [r1, #4]
 8003862:	2802      	cmp	r0, #2
 8003864:	f000 809c 	beq.w	80039a0 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003868:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800386c:	d027      	beq.n	80038be <HAL_ADC_ConfigChannel+0x9a>
 800386e:	4d75      	ldr	r5, [pc, #468]	; (8003a44 <HAL_ADC_ConfigChannel+0x220>)
 8003870:	42ac      	cmp	r4, r5
 8003872:	d024      	beq.n	80038be <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003874:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003876:	f000 001f 	and.w	r0, r0, #31
 800387a:	250f      	movs	r5, #15
 800387c:	4085      	lsls	r5, r0
 800387e:	ea24 0505 	bic.w	r5, r4, r5
 8003882:	680c      	ldr	r4, [r1, #0]
 8003884:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8003888:	2e00      	cmp	r6, #0
 800388a:	d131      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0xcc>
 800388c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003890:	4084      	lsls	r4, r0
 8003892:	432c      	orrs	r4, r5
 8003894:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003896:	684c      	ldr	r4, [r1, #4]
 8003898:	08a0      	lsrs	r0, r4, #2
 800389a:	3001      	adds	r0, #1
 800389c:	69dd      	ldr	r5, [r3, #28]
 800389e:	42a8      	cmp	r0, r5
 80038a0:	d813      	bhi.n	80038ca <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038a2:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80038a4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80038a6:	f004 041f 	and.w	r4, r4, #31
 80038aa:	260f      	movs	r6, #15
 80038ac:	40a6      	lsls	r6, r4
 80038ae:	ea20 0006 	bic.w	r0, r0, r6
 80038b2:	f3c5 6583 	ubfx	r5, r5, #26, #4
 80038b6:	40a5      	lsls	r5, r4
 80038b8:	4328      	orrs	r0, r5
 80038ba:	6290      	str	r0, [r2, #40]	; 0x28
}
 80038bc:	e005      	b.n	80038ca <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80038be:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80038c0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80038c2:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80038c6:	4320      	orrs	r0, r4
 80038c8:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80038ca:	681c      	ldr	r4, [r3, #0]
 80038cc:	680d      	ldr	r5, [r1, #0]
 80038ce:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 80038d0:	6960      	ldr	r0, [r4, #20]
 80038d2:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 80038d6:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 80038da:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 80038de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038e2:	4302      	orrs	r2, r0
 80038e4:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038e6:	680a      	ldr	r2, [r1, #0]
 80038e8:	2a00      	cmp	r2, #0
 80038ea:	db09      	blt.n	8003900 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ec:	2000      	movs	r0, #0
 80038ee:	e7b1      	b.n	8003854 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038f4:	b114      	cbz	r4, 80038fc <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80038f6:	fab4 f484 	clz	r4, r4
 80038fa:	e7c9      	b.n	8003890 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80038fc:	2420      	movs	r4, #32
 80038fe:	e7c7      	b.n	8003890 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003900:	4951      	ldr	r1, [pc, #324]	; (8003a48 <HAL_ADC_ConfigChannel+0x224>)
 8003902:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8003906:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800390a:	4c50      	ldr	r4, [pc, #320]	; (8003a4c <HAL_ADC_ConfigChannel+0x228>)
 800390c:	42a2      	cmp	r2, r4
 800390e:	d007      	beq.n	8003920 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003910:	4c4f      	ldr	r4, [pc, #316]	; (8003a50 <HAL_ADC_ConfigChannel+0x22c>)
 8003912:	42a2      	cmp	r2, r4
 8003914:	d026      	beq.n	8003964 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003916:	4c4f      	ldr	r4, [pc, #316]	; (8003a54 <HAL_ADC_ConfigChannel+0x230>)
 8003918:	42a2      	cmp	r2, r4
 800391a:	d032      	beq.n	8003982 <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800391c:	2000      	movs	r0, #0
 800391e:	e799      	b.n	8003854 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003920:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003924:	d1f4      	bne.n	8003910 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003926:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800392a:	4847      	ldr	r0, [pc, #284]	; (8003a48 <HAL_ADC_ConfigChannel+0x224>)
 800392c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003930:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003934:	4311      	orrs	r1, r2
 8003936:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800393a:	4a47      	ldr	r2, [pc, #284]	; (8003a58 <HAL_ADC_ConfigChannel+0x234>)
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	0992      	lsrs	r2, r2, #6
 8003940:	4946      	ldr	r1, [pc, #280]	; (8003a5c <HAL_ADC_ConfigChannel+0x238>)
 8003942:	fba1 1202 	umull	r1, r2, r1, r2
 8003946:	0992      	lsrs	r2, r2, #6
 8003948:	3201      	adds	r2, #1
 800394a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800394e:	0092      	lsls	r2, r2, #2
 8003950:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003952:	e002      	b.n	800395a <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 8003954:	9a01      	ldr	r2, [sp, #4]
 8003956:	3a01      	subs	r2, #1
 8003958:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800395a:	9a01      	ldr	r2, [sp, #4]
 800395c:	2a00      	cmp	r2, #0
 800395e:	d1f9      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003960:	2000      	movs	r0, #0
 8003962:	e777      	b.n	8003854 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003964:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003968:	d1d5      	bne.n	8003916 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800396a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800396e:	4836      	ldr	r0, [pc, #216]	; (8003a48 <HAL_ADC_ConfigChannel+0x224>)
 8003970:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003974:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003978:	4311      	orrs	r1, r2
 800397a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800397e:	2000      	movs	r0, #0
}
 8003980:	e768      	b.n	8003854 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003982:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003986:	d158      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003988:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800398c:	482e      	ldr	r0, [pc, #184]	; (8003a48 <HAL_ADC_ConfigChannel+0x224>)
 800398e:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003992:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003996:	430a      	orrs	r2, r1
 8003998:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800399c:	2000      	movs	r0, #0
}
 800399e:	e759      	b.n	8003854 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039a0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80039a4:	d002      	beq.n	80039ac <HAL_ADC_ConfigChannel+0x188>
 80039a6:	4827      	ldr	r0, [pc, #156]	; (8003a44 <HAL_ADC_ConfigChannel+0x220>)
 80039a8:	4284      	cmp	r4, r0
 80039aa:	d106      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80039ac:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039ae:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80039b0:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80039b4:	ea20 0004 	bic.w	r0, r0, r4
 80039b8:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039ba:	680a      	ldr	r2, [r1, #0]
 80039bc:	2a00      	cmp	r2, #0
 80039be:	db01      	blt.n	80039c4 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c0:	2000      	movs	r0, #0
 80039c2:	e747      	b.n	8003854 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039c4:	4920      	ldr	r1, [pc, #128]	; (8003a48 <HAL_ADC_ConfigChannel+0x224>)
 80039c6:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ca:	4820      	ldr	r0, [pc, #128]	; (8003a4c <HAL_ADC_ConfigChannel+0x228>)
 80039cc:	4282      	cmp	r2, r0
 80039ce:	d007      	beq.n	80039e0 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80039d0:	481f      	ldr	r0, [pc, #124]	; (8003a50 <HAL_ADC_ConfigChannel+0x22c>)
 80039d2:	4282      	cmp	r2, r0
 80039d4:	d013      	beq.n	80039fe <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80039d6:	481f      	ldr	r0, [pc, #124]	; (8003a54 <HAL_ADC_ConfigChannel+0x230>)
 80039d8:	4282      	cmp	r2, r0
 80039da:	d01f      	beq.n	8003a1c <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039dc:	2000      	movs	r0, #0
 80039de:	e739      	b.n	8003854 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039e0:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039e4:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 80039e8:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 80039ec:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80039f0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80039f4:	4311      	orrs	r1, r2
 80039f6:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039fa:	2000      	movs	r0, #0
}
 80039fc:	e72a      	b.n	8003854 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039fe:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a02:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8003a06:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8003a0a:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003a0e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003a12:	430a      	orrs	r2, r1
 8003a14:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a18:	2000      	movs	r0, #0
}
 8003a1a:	e71b      	b.n	8003854 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a1c:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a20:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8003a24:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003a28:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003a2c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003a30:	430a      	orrs	r2, r1
 8003a32:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a36:	2000      	movs	r0, #0
}
 8003a38:	e70c      	b.n	8003854 <HAL_ADC_ConfigChannel+0x30>
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	e70a      	b.n	8003854 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003a3e:	2002      	movs	r0, #2
 8003a40:	e70b      	b.n	800385a <HAL_ADC_ConfigChannel+0x36>
 8003a42:	bf00      	nop
 8003a44:	80000004 	.word	0x80000004
 8003a48:	40012000 	.word	0x40012000
 8003a4c:	b0001000 	.word	0xb0001000
 8003a50:	b8004000 	.word	0xb8004000
 8003a54:	b4002000 	.word	0xb4002000
 8003a58:	20000074 	.word	0x20000074
 8003a5c:	053e2d63 	.word	0x053e2d63

08003a60 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003a60:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a62:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	f012 0f04 	tst.w	r2, #4
 8003a6a:	d02a      	beq.n	8003ac2 <ADC_ConversionStop+0x62>
 8003a6c:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	f012 0f02 	tst.w	r2, #2
 8003a74:	d107      	bne.n	8003a86 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a7c:	f022 0217 	bic.w	r2, r2, #23
 8003a80:	f042 0210 	orr.w	r2, r2, #16
 8003a84:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a86:	f7fe f8b9 	bl	8001bfc <HAL_GetTick>
 8003a8a:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f013 0f04 	tst.w	r3, #4
 8003a94:	d013      	beq.n	8003abe <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a96:	f7fe f8b1 	bl	8001bfc <HAL_GetTick>
 8003a9a:	1b43      	subs	r3, r0, r5
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d9f5      	bls.n	8003a8c <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f013 0f04 	tst.w	r3, #4
 8003aa8:	d0f0      	beq.n	8003a8c <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003aac:	f043 0310 	orr.w	r3, r3, #16
 8003ab0:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003aba:	2001      	movs	r0, #1
 8003abc:	e002      	b.n	8003ac4 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003abe:	2000      	movs	r0, #0
 8003ac0:	e000      	b.n	8003ac4 <ADC_ConversionStop+0x64>
 8003ac2:	2000      	movs	r0, #0
}
 8003ac4:	bd38      	pop	{r3, r4, r5, pc}
	...

08003ac8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ac8:	b530      	push	{r4, r5, lr}
 8003aca:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	f012 0f01 	tst.w	r2, #1
 8003ad8:	d15b      	bne.n	8003b92 <ADC_Enable+0xca>
 8003ada:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003adc:	6899      	ldr	r1, [r3, #8]
 8003ade:	4a2e      	ldr	r2, [pc, #184]	; (8003b98 <ADC_Enable+0xd0>)
 8003ae0:	4211      	tst	r1, r2
 8003ae2:	d117      	bne.n	8003b14 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003aea:	f022 0217 	bic.w	r2, r2, #23
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003af4:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <ADC_Enable+0xd4>)
 8003af6:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003afa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003afe:	d019      	beq.n	8003b34 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b00:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <ADC_Enable+0xd8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	099b      	lsrs	r3, r3, #6
 8003b06:	4a27      	ldr	r2, [pc, #156]	; (8003ba4 <ADC_Enable+0xdc>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003b10:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003b12:	e00c      	b.n	8003b2e <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b14:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003b16:	f043 0310 	orr.w	r3, r3, #16
 8003b1a:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8003b24:	2001      	movs	r0, #1
 8003b26:	e035      	b.n	8003b94 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003b28:	9b01      	ldr	r3, [sp, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003b2e:	9b01      	ldr	r3, [sp, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1f9      	bne.n	8003b28 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003b34:	7e63      	ldrb	r3, [r4, #25]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	e02a      	b.n	8003b94 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8003b3e:	f7fe f85d 	bl	8001bfc <HAL_GetTick>
 8003b42:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	f012 0f01 	tst.w	r2, #1
 8003b4c:	d11f      	bne.n	8003b8e <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	f012 0f01 	tst.w	r2, #1
 8003b54:	d107      	bne.n	8003b66 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b5c:	f022 0217 	bic.w	r2, r2, #23
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b66:	f7fe f849 	bl	8001bfc <HAL_GetTick>
 8003b6a:	1b40      	subs	r0, r0, r5
 8003b6c:	2802      	cmp	r0, #2
 8003b6e:	d9e9      	bls.n	8003b44 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f013 0f01 	tst.w	r3, #1
 8003b78:	d1e4      	bne.n	8003b44 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b7c:	f043 0310 	orr.w	r3, r3, #16
 8003b80:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	e002      	b.n	8003b94 <ADC_Enable+0xcc>
  return HAL_OK;
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e000      	b.n	8003b94 <ADC_Enable+0xcc>
 8003b92:	2000      	movs	r0, #0
}
 8003b94:	b003      	add	sp, #12
 8003b96:	bd30      	pop	{r4, r5, pc}
 8003b98:	80000017 	.word	0x80000017
 8003b9c:	40012000 	.word	0x40012000
 8003ba0:	20000074 	.word	0x20000074
 8003ba4:	053e2d63 	.word	0x053e2d63

08003ba8 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ba8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f013 0f04 	tst.w	r3, #4
 8003bb0:	d128      	bne.n	8003c04 <HAL_ADC_Start+0x5c>
{
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003bb6:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d024      	beq.n	8003c08 <HAL_ADC_Start+0x60>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003bc4:	f7ff ff80 	bl	8003ac8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003bc8:	b9c0      	cbnz	r0, 8003bfc <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003bca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd8:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bde:	6822      	ldr	r2, [r4, #0]
 8003be0:	211c      	movs	r1, #28
 8003be2:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003be4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003be8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003bea:	6893      	ldr	r3, [r2, #8]
 8003bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bf0:	f023 0317 	bic.w	r3, r3, #23
 8003bf4:	f043 0304 	orr.w	r3, r3, #4
 8003bf8:	6093      	str	r3, [r2, #8]
}
 8003bfa:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003c02:	e7fa      	b.n	8003bfa <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003c04:	2002      	movs	r0, #2
}
 8003c06:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003c08:	2002      	movs	r0, #2
 8003c0a:	e7f6      	b.n	8003bfa <HAL_ADC_Start+0x52>

08003c0c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c0c:	b538      	push	{r3, r4, r5, lr}
 8003c0e:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c10:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c12:	6893      	ldr	r3, [r2, #8]
 8003c14:	f013 0302 	ands.w	r3, r3, #2
 8003c18:	d000      	beq.n	8003c1c <ADC_Disable+0x10>
 8003c1a:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c1c:	6891      	ldr	r1, [r2, #8]
 8003c1e:	f011 0f01 	tst.w	r1, #1
 8003c22:	d039      	beq.n	8003c98 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d139      	bne.n	8003c9c <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c28:	6893      	ldr	r3, [r2, #8]
 8003c2a:	f003 0305 	and.w	r3, r3, #5
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d009      	beq.n	8003c46 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c34:	f043 0310 	orr.w	r3, r3, #16
 8003c38:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c3a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8003c42:	2001      	movs	r0, #1
 8003c44:	e029      	b.n	8003c9a <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003c46:	6893      	ldr	r3, [r2, #8]
 8003c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c4c:	f023 0317 	bic.w	r3, r3, #23
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c5c:	f7fd ffce 	bl	8001bfc <HAL_GetTick>
 8003c60:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f013 0f01 	tst.w	r3, #1
 8003c6a:	d013      	beq.n	8003c94 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c6c:	f7fd ffc6 	bl	8001bfc <HAL_GetTick>
 8003c70:	1b40      	subs	r0, r0, r5
 8003c72:	2802      	cmp	r0, #2
 8003c74:	d9f5      	bls.n	8003c62 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f013 0f01 	tst.w	r3, #1
 8003c7e:	d0f0      	beq.n	8003c62 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c82:	f043 0310 	orr.w	r3, r3, #16
 8003c86:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c88:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003c90:	2001      	movs	r0, #1
 8003c92:	e002      	b.n	8003c9a <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c94:	2000      	movs	r0, #0
 8003c96:	e000      	b.n	8003c9a <ADC_Disable+0x8e>
 8003c98:	2000      	movs	r0, #0
}
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	e7fc      	b.n	8003c9a <ADC_Disable+0x8e>

08003ca0 <HAL_ADC_DeInit>:
{
 8003ca0:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d056      	beq.n	8003d54 <HAL_ADC_DeInit+0xb4>
 8003ca6:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003ca8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003caa:	f043 0302 	orr.w	r3, r3, #2
 8003cae:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003cb0:	f7ff fed6 	bl	8003a60 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003cb4:	4606      	mov	r6, r0
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d03d      	beq.n	8003d36 <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003cba:	6822      	ldr	r2, [r4, #0]
 8003cbc:	6853      	ldr	r3, [r2, #4]
 8003cbe:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003cc2:	f023 0303 	bic.w	r3, r3, #3
 8003cc6:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	f240 329f 	movw	r2, #927	; 0x39f
 8003cce:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003cd0:	6822      	ldr	r2, [r4, #0]
 8003cd2:	68d1      	ldr	r1, [r2, #12]
 8003cd4:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_ADC_DeInit+0xb8>)
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	6913      	ldr	r3, [r2, #16]
 8003cde:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003ce2:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6953      	ldr	r3, [r2, #20]
 8003ce8:	f023 0307 	bic.w	r3, r3, #7
 8003cec:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	6a13      	ldr	r3, [r2, #32]
 8003cf2:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003cf6:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003cfc:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003d00:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d06:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d10:	2500      	movs	r5, #0
 8003d12:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003d14:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <HAL_ADC_DeInit+0xbc>)
 8003d16:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8003d1a:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003d1e:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8003d22:	4620      	mov	r0, r4
 8003d24:	f7fd f9a4 	bl	8001070 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003d28:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8003d2a:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003d2c:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003d2e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003d32:	4630      	mov	r0, r6
 8003d34:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003d36:	4620      	mov	r0, r4
 8003d38:	f7ff ff68 	bl	8003c0c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	b908      	cbnz	r0, 8003d44 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8003d40:	2301      	movs	r3, #1
 8003d42:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003d44:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003d46:	6893      	ldr	r3, [r2, #8]
 8003d48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d4c:	f023 0317 	bic.w	r3, r3, #23
 8003d50:	6093      	str	r3, [r2, #8]
}
 8003d52:	e7b2      	b.n	8003cba <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003d54:	2601      	movs	r6, #1
 8003d56:	e7ec      	b.n	8003d32 <HAL_ADC_DeInit+0x92>
 8003d58:	833e0200 	.word	0x833e0200
 8003d5c:	40012000 	.word	0x40012000

08003d60 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003d60:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d019      	beq.n	8003d9c <HAL_ADC_Stop+0x3c>
{
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003d72:	f7ff fe75 	bl	8003a60 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003d76:	b118      	cbz	r0, 8003d80 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8003d7e:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003d80:	4620      	mov	r0, r4
 8003d82:	f7ff ff43 	bl	8003c0c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d1f6      	bne.n	8003d78 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003d8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d9a:	e7ed      	b.n	8003d78 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003d9c:	2002      	movs	r0, #2
}
 8003d9e:	4770      	bx	lr

08003da0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003da8:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f000 8094 	beq.w	8003eda <HAL_ADCEx_Calibration_Start+0x13a>
 8003db2:	4604      	mov	r4, r0
 8003db4:	2301      	movs	r3, #1
 8003db6:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003dba:	f7ff ff27 	bl	8003c0c <ADC_Disable>
 8003dbe:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dc0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	f012 0201 	ands.w	r2, r2, #1
 8003dc8:	d009      	beq.n	8003dde <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003dcc:	f043 0310 	orr.w	r3, r3, #16
 8003dd0:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8003dd8:	4628      	mov	r0, r5
 8003dda:	b003      	add	sp, #12
 8003ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003dde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003de0:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003de4:	f041 0102 	orr.w	r1, r1, #2
 8003de8:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003dea:	68de      	ldr	r6, [r3, #12]
 8003dec:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8003df0:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8003df4:	0436      	lsls	r6, r6, #16
 8003df6:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003df8:	68d9      	ldr	r1, [r3, #12]
 8003dfa:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003dfe:	f021 0103 	bic.w	r1, r1, #3
 8003e02:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003e04:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003e06:	e005      	b.n	8003e14 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003e08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003e10:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003e12:	3201      	adds	r2, #1
 8003e14:	2a07      	cmp	r2, #7
 8003e16:	d81e      	bhi.n	8003e56 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003e18:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003e1a:	688b      	ldr	r3, [r1, #8]
 8003e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e20:	f023 0317 	bic.w	r3, r3, #23
 8003e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e28:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e2a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e2c:	6899      	ldr	r1, [r3, #8]
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	daea      	bge.n	8003e08 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003e32:	9b01      	ldr	r3, [sp, #4]
 8003e34:	3301      	adds	r3, #1
 8003e36:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e38:	9b01      	ldr	r3, [sp, #4]
 8003e3a:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003e3e:	d3f4      	bcc.n	8003e2a <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003e40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e42:	f023 0312 	bic.w	r3, r3, #18
 8003e46:	f043 0310 	orr.w	r3, r3, #16
 8003e4a:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003e52:	2501      	movs	r5, #1
 8003e54:	e7c0      	b.n	8003dd8 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8003e56:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003e5a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003e5c:	6893      	ldr	r3, [r2, #8]
 8003e5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e62:	f023 0317 	bic.w	r3, r3, #23
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003e6c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003e6e:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8003e72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e76:	4318      	orrs	r0, r3
 8003e78:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003e7c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003e7e:	6893      	ldr	r3, [r2, #8]
 8003e80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e84:	f023 0317 	bic.w	r3, r3, #23
 8003e88:	f043 0302 	orr.w	r3, r3, #2
 8003e8c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003e8e:	f7fd feb5 	bl	8001bfc <HAL_GetTick>
 8003e92:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e94:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	f012 0f01 	tst.w	r2, #1
 8003e9c:	d109      	bne.n	8003eb2 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	4332      	orrs	r2, r6
 8003ea2:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003ea4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ea6:	f023 0303 	bic.w	r3, r3, #3
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	65a3      	str	r3, [r4, #88]	; 0x58
 8003eb0:	e78f      	b.n	8003dd2 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eb2:	f7fd fea3 	bl	8001bfc <HAL_GetTick>
 8003eb6:	1bc3      	subs	r3, r0, r7
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d9eb      	bls.n	8003e94 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f013 0f01 	tst.w	r3, #1
 8003ec4:	d0e6      	beq.n	8003e94 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ec8:	f043 0310 	orr.w	r3, r3, #16
 8003ecc:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ece:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8003ed6:	2501      	movs	r5, #1
 8003ed8:	e77e      	b.n	8003dd8 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003eda:	2502      	movs	r5, #2
 8003edc:	e77c      	b.n	8003dd8 <HAL_ADCEx_Calibration_Start+0x38>
	...

08003ee0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ee0:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003ee2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ee4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eec:	0200      	lsls	r0, r0, #8
 8003eee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ef2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003efc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003efe:	4770      	bx	lr
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f04:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f06:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_NVIC_SetPriority+0x68>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f0e:	f1c3 0c07 	rsb	ip, r3, #7
 8003f12:	f1bc 0f04 	cmp.w	ip, #4
 8003f16:	bf28      	it	cs
 8003f18:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f1c:	f103 0e04 	add.w	lr, r3, #4
 8003f20:	f1be 0f06 	cmp.w	lr, #6
 8003f24:	d918      	bls.n	8003f58 <HAL_NVIC_SetPriority+0x54>
 8003f26:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f28:	f04f 3eff 	mov.w	lr, #4294967295
 8003f2c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003f30:	ea21 010c 	bic.w	r1, r1, ip
 8003f34:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f36:	fa0e fe03 	lsl.w	lr, lr, r3
 8003f3a:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f3e:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003f40:	2800      	cmp	r0, #0
 8003f42:	db0b      	blt.n	8003f5c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f44:	0112      	lsls	r2, r2, #4
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003f4c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003f50:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f54:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e7e5      	b.n	8003f28 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5c:	f000 000f 	and.w	r0, r0, #15
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	4b02      	ldr	r3, [pc, #8]	; (8003f70 <HAL_NVIC_SetPriority+0x6c>)
 8003f66:	541a      	strb	r2, [r3, r0]
 8003f68:	e7f4      	b.n	8003f54 <HAL_NVIC_SetPriority+0x50>
 8003f6a:	bf00      	nop
 8003f6c:	e000ed00 	.word	0xe000ed00
 8003f70:	e000ed14 	.word	0xe000ed14

08003f74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f74:	2800      	cmp	r0, #0
 8003f76:	db07      	blt.n	8003f88 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f78:	f000 021f 	and.w	r2, r0, #31
 8003f7c:	0940      	lsrs	r0, r0, #5
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4093      	lsls	r3, r2
 8003f82:	4a02      	ldr	r2, [pc, #8]	; (8003f8c <HAL_NVIC_EnableIRQ+0x18>)
 8003f84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000e100 	.word	0xe000e100

08003f90 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f90:	2800      	cmp	r0, #0
 8003f92:	db0c      	blt.n	8003fae <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f94:	f000 021f 	and.w	r2, r0, #31
 8003f98:	0940      	lsrs	r0, r0, #5
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4093      	lsls	r3, r2
 8003f9e:	3020      	adds	r0, #32
 8003fa0:	4a03      	ldr	r2, [pc, #12]	; (8003fb0 <HAL_NVIC_DisableIRQ+0x20>)
 8003fa2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fa6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003faa:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003fae:	4770      	bx	lr
 8003fb0:	e000e100 	.word	0xe000e100

08003fb4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb4:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fb6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003fb8:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8003fbc:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003fc0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003fc2:	b124      	cbz	r4, 8003fce <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fc4:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003fc6:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8003fca:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fce:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003fd0:	f004 0c1c 	and.w	ip, r4, #28
 8003fd4:	2401      	movs	r4, #1
 8003fd6:	fa04 f40c 	lsl.w	r4, r4, ip
 8003fda:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003fde:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fe2:	6804      	ldr	r4, [r0, #0]
 8003fe4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fe6:	6883      	ldr	r3, [r0, #8]
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d005      	beq.n	8003ff8 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003fec:	6803      	ldr	r3, [r0, #0]
 8003fee:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003ff0:	6803      	ldr	r3, [r0, #0]
 8003ff2:	60da      	str	r2, [r3, #12]
  }
}
 8003ff4:	bc10      	pop	{r4}
 8003ff6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003ff8:	6803      	ldr	r3, [r0, #0]
 8003ffa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003ffc:	6803      	ldr	r3, [r0, #0]
 8003ffe:	60d9      	str	r1, [r3, #12]
 8004000:	e7f8      	b.n	8003ff4 <DMA_SetConfig+0x40>
	...

08004004 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004004:	6803      	ldr	r3, [r0, #0]
 8004006:	4a14      	ldr	r2, [pc, #80]	; (8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d816      	bhi.n	800403a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800400c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800400e:	f022 0203 	bic.w	r2, r2, #3
 8004012:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004016:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800401a:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800401c:	b2db      	uxtb	r3, r3
 800401e:	3b08      	subs	r3, #8
 8004020:	4a0e      	ldr	r2, [pc, #56]	; (800405c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004028:	4a0d      	ldr	r2, [pc, #52]	; (8004060 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800402a:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2201      	movs	r2, #1
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004038:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800403a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800403c:	f022 0103 	bic.w	r1, r2, #3
 8004040:	4a08      	ldr	r2, [pc, #32]	; (8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004042:	440a      	add	r2, r1
 8004044:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004046:	b2db      	uxtb	r3, r3
 8004048:	3b08      	subs	r3, #8
 800404a:	4a04      	ldr	r2, [pc, #16]	; (800405c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	3307      	adds	r3, #7
 8004054:	e7e8      	b.n	8004028 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8004056:	bf00      	nop
 8004058:	40020407 	.word	0x40020407
 800405c:	cccccccd 	.word	0xcccccccd
 8004060:	40020880 	.word	0x40020880
 8004064:	4002081c 	.word	0x4002081c

08004068 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004068:	6843      	ldr	r3, [r0, #4]
 800406a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800406e:	4a07      	ldr	r2, [pc, #28]	; (800408c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004070:	441a      	add	r2, r3
 8004072:	0092      	lsls	r2, r2, #2
 8004074:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004076:	4a06      	ldr	r2, [pc, #24]	; (8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004078:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800407a:	3b01      	subs	r3, #1
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2201      	movs	r2, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	1000823f 	.word	0x1000823f
 8004090:	40020940 	.word	0x40020940

08004094 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004094:	2800      	cmp	r0, #0
 8004096:	d060      	beq.n	800415a <HAL_DMA_Init+0xc6>
{
 8004098:	b510      	push	{r4, lr}
 800409a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800409c:	6802      	ldr	r2, [r0, #0]
 800409e:	4b30      	ldr	r3, [pc, #192]	; (8004160 <HAL_DMA_Init+0xcc>)
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d842      	bhi.n	800412a <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040a4:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <HAL_DMA_Init+0xd0>)
 80040a6:	4413      	add	r3, r2
 80040a8:	492f      	ldr	r1, [pc, #188]	; (8004168 <HAL_DMA_Init+0xd4>)
 80040aa:	fba1 1303 	umull	r1, r3, r1, r3
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040b4:	4b2d      	ldr	r3, [pc, #180]	; (800416c <HAL_DMA_Init+0xd8>)
 80040b6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80040b8:	2302      	movs	r3, #2
 80040ba:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80040ca:	6821      	ldr	r1, [r4, #0]
 80040cc:	680a      	ldr	r2, [r1, #0]
 80040ce:	68a3      	ldr	r3, [r4, #8]
 80040d0:	68e0      	ldr	r0, [r4, #12]
 80040d2:	4303      	orrs	r3, r0
 80040d4:	6920      	ldr	r0, [r4, #16]
 80040d6:	4303      	orrs	r3, r0
 80040d8:	6960      	ldr	r0, [r4, #20]
 80040da:	4303      	orrs	r3, r0
 80040dc:	69a0      	ldr	r0, [r4, #24]
 80040de:	4303      	orrs	r3, r0
 80040e0:	69e0      	ldr	r0, [r4, #28]
 80040e2:	4303      	orrs	r3, r0
 80040e4:	6a20      	ldr	r0, [r4, #32]
 80040e6:	4303      	orrs	r3, r0
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff ff89 	bl	8004004 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040f2:	68a3      	ldr	r3, [r4, #8]
 80040f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f8:	d022      	beq.n	8004140 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040fa:	6863      	ldr	r3, [r4, #4]
 80040fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80040fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004102:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004104:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004106:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004108:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800410a:	6863      	ldr	r3, [r4, #4]
 800410c:	3b01      	subs	r3, #1
 800410e:	2b03      	cmp	r3, #3
 8004110:	d919      	bls.n	8004146 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004116:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004118:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800411a:	2000      	movs	r0, #0
 800411c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800411e:	2301      	movs	r3, #1
 8004120:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004124:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8004128:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800412a:	4b11      	ldr	r3, [pc, #68]	; (8004170 <HAL_DMA_Init+0xdc>)
 800412c:	4413      	add	r3, r2
 800412e:	490e      	ldr	r1, [pc, #56]	; (8004168 <HAL_DMA_Init+0xd4>)
 8004130:	fba1 1303 	umull	r1, r3, r1, r3
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <HAL_DMA_Init+0xe0>)
 800413c:	6403      	str	r3, [r0, #64]	; 0x40
 800413e:	e7bb      	b.n	80040b8 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004140:	2300      	movs	r3, #0
 8004142:	6063      	str	r3, [r4, #4]
 8004144:	e7d9      	b.n	80040fa <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004146:	4620      	mov	r0, r4
 8004148:	f7ff ff8e 	bl	8004068 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800414c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004154:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004156:	605a      	str	r2, [r3, #4]
 8004158:	e7df      	b.n	800411a <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800415a:	2001      	movs	r0, #1
}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40020407 	.word	0x40020407
 8004164:	bffdfff8 	.word	0xbffdfff8
 8004168:	cccccccd 	.word	0xcccccccd
 800416c:	40020000 	.word	0x40020000
 8004170:	bffdfbf8 	.word	0xbffdfbf8
 8004174:	40020400 	.word	0x40020400

08004178 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004178:	2800      	cmp	r0, #0
 800417a:	d04b      	beq.n	8004214 <HAL_DMA_DeInit+0x9c>
{
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004180:	6802      	ldr	r2, [r0, #0]
 8004182:	6813      	ldr	r3, [r2, #0]
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800418a:	6802      	ldr	r2, [r0, #0]
 800418c:	4b22      	ldr	r3, [pc, #136]	; (8004218 <HAL_DMA_DeInit+0xa0>)
 800418e:	429a      	cmp	r2, r3
 8004190:	d82c      	bhi.n	80041ec <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <HAL_DMA_DeInit+0xa4>)
 8004194:	4413      	add	r3, r2
 8004196:	4922      	ldr	r1, [pc, #136]	; (8004220 <HAL_DMA_DeInit+0xa8>)
 8004198:	fba1 1303 	umull	r1, r3, r1, r3
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_DMA_DeInit+0xac>)
 80041a4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80041a6:	2500      	movs	r5, #0
 80041a8:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041ac:	f003 021c 	and.w	r2, r3, #28
 80041b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80041b2:	2301      	movs	r3, #1
 80041b4:	4093      	lsls	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041b8:	4620      	mov	r0, r4
 80041ba:	f7ff ff23 	bl	8004004 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80041be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80041c0:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80041c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80041c6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041c8:	6863      	ldr	r3, [r4, #4]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d918      	bls.n	8004202 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 80041d0:	2000      	movs	r0, #0
 80041d2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80041d4:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80041d6:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80041d8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80041da:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80041dc:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80041de:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80041e2:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80041e6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041ec:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <HAL_DMA_DeInit+0xb0>)
 80041ee:	4413      	add	r3, r2
 80041f0:	490b      	ldr	r1, [pc, #44]	; (8004220 <HAL_DMA_DeInit+0xa8>)
 80041f2:	fba1 1303 	umull	r1, r3, r1, r3
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_DMA_DeInit+0xb4>)
 80041fe:	6403      	str	r3, [r0, #64]	; 0x40
 8004200:	e7d1      	b.n	80041a6 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004202:	4620      	mov	r0, r4
 8004204:	f7ff ff30 	bl	8004068 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004208:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800420a:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800420c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800420e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	e7dd      	b.n	80041d0 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004214:	2001      	movs	r0, #1
}
 8004216:	4770      	bx	lr
 8004218:	40020407 	.word	0x40020407
 800421c:	bffdfff8 	.word	0xbffdfff8
 8004220:	cccccccd 	.word	0xcccccccd
 8004224:	40020000 	.word	0x40020000
 8004228:	bffdfbf8 	.word	0xbffdfbf8
 800422c:	40020400 	.word	0x40020400

08004230 <HAL_DMA_Start_IT>:
{
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004234:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8004238:	2801      	cmp	r0, #1
 800423a:	d043      	beq.n	80042c4 <HAL_DMA_Start_IT+0x94>
 800423c:	2001      	movs	r0, #1
 800423e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004242:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8004246:	b2c0      	uxtb	r0, r0
 8004248:	2801      	cmp	r0, #1
 800424a:	d006      	beq.n	800425a <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004250:	2300      	movs	r3, #0
 8004252:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8004256:	2001      	movs	r0, #1
}
 8004258:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800425a:	2002      	movs	r0, #2
 800425c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004260:	2000      	movs	r0, #0
 8004262:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004264:	6825      	ldr	r5, [r4, #0]
 8004266:	6828      	ldr	r0, [r5, #0]
 8004268:	f020 0001 	bic.w	r0, r0, #1
 800426c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800426e:	4620      	mov	r0, r4
 8004270:	f7ff fea0 	bl	8003fb4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004274:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004276:	b1d3      	cbz	r3, 80042ae <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	f043 030e 	orr.w	r3, r3, #14
 8004280:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004282:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800428a:	d003      	beq.n	8004294 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004292:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8004294:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004296:	b11b      	cbz	r3, 80042a0 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80042a0:	6822      	ldr	r2, [r4, #0]
 80042a2:	6813      	ldr	r3, [r2, #0]
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042aa:	2000      	movs	r0, #0
 80042ac:	e7d4      	b.n	8004258 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	6813      	ldr	r3, [r2, #0]
 80042b2:	f023 0304 	bic.w	r3, r3, #4
 80042b6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042b8:	6822      	ldr	r2, [r4, #0]
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	f043 030a 	orr.w	r3, r3, #10
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e7de      	b.n	8004282 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80042c4:	2002      	movs	r0, #2
 80042c6:	e7c7      	b.n	8004258 <HAL_DMA_Start_IT+0x28>

080042c8 <HAL_DMA_Abort>:
  if (NULL == hdma)
 80042c8:	4603      	mov	r3, r0
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d034      	beq.n	8004338 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042ce:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	2a02      	cmp	r2, #2
 80042d6:	d006      	beq.n	80042e6 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d8:	2204      	movs	r2, #4
 80042da:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80042dc:	2200      	movs	r2, #0
 80042de:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80042e2:	2001      	movs	r0, #1
 80042e4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042e6:	6801      	ldr	r1, [r0, #0]
 80042e8:	680a      	ldr	r2, [r1, #0]
 80042ea:	f022 020e 	bic.w	r2, r2, #14
 80042ee:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042f0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80042f2:	680a      	ldr	r2, [r1, #0]
 80042f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80042fa:	6801      	ldr	r1, [r0, #0]
 80042fc:	680a      	ldr	r2, [r1, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004304:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004306:	f002 011c 	and.w	r1, r2, #28
 800430a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800430c:	2201      	movs	r2, #1
 800430e:	408a      	lsls	r2, r1
 8004310:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004314:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004316:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800431a:	b132      	cbz	r2, 800432a <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800431c:	6811      	ldr	r1, [r2, #0]
 800431e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004322:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004324:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004326:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004328:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004330:	2000      	movs	r0, #0
 8004332:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8004336:	4770      	bx	lr
    return HAL_ERROR;
 8004338:	2001      	movs	r0, #1
}
 800433a:	4770      	bx	lr

0800433c <HAL_DMA_Abort_IT>:
{
 800433c:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800433e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d003      	beq.n	8004350 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004348:	2304      	movs	r3, #4
 800434a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800434c:	2001      	movs	r0, #1
}
 800434e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004350:	6802      	ldr	r2, [r0, #0]
 8004352:	6813      	ldr	r3, [r2, #0]
 8004354:	f023 030e 	bic.w	r3, r3, #14
 8004358:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800435a:	6802      	ldr	r2, [r0, #0]
 800435c:	6813      	ldr	r3, [r2, #0]
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004364:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004366:	6813      	ldr	r3, [r2, #0]
 8004368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800436c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800436e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004370:	f003 021c 	and.w	r2, r3, #28
 8004374:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004376:	2301      	movs	r3, #1
 8004378:	4093      	lsls	r3, r2
 800437a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800437c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800437e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004380:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004382:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004384:	b133      	cbz	r3, 8004394 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800438c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800438e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004390:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004392:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004394:	2301      	movs	r3, #1
 8004396:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800439a:	2300      	movs	r3, #0
 800439c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80043a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80043a2:	b113      	cbz	r3, 80043aa <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80043a4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80043a6:	2000      	movs	r0, #0
 80043a8:	e7d1      	b.n	800434e <HAL_DMA_Abort_IT+0x12>
 80043aa:	2000      	movs	r0, #0
 80043ac:	e7cf      	b.n	800434e <HAL_DMA_Abort_IT+0x12>
	...

080043b0 <HAL_DMA_IRQHandler>:
{
 80043b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80043b4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80043b6:	6804      	ldr	r4, [r0, #0]
 80043b8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80043bc:	f003 031c 	and.w	r3, r3, #28
 80043c0:	2204      	movs	r2, #4
 80043c2:	409a      	lsls	r2, r3
 80043c4:	420a      	tst	r2, r1
 80043c6:	d015      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x44>
 80043c8:	f015 0f04 	tst.w	r5, #4
 80043cc:	d012      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	f013 0f20 	tst.w	r3, #32
 80043d4:	d103      	bne.n	80043de <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80043e0:	f003 021c 	and.w	r2, r3, #28
 80043e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80043e6:	2304      	movs	r3, #4
 80043e8:	4093      	lsls	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80043ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80043ee:	b103      	cbz	r3, 80043f2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80043f0:	4798      	blx	r3
}
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80043f4:	2202      	movs	r2, #2
 80043f6:	409a      	lsls	r2, r3
 80043f8:	420a      	tst	r2, r1
 80043fa:	d028      	beq.n	800444e <HAL_DMA_IRQHandler+0x9e>
 80043fc:	f015 0f02 	tst.w	r5, #2
 8004400:	d025      	beq.n	800444e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	f013 0f20 	tst.w	r3, #32
 8004408:	d106      	bne.n	8004418 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	f023 030a 	bic.w	r3, r3, #10
 8004410:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004412:	2301      	movs	r3, #1
 8004414:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004418:	6802      	ldr	r2, [r0, #0]
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <HAL_DMA_IRQHandler+0xdc>)
 800441c:	429a      	cmp	r2, r3
 800441e:	d90e      	bls.n	800443e <HAL_DMA_IRQHandler+0x8e>
 8004420:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004422:	f003 021c 	and.w	r2, r3, #28
 8004426:	2302      	movs	r3, #2
 8004428:	4093      	lsls	r3, r2
 800442a:	4a19      	ldr	r2, [pc, #100]	; (8004490 <HAL_DMA_IRQHandler+0xe0>)
 800442c:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 800442e:	2300      	movs	r3, #0
 8004430:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8004434:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0db      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 800443a:	4798      	blx	r3
 800443c:	e7d9      	b.n	80043f2 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800443e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004440:	f003 021c 	and.w	r2, r3, #28
 8004444:	2302      	movs	r3, #2
 8004446:	4093      	lsls	r3, r2
 8004448:	4a12      	ldr	r2, [pc, #72]	; (8004494 <HAL_DMA_IRQHandler+0xe4>)
 800444a:	6053      	str	r3, [r2, #4]
 800444c:	e7ef      	b.n	800442e <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800444e:	2208      	movs	r2, #8
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	420b      	tst	r3, r1
 8004456:	d0cc      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x42>
 8004458:	f015 0f08 	tst.w	r5, #8
 800445c:	d0c9      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	f023 030e 	bic.w	r3, r3, #14
 8004464:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004466:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004468:	f003 031c 	and.w	r3, r3, #28
 800446c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800446e:	2201      	movs	r2, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004476:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004478:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800447c:	2300      	movs	r3, #0
 800447e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004482:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0b4      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004488:	4798      	blx	r3
  return;
 800448a:	e7b2      	b.n	80043f2 <HAL_DMA_IRQHandler+0x42>
 800448c:	40020080 	.word	0x40020080
 8004490:	40020400 	.word	0x40020400
 8004494:	40020000 	.word	0x40020000

08004498 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004498:	b178      	cbz	r0, 80044ba <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 800449a:	6803      	ldr	r3, [r0, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800449e:	f011 0f10 	tst.w	r1, #16
 80044a2:	d004      	beq.n	80044ae <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80044a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80044a8:	d004      	beq.n	80044b4 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 80044aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 80044ae:	601a      	str	r2, [r3, #0]
  return status;
 80044b0:	2000      	movs	r0, #0
 80044b2:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80044b4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80044b8:	e7f9      	b.n	80044ae <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 80044ba:	2001      	movs	r0, #1
}
 80044bc:	4770      	bx	lr
	...

080044c0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80044c0:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80044c2:	4c05      	ldr	r4, [pc, #20]	; (80044d8 <FLASH_Program_DoubleWord+0x18>)
 80044c4:	6961      	ldr	r1, [r4, #20]
 80044c6:	f041 0101 	orr.w	r1, r1, #1
 80044ca:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80044cc:	6002      	str	r2, [r0, #0]
 80044ce:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80044d2:	6043      	str	r3, [r0, #4]
}
 80044d4:	bc10      	pop	{r4}
 80044d6:	4770      	bx	lr
 80044d8:	58004000 	.word	0x58004000

080044dc <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80044dc:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <FLASH_Program_Fast+0x34>)
 80044de:	6953      	ldr	r3, [r2, #20]
 80044e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80044ea:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80044ec:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80044ee:	f851 2b04 	ldr.w	r2, [r1], #4
 80044f2:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 80044f6:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 80044f8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80044fc:	d1f7      	bne.n	80044ee <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80044fe:	4b04      	ldr	r3, [pc, #16]	; (8004510 <FLASH_Program_Fast+0x34>)
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004506:	d1fa      	bne.n	80044fe <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004508:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	58004000 	.word	0x58004000

08004514 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_FLASH_Unlock+0x28>)
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	db01      	blt.n	8004520 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800451c:	2000      	movs	r0, #0
 800451e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_FLASH_Unlock+0x28>)
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <HAL_FLASH_Unlock+0x2c>)
 8004524:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004526:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800452a:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	db01      	blt.n	8004536 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004532:	2000      	movs	r0, #0
 8004534:	4770      	bx	lr
      status = HAL_ERROR;
 8004536:	2001      	movs	r0, #1
}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	58004000 	.word	0x58004000
 8004540:	45670123 	.word	0x45670123

08004544 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_FLASH_Lock+0x18>)
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800454c:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db01      	blt.n	8004558 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004554:	2001      	movs	r0, #1
}
 8004556:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004558:	2000      	movs	r0, #0
 800455a:	4770      	bx	lr
 800455c:	58004000 	.word	0x58004000

08004560 <FLASH_WaitForLastOperation>:
{
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004564:	f7fd fb4a 	bl	8001bfc <HAL_GetTick>
 8004568:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800456a:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <FLASH_WaitForLastOperation+0x64>)
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004572:	d006      	beq.n	8004582 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004574:	f7fd fb42 	bl	8001bfc <HAL_GetTick>
 8004578:	1b00      	subs	r0, r0, r4
 800457a:	42a8      	cmp	r0, r5
 800457c:	d3f5      	bcc.n	800456a <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 800457e:	2003      	movs	r0, #3
}
 8004580:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004582:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <FLASH_WaitForLastOperation+0x64>)
 8004584:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004586:	f013 0f01 	tst.w	r3, #1
 800458a:	d002      	beq.n	8004592 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800458c:	4a0d      	ldr	r2, [pc, #52]	; (80045c4 <FLASH_WaitForLastOperation+0x64>)
 800458e:	2101      	movs	r1, #1
 8004590:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004592:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8004596:	4013      	ands	r3, r2
 8004598:	d001      	beq.n	800459e <FLASH_WaitForLastOperation+0x3e>
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <FLASH_WaitForLastOperation+0x64>)
 800459c:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 800459e:	b95b      	cbnz	r3, 80045b8 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80045a0:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <FLASH_WaitForLastOperation+0x64>)
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80045a8:	d00a      	beq.n	80045c0 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80045aa:	f7fd fb27 	bl	8001bfc <HAL_GetTick>
 80045ae:	1b00      	subs	r0, r0, r4
 80045b0:	42a8      	cmp	r0, r5
 80045b2:	d3f5      	bcc.n	80045a0 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 80045b4:	2003      	movs	r0, #3
 80045b6:	e7e3      	b.n	8004580 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 80045b8:	4a03      	ldr	r2, [pc, #12]	; (80045c8 <FLASH_WaitForLastOperation+0x68>)
 80045ba:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 80045bc:	2001      	movs	r0, #1
 80045be:	e7df      	b.n	8004580 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 80045c0:	2000      	movs	r0, #0
 80045c2:	e7dd      	b.n	8004580 <FLASH_WaitForLastOperation+0x20>
 80045c4:	58004000 	.word	0x58004000
 80045c8:	20000500 	.word	0x20000500

080045cc <HAL_FLASH_Program>:
{
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80045d0:	4b15      	ldr	r3, [pc, #84]	; (8004628 <HAL_FLASH_Program+0x5c>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d025      	beq.n	8004624 <HAL_FLASH_Program+0x58>
 80045d8:	4604      	mov	r4, r0
 80045da:	460d      	mov	r5, r1
 80045dc:	4616      	mov	r6, r2
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <HAL_FLASH_Program+0x5c>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80045e4:	2200      	movs	r2, #0
 80045e6:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045ec:	f7ff ffb8 	bl	8004560 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80045f0:	b970      	cbnz	r0, 8004610 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80045f2:	2c01      	cmp	r4, #1
 80045f4:	d010      	beq.n	8004618 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80045f6:	4631      	mov	r1, r6
 80045f8:	4628      	mov	r0, r5
 80045fa:	f7ff ff6f 	bl	80044dc <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004602:	f7ff ffad 	bl	8004560 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004606:	4a09      	ldr	r2, [pc, #36]	; (800462c <HAL_FLASH_Program+0x60>)
 8004608:	6953      	ldr	r3, [r2, #20]
 800460a:	ea23 0304 	bic.w	r3, r3, r4
 800460e:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_FLASH_Program+0x5c>)
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
}
 8004616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8004618:	4632      	mov	r2, r6
 800461a:	463b      	mov	r3, r7
 800461c:	4628      	mov	r0, r5
 800461e:	f7ff ff4f 	bl	80044c0 <FLASH_Program_DoubleWord>
 8004622:	e7ec      	b.n	80045fe <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004624:	2002      	movs	r0, #2
 8004626:	e7f6      	b.n	8004616 <HAL_FLASH_Program+0x4a>
 8004628:	20000500 	.word	0x20000500
 800462c:	58004000 	.word	0x58004000

08004630 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004630:	4a03      	ldr	r2, [pc, #12]	; (8004640 <FLASH_MassErase+0x10>)
 8004632:	6953      	ldr	r3, [r2, #20]
 8004634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004638:	f043 0304 	orr.w	r3, r3, #4
 800463c:	6153      	str	r3, [r2, #20]
#endif
}
 800463e:	4770      	bx	lr
 8004640:	58004000 	.word	0x58004000

08004644 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004644:	4b18      	ldr	r3, [pc, #96]	; (80046a8 <FLASH_FlushCaches+0x64>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464c:	2b01      	cmp	r3, #1
 800464e:	d006      	beq.n	800465e <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004650:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <FLASH_FlushCaches+0x64>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	2b01      	cmp	r3, #1
 800465a:	d012      	beq.n	8004682 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 800465c:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <FLASH_FlushCaches+0x64>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004676:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e7e6      	b.n	8004650 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004682:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <FLASH_FlushCaches+0x64>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800468a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800469a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046a2:	601a      	str	r2, [r3, #0]
}
 80046a4:	e7da      	b.n	800465c <FLASH_FlushCaches+0x18>
 80046a6:	bf00      	nop
 80046a8:	58004000 	.word	0x58004000

080046ac <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80046ac:	4a03      	ldr	r2, [pc, #12]	; (80046bc <FLASH_AcknowledgePageErase+0x10>)
 80046ae:	6953      	ldr	r3, [r2, #20]
 80046b0:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80046b4:	f023 0302 	bic.w	r3, r3, #2
 80046b8:	6153      	str	r3, [r2, #20]
#endif
}
 80046ba:	4770      	bx	lr
 80046bc:	58004000 	.word	0x58004000

080046c0 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80046c0:	4a05      	ldr	r2, [pc, #20]	; (80046d8 <FLASH_PageErase+0x18>)
 80046c2:	6953      	ldr	r3, [r2, #20]
 80046c4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80046c8:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 80046cc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80046d0:	f040 0002 	orr.w	r0, r0, #2
 80046d4:	6150      	str	r0, [r2, #20]
}
 80046d6:	4770      	bx	lr
 80046d8:	58004000 	.word	0x58004000

080046dc <HAL_FLASHEx_Erase>:
{
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80046de:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_FLASHEx_Erase+0x7c>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d035      	beq.n	8004752 <HAL_FLASHEx_Erase+0x76>
 80046e6:	4605      	mov	r5, r0
 80046e8:	460f      	mov	r7, r1
 80046ea:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_FLASHEx_Erase+0x7c>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046f0:	2200      	movs	r2, #0
 80046f2:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046f8:	f7ff ff32 	bl	8004560 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80046fc:	4606      	mov	r6, r0
 80046fe:	bb18      	cbnz	r0, 8004748 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	2b04      	cmp	r3, #4
 8004704:	d013      	beq.n	800472e <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8004706:	f04f 33ff 	mov.w	r3, #4294967295
 800470a:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800470c:	686c      	ldr	r4, [r5, #4]
 800470e:	686b      	ldr	r3, [r5, #4]
 8004710:	68aa      	ldr	r2, [r5, #8]
 8004712:	4413      	add	r3, r2
 8004714:	42a3      	cmp	r3, r4
 8004716:	d913      	bls.n	8004740 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8004718:	4620      	mov	r0, r4
 800471a:	f7ff ffd1 	bl	80046c0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800471e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004722:	f7ff ff1d 	bl	8004560 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004726:	4606      	mov	r6, r0
 8004728:	b948      	cbnz	r0, 800473e <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800472a:	3401      	adds	r4, #1
 800472c:	e7ef      	b.n	800470e <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 800472e:	f7ff ff7f 	bl	8004630 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004736:	f7ff ff13 	bl	8004560 <FLASH_WaitForLastOperation>
 800473a:	4606      	mov	r6, r0
 800473c:	e002      	b.n	8004744 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 800473e:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004740:	f7ff ffb4 	bl	80046ac <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004744:	f7ff ff7e 	bl	8004644 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_FLASHEx_Erase+0x7c>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
}
 800474e:	4630      	mov	r0, r6
 8004750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004752:	2602      	movs	r6, #2
 8004754:	e7fb      	b.n	800474e <HAL_FLASHEx_Erase+0x72>
 8004756:	bf00      	nop
 8004758:	20000500 	.word	0x20000500

0800475c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800475c:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 800475e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004760:	e069      	b.n	8004836 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004762:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004764:	005e      	lsls	r6, r3, #1
 8004766:	2403      	movs	r4, #3
 8004768:	40b4      	lsls	r4, r6
 800476a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800476e:	68cc      	ldr	r4, [r1, #12]
 8004770:	40b4      	lsls	r4, r6
 8004772:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004774:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004776:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004778:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800477c:	684c      	ldr	r4, [r1, #4]
 800477e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004782:	409c      	lsls	r4, r3
 8004784:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8004786:	6044      	str	r4, [r0, #4]
 8004788:	e066      	b.n	8004858 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800478a:	08dd      	lsrs	r5, r3, #3
 800478c:	3508      	adds	r5, #8
 800478e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004792:	f003 0c07 	and.w	ip, r3, #7
 8004796:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800479a:	f04f 0e0f 	mov.w	lr, #15
 800479e:	fa0e fe0c 	lsl.w	lr, lr, ip
 80047a2:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047a6:	690c      	ldr	r4, [r1, #16]
 80047a8:	fa04 f40c 	lsl.w	r4, r4, ip
 80047ac:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 80047b0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80047b4:	e067      	b.n	8004886 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047b6:	2402      	movs	r4, #2
 80047b8:	e000      	b.n	80047bc <HAL_GPIO_Init+0x60>
 80047ba:	2400      	movs	r4, #0
 80047bc:	fa04 f40e 	lsl.w	r4, r4, lr
 80047c0:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047c2:	f10c 0c02 	add.w	ip, ip, #2
 80047c6:	4d4b      	ldr	r5, [pc, #300]	; (80048f4 <HAL_GPIO_Init+0x198>)
 80047c8:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047cc:	4c4a      	ldr	r4, [pc, #296]	; (80048f8 <HAL_GPIO_Init+0x19c>)
 80047ce:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80047d0:	43d4      	mvns	r4, r2
 80047d2:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047d6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80047da:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 80047de:	d001      	beq.n	80047e4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80047e0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80047e4:	4d44      	ldr	r5, [pc, #272]	; (80048f8 <HAL_GPIO_Init+0x19c>)
 80047e6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80047e8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80047ea:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047ee:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80047f2:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 80047f6:	d001      	beq.n	80047fc <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80047f8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80047fc:	4d3e      	ldr	r5, [pc, #248]	; (80048f8 <HAL_GPIO_Init+0x19c>)
 80047fe:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004800:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004804:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004808:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800480c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8004810:	d001      	beq.n	8004816 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8004812:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004816:	4d38      	ldr	r5, [pc, #224]	; (80048f8 <HAL_GPIO_Init+0x19c>)
 8004818:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800481c:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004820:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004822:	684e      	ldr	r6, [r1, #4]
 8004824:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8004828:	d001      	beq.n	800482e <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 800482a:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800482e:	4a32      	ldr	r2, [pc, #200]	; (80048f8 <HAL_GPIO_Init+0x19c>)
 8004830:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004834:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004836:	680a      	ldr	r2, [r1, #0]
 8004838:	fa32 f403 	lsrs.w	r4, r2, r3
 800483c:	d058      	beq.n	80048f0 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800483e:	f04f 0c01 	mov.w	ip, #1
 8004842:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004846:	ea1c 0202 	ands.w	r2, ip, r2
 800484a:	d0f3      	beq.n	8004834 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800484c:	684c      	ldr	r4, [r1, #4]
 800484e:	f004 0403 	and.w	r4, r4, #3
 8004852:	3c01      	subs	r4, #1
 8004854:	2c01      	cmp	r4, #1
 8004856:	d984      	bls.n	8004762 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004858:	684c      	ldr	r4, [r1, #4]
 800485a:	f004 0403 	and.w	r4, r4, #3
 800485e:	2c03      	cmp	r4, #3
 8004860:	d00c      	beq.n	800487c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8004862:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004864:	005d      	lsls	r5, r3, #1
 8004866:	f04f 0c03 	mov.w	ip, #3
 800486a:	fa0c fc05 	lsl.w	ip, ip, r5
 800486e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004872:	688c      	ldr	r4, [r1, #8]
 8004874:	40ac      	lsls	r4, r5
 8004876:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800487a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800487c:	684c      	ldr	r4, [r1, #4]
 800487e:	f004 0403 	and.w	r4, r4, #3
 8004882:	2c02      	cmp	r4, #2
 8004884:	d081      	beq.n	800478a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8004886:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004888:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800488c:	f04f 0c03 	mov.w	ip, #3
 8004890:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004894:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004898:	684c      	ldr	r4, [r1, #4]
 800489a:	f004 0403 	and.w	r4, r4, #3
 800489e:	fa04 f40e 	lsl.w	r4, r4, lr
 80048a2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80048a6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048a8:	684c      	ldr	r4, [r1, #4]
 80048aa:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80048ae:	d0c1      	beq.n	8004834 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 80048b0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80048b4:	f10c 0502 	add.w	r5, ip, #2
 80048b8:	4c0e      	ldr	r4, [pc, #56]	; (80048f4 <HAL_GPIO_Init+0x198>)
 80048ba:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80048be:	f003 0e03 	and.w	lr, r3, #3
 80048c2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80048c6:	2407      	movs	r4, #7
 80048c8:	fa04 f40e 	lsl.w	r4, r4, lr
 80048cc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048d0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80048d4:	f43f af71 	beq.w	80047ba <HAL_GPIO_Init+0x5e>
 80048d8:	4c08      	ldr	r4, [pc, #32]	; (80048fc <HAL_GPIO_Init+0x1a0>)
 80048da:	42a0      	cmp	r0, r4
 80048dc:	d006      	beq.n	80048ec <HAL_GPIO_Init+0x190>
 80048de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80048e2:	42a0      	cmp	r0, r4
 80048e4:	f43f af67 	beq.w	80047b6 <HAL_GPIO_Init+0x5a>
 80048e8:	2407      	movs	r4, #7
 80048ea:	e767      	b.n	80047bc <HAL_GPIO_Init+0x60>
 80048ec:	2401      	movs	r4, #1
 80048ee:	e765      	b.n	80047bc <HAL_GPIO_Init+0x60>
  }
}
 80048f0:	bd70      	pop	{r4, r5, r6, pc}
 80048f2:	bf00      	nop
 80048f4:	40010000 	.word	0x40010000
 80048f8:	58000800 	.word	0x58000800
 80048fc:	48000400 	.word	0x48000400

08004900 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8004900:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004902:	fa31 f203 	lsrs.w	r2, r1, r3
 8004906:	d071      	beq.n	80049ec <HAL_GPIO_DeInit+0xec>
{
 8004908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800490a:	e02e      	b.n	800496a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800490c:	2502      	movs	r5, #2
 800490e:	e000      	b.n	8004912 <HAL_GPIO_DeInit+0x12>
 8004910:	2500      	movs	r5, #0
 8004912:	fa05 f50c 	lsl.w	r5, r5, ip
 8004916:	42a5      	cmp	r5, r4
 8004918:	d049      	beq.n	80049ae <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800491a:	6804      	ldr	r4, [r0, #0]
 800491c:	005d      	lsls	r5, r3, #1
 800491e:	f04f 0c03 	mov.w	ip, #3
 8004922:	fa0c fc05 	lsl.w	ip, ip, r5
 8004926:	ea44 040c 	orr.w	r4, r4, ip
 800492a:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800492c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004930:	f10e 0e08 	add.w	lr, lr, #8
 8004934:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004938:	f003 0607 	and.w	r6, r3, #7
 800493c:	00b6      	lsls	r6, r6, #2
 800493e:	250f      	movs	r5, #15
 8004940:	40b5      	lsls	r5, r6
 8004942:	ea24 0405 	bic.w	r4, r4, r5
 8004946:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800494a:	6884      	ldr	r4, [r0, #8]
 800494c:	ea24 040c 	bic.w	r4, r4, ip
 8004950:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004952:	6844      	ldr	r4, [r0, #4]
 8004954:	ea24 0202 	bic.w	r2, r4, r2
 8004958:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800495a:	68c2      	ldr	r2, [r0, #12]
 800495c:	ea22 020c 	bic.w	r2, r2, ip
 8004960:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004962:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004964:	fa31 f203 	lsrs.w	r2, r1, r3
 8004968:	d03f      	beq.n	80049ea <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800496a:	2201      	movs	r2, #1
 800496c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800496e:	ea12 0701 	ands.w	r7, r2, r1
 8004972:	d0f6      	beq.n	8004962 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004974:	089e      	lsrs	r6, r3, #2
 8004976:	1cb5      	adds	r5, r6, #2
 8004978:	4c1d      	ldr	r4, [pc, #116]	; (80049f0 <HAL_GPIO_DeInit+0xf0>)
 800497a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800497e:	f003 0c03 	and.w	ip, r3, #3
 8004982:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004986:	f04f 0e07 	mov.w	lr, #7
 800498a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800498e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004992:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004996:	d0bb      	beq.n	8004910 <HAL_GPIO_DeInit+0x10>
 8004998:	4d16      	ldr	r5, [pc, #88]	; (80049f4 <HAL_GPIO_DeInit+0xf4>)
 800499a:	42a8      	cmp	r0, r5
 800499c:	d005      	beq.n	80049aa <HAL_GPIO_DeInit+0xaa>
 800499e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80049a2:	42a8      	cmp	r0, r5
 80049a4:	d0b2      	beq.n	800490c <HAL_GPIO_DeInit+0xc>
 80049a6:	2507      	movs	r5, #7
 80049a8:	e7b3      	b.n	8004912 <HAL_GPIO_DeInit+0x12>
 80049aa:	2501      	movs	r5, #1
 80049ac:	e7b1      	b.n	8004912 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 80049ae:	4c12      	ldr	r4, [pc, #72]	; (80049f8 <HAL_GPIO_DeInit+0xf8>)
 80049b0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80049b4:	ea25 0507 	bic.w	r5, r5, r7
 80049b8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80049bc:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80049c0:	ea25 0507 	bic.w	r5, r5, r7
 80049c4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 80049c8:	6825      	ldr	r5, [r4, #0]
 80049ca:	ea25 0507 	bic.w	r5, r5, r7
 80049ce:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80049d0:	6865      	ldr	r5, [r4, #4]
 80049d2:	ea25 0507 	bic.w	r5, r5, r7
 80049d6:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80049d8:	4d05      	ldr	r5, [pc, #20]	; (80049f0 <HAL_GPIO_DeInit+0xf0>)
 80049da:	3602      	adds	r6, #2
 80049dc:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80049e0:	ea24 040e 	bic.w	r4, r4, lr
 80049e4:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80049e8:	e797      	b.n	800491a <HAL_GPIO_DeInit+0x1a>
  }
}
 80049ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	48000400 	.word	0x48000400
 80049f8:	58000800 	.word	0x58000800

080049fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049fc:	b10a      	cbz	r2, 8004a02 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049fe:	6181      	str	r1, [r0, #24]
 8004a00:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a02:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004a04:	4770      	bx	lr

08004a06 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a06:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a08:	ea01 0203 	and.w	r2, r1, r3
 8004a0c:	ea21 0103 	bic.w	r1, r1, r3
 8004a10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a14:	6181      	str	r1, [r0, #24]
}
 8004a16:	4770      	bx	lr

08004a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a18:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a1a:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	4203      	tst	r3, r0
 8004a20:	d100      	bne.n	8004a24 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004a22:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a24:	4b02      	ldr	r3, [pc, #8]	; (8004a30 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004a26:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a28:	f7fe f960 	bl	8002cec <HAL_GPIO_EXTI_Callback>
}
 8004a2c:	e7f9      	b.n	8004a22 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004a2e:	bf00      	nop
 8004a30:	58000800 	.word	0x58000800

08004a34 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a34:	6803      	ldr	r3, [r0, #0]
 8004a36:	699a      	ldr	r2, [r3, #24]
 8004a38:	f012 0f02 	tst.w	r2, #2
 8004a3c:	d001      	beq.n	8004a42 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a3e:	2200      	movs	r2, #0
 8004a40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a42:	6803      	ldr	r3, [r0, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	f012 0f01 	tst.w	r2, #1
 8004a4a:	d103      	bne.n	8004a54 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a4c:	699a      	ldr	r2, [r3, #24]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	619a      	str	r2, [r3, #24]
  }
}
 8004a54:	4770      	bx	lr

08004a56 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a56:	b410      	push	{r4}
 8004a58:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a5a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004a5e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a62:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a64:	4321      	orrs	r1, r4
 8004a66:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a6a:	6802      	ldr	r2, [r0, #0]
 8004a6c:	6853      	ldr	r3, [r2, #4]
 8004a6e:	0d64      	lsrs	r4, r4, #21
 8004a70:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8004a74:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8004a78:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8004a7c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004a80:	f044 0403 	orr.w	r4, r4, #3
 8004a84:	ea23 0304 	bic.w	r3, r3, r4
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a8c:	bc10      	pop	{r4}
 8004a8e:	4770      	bx	lr

08004a90 <I2C_IsErrorOccurred>:
{
 8004a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a94:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a96:	6803      	ldr	r3, [r0, #0]
 8004a98:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a9a:	f016 0610 	ands.w	r6, r6, #16
 8004a9e:	d07c      	beq.n	8004b9a <I2C_IsErrorOccurred+0x10a>
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8004aa8:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004aaa:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	6998      	ldr	r0, [r3, #24]
 8004ab0:	f010 0f20 	tst.w	r0, #32
 8004ab4:	d130      	bne.n	8004b18 <I2C_IsErrorOccurred+0x88>
 8004ab6:	bb7f      	cbnz	r7, 8004b18 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8004ab8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004abc:	d0f6      	beq.n	8004aac <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7fd f89d 	bl	8001bfc <HAL_GetTick>
 8004ac2:	eba0 0008 	sub.w	r0, r0, r8
 8004ac6:	42a8      	cmp	r0, r5
 8004ac8:	d801      	bhi.n	8004ace <I2C_IsErrorOccurred+0x3e>
 8004aca:	2d00      	cmp	r5, #0
 8004acc:	d1ee      	bne.n	8004aac <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ace:	6821      	ldr	r1, [r4, #0]
 8004ad0:	684b      	ldr	r3, [r1, #4]
 8004ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8004ad6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8004ada:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004adc:	6988      	ldr	r0, [r1, #24]
 8004ade:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004ae2:	d002      	beq.n	8004aea <I2C_IsErrorOccurred+0x5a>
 8004ae4:	b90b      	cbnz	r3, 8004aea <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8004ae6:	2a20      	cmp	r2, #32
 8004ae8:	d10e      	bne.n	8004b08 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f013 0f20 	tst.w	r3, #32
 8004af2:	d1db      	bne.n	8004aac <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004af4:	f7fd f882 	bl	8001bfc <HAL_GetTick>
 8004af8:	eba0 0008 	sub.w	r0, r0, r8
 8004afc:	2819      	cmp	r0, #25
 8004afe:	d9f4      	bls.n	8004aea <I2C_IsErrorOccurred+0x5a>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004b00:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8004b04:	2701      	movs	r7, #1
              break;
 8004b06:	e7d1      	b.n	8004aac <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b08:	684b      	ldr	r3, [r1, #4]
 8004b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b0e:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8004b10:	f7fd f874 	bl	8001bfc <HAL_GetTick>
 8004b14:	4680      	mov	r8, r0
 8004b16:	e7e8      	b.n	8004aea <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8004b18:	b90f      	cbnz	r7, 8004b1e <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8004b1e:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8004b22:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b28:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b2c:	d005      	beq.n	8004b3a <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 8004b2e:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b36:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004b38:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b3a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004b3e:	d006      	beq.n	8004b4e <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 8004b40:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b4a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004b4c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b4e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004b52:	d024      	beq.n	8004b9e <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b54:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b5e:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8004b60:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8004b62:	4620      	mov	r0, r4
 8004b64:	f7ff ff66 	bl	8004a34 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004b68:	6822      	ldr	r2, [r4, #0]
 8004b6a:	6853      	ldr	r3, [r2, #4]
 8004b6c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004b70:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004b74:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8004b7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b80:	4333      	orrs	r3, r6
 8004b82:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	2320      	movs	r3, #32
 8004b86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004b90:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004b94:	4628      	mov	r0, r5
 8004b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2500      	movs	r5, #0
 8004b9c:	e7c2      	b.n	8004b24 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8004b9e:	2d00      	cmp	r5, #0
 8004ba0:	d0f8      	beq.n	8004b94 <I2C_IsErrorOccurred+0x104>
 8004ba2:	e7de      	b.n	8004b62 <I2C_IsErrorOccurred+0xd2>

08004ba4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	460d      	mov	r5, r1
 8004baa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f013 0f02 	tst.w	r3, #2
 8004bb4:	d11d      	bne.n	8004bf2 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb6:	4632      	mov	r2, r6
 8004bb8:	4629      	mov	r1, r5
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f7ff ff68 	bl	8004a90 <I2C_IsErrorOccurred>
 8004bc0:	b9c8      	cbnz	r0, 8004bf6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8004bc2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004bc6:	d0f1      	beq.n	8004bac <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc8:	f7fd f818 	bl	8001bfc <HAL_GetTick>
 8004bcc:	1b80      	subs	r0, r0, r6
 8004bce:	42a8      	cmp	r0, r5
 8004bd0:	d801      	bhi.n	8004bd6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004bd2:	2d00      	cmp	r5, #0
 8004bd4:	d1ea      	bne.n	8004bac <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004bd8:	f043 0320 	orr.w	r3, r3, #32
 8004bdc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bde:	2320      	movs	r3, #32
 8004be0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004bea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004bee:	2001      	movs	r0, #1
 8004bf0:	e000      	b.n	8004bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8004bf2:	2000      	movs	r0, #0
}
 8004bf4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004bf6:	2001      	movs	r0, #1
 8004bf8:	e7fc      	b.n	8004bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08004bfa <I2C_WaitOnFlagUntilTimeout>:
{
 8004bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfe:	4606      	mov	r6, r0
 8004c00:	4688      	mov	r8, r1
 8004c02:	4617      	mov	r7, r2
 8004c04:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c06:	6834      	ldr	r4, [r6, #0]
 8004c08:	69a4      	ldr	r4, [r4, #24]
 8004c0a:	ea38 0404 	bics.w	r4, r8, r4
 8004c0e:	bf0c      	ite	eq
 8004c10:	2401      	moveq	r4, #1
 8004c12:	2400      	movne	r4, #0
 8004c14:	42bc      	cmp	r4, r7
 8004c16:	d118      	bne.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004c18:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004c1c:	d0f3      	beq.n	8004c06 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fc ffed 	bl	8001bfc <HAL_GetTick>
 8004c22:	9b06      	ldr	r3, [sp, #24]
 8004c24:	1ac0      	subs	r0, r0, r3
 8004c26:	42a8      	cmp	r0, r5
 8004c28:	d801      	bhi.n	8004c2e <I2C_WaitOnFlagUntilTimeout+0x34>
 8004c2a:	2d00      	cmp	r5, #0
 8004c2c:	d1eb      	bne.n	8004c06 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c2e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004c30:	f043 0320 	orr.w	r3, r3, #32
 8004c34:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c36:	2320      	movs	r3, #32
 8004c38:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004c42:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004c46:	2001      	movs	r0, #1
 8004c48:	e000      	b.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8004c4a:	2000      	movs	r0, #0
}
 8004c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c50 <I2C_RequestMemoryWrite>:
{
 8004c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	4604      	mov	r4, r0
 8004c58:	4690      	mov	r8, r2
 8004c5a:	461d      	mov	r5, r3
 8004c5c:	9e08      	ldr	r6, [sp, #32]
 8004c5e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c60:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <I2C_RequestMemoryWrite+0x78>)
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c68:	b2ea      	uxtb	r2, r5
 8004c6a:	f7ff fef4 	bl	8004a56 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6e:	463a      	mov	r2, r7
 8004c70:	4631      	mov	r1, r6
 8004c72:	4620      	mov	r0, r4
 8004c74:	f7ff ff96 	bl	8004ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c78:	b9f8      	cbnz	r0, 8004cba <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7a:	2d01      	cmp	r5, #1
 8004c7c:	d10e      	bne.n	8004c9c <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	fa5f f288 	uxtb.w	r2, r8
 8004c84:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c86:	9700      	str	r7, [sp, #0]
 8004c88:	4633      	mov	r3, r6
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2180      	movs	r1, #128	; 0x80
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7ff ffb3 	bl	8004bfa <I2C_WaitOnFlagUntilTimeout>
 8004c94:	b9a8      	cbnz	r0, 8004cc2 <I2C_RequestMemoryWrite+0x72>
}
 8004c96:	b002      	add	sp, #8
 8004c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca4:	463a      	mov	r2, r7
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7ff ff7b 	bl	8004ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cae:	b930      	cbnz	r0, 8004cbe <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	fa5f f288 	uxtb.w	r2, r8
 8004cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb8:	e7e5      	b.n	8004c86 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8004cba:	2001      	movs	r0, #1
 8004cbc:	e7eb      	b.n	8004c96 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	e7e9      	b.n	8004c96 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	e7e7      	b.n	8004c96 <I2C_RequestMemoryWrite+0x46>
 8004cc6:	bf00      	nop
 8004cc8:	80002000 	.word	0x80002000

08004ccc <I2C_RequestMemoryRead>:
{
 8004ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	4690      	mov	r8, r2
 8004cd6:	461d      	mov	r5, r3
 8004cd8:	9e08      	ldr	r6, [sp, #32]
 8004cda:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004cdc:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <I2C_RequestMemoryRead+0x74>)
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	b2ea      	uxtb	r2, r5
 8004ce4:	f7ff feb7 	bl	8004a56 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce8:	463a      	mov	r2, r7
 8004cea:	4631      	mov	r1, r6
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7ff ff59 	bl	8004ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cf2:	b9f8      	cbnz	r0, 8004d34 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cf4:	2d01      	cmp	r5, #1
 8004cf6:	d10e      	bne.n	8004d16 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	fa5f f288 	uxtb.w	r2, r8
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d00:	9700      	str	r7, [sp, #0]
 8004d02:	4633      	mov	r3, r6
 8004d04:	2200      	movs	r2, #0
 8004d06:	2140      	movs	r1, #64	; 0x40
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f7ff ff76 	bl	8004bfa <I2C_WaitOnFlagUntilTimeout>
 8004d0e:	b9a8      	cbnz	r0, 8004d3c <I2C_RequestMemoryRead+0x70>
}
 8004d10:	b002      	add	sp, #8
 8004d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004d1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1e:	463a      	mov	r2, r7
 8004d20:	4631      	mov	r1, r6
 8004d22:	4620      	mov	r0, r4
 8004d24:	f7ff ff3e 	bl	8004ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d28:	b930      	cbnz	r0, 8004d38 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	fa5f f288 	uxtb.w	r2, r8
 8004d30:	629a      	str	r2, [r3, #40]	; 0x28
 8004d32:	e7e5      	b.n	8004d00 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8004d34:	2001      	movs	r0, #1
 8004d36:	e7eb      	b.n	8004d10 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8004d38:	2001      	movs	r0, #1
 8004d3a:	e7e9      	b.n	8004d10 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	e7e7      	b.n	8004d10 <I2C_RequestMemoryRead+0x44>
 8004d40:	80002000 	.word	0x80002000

08004d44 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	4605      	mov	r5, r0
 8004d48:	460c      	mov	r4, r1
 8004d4a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f013 0f20 	tst.w	r3, #32
 8004d54:	d11a      	bne.n	8004d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d56:	4632      	mov	r2, r6
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f7ff fe98 	bl	8004a90 <I2C_IsErrorOccurred>
 8004d60:	b9b0      	cbnz	r0, 8004d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d62:	f7fc ff4b 	bl	8001bfc <HAL_GetTick>
 8004d66:	1b80      	subs	r0, r0, r6
 8004d68:	42a0      	cmp	r0, r4
 8004d6a:	d801      	bhi.n	8004d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8004d6c:	2c00      	cmp	r4, #0
 8004d6e:	d1ed      	bne.n	8004d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d70:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004d72:	f043 0320 	orr.w	r3, r3, #32
 8004d76:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d78:	2320      	movs	r3, #32
 8004d7a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004d84:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004d88:	2001      	movs	r0, #1
}
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	e7fc      	b.n	8004d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8004d90:	2001      	movs	r0, #1
 8004d92:	e7fa      	b.n	8004d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08004d94 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	4604      	mov	r4, r0
 8004d98:	460d      	mov	r5, r1
 8004d9a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f013 0f04 	tst.w	r3, #4
 8004da4:	d149      	bne.n	8004e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da6:	4632      	mov	r2, r6
 8004da8:	4629      	mov	r1, r5
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7ff fe70 	bl	8004a90 <I2C_IsErrorOccurred>
 8004db0:	4601      	mov	r1, r0
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d143      	bne.n	8004e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	f012 0f20 	tst.w	r2, #32
 8004dbe:	d113      	bne.n	8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc0:	f7fc ff1c 	bl	8001bfc <HAL_GetTick>
 8004dc4:	1b80      	subs	r0, r0, r6
 8004dc6:	42a8      	cmp	r0, r5
 8004dc8:	d801      	bhi.n	8004dce <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8004dca:	2d00      	cmp	r5, #0
 8004dcc:	d1e6      	bne.n	8004d9c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004dd0:	f043 0320 	orr.w	r3, r3, #32
 8004dd4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004de2:	2101      	movs	r1, #1
}
 8004de4:	4608      	mov	r0, r1
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	f012 0f04 	tst.w	r2, #4
 8004dee:	d002      	beq.n	8004df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004df0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004df2:	2a00      	cmp	r2, #0
 8004df4:	d1f6      	bne.n	8004de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	f012 0f10 	tst.w	r2, #16
 8004dfc:	d01a      	beq.n	8004e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfe:	2210      	movs	r2, #16
 8004e00:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e02:	2304      	movs	r3, #4
 8004e04:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8004e0c:	6821      	ldr	r1, [r4, #0]
 8004e0e:	684b      	ldr	r3, [r1, #4]
 8004e10:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004e14:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004e18:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8004e22:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004e2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004e30:	2101      	movs	r1, #1
 8004e32:	e7d7      	b.n	8004de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	6463      	str	r3, [r4, #68]	; 0x44
 8004e38:	e7e5      	b.n	8004e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	e7d2      	b.n	8004de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8004e3e:	2101      	movs	r1, #1
 8004e40:	e7d0      	b.n	8004de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08004e42 <HAL_I2C_MspInit>:
}
 8004e42:	4770      	bx	lr

08004e44 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d059      	beq.n	8004efc <HAL_I2C_Init+0xb8>
{
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e4c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d043      	beq.n	8004edc <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e54:	2324      	movs	r3, #36	; 0x24
 8004e56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	6813      	ldr	r3, [r2, #0]
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e64:	6863      	ldr	r3, [r4, #4]
 8004e66:	6822      	ldr	r2, [r4, #0]
 8004e68:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004e6c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	6893      	ldr	r3, [r2, #8]
 8004e72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e76:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e78:	68e3      	ldr	r3, [r4, #12]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d033      	beq.n	8004ee6 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e7e:	68a3      	ldr	r3, [r4, #8]
 8004e80:	6822      	ldr	r2, [r4, #0]
 8004e82:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004e86:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e88:	68e3      	ldr	r3, [r4, #12]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d031      	beq.n	8004ef2 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	6853      	ldr	r3, [r2, #4]
 8004e92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e9c:	6822      	ldr	r2, [r4, #0]
 8004e9e:	68d3      	ldr	r3, [r2, #12]
 8004ea0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ea4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	6962      	ldr	r2, [r4, #20]
 8004eaa:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004eac:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004eb4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004eb6:	69e3      	ldr	r3, [r4, #28]
 8004eb8:	6a21      	ldr	r1, [r4, #32]
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	6813      	ldr	r3, [r2, #0]
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eca:	2000      	movs	r0, #0
 8004ecc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	2320      	movs	r3, #32
 8004ed0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ed4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004eda:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004edc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004ee0:	f7ff ffaf 	bl	8004e42 <HAL_I2C_MspInit>
 8004ee4:	e7b6      	b.n	8004e54 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	6822      	ldr	r2, [r4, #0]
 8004eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eee:	6093      	str	r3, [r2, #8]
 8004ef0:	e7ca      	b.n	8004e88 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	e7c8      	b.n	8004e8e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004efc:	2001      	movs	r0, #1
}
 8004efe:	4770      	bx	lr

08004f00 <HAL_I2C_Master_Transmit>:
{
 8004f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	460f      	mov	r7, r1
 8004f08:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f0a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004f0e:	b2c9      	uxtb	r1, r1
 8004f10:	2920      	cmp	r1, #32
 8004f12:	f040 80a3 	bne.w	800505c <HAL_I2C_Master_Transmit+0x15c>
 8004f16:	4604      	mov	r4, r0
 8004f18:	4690      	mov	r8, r2
 8004f1a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8004f1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	f000 809f 	beq.w	8005064 <HAL_I2C_Master_Transmit+0x164>
 8004f26:	f04f 0a01 	mov.w	sl, #1
 8004f2a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004f2e:	f7fc fe65 	bl	8001bfc <HAL_GetTick>
 8004f32:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f34:	9000      	str	r0, [sp, #0]
 8004f36:	2319      	movs	r3, #25
 8004f38:	4652      	mov	r2, sl
 8004f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7ff fe5b 	bl	8004bfa <I2C_WaitOnFlagUntilTimeout>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	f040 808f 	bne.w	8005068 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f4a:	2321      	movs	r3, #33	; 0x21
 8004f4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f50:	2310      	movs	r3, #16
 8004f52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004f5a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f5e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f62:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2bff      	cmp	r3, #255	; 0xff
 8004f6a:	d90a      	bls.n	8004f82 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f6c:	22ff      	movs	r2, #255	; 0xff
 8004f6e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f70:	4b41      	ldr	r3, [pc, #260]	; (8005078 <HAL_I2C_Master_Transmit+0x178>)
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f78:	4639      	mov	r1, r7
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f7ff fd6b 	bl	8004a56 <I2C_TransferConfig>
 8004f80:	e018      	b.n	8004fb4 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8004f82:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f84:	b292      	uxth	r2, r2
 8004f86:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f88:	4b3b      	ldr	r3, [pc, #236]	; (8005078 <HAL_I2C_Master_Transmit+0x178>)
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	4639      	mov	r1, r7
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff fd5e 	bl	8004a56 <I2C_TransferConfig>
 8004f9a:	e00b      	b.n	8004fb4 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8004f9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f9e:	b292      	uxth	r2, r2
 8004fa0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	4639      	mov	r1, r7
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f7ff fd51 	bl	8004a56 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004fb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d033      	beq.n	8005024 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbc:	462a      	mov	r2, r5
 8004fbe:	4631      	mov	r1, r6
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f7ff fdef 	bl	8004ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d150      	bne.n	800506c <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	7812      	ldrb	r2, [r2, #0]
 8004fd0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004fd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004fe2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004fec:	b292      	uxth	r2, r2
 8004fee:	2a00      	cmp	r2, #0
 8004ff0:	d0e0      	beq.n	8004fb4 <HAL_I2C_Master_Transmit+0xb4>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1de      	bne.n	8004fb4 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ff6:	9500      	str	r5, [sp, #0]
 8004ff8:	4633      	mov	r3, r6
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2180      	movs	r1, #128	; 0x80
 8004ffe:	4620      	mov	r0, r4
 8005000:	f7ff fdfb 	bl	8004bfa <I2C_WaitOnFlagUntilTimeout>
 8005004:	bba0      	cbnz	r0, 8005070 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005006:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	2bff      	cmp	r3, #255	; 0xff
 800500c:	d9c6      	bls.n	8004f9c <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800500e:	22ff      	movs	r2, #255	; 0xff
 8005010:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005012:	2300      	movs	r3, #0
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800501a:	4639      	mov	r1, r7
 800501c:	4620      	mov	r0, r4
 800501e:	f7ff fd1a 	bl	8004a56 <I2C_TransferConfig>
 8005022:	e7c7      	b.n	8004fb4 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005024:	462a      	mov	r2, r5
 8005026:	4631      	mov	r1, r6
 8005028:	4620      	mov	r0, r4
 800502a:	f7ff fe8b 	bl	8004d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800502e:	bb08      	cbnz	r0, 8005074 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	2220      	movs	r2, #32
 8005034:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005036:	6821      	ldr	r1, [r4, #0]
 8005038:	684b      	ldr	r3, [r1, #4]
 800503a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800503e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005042:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005046:	f023 0301 	bic.w	r3, r3, #1
 800504a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800504c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005050:	2300      	movs	r3, #0
 8005052:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005056:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800505a:	e000      	b.n	800505e <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 800505c:	2002      	movs	r0, #2
}
 800505e:	b002      	add	sp, #8
 8005060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005064:	2002      	movs	r0, #2
 8005066:	e7fa      	b.n	800505e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005068:	2001      	movs	r0, #1
 800506a:	e7f8      	b.n	800505e <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 800506c:	2001      	movs	r0, #1
 800506e:	e7f6      	b.n	800505e <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8005070:	2001      	movs	r0, #1
 8005072:	e7f4      	b.n	800505e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005074:	2001      	movs	r0, #1
 8005076:	e7f2      	b.n	800505e <HAL_I2C_Master_Transmit+0x15e>
 8005078:	80002000 	.word	0x80002000

0800507c <HAL_I2C_Master_Receive>:
{
 800507c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	460f      	mov	r7, r1
 8005084:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005086:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800508a:	b2c9      	uxtb	r1, r1
 800508c:	2920      	cmp	r1, #32
 800508e:	f040 80a2 	bne.w	80051d6 <HAL_I2C_Master_Receive+0x15a>
 8005092:	4604      	mov	r4, r0
 8005094:	4690      	mov	r8, r2
 8005096:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005098:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800509c:	2b01      	cmp	r3, #1
 800509e:	f000 809e 	beq.w	80051de <HAL_I2C_Master_Receive+0x162>
 80050a2:	f04f 0a01 	mov.w	sl, #1
 80050a6:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80050aa:	f7fc fda7 	bl	8001bfc <HAL_GetTick>
 80050ae:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050b0:	9000      	str	r0, [sp, #0]
 80050b2:	2319      	movs	r3, #25
 80050b4:	4652      	mov	r2, sl
 80050b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050ba:	4620      	mov	r0, r4
 80050bc:	f7ff fd9d 	bl	8004bfa <I2C_WaitOnFlagUntilTimeout>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	f040 808e 	bne.w	80051e2 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050c6:	2322      	movs	r3, #34	; 0x22
 80050c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050cc:	2310      	movs	r3, #16
 80050ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80050d6:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80050da:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050de:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2bff      	cmp	r3, #255	; 0xff
 80050e6:	d90a      	bls.n	80050fe <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050e8:	22ff      	movs	r2, #255	; 0xff
 80050ea:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050ec:	4b41      	ldr	r3, [pc, #260]	; (80051f4 <HAL_I2C_Master_Receive+0x178>)
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050f4:	4639      	mov	r1, r7
 80050f6:	4620      	mov	r0, r4
 80050f8:	f7ff fcad 	bl	8004a56 <I2C_TransferConfig>
 80050fc:	e018      	b.n	8005130 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 80050fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005100:	b292      	uxth	r2, r2
 8005102:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005104:	4b3b      	ldr	r3, [pc, #236]	; (80051f4 <HAL_I2C_Master_Receive+0x178>)
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	4639      	mov	r1, r7
 8005110:	4620      	mov	r0, r4
 8005112:	f7ff fca0 	bl	8004a56 <I2C_TransferConfig>
 8005116:	e00b      	b.n	8005130 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8005118:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800511a:	b292      	uxth	r2, r2
 800511c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800511e:	2300      	movs	r3, #0
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	4639      	mov	r1, r7
 800512a:	4620      	mov	r0, r4
 800512c:	f7ff fc93 	bl	8004a56 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005130:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d032      	beq.n	800519e <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005138:	462a      	mov	r2, r5
 800513a:	4631      	mov	r1, r6
 800513c:	4620      	mov	r0, r4
 800513e:	f7ff fe29 	bl	8004d94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005142:	2800      	cmp	r0, #0
 8005144:	d14f      	bne.n	80051e6 <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800514a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800514c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800514e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005150:	3301      	adds	r3, #1
 8005152:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005154:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005156:	3a01      	subs	r2, #1
 8005158:	b292      	uxth	r2, r2
 800515a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800515c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29b      	uxth	r3, r3
 8005164:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005166:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0e0      	beq.n	8005130 <HAL_I2C_Master_Receive+0xb4>
 800516e:	2a00      	cmp	r2, #0
 8005170:	d1de      	bne.n	8005130 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005172:	9500      	str	r5, [sp, #0]
 8005174:	4633      	mov	r3, r6
 8005176:	2180      	movs	r1, #128	; 0x80
 8005178:	4620      	mov	r0, r4
 800517a:	f7ff fd3e 	bl	8004bfa <I2C_WaitOnFlagUntilTimeout>
 800517e:	bba0      	cbnz	r0, 80051ea <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005180:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	2bff      	cmp	r3, #255	; 0xff
 8005186:	d9c7      	bls.n	8005118 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005188:	22ff      	movs	r2, #255	; 0xff
 800518a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800518c:	2300      	movs	r3, #0
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005194:	4639      	mov	r1, r7
 8005196:	4620      	mov	r0, r4
 8005198:	f7ff fc5d 	bl	8004a56 <I2C_TransferConfig>
 800519c:	e7c8      	b.n	8005130 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800519e:	462a      	mov	r2, r5
 80051a0:	4631      	mov	r1, r6
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7ff fdce 	bl	8004d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051a8:	bb08      	cbnz	r0, 80051ee <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	2220      	movs	r2, #32
 80051ae:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80051b0:	6821      	ldr	r1, [r4, #0]
 80051b2:	684b      	ldr	r3, [r1, #4]
 80051b4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80051b8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80051bc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051c6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80051d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80051d4:	e000      	b.n	80051d8 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 80051d6:	2002      	movs	r0, #2
}
 80051d8:	b002      	add	sp, #8
 80051da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80051de:	2002      	movs	r0, #2
 80051e0:	e7fa      	b.n	80051d8 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80051e2:	2001      	movs	r0, #1
 80051e4:	e7f8      	b.n	80051d8 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 80051e6:	2001      	movs	r0, #1
 80051e8:	e7f6      	b.n	80051d8 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 80051ea:	2001      	movs	r0, #1
 80051ec:	e7f4      	b.n	80051d8 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80051ee:	2001      	movs	r0, #1
 80051f0:	e7f2      	b.n	80051d8 <HAL_I2C_Master_Receive+0x15c>
 80051f2:	bf00      	nop
 80051f4:	80002400 	.word	0x80002400

080051f8 <HAL_I2C_Mem_Write>:
{
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	b083      	sub	sp, #12
 80051fe:	460e      	mov	r6, r1
 8005200:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005204:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005206:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800520a:	b2c9      	uxtb	r1, r1
 800520c:	2920      	cmp	r1, #32
 800520e:	f040 80bb 	bne.w	8005388 <HAL_I2C_Mem_Write+0x190>
 8005212:	4604      	mov	r4, r0
 8005214:	4690      	mov	r8, r2
 8005216:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800521a:	b1cb      	cbz	r3, 8005250 <HAL_I2C_Mem_Write+0x58>
 800521c:	f1ba 0f00 	cmp.w	sl, #0
 8005220:	d016      	beq.n	8005250 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8005222:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005226:	2b01      	cmp	r3, #1
 8005228:	f000 80b2 	beq.w	8005390 <HAL_I2C_Mem_Write+0x198>
 800522c:	f04f 0b01 	mov.w	fp, #1
 8005230:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005234:	f7fc fce2 	bl	8001bfc <HAL_GetTick>
 8005238:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800523a:	9000      	str	r0, [sp, #0]
 800523c:	2319      	movs	r3, #25
 800523e:	465a      	mov	r2, fp
 8005240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005244:	4620      	mov	r0, r4
 8005246:	f7ff fcd8 	bl	8004bfa <I2C_WaitOnFlagUntilTimeout>
 800524a:	b130      	cbz	r0, 800525a <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 800524c:	2001      	movs	r0, #1
 800524e:	e09c      	b.n	800538a <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005254:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005256:	2001      	movs	r0, #1
 8005258:	e097      	b.n	800538a <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800525a:	2321      	movs	r3, #33	; 0x21
 800525c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005260:	2340      	movs	r3, #64	; 0x40
 8005262:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005266:	2300      	movs	r3, #0
 8005268:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800526a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800526c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800526e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005272:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005274:	9701      	str	r7, [sp, #4]
 8005276:	9500      	str	r5, [sp, #0]
 8005278:	464b      	mov	r3, r9
 800527a:	4642      	mov	r2, r8
 800527c:	4631      	mov	r1, r6
 800527e:	4620      	mov	r0, r4
 8005280:	f7ff fce6 	bl	8004c50 <I2C_RequestMemoryWrite>
 8005284:	b970      	cbnz	r0, 80052a4 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005286:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2bff      	cmp	r3, #255	; 0xff
 800528c:	d90f      	bls.n	80052ae <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800528e:	22ff      	movs	r2, #255	; 0xff
 8005290:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005292:	2300      	movs	r3, #0
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800529a:	4631      	mov	r1, r6
 800529c:	4620      	mov	r0, r4
 800529e:	f7ff fbda 	bl	8004a56 <I2C_TransferConfig>
 80052a2:	e021      	b.n	80052e8 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 80052a4:	2300      	movs	r3, #0
 80052a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80052aa:	4658      	mov	r0, fp
 80052ac:	e06d      	b.n	800538a <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 80052ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80052b0:	b292      	uxth	r2, r2
 80052b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052b4:	2300      	movs	r3, #0
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	4631      	mov	r1, r6
 80052c0:	4620      	mov	r0, r4
 80052c2:	f7ff fbc8 	bl	8004a56 <I2C_TransferConfig>
 80052c6:	e00f      	b.n	80052e8 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80052c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80052ca:	b292      	uxth	r2, r2
 80052cc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052ce:	2300      	movs	r3, #0
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	4631      	mov	r1, r6
 80052da:	4620      	mov	r0, r4
 80052dc:	f7ff fbbb 	bl	8004a56 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80052e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d033      	beq.n	8005350 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e8:	463a      	mov	r2, r7
 80052ea:	4629      	mov	r1, r5
 80052ec:	4620      	mov	r0, r4
 80052ee:	f7ff fc59 	bl	8004ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d14e      	bne.n	8005394 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	7812      	ldrb	r2, [r2, #0]
 80052fc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80052fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005300:	3301      	adds	r3, #1
 8005302:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005304:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29b      	uxth	r3, r3
 800530c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800530e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005310:	3b01      	subs	r3, #1
 8005312:	b29b      	uxth	r3, r3
 8005314:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005316:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005318:	b292      	uxth	r2, r2
 800531a:	2a00      	cmp	r2, #0
 800531c:	d0e0      	beq.n	80052e0 <HAL_I2C_Mem_Write+0xe8>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1de      	bne.n	80052e0 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005322:	9700      	str	r7, [sp, #0]
 8005324:	462b      	mov	r3, r5
 8005326:	2200      	movs	r2, #0
 8005328:	2180      	movs	r1, #128	; 0x80
 800532a:	4620      	mov	r0, r4
 800532c:	f7ff fc65 	bl	8004bfa <I2C_WaitOnFlagUntilTimeout>
 8005330:	bb90      	cbnz	r0, 8005398 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005332:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	2bff      	cmp	r3, #255	; 0xff
 8005338:	d9c6      	bls.n	80052c8 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800533a:	22ff      	movs	r2, #255	; 0xff
 800533c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800533e:	2300      	movs	r3, #0
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005346:	4631      	mov	r1, r6
 8005348:	4620      	mov	r0, r4
 800534a:	f7ff fb84 	bl	8004a56 <I2C_TransferConfig>
 800534e:	e7c7      	b.n	80052e0 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005350:	463a      	mov	r2, r7
 8005352:	4629      	mov	r1, r5
 8005354:	4620      	mov	r0, r4
 8005356:	f7ff fcf5 	bl	8004d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800535a:	b9f8      	cbnz	r0, 800539c <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	2220      	movs	r2, #32
 8005360:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005362:	6821      	ldr	r1, [r4, #0]
 8005364:	684b      	ldr	r3, [r1, #4]
 8005366:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800536a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800536e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005378:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800537c:	2300      	movs	r3, #0
 800537e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005382:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005386:	e000      	b.n	800538a <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8005388:	2002      	movs	r0, #2
}
 800538a:	b003      	add	sp, #12
 800538c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005390:	2002      	movs	r0, #2
 8005392:	e7fa      	b.n	800538a <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8005394:	2001      	movs	r0, #1
 8005396:	e7f8      	b.n	800538a <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8005398:	2001      	movs	r0, #1
 800539a:	e7f6      	b.n	800538a <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 800539c:	2001      	movs	r0, #1
 800539e:	e7f4      	b.n	800538a <HAL_I2C_Mem_Write+0x192>

080053a0 <HAL_I2C_Mem_Read>:
{
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	b083      	sub	sp, #12
 80053a6:	460e      	mov	r6, r1
 80053a8:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80053ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ae:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80053b2:	b2c9      	uxtb	r1, r1
 80053b4:	2920      	cmp	r1, #32
 80053b6:	f040 80bc 	bne.w	8005532 <HAL_I2C_Mem_Read+0x192>
 80053ba:	4604      	mov	r4, r0
 80053bc:	4690      	mov	r8, r2
 80053be:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80053c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053c2:	b1cb      	cbz	r3, 80053f8 <HAL_I2C_Mem_Read+0x58>
 80053c4:	f1ba 0f00 	cmp.w	sl, #0
 80053c8:	d016      	beq.n	80053f8 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 80053ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f000 80b3 	beq.w	800553a <HAL_I2C_Mem_Read+0x19a>
 80053d4:	f04f 0b01 	mov.w	fp, #1
 80053d8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80053dc:	f7fc fc0e 	bl	8001bfc <HAL_GetTick>
 80053e0:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053e2:	9000      	str	r0, [sp, #0]
 80053e4:	2319      	movs	r3, #25
 80053e6:	465a      	mov	r2, fp
 80053e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053ec:	4620      	mov	r0, r4
 80053ee:	f7ff fc04 	bl	8004bfa <I2C_WaitOnFlagUntilTimeout>
 80053f2:	b130      	cbz	r0, 8005402 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 80053f4:	2001      	movs	r0, #1
 80053f6:	e09d      	b.n	8005534 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053fc:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80053fe:	2001      	movs	r0, #1
 8005400:	e098      	b.n	8005534 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005402:	2322      	movs	r3, #34	; 0x22
 8005404:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005408:	2340      	movs	r3, #64	; 0x40
 800540a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800540e:	2300      	movs	r3, #0
 8005410:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005414:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005416:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800541a:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800541c:	9701      	str	r7, [sp, #4]
 800541e:	9500      	str	r5, [sp, #0]
 8005420:	464b      	mov	r3, r9
 8005422:	4642      	mov	r2, r8
 8005424:	4631      	mov	r1, r6
 8005426:	4620      	mov	r0, r4
 8005428:	f7ff fc50 	bl	8004ccc <I2C_RequestMemoryRead>
 800542c:	b970      	cbnz	r0, 800544c <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800542e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	2bff      	cmp	r3, #255	; 0xff
 8005434:	d90f      	bls.n	8005456 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005436:	22ff      	movs	r2, #255	; 0xff
 8005438:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800543a:	4b44      	ldr	r3, [pc, #272]	; (800554c <HAL_I2C_Mem_Read+0x1ac>)
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005442:	4631      	mov	r1, r6
 8005444:	4620      	mov	r0, r4
 8005446:	f7ff fb06 	bl	8004a56 <I2C_TransferConfig>
 800544a:	e021      	b.n	8005490 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 800544c:	2300      	movs	r3, #0
 800544e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005452:	4658      	mov	r0, fp
 8005454:	e06e      	b.n	8005534 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8005456:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005458:	b292      	uxth	r2, r2
 800545a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800545c:	4b3b      	ldr	r3, [pc, #236]	; (800554c <HAL_I2C_Mem_Read+0x1ac>)
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	4631      	mov	r1, r6
 8005468:	4620      	mov	r0, r4
 800546a:	f7ff faf4 	bl	8004a56 <I2C_TransferConfig>
 800546e:	e00f      	b.n	8005490 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8005470:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005472:	b292      	uxth	r2, r2
 8005474:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005476:	2300      	movs	r3, #0
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	4631      	mov	r1, r6
 8005482:	4620      	mov	r0, r4
 8005484:	f7ff fae7 	bl	8004a56 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005488:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d034      	beq.n	80054fa <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005490:	9700      	str	r7, [sp, #0]
 8005492:	462b      	mov	r3, r5
 8005494:	2200      	movs	r2, #0
 8005496:	2104      	movs	r1, #4
 8005498:	4620      	mov	r0, r4
 800549a:	f7ff fbae 	bl	8004bfa <I2C_WaitOnFlagUntilTimeout>
 800549e:	2800      	cmp	r0, #0
 80054a0:	d14d      	bne.n	800553e <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054a8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80054aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ac:	3301      	adds	r3, #1
 80054ae:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80054b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80054b2:	3a01      	subs	r2, #1
 80054b4:	b292      	uxth	r2, r2
 80054b6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80054b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29b      	uxth	r3, r3
 80054c0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0de      	beq.n	8005488 <HAL_I2C_Mem_Read+0xe8>
 80054ca:	2a00      	cmp	r2, #0
 80054cc:	d1dc      	bne.n	8005488 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054ce:	9700      	str	r7, [sp, #0]
 80054d0:	462b      	mov	r3, r5
 80054d2:	2180      	movs	r1, #128	; 0x80
 80054d4:	4620      	mov	r0, r4
 80054d6:	f7ff fb90 	bl	8004bfa <I2C_WaitOnFlagUntilTimeout>
 80054da:	bb90      	cbnz	r0, 8005542 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2bff      	cmp	r3, #255	; 0xff
 80054e2:	d9c5      	bls.n	8005470 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054e4:	22ff      	movs	r2, #255	; 0xff
 80054e6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80054e8:	2300      	movs	r3, #0
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054f0:	4631      	mov	r1, r6
 80054f2:	4620      	mov	r0, r4
 80054f4:	f7ff faaf 	bl	8004a56 <I2C_TransferConfig>
 80054f8:	e7c6      	b.n	8005488 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054fa:	463a      	mov	r2, r7
 80054fc:	4629      	mov	r1, r5
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff fc20 	bl	8004d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005504:	b9f8      	cbnz	r0, 8005546 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	2220      	movs	r2, #32
 800550a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800550c:	6821      	ldr	r1, [r4, #0]
 800550e:	684b      	ldr	r3, [r1, #4]
 8005510:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005514:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005518:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005522:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005526:	2300      	movs	r3, #0
 8005528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800552c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005530:	e000      	b.n	8005534 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8005532:	2002      	movs	r0, #2
}
 8005534:	b003      	add	sp, #12
 8005536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800553a:	2002      	movs	r0, #2
 800553c:	e7fa      	b.n	8005534 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 800553e:	2001      	movs	r0, #1
 8005540:	e7f8      	b.n	8005534 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8005542:	2001      	movs	r0, #1
 8005544:	e7f6      	b.n	8005534 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8005546:	2001      	movs	r0, #1
 8005548:	e7f4      	b.n	8005534 <HAL_I2C_Mem_Read+0x194>
 800554a:	bf00      	nop
 800554c:	80002400 	.word	0x80002400

08005550 <HAL_I2C_GetState>:
  return hi2c->State;
 8005550:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005554:	4770      	bx	lr

08005556 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005556:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8005558:	4770      	bx	lr

0800555a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800555a:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800555c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	2a20      	cmp	r2, #32
 8005564:	d123      	bne.n	80055ae <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005566:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800556a:	2a01      	cmp	r2, #1
 800556c:	d021      	beq.n	80055b2 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800556e:	2201      	movs	r2, #1
 8005570:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005574:	2224      	movs	r2, #36	; 0x24
 8005576:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	6802      	ldr	r2, [r0, #0]
 800557e:	f022 0201 	bic.w	r2, r2, #1
 8005582:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	6802      	ldr	r2, [r0, #0]
 8005588:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800558c:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	6802      	ldr	r2, [r0, #0]
 8005592:	4311      	orrs	r1, r2
 8005594:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005596:	6819      	ldr	r1, [r3, #0]
 8005598:	680a      	ldr	r2, [r1, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a6:	2000      	movs	r0, #0
 80055a8:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80055ac:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80055ae:	2002      	movs	r0, #2
 80055b0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80055b2:	2002      	movs	r0, #2
  }
}
 80055b4:	4770      	bx	lr

080055b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055b6:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	2a20      	cmp	r2, #32
 80055c0:	d121      	bne.n	8005606 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80055c6:	2a01      	cmp	r2, #1
 80055c8:	d01f      	beq.n	800560a <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80055ca:	2201      	movs	r2, #1
 80055cc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055d0:	2224      	movs	r2, #36	; 0x24
 80055d2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055d6:	6800      	ldr	r0, [r0, #0]
 80055d8:	6802      	ldr	r2, [r0, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055e4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055ec:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	680a      	ldr	r2, [r1, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fe:	2000      	movs	r0, #0
 8005600:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005604:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005606:	2002      	movs	r0, #2
 8005608:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800560a:	2002      	movs	r0, #2
  }
}
 800560c:	4770      	bx	lr
	...

08005610 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005610:	4a02      	ldr	r2, [pc, #8]	; (800561c <HAL_PWR_EnableBkUpAccess+0xc>)
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005618:	6013      	str	r3, [r2, #0]
}
 800561a:	4770      	bx	lr
 800561c:	58000400 	.word	0x58000400

08005620 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005620:	b510      	push	{r4, lr}
 8005622:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005624:	b9a0      	cbnz	r0, 8005650 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005626:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800562e:	d10a      	bne.n	8005646 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005630:	4a0d      	ldr	r2, [pc, #52]	; (8005668 <HAL_PWR_EnterSLEEPMode+0x48>)
 8005632:	6913      	ldr	r3, [r2, #16]
 8005634:	f023 0304 	bic.w	r3, r3, #4
 8005638:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800563a:	2c01      	cmp	r4, #1
 800563c:	d010      	beq.n	8005660 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800563e:	bf40      	sev
    __WFE();
 8005640:	bf20      	wfe
    __WFE();
 8005642:	bf20      	wfe
  }
}
 8005644:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005646:	f000 f821 	bl	800568c <HAL_PWREx_DisableLowPowerRunMode>
 800564a:	2800      	cmp	r0, #0
 800564c:	d0f0      	beq.n	8005630 <HAL_PWR_EnterSLEEPMode+0x10>
 800564e:	e7f9      	b.n	8005644 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005658:	d1ea      	bne.n	8005630 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800565a:	f000 f80f 	bl	800567c <HAL_PWREx_EnableLowPowerRunMode>
 800565e:	e7e7      	b.n	8005630 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8005660:	bf30      	wfi
 8005662:	e7ef      	b.n	8005644 <HAL_PWR_EnterSLEEPMode+0x24>
 8005664:	58000400 	.word	0x58000400
 8005668:	e000ed00 	.word	0xe000ed00

0800566c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800566c:	4b02      	ldr	r3, [pc, #8]	; (8005678 <HAL_PWREx_GetVoltageRange+0xc>)
 800566e:	6818      	ldr	r0, [r3, #0]
}
 8005670:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	58000400 	.word	0x58000400

0800567c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800567c:	4a02      	ldr	r2, [pc, #8]	; (8005688 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800567e:	6813      	ldr	r3, [r2, #0]
 8005680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005684:	6013      	str	r3, [r2, #0]
}
 8005686:	4770      	bx	lr
 8005688:	58000400 	.word	0x58000400

0800568c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800568c:	4a0f      	ldr	r2, [pc, #60]	; (80056cc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800568e:	6813      	ldr	r3, [r2, #0]
 8005690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005694:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005696:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2232      	movs	r2, #50	; 0x32
 800569c:	fb02 f303 	mul.w	r3, r2, r3
 80056a0:	4a0c      	ldr	r2, [pc, #48]	; (80056d4 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80056a2:	fba2 2303 	umull	r2, r3, r2, r3
 80056a6:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056a8:	e000      	b.n	80056ac <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 80056aa:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056ac:	4a07      	ldr	r2, [pc, #28]	; (80056cc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80056ae:	6952      	ldr	r2, [r2, #20]
 80056b0:	f412 7f00 	tst.w	r2, #512	; 0x200
 80056b4:	d001      	beq.n	80056ba <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f7      	bne.n	80056aa <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80056ba:	4b04      	ldr	r3, [pc, #16]	; (80056cc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f413 7f00 	tst.w	r3, #512	; 0x200
 80056c2:	d101      	bne.n	80056c8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80056c4:	2000      	movs	r0, #0
 80056c6:	4770      	bx	lr
    return HAL_TIMEOUT;
 80056c8:	2003      	movs	r0, #3
}
 80056ca:	4770      	bx	lr
 80056cc:	58000400 	.word	0x58000400
 80056d0:	20000074 	.word	0x20000074
 80056d4:	431bde83 	.word	0x431bde83

080056d8 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80056d8:	4a0c      	ldr	r2, [pc, #48]	; (800570c <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80056da:	6813      	ldr	r3, [r2, #0]
 80056dc:	f023 0307 	bic.w	r3, r3, #7
 80056e0:	f043 0302 	orr.w	r3, r3, #2
 80056e4:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80056e6:	4a0a      	ldr	r2, [pc, #40]	; (8005710 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80056e8:	6913      	ldr	r3, [r2, #16]
 80056ea:	f043 0304 	orr.w	r3, r3, #4
 80056ee:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80056f0:	2801      	cmp	r0, #1
 80056f2:	d008      	beq.n	8005706 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80056f4:	bf40      	sev
    __WFE();
 80056f6:	bf20      	wfe
    __WFE();
 80056f8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80056fa:	4a05      	ldr	r2, [pc, #20]	; (8005710 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80056fc:	6913      	ldr	r3, [r2, #16]
 80056fe:	f023 0304 	bic.w	r3, r3, #4
 8005702:	6113      	str	r3, [r2, #16]
}
 8005704:	4770      	bx	lr
    __WFI();
 8005706:	bf30      	wfi
 8005708:	e7f7      	b.n	80056fa <HAL_PWREx_EnterSTOP2Mode+0x22>
 800570a:	bf00      	nop
 800570c:	58000400 	.word	0x58000400
 8005710:	e000ed00 	.word	0xe000ed00

08005714 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005714:	b530      	push	{r4, r5, lr}
 8005716:	b089      	sub	sp, #36	; 0x24
 8005718:	4604      	mov	r4, r0
 800571a:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800571c:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <RCC_SetFlashLatency+0xb4>)
 800571e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005722:	9006      	str	r0, [sp, #24]
 8005724:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005728:	f103 0208 	add.w	r2, r3, #8
 800572c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005730:	9004      	str	r0, [sp, #16]
 8005732:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005736:	ad01      	add	r5, sp, #4
 8005738:	3310      	adds	r3, #16
 800573a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800573e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005742:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005746:	d007      	beq.n	8005758 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005748:	2300      	movs	r3, #0
 800574a:	e014      	b.n	8005776 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 800574c:	aa08      	add	r2, sp, #32
 800574e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005752:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005756:	e01e      	b.n	8005796 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005758:	2300      	movs	r3, #0
 800575a:	2b02      	cmp	r3, #2
 800575c:	d808      	bhi.n	8005770 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800575e:	aa08      	add	r2, sp, #32
 8005760:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005764:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005768:	42a2      	cmp	r2, r4
 800576a:	d2ef      	bcs.n	800574c <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800576c:	3301      	adds	r3, #1
 800576e:	e7f4      	b.n	800575a <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005770:	2500      	movs	r5, #0
 8005772:	e010      	b.n	8005796 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005774:	3301      	adds	r3, #1
 8005776:	2b02      	cmp	r3, #2
 8005778:	d80c      	bhi.n	8005794 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800577a:	aa08      	add	r2, sp, #32
 800577c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005780:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005784:	42a2      	cmp	r2, r4
 8005786:	d3f5      	bcc.n	8005774 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005788:	aa08      	add	r2, sp, #32
 800578a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800578e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005792:	e000      	b.n	8005796 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005794:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005796:	4a0d      	ldr	r2, [pc, #52]	; (80057cc <RCC_SetFlashLatency+0xb8>)
 8005798:	6813      	ldr	r3, [r2, #0]
 800579a:	f023 0307 	bic.w	r3, r3, #7
 800579e:	432b      	orrs	r3, r5
 80057a0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057a2:	f7fc fa2b 	bl	8001bfc <HAL_GetTick>
 80057a6:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057a8:	4b08      	ldr	r3, [pc, #32]	; (80057cc <RCC_SetFlashLatency+0xb8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	42ab      	cmp	r3, r5
 80057b2:	d006      	beq.n	80057c2 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057b4:	f7fc fa22 	bl	8001bfc <HAL_GetTick>
 80057b8:	1b00      	subs	r0, r0, r4
 80057ba:	2802      	cmp	r0, #2
 80057bc:	d9f4      	bls.n	80057a8 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 80057be:	2003      	movs	r0, #3
 80057c0:	e000      	b.n	80057c4 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80057c2:	2000      	movs	r0, #0
}
 80057c4:	b009      	add	sp, #36	; 0x24
 80057c6:	bd30      	pop	{r4, r5, pc}
 80057c8:	080137e8 	.word	0x080137e8
 80057cc:	58004000 	.word	0x58004000

080057d0 <RCC_SetFlashLatencyFromMSIRange>:
{
 80057d0:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80057d2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80057d8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80057dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	4a08      	ldr	r2, [pc, #32]	; (800580c <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80057ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ee:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80057f2:	f7ff ff3b 	bl	800566c <HAL_PWREx_GetVoltageRange>
 80057f6:	4601      	mov	r1, r0
 80057f8:	4b05      	ldr	r3, [pc, #20]	; (8005810 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80057fa:	fba3 3404 	umull	r3, r4, r3, r4
 80057fe:	0ca0      	lsrs	r0, r4, #18
 8005800:	f7ff ff88 	bl	8005714 <RCC_SetFlashLatency>
}
 8005804:	bd10      	pop	{r4, pc}
 8005806:	bf00      	nop
 8005808:	08013dc0 	.word	0x08013dc0
 800580c:	08013d60 	.word	0x08013d60
 8005810:	431bde83 	.word	0x431bde83

08005814 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005818:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005820:	f011 010c 	ands.w	r1, r1, #12
 8005824:	d00a      	beq.n	800583c <HAL_RCC_GetSysClockFreq+0x28>
 8005826:	290c      	cmp	r1, #12
 8005828:	d006      	beq.n	8005838 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800582a:	2904      	cmp	r1, #4
 800582c:	d047      	beq.n	80058be <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800582e:	2908      	cmp	r1, #8
 8005830:	d03b      	beq.n	80058aa <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8005832:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005834:	4610      	mov	r0, r2
 8005836:	e026      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005838:	2b01      	cmp	r3, #1
 800583a:	d1f6      	bne.n	800582a <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800583c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f013 0308 	ands.w	r3, r3, #8
 8005846:	d00d      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0x50>
 8005848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f013 0308 	ands.w	r3, r3, #8
 8005852:	d124      	bne.n	800589e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005858:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800585c:	4a2e      	ldr	r2, [pc, #184]	; (8005918 <HAL_RCC_GetSysClockFreq+0x104>)
 800585e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005862:	e00e      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	f012 0f08 	tst.w	r2, #8
 800586e:	d112      	bne.n	8005896 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005878:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800587c:	4a26      	ldr	r2, [pc, #152]	; (8005918 <HAL_RCC_GetSysClockFreq+0x104>)
 800587e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005882:	b1d1      	cbz	r1, 80058ba <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005884:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005890:	2b0c      	cmp	r3, #12
 8005892:	d01a      	beq.n	80058ca <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005894:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005896:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800589a:	6812      	ldr	r2, [r2, #0]
 800589c:	e7ee      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x68>
 800589e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a2:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80058a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80058a8:	e7d8      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80058aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 80058b4:	d106      	bne.n	80058c4 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80058b6:	4819      	ldr	r0, [pc, #100]	; (800591c <HAL_RCC_GetSysClockFreq+0x108>)
 80058b8:	e7e5      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80058ba:	4610      	mov	r0, r2
 80058bc:	e7e3      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80058be:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80058c0:	4817      	ldr	r0, [pc, #92]	; (8005920 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058c2:	e7e0      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80058c4:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80058c6:	4816      	ldr	r0, [pc, #88]	; (8005920 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058c8:	e7dd      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80058ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d009      	beq.n	80058ec <HAL_RCC_GetSysClockFreq+0xd8>
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d108      	bne.n	80058ee <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80058dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80058e6:	d115      	bne.n	8005914 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80058e8:	4a0c      	ldr	r2, [pc, #48]	; (800591c <HAL_RCC_GetSysClockFreq+0x108>)
 80058ea:	e000      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80058ec:	4a0c      	ldr	r2, [pc, #48]	; (8005920 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80058ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058f2:	68cb      	ldr	r3, [r1, #12]
 80058f4:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80058f8:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80058fc:	68cb      	ldr	r3, [r1, #12]
 80058fe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005902:	3301      	adds	r3, #1
 8005904:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005908:	68c8      	ldr	r0, [r1, #12]
 800590a:	0f40      	lsrs	r0, r0, #29
 800590c:	3001      	adds	r0, #1
 800590e:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8005912:	e7bf      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8005914:	4a02      	ldr	r2, [pc, #8]	; (8005920 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005916:	e7ea      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0xda>
 8005918:	08013dc0 	.word	0x08013dc0
 800591c:	01e84800 	.word	0x01e84800
 8005920:	00f42400 	.word	0x00f42400

08005924 <HAL_RCC_GetHCLKFreq>:
{
 8005924:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005926:	f7ff ff75 	bl	8005814 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800592a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005934:	4a02      	ldr	r2, [pc, #8]	; (8005940 <HAL_RCC_GetHCLKFreq+0x1c>)
 8005936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800593a:	fbb0 f0f3 	udiv	r0, r0, r3
 800593e:	bd08      	pop	{r3, pc}
 8005940:	08013d60 	.word	0x08013d60

08005944 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005944:	2800      	cmp	r0, #0
 8005946:	f000 8311 	beq.w	8005f6c <HAL_RCC_OscConfig+0x628>
{
 800594a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800594e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005952:	689d      	ldr	r5, [r3, #8]
 8005954:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005958:	68de      	ldr	r6, [r3, #12]
 800595a:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800595e:	6803      	ldr	r3, [r0, #0]
 8005960:	f013 0f20 	tst.w	r3, #32
 8005964:	d02a      	beq.n	80059bc <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005966:	2d00      	cmp	r5, #0
 8005968:	d065      	beq.n	8005a36 <HAL_RCC_OscConfig+0xf2>
 800596a:	2d0c      	cmp	r5, #12
 800596c:	d061      	beq.n	8005a32 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800596e:	6a23      	ldr	r3, [r4, #32]
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80bf 	beq.w	8005af4 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005982:	f7fc f93b 	bl	8001bfc <HAL_GetTick>
 8005986:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f013 0f02 	tst.w	r3, #2
 8005992:	f000 80a7 	beq.w	8005ae4 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f042 0208 	orr.w	r2, r2, #8
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80059a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80059aa:	430a      	orrs	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80059b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80059ba:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	f013 0f01 	tst.w	r3, #1
 80059c2:	f000 80b5 	beq.w	8005b30 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80059c6:	2d08      	cmp	r5, #8
 80059c8:	f000 80ae 	beq.w	8005b28 <HAL_RCC_OscConfig+0x1e4>
 80059cc:	2d0c      	cmp	r5, #12
 80059ce:	f000 80a8 	beq.w	8005b22 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80059d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059d6:	6813      	ldr	r3, [r2, #0]
 80059d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059dc:	68a1      	ldr	r1, [r4, #8]
 80059de:	430b      	orrs	r3, r1
 80059e0:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e2:	6863      	ldr	r3, [r4, #4]
 80059e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e8:	f000 80c4 	beq.w	8005b74 <HAL_RCC_OscConfig+0x230>
 80059ec:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80059f0:	f000 80c5 	beq.w	8005b7e <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059fe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005a06:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80c2 	beq.w	8005b94 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8005a10:	f7fc f8f4 	bl	8001bfc <HAL_GetTick>
 8005a14:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005a20:	f040 8086 	bne.w	8005b30 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a24:	f7fc f8ea 	bl	8001bfc <HAL_GetTick>
 8005a28:	1bc0      	subs	r0, r0, r7
 8005a2a:	2864      	cmp	r0, #100	; 0x64
 8005a2c:	d9f3      	bls.n	8005a16 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8005a2e:	2003      	movs	r0, #3
 8005a30:	e2a9      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a32:	2e01      	cmp	r6, #1
 8005a34:	d19b      	bne.n	800596e <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005a36:	6a23      	ldr	r3, [r4, #32]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8299 	beq.w	8005f70 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f013 0f08 	tst.w	r3, #8
 8005a4a:	d029      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x15c>
 8005a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a56:	4298      	cmp	r0, r3
 8005a58:	d92a      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a5a:	f7ff feb9 	bl	80057d0 <RCC_SetFlashLatencyFromMSIRange>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	f040 8288 	bne.w	8005f74 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	f042 0208 	orr.w	r2, r2, #8
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005a76:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005a84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005a88:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005a8a:	f7ff ff4b 	bl	8005924 <HAL_RCC_GetHCLKFreq>
 8005a8e:	4bba      	ldr	r3, [pc, #744]	; (8005d78 <HAL_RCC_OscConfig+0x434>)
 8005a90:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005a92:	4bba      	ldr	r3, [pc, #744]	; (8005d7c <HAL_RCC_OscConfig+0x438>)
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	f7fc f8af 	bl	8001bf8 <HAL_InitTick>
        if (status != HAL_OK)
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d08e      	beq.n	80059bc <HAL_RCC_OscConfig+0x78>
 8005a9e:	e272      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aae:	e7d2      	b.n	8005a56 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	f042 0208 	orr.w	r2, r2, #8
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005ac2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ac8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005ad0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ad4:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ad6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005ad8:	f7ff fe7a 	bl	80057d0 <RCC_SetFlashLatencyFromMSIRange>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d0d4      	beq.n	8005a8a <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	e250      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ae4:	f7fc f88a 	bl	8001bfc <HAL_GetTick>
 8005ae8:	1bc0      	subs	r0, r0, r7
 8005aea:	2802      	cmp	r0, #2
 8005aec:	f67f af4c 	bls.w	8005988 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005af0:	2003      	movs	r0, #3
 8005af2:	e248      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af8:	6813      	ldr	r3, [r2, #0]
 8005afa:	f023 0301 	bic.w	r3, r3, #1
 8005afe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005b00:	f7fc f87c 	bl	8001bfc <HAL_GetTick>
 8005b04:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f013 0f02 	tst.w	r3, #2
 8005b10:	f43f af54 	beq.w	80059bc <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b14:	f7fc f872 	bl	8001bfc <HAL_GetTick>
 8005b18:	1bc0      	subs	r0, r0, r7
 8005b1a:	2802      	cmp	r0, #2
 8005b1c:	d9f3      	bls.n	8005b06 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8005b1e:	2003      	movs	r0, #3
 8005b20:	e231      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b22:	2e03      	cmp	r6, #3
 8005b24:	f47f af55 	bne.w	80059d2 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005b28:	6863      	ldr	r3, [r4, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8224 	beq.w	8005f78 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	f013 0f02 	tst.w	r3, #2
 8005b36:	d056      	beq.n	8005be6 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005b38:	2d04      	cmp	r5, #4
 8005b3a:	d03d      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x274>
 8005b3c:	2d0c      	cmp	r5, #12
 8005b3e:	d039      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b40:	6923      	ldr	r3, [r4, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 808a 	beq.w	8005c5c <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b4c:	6813      	ldr	r3, [r2, #0]
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b52:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005b54:	f7fc f852 	bl	8001bfc <HAL_GetTick>
 8005b58:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005b64:	d136      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b66:	f7fc f849 	bl	8001bfc <HAL_GetTick>
 8005b6a:	1b80      	subs	r0, r0, r6
 8005b6c:	2802      	cmp	r0, #2
 8005b6e:	d9f4      	bls.n	8005b5a <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8005b70:	2003      	movs	r0, #3
 8005b72:	e208      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005b74:	6813      	ldr	r3, [r2, #0]
 8005b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7a:	6013      	str	r3, [r2, #0]
}
 8005b7c:	e744      	b.n	8005a08 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005b88:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	e739      	b.n	8005a08 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005b94:	f7fc f832 	bl	8001bfc <HAL_GetTick>
 8005b98:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005ba4:	d0c4      	beq.n	8005b30 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ba6:	f7fc f829 	bl	8001bfc <HAL_GetTick>
 8005baa:	1bc0      	subs	r0, r0, r7
 8005bac:	2864      	cmp	r0, #100	; 0x64
 8005bae:	d9f4      	bls.n	8005b9a <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8005bb0:	2003      	movs	r0, #3
 8005bb2:	e1e8      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005bb4:	2e02      	cmp	r6, #2
 8005bb6:	d1c3      	bne.n	8005b40 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005bb8:	6923      	ldr	r3, [r4, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 81de 	beq.w	8005f7c <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc6:	6853      	ldr	r3, [r2, #4]
 8005bc8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005bcc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005bd0:	6053      	str	r3, [r2, #4]
}
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bda:	6853      	ldr	r3, [r2, #4]
 8005bdc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005be0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005be4:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	f013 0f08 	tst.w	r3, #8
 8005bec:	d07e      	beq.n	8005cec <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bee:	69a3      	ldr	r3, [r4, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d062      	beq.n	8005cba <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8005bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005bfc:	69e1      	ldr	r1, [r4, #28]
 8005bfe:	f003 0210 	and.w	r2, r3, #16
 8005c02:	4291      	cmp	r1, r2
 8005c04:	d011      	beq.n	8005c2a <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005c06:	f003 0203 	and.w	r2, r3, #3
 8005c0a:	2a02      	cmp	r2, #2
 8005c0c:	f000 81b8 	beq.w	8005f80 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005c10:	f013 0f01 	tst.w	r3, #1
 8005c14:	d138      	bne.n	8005c88 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c1a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005c1e:	f023 0310 	bic.w	r3, r3, #16
 8005c22:	69e1      	ldr	r1, [r4, #28]
 8005c24:	430b      	orrs	r3, r1
 8005c26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c2e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005c32:	f043 0301 	orr.w	r3, r3, #1
 8005c36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005c3a:	f7fb ffdf 	bl	8001bfc <HAL_GetTick>
 8005c3e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c48:	f013 0f02 	tst.w	r3, #2
 8005c4c:	d14e      	bne.n	8005cec <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c4e:	f7fb ffd5 	bl	8001bfc <HAL_GetTick>
 8005c52:	1b80      	subs	r0, r0, r6
 8005c54:	2811      	cmp	r0, #17
 8005c56:	d9f3      	bls.n	8005c40 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8005c58:	2003      	movs	r0, #3
 8005c5a:	e194      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c60:	6813      	ldr	r3, [r2, #0]
 8005c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005c68:	f7fb ffc8 	bl	8001bfc <HAL_GetTick>
 8005c6c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005c78:	d0b5      	beq.n	8005be6 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c7a:	f7fb ffbf 	bl	8001bfc <HAL_GetTick>
 8005c7e:	1b80      	subs	r0, r0, r6
 8005c80:	2802      	cmp	r0, #2
 8005c82:	d9f4      	bls.n	8005c6e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8005c84:	2003      	movs	r0, #3
 8005c86:	e17e      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c8c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005c98:	f7fb ffb0 	bl	8001bfc <HAL_GetTick>
 8005c9c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca6:	f013 0f02 	tst.w	r3, #2
 8005caa:	d0b4      	beq.n	8005c16 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cac:	f7fb ffa6 	bl	8001bfc <HAL_GetTick>
 8005cb0:	1b80      	subs	r0, r0, r6
 8005cb2:	2811      	cmp	r0, #17
 8005cb4:	d9f3      	bls.n	8005c9e <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8005cb6:	2003      	movs	r0, #3
 8005cb8:	e165      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005cba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cbe:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005cca:	f7fb ff97 	bl	8001bfc <HAL_GetTick>
 8005cce:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd8:	f013 0f02 	tst.w	r3, #2
 8005cdc:	d006      	beq.n	8005cec <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cde:	f7fb ff8d 	bl	8001bfc <HAL_GetTick>
 8005ce2:	1b80      	subs	r0, r0, r6
 8005ce4:	2811      	cmp	r0, #17
 8005ce6:	d9f3      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8005ce8:	2003      	movs	r0, #3
 8005cea:	e14c      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	f013 0f04 	tst.w	r3, #4
 8005cf2:	f000 80b8 	beq.w	8005e66 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005cf6:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <HAL_RCC_OscConfig+0x43c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005cfe:	d110      	bne.n	8005d22 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8005d00:	f7ff fc86 	bl	8005610 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8005d04:	f7fb ff7a 	bl	8001bfc <HAL_GetTick>
 8005d08:	4606      	mov	r6, r0
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <HAL_RCC_OscConfig+0x43c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d12:	d106      	bne.n	8005d22 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d14:	f7fb ff72 	bl	8001bfc <HAL_GetTick>
 8005d18:	1b80      	subs	r0, r0, r6
 8005d1a:	2802      	cmp	r0, #2
 8005d1c:	d9f5      	bls.n	8005d0a <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8005d1e:	2003      	movs	r0, #3
 8005d20:	e131      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d22:	68e3      	ldr	r3, [r4, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d068      	beq.n	8005dfa <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005d28:	2b85      	cmp	r3, #133	; 0x85
 8005d2a:	d001      	beq.n	8005d30 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005d2c:	2b05      	cmp	r3, #5
 8005d2e:	d107      	bne.n	8005d40 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d38:	f043 0304 	orr.w	r3, r3, #4
 8005d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005d40:	f7fb ff5c 	bl	8001bfc <HAL_GetTick>
 8005d44:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5e:	f013 0f02 	tst.w	r3, #2
 8005d62:	d10f      	bne.n	8005d84 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d64:	f7fb ff4a 	bl	8001bfc <HAL_GetTick>
 8005d68:	1b80      	subs	r0, r0, r6
 8005d6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d6e:	4298      	cmp	r0, r3
 8005d70:	d9f1      	bls.n	8005d56 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8005d72:	2003      	movs	r0, #3
 8005d74:	e107      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
 8005d76:	bf00      	nop
 8005d78:	20000074 	.word	0x20000074
 8005d7c:	20000078 	.word	0x20000078
 8005d80:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005d84:	68e3      	ldr	r3, [r4, #12]
 8005d86:	2b81      	cmp	r3, #129	; 0x81
 8005d88:	d001      	beq.n	8005d8e <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005d8a:	2b85      	cmp	r3, #133	; 0x85
 8005d8c:	d11a      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8005d8e:	f7fb ff35 	bl	8001bfc <HAL_GetTick>
 8005d92:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dac:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005db0:	d159      	bne.n	8005e66 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db2:	f7fb ff23 	bl	8001bfc <HAL_GetTick>
 8005db6:	1b80      	subs	r0, r0, r6
 8005db8:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dbc:	4298      	cmp	r0, r3
 8005dbe:	d9f1      	bls.n	8005da4 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8005dc0:	2003      	movs	r0, #3
 8005dc2:	e0e0      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8005dc4:	f7fb ff1a 	bl	8001bfc <HAL_GetTick>
 8005dc8:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005de6:	d03e      	beq.n	8005e66 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de8:	f7fb ff08 	bl	8001bfc <HAL_GetTick>
 8005dec:	1b80      	subs	r0, r0, r6
 8005dee:	f241 3388 	movw	r3, #5000	; 0x1388
 8005df2:	4298      	cmp	r0, r3
 8005df4:	d9f1      	bls.n	8005dda <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8005df6:	2003      	movs	r0, #3
 8005df8:	e0c5      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8005dfa:	f7fb feff 	bl	8001bfc <HAL_GetTick>
 8005dfe:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e04:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e18:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005e1c:	d008      	beq.n	8005e30 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1e:	f7fb feed 	bl	8001bfc <HAL_GetTick>
 8005e22:	1b80      	subs	r0, r0, r6
 8005e24:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e28:	4298      	cmp	r0, r3
 8005e2a:	d9f1      	bls.n	8005e10 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8005e2c:	2003      	movs	r0, #3
 8005e2e:	e0aa      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8005e30:	f7fb fee4 	bl	8001bfc <HAL_GetTick>
 8005e34:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4e:	f013 0f02 	tst.w	r3, #2
 8005e52:	d008      	beq.n	8005e66 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e54:	f7fb fed2 	bl	8001bfc <HAL_GetTick>
 8005e58:	1b80      	subs	r0, r0, r6
 8005e5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e5e:	4298      	cmp	r0, r3
 8005e60:	d9f1      	bls.n	8005e46 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8005e62:	2003      	movs	r0, #3
 8005e64:	e08f      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 808b 	beq.w	8005f84 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e6e:	2d0c      	cmp	r5, #12
 8005e70:	d060      	beq.n	8005f34 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d016      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e7a:	6813      	ldr	r3, [r2, #0]
 8005e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e82:	f7fb febb 	bl	8001bfc <HAL_GetTick>
 8005e86:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005e92:	d148      	bne.n	8005f26 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e98:	68d1      	ldr	r1, [r2, #12]
 8005e9a:	4b41      	ldr	r3, [pc, #260]	; (8005fa0 <HAL_RCC_OscConfig+0x65c>)
 8005e9c:	400b      	ands	r3, r1
 8005e9e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	e070      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea8:	6813      	ldr	r3, [r2, #0]
 8005eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005eb0:	f7fb fea4 	bl	8001bfc <HAL_GetTick>
 8005eb4:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005ec0:	d12a      	bne.n	8005f18 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ec6:	68d3      	ldr	r3, [r2, #12]
 8005ec8:	4936      	ldr	r1, [pc, #216]	; (8005fa4 <HAL_RCC_OscConfig+0x660>)
 8005eca:	4019      	ands	r1, r3
 8005ecc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ece:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005ed0:	4303      	orrs	r3, r0
 8005ed2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005ed4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005ed8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005eda:	4303      	orrs	r3, r0
 8005edc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005ede:	4303      	orrs	r3, r0
 8005ee0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005ee2:	4303      	orrs	r3, r0
 8005ee4:	4319      	orrs	r1, r3
 8005ee6:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ee8:	6813      	ldr	r3, [r2, #0]
 8005eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eee:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ef0:	68d3      	ldr	r3, [r2, #12]
 8005ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005ef8:	f7fb fe80 	bl	8001bfc <HAL_GetTick>
 8005efc:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005f08:	d13e      	bne.n	8005f88 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f0a:	f7fb fe77 	bl	8001bfc <HAL_GetTick>
 8005f0e:	1b00      	subs	r0, r0, r4
 8005f10:	280a      	cmp	r0, #10
 8005f12:	d9f4      	bls.n	8005efe <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8005f14:	2003      	movs	r0, #3
 8005f16:	e036      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f18:	f7fb fe70 	bl	8001bfc <HAL_GetTick>
 8005f1c:	1b40      	subs	r0, r0, r5
 8005f1e:	280a      	cmp	r0, #10
 8005f20:	d9c9      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 8005f22:	2003      	movs	r0, #3
 8005f24:	e02f      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f26:	f7fb fe69 	bl	8001bfc <HAL_GetTick>
 8005f2a:	1b00      	subs	r0, r0, r4
 8005f2c:	280a      	cmp	r0, #10
 8005f2e:	d9ab      	bls.n	8005e88 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8005f30:	2003      	movs	r0, #3
 8005f32:	e028      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d029      	beq.n	8005f8c <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3c:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005f3e:	f003 0103 	and.w	r1, r3, #3
 8005f42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005f44:	4291      	cmp	r1, r2
 8005f46:	d123      	bne.n	8005f90 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005f48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f4e:	428a      	cmp	r2, r1
 8005f50:	d120      	bne.n	8005f94 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005f52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f58:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005f5c:	d11c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005f5e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8005f62:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d119      	bne.n	8005f9c <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e00c      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8005f6c:	2001      	movs	r0, #1
}
 8005f6e:	4770      	bx	lr
        return HAL_ERROR;
 8005f70:	2001      	movs	r0, #1
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8005f74:	2001      	movs	r0, #1
 8005f76:	e006      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005f78:	2001      	movs	r0, #1
 8005f7a:	e004      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	e002      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005f80:	2001      	movs	r0, #1
 8005f82:	e000      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8005f84:	2000      	movs	r0, #0
}
 8005f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005f88:	2000      	movs	r0, #0
 8005f8a:	e7fc      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	e7fa      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005f90:	2001      	movs	r0, #1
 8005f92:	e7f8      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
 8005f94:	2001      	movs	r0, #1
 8005f96:	e7f6      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
 8005f98:	2001      	movs	r0, #1
 8005f9a:	e7f4      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	e7f2      	b.n	8005f86 <HAL_RCC_OscConfig+0x642>
 8005fa0:	eefefffc 	.word	0xeefefffc
 8005fa4:	11c1808c 	.word	0x11c1808c

08005fa8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	f000 8127 	beq.w	80061fc <HAL_RCC_ClockConfig+0x254>
{
 8005fae:	b570      	push	{r4, r5, r6, lr}
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb4:	4b93      	ldr	r3, [pc, #588]	; (8006204 <HAL_RCC_ClockConfig+0x25c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	d32d      	bcc.n	800601c <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	f013 0f02 	tst.w	r3, #2
 8005fc6:	d13f      	bne.n	8006048 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	f013 0f20 	tst.w	r3, #32
 8005fce:	d153      	bne.n	8006078 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005fd6:	d16a      	bne.n	80060ae <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	f013 0f04 	tst.w	r3, #4
 8005fde:	f040 8083 	bne.w	80060e8 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe2:	682b      	ldr	r3, [r5, #0]
 8005fe4:	f013 0f08 	tst.w	r3, #8
 8005fe8:	f040 8097 	bne.w	800611a <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	f013 0f01 	tst.w	r3, #1
 8005ff2:	f000 80de 	beq.w	80061b2 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ff6:	686b      	ldr	r3, [r5, #4]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	f000 80a8 	beq.w	800614e <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	f000 80ad 	beq.w	800615e <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 80b2 	bne.w	800616e <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800600a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800600e:	6812      	ldr	r2, [r2, #0]
 8006010:	f012 0f02 	tst.w	r2, #2
 8006014:	f040 80b1 	bne.w	800617a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006018:	2001      	movs	r0, #1
 800601a:	e0ee      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601c:	4a79      	ldr	r2, [pc, #484]	; (8006204 <HAL_RCC_ClockConfig+0x25c>)
 800601e:	6813      	ldr	r3, [r2, #0]
 8006020:	f023 0307 	bic.w	r3, r3, #7
 8006024:	430b      	orrs	r3, r1
 8006026:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006028:	f7fb fde8 	bl	8001bfc <HAL_GetTick>
 800602c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800602e:	4b75      	ldr	r3, [pc, #468]	; (8006204 <HAL_RCC_ClockConfig+0x25c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	42a3      	cmp	r3, r4
 8006038:	d0c2      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800603a:	f7fb fddf 	bl	8001bfc <HAL_GetTick>
 800603e:	1b80      	subs	r0, r0, r6
 8006040:	2802      	cmp	r0, #2
 8006042:	d9f4      	bls.n	800602e <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8006044:	2003      	movs	r0, #3
 8006046:	e0d8      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006048:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800604a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800604e:	688a      	ldr	r2, [r1, #8]
 8006050:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006054:	4313      	orrs	r3, r2
 8006056:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006058:	f7fb fdd0 	bl	8001bfc <HAL_GetTick>
 800605c:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800605e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006068:	d1ae      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800606a:	f7fb fdc7 	bl	8001bfc <HAL_GetTick>
 800606e:	1b80      	subs	r0, r0, r6
 8006070:	2802      	cmp	r0, #2
 8006072:	d9f4      	bls.n	800605e <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8006074:	2003      	movs	r0, #3
 8006076:	e0c0      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006078:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800607a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800607e:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8006082:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 800608c:	f7fb fdb6 	bl	8001bfc <HAL_GetTick>
 8006090:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006096:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800609a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800609e:	d197      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060a0:	f7fb fdac 	bl	8001bfc <HAL_GetTick>
 80060a4:	1b80      	subs	r0, r0, r6
 80060a6:	2802      	cmp	r0, #2
 80060a8:	d9f3      	bls.n	8006092 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80060aa:	2003      	movs	r0, #3
 80060ac:	e0a5      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80060ae:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80060b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060b4:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80060b8:	f023 030f 	bic.w	r3, r3, #15
 80060bc:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80060c0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80060c4:	f7fb fd9a 	bl	8001bfc <HAL_GetTick>
 80060c8:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80060ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80060d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80060d6:	f47f af7f 	bne.w	8005fd8 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060da:	f7fb fd8f 	bl	8001bfc <HAL_GetTick>
 80060de:	1b80      	subs	r0, r0, r6
 80060e0:	2802      	cmp	r0, #2
 80060e2:	d9f2      	bls.n	80060ca <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80060e4:	2003      	movs	r0, #3
 80060e6:	e088      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80060e8:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80060ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ee:	688a      	ldr	r2, [r1, #8]
 80060f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060f4:	4313      	orrs	r3, r2
 80060f6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80060f8:	f7fb fd80 	bl	8001bfc <HAL_GetTick>
 80060fc:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006108:	f47f af6b 	bne.w	8005fe2 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800610c:	f7fb fd76 	bl	8001bfc <HAL_GetTick>
 8006110:	1b80      	subs	r0, r0, r6
 8006112:	2802      	cmp	r0, #2
 8006114:	d9f3      	bls.n	80060fe <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8006116:	2003      	movs	r0, #3
 8006118:	e06f      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800611a:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800611c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006120:	6893      	ldr	r3, [r2, #8]
 8006122:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006126:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800612a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800612c:	f7fb fd66 	bl	8001bfc <HAL_GetTick>
 8006130:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800613c:	f47f af56 	bne.w	8005fec <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006140:	f7fb fd5c 	bl	8001bfc <HAL_GetTick>
 8006144:	1b80      	subs	r0, r0, r6
 8006146:	2802      	cmp	r0, #2
 8006148:	d9f3      	bls.n	8006132 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800614a:	2003      	movs	r0, #3
 800614c:	e055      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800614e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006158:	d10f      	bne.n	800617a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800615a:	2001      	movs	r0, #1
 800615c:	e04d      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800615e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006168:	d107      	bne.n	800617a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800616a:	2001      	movs	r0, #1
 800616c:	e045      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800616e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006178:	d042      	beq.n	8006200 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800617a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800617e:	688a      	ldr	r2, [r1, #8]
 8006180:	f022 0203 	bic.w	r2, r2, #3
 8006184:	4313      	orrs	r3, r2
 8006186:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006188:	f7fb fd38 	bl	8001bfc <HAL_GetTick>
 800618c:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800618e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006198:	686a      	ldr	r2, [r5, #4]
 800619a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800619e:	d008      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a0:	f7fb fd2c 	bl	8001bfc <HAL_GetTick>
 80061a4:	1b80      	subs	r0, r0, r6
 80061a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80061aa:	4298      	cmp	r0, r3
 80061ac:	d9ef      	bls.n	800618e <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80061ae:	2003      	movs	r0, #3
 80061b0:	e023      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <HAL_RCC_ClockConfig+0x25c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	42a3      	cmp	r3, r4
 80061bc:	d915      	bls.n	80061ea <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061be:	4a11      	ldr	r2, [pc, #68]	; (8006204 <HAL_RCC_ClockConfig+0x25c>)
 80061c0:	6813      	ldr	r3, [r2, #0]
 80061c2:	f023 0307 	bic.w	r3, r3, #7
 80061c6:	4323      	orrs	r3, r4
 80061c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80061ca:	f7fb fd17 	bl	8001bfc <HAL_GetTick>
 80061ce:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d0:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <HAL_RCC_ClockConfig+0x25c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	42a3      	cmp	r3, r4
 80061da:	d006      	beq.n	80061ea <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80061dc:	f7fb fd0e 	bl	8001bfc <HAL_GetTick>
 80061e0:	1b40      	subs	r0, r0, r5
 80061e2:	2802      	cmp	r0, #2
 80061e4:	d9f4      	bls.n	80061d0 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80061e6:	2003      	movs	r0, #3
 80061e8:	e007      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80061ea:	f7ff fb9b 	bl	8005924 <HAL_RCC_GetHCLKFreq>
 80061ee:	4b06      	ldr	r3, [pc, #24]	; (8006208 <HAL_RCC_ClockConfig+0x260>)
 80061f0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <HAL_RCC_ClockConfig+0x264>)
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	f7fb fcff 	bl	8001bf8 <HAL_InitTick>
}
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80061fc:	2001      	movs	r0, #1
}
 80061fe:	4770      	bx	lr
        return HAL_ERROR;
 8006200:	2001      	movs	r0, #1
 8006202:	e7fa      	b.n	80061fa <HAL_RCC_ClockConfig+0x252>
 8006204:	58004000 	.word	0x58004000
 8006208:	20000074 	.word	0x20000074
 800620c:	20000078 	.word	0x20000078

08006210 <HAL_RCC_GetPCLK1Freq>:
{
 8006210:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006212:	f7ff fb87 	bl	8005924 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006220:	4a02      	ldr	r2, [pc, #8]	; (800622c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006226:	40d8      	lsrs	r0, r3
 8006228:	bd08      	pop	{r3, pc}
 800622a:	bf00      	nop
 800622c:	08013da0 	.word	0x08013da0

08006230 <HAL_RCC_GetPCLK2Freq>:
{
 8006230:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006232:	f7ff fb77 	bl	8005924 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006240:	4a02      	ldr	r2, [pc, #8]	; (800624c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006246:	40d8      	lsrs	r0, r3
 8006248:	bd08      	pop	{r3, pc}
 800624a:	bf00      	nop
 800624c:	08013da0 	.word	0x08013da0

08006250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006254:	6803      	ldr	r3, [r0, #0]
 8006256:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800625a:	f040 80ab 	bne.w	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800625e:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	f013 0f01 	tst.w	r3, #1
 8006266:	d00a      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006268:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800626a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800626e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006272:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006276:	b292      	uxth	r2, r2
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	f013 0f02 	tst.w	r3, #2
 8006284:	d00a      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006286:	68a2      	ldr	r2, [r4, #8]
 8006288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800628c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006290:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006294:	b292      	uxth	r2, r2
 8006296:	4313      	orrs	r3, r2
 8006298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	f013 0f20 	tst.w	r3, #32
 80062a2:	d009      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062a4:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80062a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80062ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80062be:	d00c      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062c0:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80062c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80062ca:	0c02      	lsrs	r2, r0, #16
 80062cc:	0412      	lsls	r2, r2, #16
 80062ce:	ea23 0302 	bic.w	r3, r3, r2
 80062d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80062d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80062e0:	d00c      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80062e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062e8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80062ec:	0c02      	lsrs	r2, r0, #16
 80062ee:	0412      	lsls	r2, r2, #16
 80062f0:	ea23 0302 	bic.w	r3, r3, r2
 80062f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80062f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006302:	d00c      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006304:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800630a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800630e:	0c02      	lsrs	r2, r0, #16
 8006310:	0412      	lsls	r2, r2, #16
 8006312:	ea23 0302 	bic.w	r3, r3, r2
 8006316:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800631a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006324:	f040 809e 	bne.w	8006464 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800632e:	f040 80aa 	bne.w	8006486 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006338:	f040 80b6 	bne.w	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	f013 0f10 	tst.w	r3, #16
 8006342:	d00e      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006344:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800634a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800634e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006358:	68e3      	ldr	r3, [r4, #12]
 800635a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635e:	f000 80b4 	beq.w	80064ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006368:	d00f      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800636a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800636c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006370:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006374:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006378:	4313      	orrs	r3, r2
 800637a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800637e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006380:	b91b      	cbnz	r3, 800638a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006382:	68cb      	ldr	r3, [r1, #12]
 8006384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006388:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006390:	d00e      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006398:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800639c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80063a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80063a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ac:	f000 8092 	beq.w	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80063b0:	4628      	mov	r0, r5
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80063b4:	f7ff f92c 	bl	8005610 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80063b8:	f7fb fc20 	bl	8001bfc <HAL_GetTick>
 80063bc:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80063be:	4b48      	ldr	r3, [pc, #288]	; (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80063c6:	d106      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063c8:	f7fb fc18 	bl	8001bfc <HAL_GetTick>
 80063cc:	1b40      	subs	r0, r0, r5
 80063ce:	2802      	cmp	r0, #2
 80063d0:	d9f5      	bls.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 80063d2:	2503      	movs	r5, #3
 80063d4:	e000      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80063d6:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80063d8:	2d00      	cmp	r5, #0
 80063da:	f47f af41 	bne.w	8006260 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80063de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80063ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d024      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80063f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80063fc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006400:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006404:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006408:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800640c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006410:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006418:	f012 0f02 	tst.w	r2, #2
 800641c:	d10f      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 800641e:	2d00      	cmp	r5, #0
 8006420:	f47f af1e 	bne.w	8006260 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006424:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800642a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800642e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006438:	e712      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 800643a:	2200      	movs	r2, #0
 800643c:	e7ec      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 800643e:	f7fb fbdd 	bl	8001bfc <HAL_GetTick>
 8006442:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644c:	f013 0f02 	tst.w	r3, #2
 8006450:	d1e5      	bne.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006452:	f7fb fbd3 	bl	8001bfc <HAL_GetTick>
 8006456:	1b80      	subs	r0, r0, r6
 8006458:	f241 3388 	movw	r3, #5000	; 0x1388
 800645c:	4298      	cmp	r0, r3
 800645e:	d9f1      	bls.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8006460:	2503      	movs	r5, #3
 8006462:	e7dc      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006464:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006466:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800646a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800646e:	0919      	lsrs	r1, r3, #4
 8006470:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006474:	ea22 0201 	bic.w	r2, r2, r1
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006484:	e750      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006486:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006488:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800648c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006490:	0919      	lsrs	r1, r3, #4
 8006492:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006496:	ea22 0201 	bic.w	r2, r2, r1
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80064a0:	4313      	orrs	r3, r2
 80064a2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80064a6:	e744      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064a8:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80064aa:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80064ae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80064b2:	0919      	lsrs	r1, r3, #4
 80064b4:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80064b8:	ea22 0201 	bic.w	r2, r2, r1
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80064c8:	e738      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80064ca:	68cb      	ldr	r3, [r1, #12]
 80064cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064d0:	60cb      	str	r3, [r1, #12]
 80064d2:	e746      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064d4:	68cb      	ldr	r3, [r1, #12]
 80064d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064da:	60cb      	str	r3, [r1, #12]
 80064dc:	e768      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80064de:	bf00      	nop
 80064e0:	58000400 	.word	0x58000400

080064e4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80064e4:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064e6:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80064ea:	2a01      	cmp	r2, #1
 80064ec:	d035      	beq.n	800655a <HAL_RTC_DeactivateAlarm+0x76>
 80064ee:	2201      	movs	r2, #1
 80064f0:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064f4:	2202      	movs	r2, #2
 80064f6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064fa:	4a19      	ldr	r2, [pc, #100]	; (8006560 <HAL_RTC_DeactivateAlarm+0x7c>)
 80064fc:	20ca      	movs	r0, #202	; 0xca
 80064fe:	6250      	str	r0, [r2, #36]	; 0x24
 8006500:	2053      	movs	r0, #83	; 0x53
 8006502:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006504:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006508:	d018      	beq.n	800653c <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800650a:	4a15      	ldr	r2, [pc, #84]	; (8006560 <HAL_RTC_DeactivateAlarm+0x7c>)
 800650c:	6991      	ldr	r1, [r2, #24]
 800650e:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 8006512:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006514:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006516:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800651a:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800651c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800651e:	f021 0102 	bic.w	r1, r1, #2
 8006522:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006524:	2102      	movs	r1, #2
 8006526:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006528:	4a0d      	ldr	r2, [pc, #52]	; (8006560 <HAL_RTC_DeactivateAlarm+0x7c>)
 800652a:	21ff      	movs	r1, #255	; 0xff
 800652c:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800652e:	2201      	movs	r2, #1
 8006530:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006534:	2000      	movs	r0, #0
 8006536:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 800653a:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800653c:	6991      	ldr	r1, [r2, #24]
 800653e:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8006542:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006544:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006546:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800654a:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800654c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800654e:	f021 0101 	bic.w	r1, r1, #1
 8006552:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006554:	2101      	movs	r1, #1
 8006556:	65d1      	str	r1, [r2, #92]	; 0x5c
 8006558:	e7e6      	b.n	8006528 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 800655a:	2002      	movs	r0, #2
}
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40002800 	.word	0x40002800

08006564 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006568:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800656a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800656c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800656e:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006570:	f015 0f01 	tst.w	r5, #1
 8006574:	d106      	bne.n	8006584 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006576:	f015 0f02 	tst.w	r5, #2
 800657a:	d109      	bne.n	8006590 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800657c:	2301      	movs	r3, #1
 800657e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006582:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006584:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006586:	2201      	movs	r2, #1
 8006588:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800658a:	f7fb fd03 	bl	8001f94 <HAL_RTC_AlarmAEventCallback>
 800658e:	e7f2      	b.n	8006576 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006590:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006592:	2202      	movs	r2, #2
 8006594:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f9ec 	bl	8006974 <HAL_RTCEx_AlarmBEventCallback>
 800659c:	e7ee      	b.n	800657c <HAL_RTC_AlarmIRQHandler+0x18>
 800659e:	bf00      	nop
 80065a0:	40002800 	.word	0x40002800

080065a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065a4:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80065a6:	4a0b      	ldr	r2, [pc, #44]	; (80065d4 <HAL_RTC_WaitForSynchro+0x30>)
 80065a8:	68d3      	ldr	r3, [r2, #12]
 80065aa:	f023 0320 	bic.w	r3, r3, #32
 80065ae:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80065b0:	f7fb fb24 	bl	8001bfc <HAL_GetTick>
 80065b4:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80065b6:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <HAL_RTC_WaitForSynchro+0x30>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f013 0f20 	tst.w	r3, #32
 80065be:	d107      	bne.n	80065d0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065c0:	f7fb fb1c 	bl	8001bfc <HAL_GetTick>
 80065c4:	1b00      	subs	r0, r0, r4
 80065c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80065ca:	d9f4      	bls.n	80065b6 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80065cc:	2003      	movs	r0, #3
 80065ce:	e000      	b.n	80065d2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80065d0:	2000      	movs	r0, #0
}
 80065d2:	bd10      	pop	{r4, pc}
 80065d4:	40002800 	.word	0x40002800

080065d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80065da:	4b11      	ldr	r3, [pc, #68]	; (8006620 <RTC_EnterInitMode+0x48>)
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80065e2:	d002      	beq.n	80065ea <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80065e4:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80065e6:	4620      	mov	r0, r4
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80065ec:	4a0c      	ldr	r2, [pc, #48]	; (8006620 <RTC_EnterInitMode+0x48>)
 80065ee:	68d3      	ldr	r3, [r2, #12]
 80065f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f4:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80065f6:	f7fb fb01 	bl	8001bfc <HAL_GetTick>
 80065fa:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80065fc:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80065fe:	4b08      	ldr	r3, [pc, #32]	; (8006620 <RTC_EnterInitMode+0x48>)
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006606:	d1ee      	bne.n	80065e6 <RTC_EnterInitMode+0xe>
 8006608:	2c03      	cmp	r4, #3
 800660a:	d0ec      	beq.n	80065e6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800660c:	f7fb faf6 	bl	8001bfc <HAL_GetTick>
 8006610:	1b43      	subs	r3, r0, r5
 8006612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006616:	d9f2      	bls.n	80065fe <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006618:	2403      	movs	r4, #3
 800661a:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 800661e:	e7ee      	b.n	80065fe <RTC_EnterInitMode+0x26>
 8006620:	40002800 	.word	0x40002800

08006624 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006624:	b510      	push	{r4, lr}
 8006626:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006628:	4b10      	ldr	r3, [pc, #64]	; (800666c <RTC_ExitInitMode+0x48>)
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006630:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f013 0f20 	tst.w	r3, #32
 8006638:	d106      	bne.n	8006648 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800663a:	f7ff ffb3 	bl	80065a4 <HAL_RTC_WaitForSynchro>
 800663e:	b198      	cbz	r0, 8006668 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006640:	2003      	movs	r0, #3
 8006642:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006646:	e00f      	b.n	8006668 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006648:	4a08      	ldr	r2, [pc, #32]	; (800666c <RTC_ExitInitMode+0x48>)
 800664a:	6993      	ldr	r3, [r2, #24]
 800664c:	f023 0320 	bic.w	r3, r3, #32
 8006650:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006652:	f7ff ffa7 	bl	80065a4 <HAL_RTC_WaitForSynchro>
 8006656:	b110      	cbz	r0, 800665e <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006658:	2003      	movs	r0, #3
 800665a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800665e:	4a03      	ldr	r2, [pc, #12]	; (800666c <RTC_ExitInitMode+0x48>)
 8006660:	6993      	ldr	r3, [r2, #24]
 8006662:	f043 0320 	orr.w	r3, r3, #32
 8006666:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8006668:	bd10      	pop	{r4, pc}
 800666a:	bf00      	nop
 800666c:	40002800 	.word	0x40002800

08006670 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006670:	2800      	cmp	r0, #0
 8006672:	d052      	beq.n	800671a <HAL_RTC_Init+0xaa>
{
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006678:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800667c:	b163      	cbz	r3, 8006698 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800667e:	2302      	movs	r3, #2
 8006680:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006684:	4b26      	ldr	r3, [pc, #152]	; (8006720 <HAL_RTC_Init+0xb0>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f013 0f10 	tst.w	r3, #16
 800668c:	d009      	beq.n	80066a2 <HAL_RTC_Init+0x32>
      status = HAL_OK;
 800668e:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8006690:	2301      	movs	r3, #1
 8006692:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006696:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006698:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800669c:	f7fb f83a 	bl	8001714 <HAL_RTC_MspInit>
 80066a0:	e7ed      	b.n	800667e <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066a2:	4b1f      	ldr	r3, [pc, #124]	; (8006720 <HAL_RTC_Init+0xb0>)
 80066a4:	22ca      	movs	r2, #202	; 0xca
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24
 80066a8:	2253      	movs	r2, #83	; 0x53
 80066aa:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7ff ff93 	bl	80065d8 <RTC_EnterInitMode>
      if (status == HAL_OK)
 80066b2:	b128      	cbz	r0, 80066c0 <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066b4:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <HAL_RTC_Init+0xb0>)
 80066b6:	22ff      	movs	r2, #255	; 0xff
 80066b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d1eb      	bne.n	8006696 <HAL_RTC_Init+0x26>
 80066be:	e7e7      	b.n	8006690 <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80066c0:	4b17      	ldr	r3, [pc, #92]	; (8006720 <HAL_RTC_Init+0xb0>)
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80066c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066cc:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80066ce:	6999      	ldr	r1, [r3, #24]
 80066d0:	6862      	ldr	r2, [r4, #4]
 80066d2:	6920      	ldr	r0, [r4, #16]
 80066d4:	4302      	orrs	r2, r0
 80066d6:	69a0      	ldr	r0, [r4, #24]
 80066d8:	4302      	orrs	r2, r0
 80066da:	430a      	orrs	r2, r1
 80066dc:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80066de:	68e2      	ldr	r2, [r4, #12]
 80066e0:	68a1      	ldr	r1, [r4, #8]
 80066e2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80066e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80066ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80066f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80066f2:	4301      	orrs	r1, r0
 80066f4:	430a      	orrs	r2, r1
 80066f6:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 80066f8:	4620      	mov	r0, r4
 80066fa:	f7ff ff93 	bl	8006624 <RTC_ExitInitMode>
        if (status == HAL_OK)
 80066fe:	2800      	cmp	r0, #0
 8006700:	d1d8      	bne.n	80066b4 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 8006702:	4907      	ldr	r1, [pc, #28]	; (8006720 <HAL_RTC_Init+0xb0>)
 8006704:	698b      	ldr	r3, [r1, #24]
 8006706:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800670a:	6a22      	ldr	r2, [r4, #32]
 800670c:	69e5      	ldr	r5, [r4, #28]
 800670e:	432a      	orrs	r2, r5
 8006710:	6965      	ldr	r5, [r4, #20]
 8006712:	432a      	orrs	r2, r5
 8006714:	4313      	orrs	r3, r2
 8006716:	618b      	str	r3, [r1, #24]
 8006718:	e7cc      	b.n	80066b4 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 800671a:	2001      	movs	r0, #1
}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40002800 	.word	0x40002800

08006724 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006724:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006726:	e002      	b.n	800672e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006728:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800672a:	380a      	subs	r0, #10
 800672c:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800672e:	2809      	cmp	r0, #9
 8006730:	d8fa      	bhi.n	8006728 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	b2db      	uxtb	r3, r3
}
 8006736:	4318      	orrs	r0, r3
 8006738:	4770      	bx	lr
	...

0800673c <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800673c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006740:	2b01      	cmp	r3, #1
 8006742:	f000 80b0 	beq.w	80068a6 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8006746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674a:	4605      	mov	r5, r0
 800674c:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800674e:	2301      	movs	r3, #1
 8006750:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006754:	2302      	movs	r3, #2
 8006756:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800675a:	4b54      	ldr	r3, [pc, #336]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 800675c:	68de      	ldr	r6, [r3, #12]
 800675e:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006762:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006766:	d043      	beq.n	80067f0 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006768:	bb12      	cbnz	r2, 80067b0 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006770:	d101      	bne.n	8006776 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006772:	2300      	movs	r3, #0
 8006774:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006776:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800677a:	7820      	ldrb	r0, [r4, #0]
 800677c:	f7ff ffd2 	bl	8006724 <RTC_ByteToBcd2>
 8006780:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006782:	7860      	ldrb	r0, [r4, #1]
 8006784:	f7ff ffce 	bl	8006724 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006788:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800678c:	78a0      	ldrb	r0, [r4, #2]
 800678e:	f7ff ffc9 	bl	8006724 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006792:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006794:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006796:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800679a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800679e:	f7ff ffc1 	bl	8006724 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067a2:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80067a6:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067a8:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067aa:	ea48 0000 	orr.w	r0, r8, r0
 80067ae:	e020      	b.n	80067f2 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80067b0:	6948      	ldr	r0, [r1, #20]
 80067b2:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 80067b6:	d009      	beq.n	80067cc <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80067b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80067bc:	d006      	beq.n	80067cc <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80067be:	4b3b      	ldr	r3, [pc, #236]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80067c6:	d101      	bne.n	80067cc <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067cc:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067ce:	7863      	ldrb	r3, [r4, #1]
 80067d0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067d6:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067d8:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067da:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067dc:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067e0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80067e8:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067ea:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067ec:	4318      	orrs	r0, r3
 80067ee:	e000      	b.n	80067f2 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80067f0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067f2:	4b2e      	ldr	r3, [pc, #184]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 80067f4:	22ca      	movs	r2, #202	; 0xca
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24
 80067f8:	2253      	movs	r2, #83	; 0x53
 80067fa:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80067fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80067fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006802:	d02a      	beq.n	800685a <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006804:	4b29      	ldr	r3, [pc, #164]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 8006806:	699a      	ldr	r2, [r3, #24]
 8006808:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800680c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800680e:	2202      	movs	r2, #2
 8006810:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006812:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006816:	d040      	beq.n	800689a <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006818:	4b24      	ldr	r3, [pc, #144]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 800681a:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800681c:	69a2      	ldr	r2, [r4, #24]
 800681e:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006820:	6862      	ldr	r2, [r4, #4]
 8006822:	4b22      	ldr	r3, [pc, #136]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 8006824:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006826:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006828:	f042 0202 	orr.w	r2, r2, #2
 800682c:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800682e:	699a      	ldr	r2, [r3, #24]
 8006830:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006834:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006836:	4a1e      	ldr	r2, [pc, #120]	; (80068b0 <HAL_RTC_SetAlarm_IT+0x174>)
 8006838:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800683c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006840:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006844:	4b19      	ldr	r3, [pc, #100]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 8006846:	22ff      	movs	r2, #255	; 0xff
 8006848:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800684a:	2301      	movs	r3, #1
 800684c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8006850:	2000      	movs	r0, #0
 8006852:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800685a:	4b14      	ldr	r3, [pc, #80]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006862:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006864:	2201      	movs	r2, #1
 8006866:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006868:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800686c:	d00f      	beq.n	800688e <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800686e:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 8006870:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006872:	69a2      	ldr	r2, [r4, #24]
 8006874:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006876:	6862      	ldr	r2, [r4, #4]
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 800687a:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800687c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800688a:	619a      	str	r2, [r3, #24]
 800688c:	e7d3      	b.n	8006836 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800688e:	69a3      	ldr	r3, [r4, #24]
 8006890:	69e2      	ldr	r2, [r4, #28]
 8006892:	4313      	orrs	r3, r2
 8006894:	4a05      	ldr	r2, [pc, #20]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 8006896:	6453      	str	r3, [r2, #68]	; 0x44
 8006898:	e7ed      	b.n	8006876 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800689a:	69a3      	ldr	r3, [r4, #24]
 800689c:	69e2      	ldr	r2, [r4, #28]
 800689e:	4313      	orrs	r3, r2
 80068a0:	4a02      	ldr	r2, [pc, #8]	; (80068ac <HAL_RTC_SetAlarm_IT+0x170>)
 80068a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068a4:	e7bc      	b.n	8006820 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80068a6:	2002      	movs	r0, #2
}
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40002800 	.word	0x40002800
 80068b0:	58000800 	.word	0x58000800

080068b4 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068b4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d017      	beq.n	80068ec <HAL_RTCEx_EnableBypassShadow+0x38>
 80068bc:	2101      	movs	r1, #1
 80068be:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068c2:	2302      	movs	r3, #2
 80068c4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068c8:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80068ca:	22ca      	movs	r2, #202	; 0xca
 80068cc:	625a      	str	r2, [r3, #36]	; 0x24
 80068ce:	2253      	movs	r2, #83	; 0x53
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80068d2:	699a      	ldr	r2, [r3, #24]
 80068d4:	f042 0220 	orr.w	r2, r2, #32
 80068d8:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068da:	22ff      	movs	r2, #255	; 0xff
 80068dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068de:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068e2:	2300      	movs	r3, #0
 80068e4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80068e8:	4618      	mov	r0, r3
 80068ea:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80068ec:	2002      	movs	r0, #2
}
 80068ee:	4770      	bx	lr
 80068f0:	40002800 	.word	0x40002800

080068f4 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068f4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d020      	beq.n	800693e <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80068fc:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80068fe:	2101      	movs	r1, #1
 8006900:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006904:	2302      	movs	r3, #2
 8006906:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800690a:	4b0e      	ldr	r3, [pc, #56]	; (8006944 <HAL_RTCEx_SetSSRU_IT+0x50>)
 800690c:	22ca      	movs	r2, #202	; 0xca
 800690e:	625a      	str	r2, [r3, #36]	; 0x24
 8006910:	2253      	movs	r2, #83	; 0x53
 8006912:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800691a:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800691c:	4c0a      	ldr	r4, [pc, #40]	; (8006948 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800691e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006922:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006926:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800692a:	22ff      	movs	r2, #255	; 0xff
 800692c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800692e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006932:	2300      	movs	r3, #0
 8006934:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006938:	4618      	mov	r0, r3
}
 800693a:	bc10      	pop	{r4}
 800693c:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800693e:	2002      	movs	r0, #2
}
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40002800 	.word	0x40002800
 8006948:	58000800 	.word	0x58000800

0800694c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800694c:	b510      	push	{r4, lr}
 800694e:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006950:	4b07      	ldr	r3, [pc, #28]	; (8006970 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006954:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006958:	d103      	bne.n	8006962 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800695a:	2301      	movs	r3, #1
 800695c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006960:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006962:	4b03      	ldr	r3, [pc, #12]	; (8006970 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006964:	2240      	movs	r2, #64	; 0x40
 8006966:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006968:	f7fb fb18 	bl	8001f9c <HAL_RTCEx_SSRUEventCallback>
 800696c:	e7f5      	b.n	800695a <HAL_RTCEx_SSRUIRQHandler+0xe>
 800696e:	bf00      	nop
 8006970:	40002800 	.word	0x40002800

08006974 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006974:	4770      	bx	lr

08006976 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006976:	0089      	lsls	r1, r1, #2
 8006978:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800697c:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006980:	600a      	str	r2, [r1, #0]
}
 8006982:	4770      	bx	lr

08006984 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006984:	0089      	lsls	r1, r1, #2
 8006986:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800698a:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800698e:	6808      	ldr	r0, [r1, #0]
}
 8006990:	4770      	bx	lr
	...

08006994 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006994:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <SUBGHZSPI_Init+0x20>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800699c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800699e:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 80069a2:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80069a4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80069a8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069b0:	601a      	str	r2, [r3, #0]
}
 80069b2:	4770      	bx	lr
 80069b4:	58010000 	.word	0x58010000

080069b8 <HAL_SUBGHZ_Init>:
{
 80069b8:	b530      	push	{r4, r5, lr}
 80069ba:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 80069bc:	2800      	cmp	r0, #0
 80069be:	d058      	beq.n	8006a72 <HAL_SUBGHZ_Init+0xba>
 80069c0:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 80069c2:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80069c4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80069c8:	b10b      	cbz	r3, 80069ce <HAL_SUBGHZ_Init+0x16>
 80069ca:	2d03      	cmp	r5, #3
 80069cc:	d10b      	bne.n	80069e6 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 80069ce:	2300      	movs	r3, #0
 80069d0:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7fb f81c 	bl	8001a10 <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 80069d8:	4a27      	ldr	r2, [pc, #156]	; (8006a78 <HAL_SUBGHZ_Init+0xc0>)
 80069da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80069de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80069e6:	b185      	cbz	r5, 8006a0a <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80069e8:	4b24      	ldr	r3, [pc, #144]	; (8006a7c <HAL_SUBGHZ_Init+0xc4>)
 80069ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ee:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 80069f0:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80069f2:	6820      	ldr	r0, [r4, #0]
 80069f4:	f7ff ffce 	bl	8006994 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80069f8:	2301      	movs	r3, #1
 80069fa:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006a00:	2301      	movs	r3, #1
 8006a02:	71a3      	strb	r3, [r4, #6]
}
 8006a04:	4628      	mov	r0, r5
 8006a06:	b003      	add	sp, #12
 8006a08:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a12:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006a16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006a1e:	4b18      	ldr	r3, [pc, #96]	; (8006a80 <HAL_SUBGHZ_Init+0xc8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006a26:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006a2a:	2264      	movs	r2, #100	; 0x64
 8006a2c:	fb02 f303 	mul.w	r3, r2, r3
 8006a30:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8006a32:	9b01      	ldr	r3, [sp, #4]
 8006a34:	b1d3      	cbz	r3, 8006a6c <HAL_SUBGHZ_Init+0xb4>
      count--;
 8006a36:	9b01      	ldr	r3, [sp, #4]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a44:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006a48:	d1f3      	bne.n	8006a32 <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <HAL_SUBGHZ_Init+0xc4>)
 8006a4c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a5e:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a64:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	d1ca      	bne.n	8006a00 <HAL_SUBGHZ_Init+0x48>
 8006a6a:	e7c2      	b.n	80069f2 <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006a6c:	2501      	movs	r5, #1
 8006a6e:	60a5      	str	r5, [r4, #8]
        break;
 8006a70:	e7eb      	b.n	8006a4a <HAL_SUBGHZ_Init+0x92>
    return status;
 8006a72:	2501      	movs	r5, #1
 8006a74:	e7c6      	b.n	8006a04 <HAL_SUBGHZ_Init+0x4c>
 8006a76:	bf00      	nop
 8006a78:	58000800 	.word	0x58000800
 8006a7c:	58000400 	.word	0x58000400
 8006a80:	20000074 	.word	0x20000074

08006a84 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006a84:	b082      	sub	sp, #8
 8006a86:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006a88:	4b1a      	ldr	r3, [pc, #104]	; (8006af4 <SUBGHZSPI_Transmit+0x70>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006a90:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006a94:	2064      	movs	r0, #100	; 0x64
 8006a96:	fb00 f303 	mul.w	r3, r0, r3
 8006a9a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006a9c:	9b01      	ldr	r3, [sp, #4]
 8006a9e:	b14b      	cbz	r3, 8006ab4 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006aa0:	9b01      	ldr	r3, [sp, #4]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006aa6:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <SUBGHZSPI_Transmit+0x74>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f013 0f02 	tst.w	r3, #2
 8006aae:	d0f5      	beq.n	8006a9c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e001      	b.n	8006ab8 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <SUBGHZSPI_Transmit+0x74>)
 8006aba:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <SUBGHZSPI_Transmit+0x70>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006ac4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006ac8:	2164      	movs	r1, #100	; 0x64
 8006aca:	fb01 f303 	mul.w	r3, r1, r3
 8006ace:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006ad0:	9b01      	ldr	r3, [sp, #4]
 8006ad2:	b143      	cbz	r3, 8006ae6 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006ad4:	9b01      	ldr	r3, [sp, #4]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006ada:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <SUBGHZSPI_Transmit+0x74>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f013 0f01 	tst.w	r3, #1
 8006ae2:	d0f5      	beq.n	8006ad0 <SUBGHZSPI_Transmit+0x4c>
 8006ae4:	e001      	b.n	8006aea <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006aea:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <SUBGHZSPI_Transmit+0x74>)
 8006aec:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006aee:	b002      	add	sp, #8
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000074 	.word	0x20000074
 8006af8:	58010000 	.word	0x58010000

08006afc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006afc:	b082      	sub	sp, #8
 8006afe:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b00:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <SUBGHZSPI_Receive+0x78>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b08:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b0c:	2064      	movs	r0, #100	; 0x64
 8006b0e:	fb00 f303 	mul.w	r3, r0, r3
 8006b12:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	b14b      	cbz	r3, 8006b2c <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006b18:	9b01      	ldr	r3, [sp, #4]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006b1e:	4b16      	ldr	r3, [pc, #88]	; (8006b78 <SUBGHZSPI_Receive+0x7c>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f013 0f02 	tst.w	r3, #2
 8006b26:	d0f5      	beq.n	8006b14 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006b28:	2000      	movs	r0, #0
 8006b2a:	e001      	b.n	8006b30 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006b30:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <SUBGHZSPI_Receive+0x7c>)
 8006b32:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006b36:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b3a:	4b0e      	ldr	r3, [pc, #56]	; (8006b74 <SUBGHZSPI_Receive+0x78>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b42:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b46:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006b4a:	fb0c f303 	mul.w	r3, ip, r3
 8006b4e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006b50:	9b01      	ldr	r3, [sp, #4]
 8006b52:	b143      	cbz	r3, 8006b66 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006b54:	9b01      	ldr	r3, [sp, #4]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <SUBGHZSPI_Receive+0x7c>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f013 0f01 	tst.w	r3, #1
 8006b62:	d0f5      	beq.n	8006b50 <SUBGHZSPI_Receive+0x54>
 8006b64:	e001      	b.n	8006b6a <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b66:	2001      	movs	r0, #1
 8006b68:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006b6a:	4b03      	ldr	r3, [pc, #12]	; (8006b78 <SUBGHZSPI_Receive+0x7c>)
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006b70:	b002      	add	sp, #8
 8006b72:	4770      	bx	lr
 8006b74:	20000074 	.word	0x20000074
 8006b78:	58010000 	.word	0x58010000

08006b7c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006b7c:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006b7e:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <SUBGHZ_WaitOnBusy+0x50>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b86:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006b8a:	2264      	movs	r2, #100	; 0x64
 8006b8c:	fb02 f303 	mul.w	r3, r2, r3
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	e006      	b.n	8006ba2 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006b94:	2302      	movs	r3, #2
 8006b96:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006b98:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006b9a:	b002      	add	sp, #8
 8006b9c:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006b9e:	4213      	tst	r3, r2
 8006ba0:	d012      	beq.n	8006bc8 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006ba2:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <SUBGHZ_WaitOnBusy+0x54>)
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f013 0304 	ands.w	r3, r3, #4
 8006baa:	d000      	beq.n	8006bae <SUBGHZ_WaitOnBusy+0x32>
 8006bac:	2301      	movs	r3, #1
    if (count == 0U)
 8006bae:	9a01      	ldr	r2, [sp, #4]
 8006bb0:	2a00      	cmp	r2, #0
 8006bb2:	d0ef      	beq.n	8006b94 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006bb4:	9a01      	ldr	r2, [sp, #4]
 8006bb6:	3a01      	subs	r2, #1
 8006bb8:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006bba:	4a05      	ldr	r2, [pc, #20]	; (8006bd0 <SUBGHZ_WaitOnBusy+0x54>)
 8006bbc:	6952      	ldr	r2, [r2, #20]
 8006bbe:	f012 0202 	ands.w	r2, r2, #2
 8006bc2:	d0ec      	beq.n	8006b9e <SUBGHZ_WaitOnBusy+0x22>
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	e7ea      	b.n	8006b9e <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e7e6      	b.n	8006b9a <SUBGHZ_WaitOnBusy+0x1e>
 8006bcc:	20000074 	.word	0x20000074
 8006bd0:	58000400 	.word	0x58000400

08006bd4 <SUBGHZ_CheckDeviceReady>:
{
 8006bd4:	b500      	push	{lr}
 8006bd6:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006bd8:	7903      	ldrb	r3, [r0, #4]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d004      	beq.n	8006be8 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006bde:	f7ff ffcd 	bl	8006b7c <SUBGHZ_WaitOnBusy>
}
 8006be2:	b003      	add	sp, #12
 8006be4:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006be8:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <SUBGHZ_CheckDeviceReady+0x4c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006bf0:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006bf4:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006bf6:	4a0b      	ldr	r2, [pc, #44]	; (8006c24 <SUBGHZ_CheckDeviceReady+0x50>)
 8006bf8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006bfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8006c04:	9b01      	ldr	r3, [sp, #4]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006c0a:	9b01      	ldr	r3, [sp, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1f9      	bne.n	8006c04 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c10:	4a04      	ldr	r2, [pc, #16]	; (8006c24 <SUBGHZ_CheckDeviceReady+0x50>)
 8006c12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c1e:	e7de      	b.n	8006bde <SUBGHZ_CheckDeviceReady+0xa>
 8006c20:	20000074 	.word	0x20000074
 8006c24:	58000400 	.word	0x58000400

08006c28 <HAL_SUBGHZ_WriteRegisters>:
{
 8006c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c2e:	7980      	ldrb	r0, [r0, #6]
 8006c30:	fa5f f880 	uxtb.w	r8, r0
 8006c34:	f1b8 0f01 	cmp.w	r8, #1
 8006c38:	d13e      	bne.n	8006cb8 <HAL_SUBGHZ_WriteRegisters+0x90>
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	4617      	mov	r7, r2
 8006c3e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006c40:	796b      	ldrb	r3, [r5, #5]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d03b      	beq.n	8006cbe <HAL_SUBGHZ_WriteRegisters+0x96>
 8006c46:	2301      	movs	r3, #1
 8006c48:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f7ff ffc0 	bl	8006bd4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c54:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006c56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006c62:	210d      	movs	r1, #13
 8006c64:	4628      	mov	r0, r5
 8006c66:	f7ff ff0d 	bl	8006a84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006c6a:	0a21      	lsrs	r1, r4, #8
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f7ff ff09 	bl	8006a84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006c72:	b2e1      	uxtb	r1, r4
 8006c74:	4628      	mov	r0, r5
 8006c76:	f7ff ff05 	bl	8006a84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c7a:	2400      	movs	r4, #0
 8006c7c:	e005      	b.n	8006c8a <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006c7e:	5d39      	ldrb	r1, [r7, r4]
 8006c80:	4628      	mov	r0, r5
 8006c82:	f7ff feff 	bl	8006a84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c86:	3401      	adds	r4, #1
 8006c88:	b2a4      	uxth	r4, r4
 8006c8a:	42b4      	cmp	r4, r6
 8006c8c:	d3f7      	bcc.n	8006c7e <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c8e:	4a0d      	ldr	r2, [pc, #52]	; (8006cc4 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006c90:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f7ff ff6d 	bl	8006b7c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ca2:	68ab      	ldr	r3, [r5, #8]
 8006ca4:	b90b      	cbnz	r3, 8006caa <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8006ca6:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006caa:	2301      	movs	r3, #1
 8006cac:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006cae:	2300      	movs	r3, #0
 8006cb0:	716b      	strb	r3, [r5, #5]
}
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006cb8:	f04f 0802 	mov.w	r8, #2
 8006cbc:	e7f9      	b.n	8006cb2 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8006cbe:	f04f 0802 	mov.w	r8, #2
 8006cc2:	e7f6      	b.n	8006cb2 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006cc4:	58000400 	.word	0x58000400

08006cc8 <HAL_SUBGHZ_ReadRegisters>:
{
 8006cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ccc:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006cce:	7980      	ldrb	r0, [r0, #6]
 8006cd0:	fa5f f880 	uxtb.w	r8, r0
 8006cd4:	f1b8 0f01 	cmp.w	r8, #1
 8006cd8:	d141      	bne.n	8006d5e <HAL_SUBGHZ_ReadRegisters+0x96>
 8006cda:	460c      	mov	r4, r1
 8006cdc:	4615      	mov	r5, r2
 8006cde:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006ce0:	7973      	ldrb	r3, [r6, #5]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d03e      	beq.n	8006d64 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7ff ff72 	bl	8006bd4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006cf0:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006cf2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006cf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006cfe:	211d      	movs	r1, #29
 8006d00:	4630      	mov	r0, r6
 8006d02:	f7ff febf 	bl	8006a84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006d06:	0a21      	lsrs	r1, r4, #8
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7ff febb 	bl	8006a84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006d0e:	b2e1      	uxtb	r1, r4
 8006d10:	4630      	mov	r0, r6
 8006d12:	f7ff feb7 	bl	8006a84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006d16:	2100      	movs	r1, #0
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f7ff feb3 	bl	8006a84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d1e:	2400      	movs	r4, #0
 8006d20:	e006      	b.n	8006d30 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006d22:	4629      	mov	r1, r5
 8006d24:	4630      	mov	r0, r6
 8006d26:	f7ff fee9 	bl	8006afc <SUBGHZSPI_Receive>
      pData++;
 8006d2a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006d2c:	3401      	adds	r4, #1
 8006d2e:	b2a4      	uxth	r4, r4
 8006d30:	42bc      	cmp	r4, r7
 8006d32:	d3f6      	bcc.n	8006d22 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d34:	4a0d      	ldr	r2, [pc, #52]	; (8006d6c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006d36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d42:	4630      	mov	r0, r6
 8006d44:	f7ff ff1a 	bl	8006b7c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d48:	68b3      	ldr	r3, [r6, #8]
 8006d4a:	b90b      	cbnz	r3, 8006d50 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8006d4c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d50:	2301      	movs	r3, #1
 8006d52:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006d54:	2300      	movs	r3, #0
 8006d56:	7173      	strb	r3, [r6, #5]
}
 8006d58:	4640      	mov	r0, r8
 8006d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006d5e:	f04f 0802 	mov.w	r8, #2
 8006d62:	e7f9      	b.n	8006d58 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8006d64:	f04f 0802 	mov.w	r8, #2
 8006d68:	e7f6      	b.n	8006d58 <HAL_SUBGHZ_ReadRegisters+0x90>
 8006d6a:	bf00      	nop
 8006d6c:	58000400 	.word	0x58000400

08006d70 <HAL_SUBGHZ_ExecSetCmd>:
{
 8006d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d74:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d76:	7980      	ldrb	r0, [r0, #6]
 8006d78:	fa5f f980 	uxtb.w	r9, r0
 8006d7c:	f1b9 0f01 	cmp.w	r9, #1
 8006d80:	d143      	bne.n	8006e0a <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8006d82:	4688      	mov	r8, r1
 8006d84:	4617      	mov	r7, r2
 8006d86:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006d88:	796b      	ldrb	r3, [r5, #5]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d040      	beq.n	8006e10 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d92:	4628      	mov	r0, r5
 8006d94:	f7ff ff1e 	bl	8006bd4 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006d98:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8006d9c:	d005      	beq.n	8006daa <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8006d9e:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8006da2:	d002      	beq.n	8006daa <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006da4:	2300      	movs	r3, #0
 8006da6:	712b      	strb	r3, [r5, #4]
 8006da8:	e001      	b.n	8006dae <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006daa:	2301      	movs	r3, #1
 8006dac:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006dae:	4a1a      	ldr	r2, [pc, #104]	; (8006e18 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006db0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006db4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006dbc:	4641      	mov	r1, r8
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f7ff fe60 	bl	8006a84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006dc4:	2400      	movs	r4, #0
 8006dc6:	e005      	b.n	8006dd4 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006dc8:	5d39      	ldrb	r1, [r7, r4]
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f7ff fe5a 	bl	8006a84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006dd0:	3401      	adds	r4, #1
 8006dd2:	b2a4      	uxth	r4, r4
 8006dd4:	42b4      	cmp	r4, r6
 8006dd6:	d3f7      	bcc.n	8006dc8 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006dd8:	4a0f      	ldr	r2, [pc, #60]	; (8006e18 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006dda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8006de6:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8006dea:	d10a      	bne.n	8006e02 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006dec:	68ab      	ldr	r3, [r5, #8]
 8006dee:	b90b      	cbnz	r3, 8006df4 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8006df0:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006df4:	2301      	movs	r3, #1
 8006df6:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006df8:	2300      	movs	r3, #0
 8006dfa:	716b      	strb	r3, [r5, #5]
}
 8006dfc:	4648      	mov	r0, r9
 8006dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e02:	4628      	mov	r0, r5
 8006e04:	f7ff feba 	bl	8006b7c <SUBGHZ_WaitOnBusy>
 8006e08:	e7f0      	b.n	8006dec <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8006e0a:	f04f 0902 	mov.w	r9, #2
 8006e0e:	e7f5      	b.n	8006dfc <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8006e10:	f04f 0902 	mov.w	r9, #2
 8006e14:	e7f2      	b.n	8006dfc <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8006e16:	bf00      	nop
 8006e18:	58000400 	.word	0x58000400

08006e1c <HAL_SUBGHZ_ExecGetCmd>:
{
 8006e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e20:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e22:	7980      	ldrb	r0, [r0, #6]
 8006e24:	fa5f f880 	uxtb.w	r8, r0
 8006e28:	f1b8 0f01 	cmp.w	r8, #1
 8006e2c:	d139      	bne.n	8006ea2 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8006e2e:	460c      	mov	r4, r1
 8006e30:	4615      	mov	r5, r2
 8006e32:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006e34:	7973      	ldrb	r3, [r6, #5]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d036      	beq.n	8006ea8 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f7ff fec8 	bl	8006bd4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e44:	4a1a      	ldr	r2, [pc, #104]	; (8006eb0 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006e46:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006e52:	4621      	mov	r1, r4
 8006e54:	4630      	mov	r0, r6
 8006e56:	f7ff fe15 	bl	8006a84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f7ff fe11 	bl	8006a84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e62:	2400      	movs	r4, #0
 8006e64:	e006      	b.n	8006e74 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006e66:	4629      	mov	r1, r5
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff fe47 	bl	8006afc <SUBGHZSPI_Receive>
      pData++;
 8006e6e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006e70:	3401      	adds	r4, #1
 8006e72:	b2a4      	uxth	r4, r4
 8006e74:	42bc      	cmp	r4, r7
 8006e76:	d3f6      	bcc.n	8006e66 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e78:	4a0d      	ldr	r2, [pc, #52]	; (8006eb0 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006e7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e86:	4630      	mov	r0, r6
 8006e88:	f7ff fe78 	bl	8006b7c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e8c:	68b3      	ldr	r3, [r6, #8]
 8006e8e:	b90b      	cbnz	r3, 8006e94 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8006e90:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e94:	2301      	movs	r3, #1
 8006e96:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006e98:	2300      	movs	r3, #0
 8006e9a:	7173      	strb	r3, [r6, #5]
}
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006ea2:	f04f 0802 	mov.w	r8, #2
 8006ea6:	e7f9      	b.n	8006e9c <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8006ea8:	f04f 0802 	mov.w	r8, #2
 8006eac:	e7f6      	b.n	8006e9c <HAL_SUBGHZ_ExecGetCmd+0x80>
 8006eae:	bf00      	nop
 8006eb0:	58000400 	.word	0x58000400

08006eb4 <HAL_SUBGHZ_IRQHandler>:
{
 8006eb4:	b530      	push	{r4, r5, lr}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	aa01      	add	r2, sp, #4
 8006ec4:	2112      	movs	r1, #18
 8006ec6:	f7ff ffa9 	bl	8006e1c <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006eca:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006ece:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8006ed2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	aa01      	add	r2, sp, #4
 8006eda:	4619      	mov	r1, r3
 8006edc:	4628      	mov	r0, r5
 8006ede:	f7ff ff47 	bl	8006d70 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006ee2:	f014 0f01 	tst.w	r4, #1
 8006ee6:	d123      	bne.n	8006f30 <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006ee8:	f014 0f02 	tst.w	r4, #2
 8006eec:	d124      	bne.n	8006f38 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006eee:	f014 0f04 	tst.w	r4, #4
 8006ef2:	d125      	bne.n	8006f40 <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006ef4:	f014 0f08 	tst.w	r4, #8
 8006ef8:	d126      	bne.n	8006f48 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006efa:	f014 0f10 	tst.w	r4, #16
 8006efe:	d127      	bne.n	8006f50 <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006f00:	f014 0f20 	tst.w	r4, #32
 8006f04:	d128      	bne.n	8006f58 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006f06:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006f0a:	d129      	bne.n	8006f60 <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006f0c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8006f10:	d006      	beq.n	8006f20 <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006f12:	f414 7f80 	tst.w	r4, #256	; 0x100
 8006f16:	d027      	beq.n	8006f68 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006f18:	2101      	movs	r1, #1
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f00b fc58 	bl	80127d0 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006f20:	f414 7f00 	tst.w	r4, #512	; 0x200
 8006f24:	d125      	bne.n	8006f72 <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8006f26:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8006f2a:	d126      	bne.n	8006f7a <HAL_SUBGHZ_IRQHandler+0xc6>
}
 8006f2c:	b003      	add	sp, #12
 8006f2e:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006f30:	4628      	mov	r0, r5
 8006f32:	f00b fc35 	bl	80127a0 <HAL_SUBGHZ_TxCpltCallback>
 8006f36:	e7d7      	b.n	8006ee8 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f00b fc39 	bl	80127b0 <HAL_SUBGHZ_RxCpltCallback>
 8006f3e:	e7d6      	b.n	8006eee <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006f40:	4628      	mov	r0, r5
 8006f42:	f00b fc69 	bl	8012818 <HAL_SUBGHZ_PreambleDetectedCallback>
 8006f46:	e7d5      	b.n	8006ef4 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f00b fc6d 	bl	8012828 <HAL_SUBGHZ_SyncWordValidCallback>
 8006f4e:	e7d4      	b.n	8006efa <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006f50:	4628      	mov	r0, r5
 8006f52:	f00b fc71 	bl	8012838 <HAL_SUBGHZ_HeaderValidCallback>
 8006f56:	e7d3      	b.n	8006f00 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006f58:	4628      	mov	r0, r5
 8006f5a:	f00b fc55 	bl	8012808 <HAL_SUBGHZ_HeaderErrorCallback>
 8006f5e:	e7d2      	b.n	8006f06 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006f60:	4628      	mov	r0, r5
 8006f62:	f00b fc2d 	bl	80127c0 <HAL_SUBGHZ_CRCErrorCallback>
 8006f66:	e7d1      	b.n	8006f0c <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f00b fc30 	bl	80127d0 <HAL_SUBGHZ_CADStatusCallback>
 8006f70:	e7d6      	b.n	8006f20 <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006f72:	4628      	mov	r0, r5
 8006f74:	f00b fc3e 	bl	80127f4 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8006f78:	e7d5      	b.n	8006f26 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f00b fc64 	bl	8012848 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8006f80:	e7d4      	b.n	8006f2c <HAL_SUBGHZ_IRQHandler+0x78>
	...

08006f84 <HAL_SUBGHZ_WriteBuffer>:
{
 8006f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f88:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f8a:	7980      	ldrb	r0, [r0, #6]
 8006f8c:	fa5f f880 	uxtb.w	r8, r0
 8006f90:	f1b8 0f01 	cmp.w	r8, #1
 8006f94:	d138      	bne.n	8007008 <HAL_SUBGHZ_WriteBuffer+0x84>
 8006f96:	460c      	mov	r4, r1
 8006f98:	4617      	mov	r7, r2
 8006f9a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006f9c:	796b      	ldrb	r3, [r5, #5]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d035      	beq.n	800700e <HAL_SUBGHZ_WriteBuffer+0x8a>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f7ff fe14 	bl	8006bd4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fac:	4a19      	ldr	r2, [pc, #100]	; (8007014 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006fae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006fb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006fba:	210e      	movs	r1, #14
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f7ff fd61 	bl	8006a84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f7ff fd5d 	bl	8006a84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fca:	2400      	movs	r4, #0
 8006fcc:	e005      	b.n	8006fda <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006fce:	5d39      	ldrb	r1, [r7, r4]
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f7ff fd57 	bl	8006a84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fd6:	3401      	adds	r4, #1
 8006fd8:	b2a4      	uxth	r4, r4
 8006fda:	42b4      	cmp	r4, r6
 8006fdc:	d3f7      	bcc.n	8006fce <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fde:	4a0d      	ldr	r2, [pc, #52]	; (8007014 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006fe0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006fec:	4628      	mov	r0, r5
 8006fee:	f7ff fdc5 	bl	8006b7c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ff2:	68ab      	ldr	r3, [r5, #8]
 8006ff4:	b90b      	cbnz	r3, 8006ffa <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8006ff6:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006ffe:	2300      	movs	r3, #0
 8007000:	716b      	strb	r3, [r5, #5]
}
 8007002:	4640      	mov	r0, r8
 8007004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007008:	f04f 0802 	mov.w	r8, #2
 800700c:	e7f9      	b.n	8007002 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800700e:	f04f 0802 	mov.w	r8, #2
 8007012:	e7f6      	b.n	8007002 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8007014:	58000400 	.word	0x58000400

08007018 <HAL_SUBGHZ_ReadBuffer>:
{
 8007018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800701e:	7980      	ldrb	r0, [r0, #6]
 8007020:	fa5f f880 	uxtb.w	r8, r0
 8007024:	f1b8 0f01 	cmp.w	r8, #1
 8007028:	d13d      	bne.n	80070a6 <HAL_SUBGHZ_ReadBuffer+0x8e>
 800702a:	460c      	mov	r4, r1
 800702c:	4615      	mov	r5, r2
 800702e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007030:	7973      	ldrb	r3, [r6, #5]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d03a      	beq.n	80070ac <HAL_SUBGHZ_ReadBuffer+0x94>
 8007036:	2301      	movs	r3, #1
 8007038:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800703a:	4630      	mov	r0, r6
 800703c:	f7ff fdca 	bl	8006bd4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007040:	4a1c      	ldr	r2, [pc, #112]	; (80070b4 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007042:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007046:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800704a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800704e:	211e      	movs	r1, #30
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff fd17 	bl	8006a84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007056:	4621      	mov	r1, r4
 8007058:	4630      	mov	r0, r6
 800705a:	f7ff fd13 	bl	8006a84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800705e:	2100      	movs	r1, #0
 8007060:	4630      	mov	r0, r6
 8007062:	f7ff fd0f 	bl	8006a84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007066:	2400      	movs	r4, #0
 8007068:	e006      	b.n	8007078 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800706a:	4629      	mov	r1, r5
 800706c:	4630      	mov	r0, r6
 800706e:	f7ff fd45 	bl	8006afc <SUBGHZSPI_Receive>
      pData++;
 8007072:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007074:	3401      	adds	r4, #1
 8007076:	b2a4      	uxth	r4, r4
 8007078:	42bc      	cmp	r4, r7
 800707a:	d3f6      	bcc.n	800706a <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800707c:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800707e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800708a:	4630      	mov	r0, r6
 800708c:	f7ff fd76 	bl	8006b7c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007090:	68b3      	ldr	r3, [r6, #8]
 8007092:	b90b      	cbnz	r3, 8007098 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8007094:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007098:	2301      	movs	r3, #1
 800709a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800709c:	2300      	movs	r3, #0
 800709e:	7173      	strb	r3, [r6, #5]
}
 80070a0:	4640      	mov	r0, r8
 80070a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80070a6:	f04f 0802 	mov.w	r8, #2
 80070aa:	e7f9      	b.n	80070a0 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80070ac:	f04f 0802 	mov.w	r8, #2
 80070b0:	e7f6      	b.n	80070a0 <HAL_SUBGHZ_ReadBuffer+0x88>
 80070b2:	bf00      	nop
 80070b4:	58000400 	.word	0x58000400

080070b8 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80070b8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	e852 3f00 	ldrex	r3, [r2]
 80070be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	e842 3100 	strex	r1, r3, [r2]
 80070c6:	2900      	cmp	r1, #0
 80070c8:	d1f6      	bne.n	80070b8 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80070ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	f102 0308 	add.w	r3, r2, #8
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	3208      	adds	r2, #8
 80070da:	e842 3100 	strex	r1, r3, [r2]
 80070de:	2900      	cmp	r1, #0
 80070e0:	d1f3      	bne.n	80070ca <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070e2:	2320      	movs	r3, #32
 80070e4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80070e8:	4770      	bx	lr

080070ea <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	e852 3f00 	ldrex	r3, [r2]
 80070f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	e842 3100 	strex	r1, r3, [r2]
 80070f8:	2900      	cmp	r1, #0
 80070fa:	d1f6      	bne.n	80070ea <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070fc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	f102 0308 	add.w	r3, r2, #8
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800710a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	3208      	adds	r2, #8
 8007110:	e842 3100 	strex	r1, r3, [r2]
 8007114:	2900      	cmp	r1, #0
 8007116:	d1f1      	bne.n	80070fc <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007118:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800711a:	2b01      	cmp	r3, #1
 800711c:	d006      	beq.n	800712c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800711e:	2320      	movs	r3, #32
 8007120:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007124:	2300      	movs	r3, #0
 8007126:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007128:	6743      	str	r3, [r0, #116]	; 0x74
}
 800712a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800712c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	e852 3f00 	ldrex	r3, [r2]
 8007132:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	e842 3100 	strex	r1, r3, [r2]
 800713a:	2900      	cmp	r1, #0
 800713c:	d1f6      	bne.n	800712c <UART_EndRxTransfer+0x42>
 800713e:	e7ee      	b.n	800711e <UART_EndRxTransfer+0x34>

08007140 <HAL_UART_Transmit_DMA>:
{
 8007140:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007142:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007146:	2a20      	cmp	r2, #32
 8007148:	d13d      	bne.n	80071c6 <HAL_UART_Transmit_DMA+0x86>
{
 800714a:	b510      	push	{r4, lr}
 800714c:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800714e:	2900      	cmp	r1, #0
 8007150:	d03b      	beq.n	80071ca <HAL_UART_Transmit_DMA+0x8a>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d03b      	beq.n	80071ce <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8007156:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007158:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800715c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007160:	2200      	movs	r2, #0
 8007162:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007166:	2221      	movs	r2, #33	; 0x21
 8007168:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 800716c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800716e:	b1ca      	cbz	r2, 80071a4 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007170:	4918      	ldr	r1, [pc, #96]	; (80071d4 <HAL_UART_Transmit_DMA+0x94>)
 8007172:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007174:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007176:	4918      	ldr	r1, [pc, #96]	; (80071d8 <HAL_UART_Transmit_DMA+0x98>)
 8007178:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800717a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800717c:	4917      	ldr	r1, [pc, #92]	; (80071dc <HAL_UART_Transmit_DMA+0x9c>)
 800717e:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8007180:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007182:	2100      	movs	r1, #0
 8007184:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007186:	6802      	ldr	r2, [r0, #0]
 8007188:	3228      	adds	r2, #40	; 0x28
 800718a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800718c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800718e:	f7fd f84f 	bl	8004230 <HAL_DMA_Start_IT>
 8007192:	b138      	cbz	r0, 80071a4 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007194:	2310      	movs	r3, #16
 8007196:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 800719a:	2320      	movs	r3, #32
 800719c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 80071a0:	2001      	movs	r0, #1
 80071a2:	e00f      	b.n	80071c4 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	2240      	movs	r2, #64	; 0x40
 80071a8:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	f102 0308 	add.w	r3, r2, #8
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	3208      	adds	r2, #8
 80071ba:	e842 3100 	strex	r1, r3, [r2]
 80071be:	2900      	cmp	r1, #0
 80071c0:	d1f3      	bne.n	80071aa <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80071c2:	2000      	movs	r0, #0
}
 80071c4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80071c6:	2002      	movs	r0, #2
}
 80071c8:	4770      	bx	lr
      return HAL_ERROR;
 80071ca:	2001      	movs	r0, #1
 80071cc:	e7fa      	b.n	80071c4 <HAL_UART_Transmit_DMA+0x84>
 80071ce:	2001      	movs	r0, #1
 80071d0:	e7f8      	b.n	80071c4 <HAL_UART_Transmit_DMA+0x84>
 80071d2:	bf00      	nop
 80071d4:	080071e1 	.word	0x080071e1
 80071d8:	0800724f 	.word	0x0800724f
 80071dc:	0800725b 	.word	0x0800725b

080071e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071e0:	b508      	push	{r3, lr}
 80071e2:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071e4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f013 0f20 	tst.w	r3, #32
 80071ee:	d118      	bne.n	8007222 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	f102 0308 	add.w	r3, r2, #8
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	3208      	adds	r2, #8
 8007206:	e842 3100 	strex	r1, r3, [r2]
 800720a:	2900      	cmp	r1, #0
 800720c:	d1f3      	bne.n	80071f6 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800720e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007210:	e852 3f00 	ldrex	r3, [r2]
 8007214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	e842 3100 	strex	r1, r3, [r2]
 800721c:	2900      	cmp	r1, #0
 800721e:	d1f6      	bne.n	800720e <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007220:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007222:	f7fa fffb 	bl	800221c <HAL_UART_TxCpltCallback>
}
 8007226:	e7fb      	b.n	8007220 <UART_DMATransmitCplt+0x40>

08007228 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007228:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800722a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	e852 3f00 	ldrex	r3, [r2]
 8007230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	e842 3100 	strex	r1, r3, [r2]
 8007238:	2900      	cmp	r1, #0
 800723a:	d1f6      	bne.n	800722a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800723c:	2320      	movs	r3, #32
 800723e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007242:	2300      	movs	r3, #0
 8007244:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007246:	f7fa ffe9 	bl	800221c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800724a:	bd08      	pop	{r3, pc}

0800724c <HAL_UART_TxHalfCpltCallback>:
}
 800724c:	4770      	bx	lr

0800724e <UART_DMATxHalfCplt>:
{
 800724e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007250:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007252:	f7ff fffb 	bl	800724c <HAL_UART_TxHalfCpltCallback>
}
 8007256:	bd08      	pop	{r3, pc}

08007258 <HAL_UART_ErrorCallback>:
}
 8007258:	4770      	bx	lr

0800725a <UART_DMAError>:
{
 800725a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800725c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800725e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007262:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800726e:	d001      	beq.n	8007274 <UART_DMAError+0x1a>
 8007270:	2a21      	cmp	r2, #33	; 0x21
 8007272:	d010      	beq.n	8007296 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f013 0f40 	tst.w	r3, #64	; 0x40
 800727c:	d001      	beq.n	8007282 <UART_DMAError+0x28>
 800727e:	2d22      	cmp	r5, #34	; 0x22
 8007280:	d010      	beq.n	80072a4 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007282:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007286:	f043 0310 	orr.w	r3, r3, #16
 800728a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 800728e:	4620      	mov	r0, r4
 8007290:	f7ff ffe2 	bl	8007258 <HAL_UART_ErrorCallback>
}
 8007294:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800729c:	4620      	mov	r0, r4
 800729e:	f7ff ff0b 	bl	80070b8 <UART_EndTxTransfer>
 80072a2:	e7e7      	b.n	8007274 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80072aa:	4620      	mov	r0, r4
 80072ac:	f7ff ff1d 	bl	80070ea <UART_EndRxTransfer>
 80072b0:	e7e7      	b.n	8007282 <UART_DMAError+0x28>

080072b2 <UART_DMAAbortOnError>:
{
 80072b2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80072b6:	2300      	movs	r3, #0
 80072b8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80072bc:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80072c0:	f7ff ffca 	bl	8007258 <HAL_UART_ErrorCallback>
}
 80072c4:	bd08      	pop	{r3, pc}

080072c6 <HAL_UARTEx_RxEventCallback>:
}
 80072c6:	4770      	bx	lr

080072c8 <HAL_UART_IRQHandler>:
{
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072cc:	6801      	ldr	r1, [r0, #0]
 80072ce:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072d0:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072d2:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072d4:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80072d8:	401a      	ands	r2, r3
 80072da:	d108      	bne.n	80072ee <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072dc:	f013 0f20 	tst.w	r3, #32
 80072e0:	d005      	beq.n	80072ee <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072e2:	f010 0f20 	tst.w	r0, #32
 80072e6:	d134      	bne.n	8007352 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072e8:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80072ec:	d131      	bne.n	8007352 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80072ee:	b12a      	cbz	r2, 80072fc <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80072f0:	4a99      	ldr	r2, [pc, #612]	; (8007558 <HAL_UART_IRQHandler+0x290>)
 80072f2:	402a      	ands	r2, r5
 80072f4:	d133      	bne.n	800735e <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80072f6:	4e99      	ldr	r6, [pc, #612]	; (800755c <HAL_UART_IRQHandler+0x294>)
 80072f8:	4230      	tst	r0, r6
 80072fa:	d130      	bne.n	800735e <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072fc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80072fe:	2a01      	cmp	r2, #1
 8007300:	f000 80c6 	beq.w	8007490 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007304:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007308:	d003      	beq.n	8007312 <HAL_UART_IRQHandler+0x4a>
 800730a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800730e:	f040 8165 	bne.w	80075dc <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007312:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007316:	d007      	beq.n	8007328 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007318:	f010 0f80 	tst.w	r0, #128	; 0x80
 800731c:	f040 8165 	bne.w	80075ea <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007320:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8007324:	f040 8161 	bne.w	80075ea <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007328:	f013 0f40 	tst.w	r3, #64	; 0x40
 800732c:	d003      	beq.n	8007336 <HAL_UART_IRQHandler+0x6e>
 800732e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007332:	f040 8161 	bne.w	80075f8 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007336:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800733a:	d003      	beq.n	8007344 <HAL_UART_IRQHandler+0x7c>
 800733c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007340:	f040 815e 	bne.w	8007600 <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007344:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007348:	d002      	beq.n	8007350 <HAL_UART_IRQHandler+0x88>
 800734a:	2800      	cmp	r0, #0
 800734c:	f2c0 815c 	blt.w	8007608 <HAL_UART_IRQHandler+0x340>
}
 8007350:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8007352:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0fb      	beq.n	8007350 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8007358:	4620      	mov	r0, r4
 800735a:	4798      	blx	r3
      return;
 800735c:	e7f8      	b.n	8007350 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800735e:	f013 0f01 	tst.w	r3, #1
 8007362:	d009      	beq.n	8007378 <HAL_UART_IRQHandler+0xb0>
 8007364:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007368:	d006      	beq.n	8007378 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800736a:	2601      	movs	r6, #1
 800736c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800736e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007372:	4331      	orrs	r1, r6
 8007374:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007378:	f013 0f02 	tst.w	r3, #2
 800737c:	d00b      	beq.n	8007396 <HAL_UART_IRQHandler+0xce>
 800737e:	f015 0f01 	tst.w	r5, #1
 8007382:	d008      	beq.n	8007396 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007384:	6821      	ldr	r1, [r4, #0]
 8007386:	2602      	movs	r6, #2
 8007388:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800738a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800738e:	f041 0104 	orr.w	r1, r1, #4
 8007392:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007396:	f013 0f04 	tst.w	r3, #4
 800739a:	d00b      	beq.n	80073b4 <HAL_UART_IRQHandler+0xec>
 800739c:	f015 0f01 	tst.w	r5, #1
 80073a0:	d008      	beq.n	80073b4 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073a2:	6821      	ldr	r1, [r4, #0]
 80073a4:	2604      	movs	r6, #4
 80073a6:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073a8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80073ac:	f041 0102 	orr.w	r1, r1, #2
 80073b0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073b4:	f013 0f08 	tst.w	r3, #8
 80073b8:	d00b      	beq.n	80073d2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073ba:	f010 0f20 	tst.w	r0, #32
 80073be:	d100      	bne.n	80073c2 <HAL_UART_IRQHandler+0xfa>
 80073c0:	b13a      	cbz	r2, 80073d2 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073c2:	6822      	ldr	r2, [r4, #0]
 80073c4:	2108      	movs	r1, #8
 80073c6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073c8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80073cc:	430a      	orrs	r2, r1
 80073ce:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073d2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80073d6:	d00c      	beq.n	80073f2 <HAL_UART_IRQHandler+0x12a>
 80073d8:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80073dc:	d009      	beq.n	80073f2 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073e4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073e6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80073ea:	f042 0220 	orr.w	r2, r2, #32
 80073ee:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073f2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80073f6:	2a00      	cmp	r2, #0
 80073f8:	d0aa      	beq.n	8007350 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073fa:	f013 0f20 	tst.w	r3, #32
 80073fe:	d009      	beq.n	8007414 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007400:	f010 0f20 	tst.w	r0, #32
 8007404:	d102      	bne.n	800740c <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007406:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800740a:	d003      	beq.n	8007414 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 800740c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800740e:	b10b      	cbz	r3, 8007414 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8007410:	4620      	mov	r0, r4
 8007412:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8007414:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007420:	d102      	bne.n	8007428 <HAL_UART_IRQHandler+0x160>
 8007422:	f012 0f28 	tst.w	r2, #40	; 0x28
 8007426:	d02c      	beq.n	8007482 <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8007428:	4620      	mov	r0, r4
 800742a:	f7ff fe5e 	bl	80070ea <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007436:	d020      	beq.n	800747a <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007438:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	f102 0308 	add.w	r3, r2, #8
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	3208      	adds	r2, #8
 8007448:	e842 3100 	strex	r1, r3, [r2]
 800744c:	2900      	cmp	r1, #0
 800744e:	d1f3      	bne.n	8007438 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8007450:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007454:	b16b      	cbz	r3, 8007472 <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007456:	4a42      	ldr	r2, [pc, #264]	; (8007560 <HAL_UART_IRQHandler+0x298>)
 8007458:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800745a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800745e:	f7fc ff6d 	bl	800433c <HAL_DMA_Abort_IT>
 8007462:	2800      	cmp	r0, #0
 8007464:	f43f af74 	beq.w	8007350 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007468:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800746c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800746e:	4798      	blx	r3
 8007470:	e76e      	b.n	8007350 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8007472:	4620      	mov	r0, r4
 8007474:	f7ff fef0 	bl	8007258 <HAL_UART_ErrorCallback>
 8007478:	e76a      	b.n	8007350 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 800747a:	4620      	mov	r0, r4
 800747c:	f7ff feec 	bl	8007258 <HAL_UART_ErrorCallback>
 8007480:	e766      	b.n	8007350 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8007482:	4620      	mov	r0, r4
 8007484:	f7ff fee8 	bl	8007258 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007488:	2300      	movs	r3, #0
 800748a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 800748e:	e75f      	b.n	8007350 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007490:	f013 0f10 	tst.w	r3, #16
 8007494:	f43f af36 	beq.w	8007304 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007498:	f010 0f10 	tst.w	r0, #16
 800749c:	f43f af32 	beq.w	8007304 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074a0:	2310      	movs	r3, #16
 80074a2:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074ac:	d05a      	beq.n	8007564 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ae:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f43f af49 	beq.w	8007350 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074be:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80074c2:	4299      	cmp	r1, r3
 80074c4:	f67f af44 	bls.w	8007350 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 80074c8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80074cc:	6813      	ldr	r3, [r2, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f013 0f20 	tst.w	r3, #32
 80074d4:	d132      	bne.n	800753c <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	e852 3f00 	ldrex	r3, [r2]
 80074dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	e842 3100 	strex	r1, r3, [r2]
 80074e4:	2900      	cmp	r1, #0
 80074e6:	d1f6      	bne.n	80074d6 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	f102 0308 	add.w	r3, r2, #8
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	3208      	adds	r2, #8
 80074f8:	e842 3100 	strex	r1, r3, [r2]
 80074fc:	2900      	cmp	r1, #0
 80074fe:	d1f3      	bne.n	80074e8 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007500:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	f102 0308 	add.w	r3, r2, #8
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	3208      	adds	r2, #8
 8007510:	e842 3100 	strex	r1, r3, [r2]
 8007514:	2900      	cmp	r1, #0
 8007516:	d1f3      	bne.n	8007500 <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 8007518:	2320      	movs	r3, #32
 800751a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751e:	2300      	movs	r3, #0
 8007520:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007522:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	e852 3f00 	ldrex	r3, [r2]
 8007528:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	e842 3100 	strex	r1, r3, [r2]
 8007530:	2900      	cmp	r1, #0
 8007532:	d1f6      	bne.n	8007522 <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007534:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007538:	f7fc fec6 	bl	80042c8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800753c:	2302      	movs	r3, #2
 800753e:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007540:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007544:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007548:	b29b      	uxth	r3, r3
 800754a:	1ac9      	subs	r1, r1, r3
 800754c:	b289      	uxth	r1, r1
 800754e:	4620      	mov	r0, r4
 8007550:	f7ff feb9 	bl	80072c6 <HAL_UARTEx_RxEventCallback>
      return;
 8007554:	e6fc      	b.n	8007350 <HAL_UART_IRQHandler+0x88>
 8007556:	bf00      	nop
 8007558:	10000001 	.word	0x10000001
 800755c:	04000120 	.word	0x04000120
 8007560:	080072b3 	.word	0x080072b3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007564:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007568:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800756c:	b29b      	uxth	r3, r3
 800756e:	1ac9      	subs	r1, r1, r3
 8007570:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8007572:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	f43f aee9 	beq.w	8007350 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 800757e:	2900      	cmp	r1, #0
 8007580:	f43f aee6 	beq.w	8007350 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007584:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007586:	e852 3f00 	ldrex	r3, [r2]
 800758a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	e842 3000 	strex	r0, r3, [r2]
 8007592:	2800      	cmp	r0, #0
 8007594:	d1f6      	bne.n	8007584 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007596:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	f102 0308 	add.w	r3, r2, #8
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	3208      	adds	r2, #8
 80075aa:	e842 3000 	strex	r0, r3, [r2]
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d1f1      	bne.n	8007596 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 80075b2:	2320      	movs	r3, #32
 80075b4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b8:	2300      	movs	r3, #0
 80075ba:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80075bc:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	e852 3f00 	ldrex	r3, [r2]
 80075c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	e842 3000 	strex	r0, r3, [r2]
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d1f6      	bne.n	80075be <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075d0:	2302      	movs	r3, #2
 80075d2:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075d4:	4620      	mov	r0, r4
 80075d6:	f7ff fe76 	bl	80072c6 <HAL_UARTEx_RxEventCallback>
      return;
 80075da:	e6b9      	b.n	8007350 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80075e0:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 fe60 	bl	80082a8 <HAL_UARTEx_WakeupCallback>
    return;
 80075e8:	e6b2      	b.n	8007350 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 80075ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f43f aeaf 	beq.w	8007350 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 80075f2:	4620      	mov	r0, r4
 80075f4:	4798      	blx	r3
    return;
 80075f6:	e6ab      	b.n	8007350 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 80075f8:	4620      	mov	r0, r4
 80075fa:	f7ff fe15 	bl	8007228 <UART_EndTransmit_IT>
    return;
 80075fe:	e6a7      	b.n	8007350 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fe53 	bl	80082ac <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8007606:	e6a3      	b.n	8007350 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007608:	4620      	mov	r0, r4
 800760a:	f000 fe4e 	bl	80082aa <HAL_UARTEx_RxFifoFullCallback>
    return;
 800760e:	e69f      	b.n	8007350 <HAL_UART_IRQHandler+0x88>

08007610 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007610:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8007612:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007616:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800761a:	2a22      	cmp	r2, #34	; 0x22
 800761c:	d005      	beq.n	800762a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800761e:	6802      	ldr	r2, [r0, #0]
 8007620:	6993      	ldr	r3, [r2, #24]
 8007622:	f043 0308 	orr.w	r3, r3, #8
 8007626:	6193      	str	r3, [r2, #24]
  }
}
 8007628:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800762a:	6802      	ldr	r2, [r0, #0]
 800762c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800762e:	b2db      	uxtb	r3, r3
 8007630:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007632:	400b      	ands	r3, r1
 8007634:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8007636:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007638:	3301      	adds	r3, #1
 800763a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800763c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29b      	uxth	r3, r3
 8007646:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800764a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e9      	bne.n	8007628 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007654:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	e852 3f00 	ldrex	r3, [r2]
 800765a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	e842 3100 	strex	r1, r3, [r2]
 8007662:	2900      	cmp	r1, #0
 8007664:	d1f6      	bne.n	8007654 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007666:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	f102 0308 	add.w	r3, r2, #8
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	3208      	adds	r2, #8
 8007676:	e842 3100 	strex	r1, r3, [r2]
 800767a:	2900      	cmp	r1, #0
 800767c:	d1f3      	bne.n	8007666 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800767e:	2320      	movs	r3, #32
 8007680:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007688:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800768a:	6803      	ldr	r3, [r0, #0]
 800768c:	4a16      	ldr	r2, [pc, #88]	; (80076e8 <UART_RxISR_8BIT+0xd8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d00c      	beq.n	80076ac <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007698:	d008      	beq.n	80076ac <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800769a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	e852 3f00 	ldrex	r3, [r2]
 80076a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	e842 3100 	strex	r1, r3, [r2]
 80076a8:	2900      	cmp	r1, #0
 80076aa:	d1f6      	bne.n	800769a <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d116      	bne.n	80076e0 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b2:	2300      	movs	r3, #0
 80076b4:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	e852 3f00 	ldrex	r3, [r2]
 80076bc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	e842 3100 	strex	r1, r3, [r2]
 80076c4:	2900      	cmp	r1, #0
 80076c6:	d1f6      	bne.n	80076b6 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076c8:	6803      	ldr	r3, [r0, #0]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	f012 0f10 	tst.w	r2, #16
 80076d0:	d001      	beq.n	80076d6 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d2:	2210      	movs	r2, #16
 80076d4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076d6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80076da:	f7ff fdf4 	bl	80072c6 <HAL_UARTEx_RxEventCallback>
 80076de:	e7a3      	b.n	8007628 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80076e0:	f7fa fdac 	bl	800223c <HAL_UART_RxCpltCallback>
 80076e4:	e7a0      	b.n	8007628 <UART_RxISR_8BIT+0x18>
 80076e6:	bf00      	nop
 80076e8:	40008000 	.word	0x40008000

080076ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076ec:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076ee:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076f2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80076f6:	2b22      	cmp	r3, #34	; 0x22
 80076f8:	d005      	beq.n	8007706 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076fa:	6802      	ldr	r2, [r0, #0]
 80076fc:	6993      	ldr	r3, [r2, #24]
 80076fe:	f043 0308 	orr.w	r3, r3, #8
 8007702:	6193      	str	r3, [r2, #24]
  }
}
 8007704:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007706:	6803      	ldr	r3, [r0, #0]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800770a:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800770c:	4013      	ands	r3, r2
 800770e:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8007710:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007712:	3302      	adds	r3, #2
 8007714:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007716:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29b      	uxth	r3, r3
 8007720:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007724:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1ea      	bne.n	8007704 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800772e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	e852 3f00 	ldrex	r3, [r2]
 8007734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	e842 3100 	strex	r1, r3, [r2]
 800773c:	2900      	cmp	r1, #0
 800773e:	d1f6      	bne.n	800772e <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007740:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	f102 0308 	add.w	r3, r2, #8
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	3208      	adds	r2, #8
 8007750:	e842 3100 	strex	r1, r3, [r2]
 8007754:	2900      	cmp	r1, #0
 8007756:	d1f3      	bne.n	8007740 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8007758:	2320      	movs	r3, #32
 800775a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007762:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007764:	6803      	ldr	r3, [r0, #0]
 8007766:	4a16      	ldr	r2, [pc, #88]	; (80077c0 <UART_RxISR_16BIT+0xd4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00c      	beq.n	8007786 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007772:	d008      	beq.n	8007786 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007774:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	e852 3f00 	ldrex	r3, [r2]
 800777a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	e842 3100 	strex	r1, r3, [r2]
 8007782:	2900      	cmp	r1, #0
 8007784:	d1f6      	bne.n	8007774 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007786:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007788:	2b01      	cmp	r3, #1
 800778a:	d116      	bne.n	80077ba <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778c:	2300      	movs	r3, #0
 800778e:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007790:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	e852 3f00 	ldrex	r3, [r2]
 8007796:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	e842 3100 	strex	r1, r3, [r2]
 800779e:	2900      	cmp	r1, #0
 80077a0:	d1f6      	bne.n	8007790 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077a2:	6803      	ldr	r3, [r0, #0]
 80077a4:	69da      	ldr	r2, [r3, #28]
 80077a6:	f012 0f10 	tst.w	r2, #16
 80077aa:	d001      	beq.n	80077b0 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ac:	2210      	movs	r2, #16
 80077ae:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077b0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80077b4:	f7ff fd87 	bl	80072c6 <HAL_UARTEx_RxEventCallback>
 80077b8:	e7a4      	b.n	8007704 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80077ba:	f7fa fd3f 	bl	800223c <HAL_UART_RxCpltCallback>
 80077be:	e7a1      	b.n	8007704 <UART_RxISR_16BIT+0x18>
 80077c0:	40008000 	.word	0x40008000

080077c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80077c8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077cc:	6803      	ldr	r3, [r0, #0]
 80077ce:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077d0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077d4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077d8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80077dc:	2a22      	cmp	r2, #34	; 0x22
 80077de:	d005      	beq.n	80077ec <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077e0:	699a      	ldr	r2, [r3, #24]
 80077e2:	f042 0208 	orr.w	r2, r2, #8
 80077e6:	619a      	str	r2, [r3, #24]
  }
}
 80077e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ec:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80077ee:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077f2:	e008      	b.n	8007806 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077f4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d14c      	bne.n	8007896 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80077fc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007800:	b29b      	uxth	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d04e      	beq.n	80078a4 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007806:	2f00      	cmp	r7, #0
 8007808:	f000 809a 	beq.w	8007940 <UART_RxISR_8BIT_FIFOEN+0x17c>
 800780c:	f015 0f20 	tst.w	r5, #32
 8007810:	f000 8096 	beq.w	8007940 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007818:	b2f3      	uxtb	r3, r6
 800781a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800781c:	400b      	ands	r3, r1
 800781e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007820:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007822:	3301      	adds	r3, #1
 8007824:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007826:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29b      	uxth	r3, r3
 8007830:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007838:	f015 0f07 	tst.w	r5, #7
 800783c:	d0de      	beq.n	80077fc <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800783e:	f015 0f01 	tst.w	r5, #1
 8007842:	d009      	beq.n	8007858 <UART_RxISR_8BIT_FIFOEN+0x94>
 8007844:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007848:	d006      	beq.n	8007858 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800784a:	2201      	movs	r2, #1
 800784c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800784e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007852:	4313      	orrs	r3, r2
 8007854:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007858:	f015 0f02 	tst.w	r5, #2
 800785c:	d00b      	beq.n	8007876 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800785e:	f018 0f01 	tst.w	r8, #1
 8007862:	d008      	beq.n	8007876 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	2202      	movs	r2, #2
 8007868:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800786a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800786e:	f043 0304 	orr.w	r3, r3, #4
 8007872:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007876:	f015 0f04 	tst.w	r5, #4
 800787a:	d0bb      	beq.n	80077f4 <UART_RxISR_8BIT_FIFOEN+0x30>
 800787c:	f018 0f01 	tst.w	r8, #1
 8007880:	d0b8      	beq.n	80077f4 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	2204      	movs	r2, #4
 8007886:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007888:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800788c:	f043 0302 	orr.w	r3, r3, #2
 8007890:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007894:	e7ae      	b.n	80077f4 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007896:	4620      	mov	r0, r4
 8007898:	f7ff fcde 	bl	8007258 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789c:	2300      	movs	r3, #0
 800789e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80078a2:	e7ab      	b.n	80077fc <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	e852 3f00 	ldrex	r3, [r2]
 80078aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	e842 3100 	strex	r1, r3, [r2]
 80078b2:	2900      	cmp	r1, #0
 80078b4:	d1f6      	bne.n	80078a4 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	f102 0308 	add.w	r3, r2, #8
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078c4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	3208      	adds	r2, #8
 80078ca:	e842 3100 	strex	r1, r3, [r2]
 80078ce:	2900      	cmp	r1, #0
 80078d0:	d1f1      	bne.n	80078b6 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80078d2:	2320      	movs	r3, #32
 80078d4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078dc:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	4a29      	ldr	r2, [pc, #164]	; (8007988 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d003      	beq.n	80078ee <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80078ec:	d106      	bne.n	80078fc <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d00d      	beq.n	8007910 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 80078f4:	4620      	mov	r0, r4
 80078f6:	f7fa fca1 	bl	800223c <HAL_UART_RxCpltCallback>
 80078fa:	e784      	b.n	8007806 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	e852 3f00 	ldrex	r3, [r2]
 8007902:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	e842 3100 	strex	r1, r3, [r2]
 800790a:	2900      	cmp	r1, #0
 800790c:	d1f6      	bne.n	80078fc <UART_RxISR_8BIT_FIFOEN+0x138>
 800790e:	e7ee      	b.n	80078ee <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007910:	2300      	movs	r3, #0
 8007912:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007914:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	e852 3f00 	ldrex	r3, [r2]
 800791a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	e842 3100 	strex	r1, r3, [r2]
 8007922:	2900      	cmp	r1, #0
 8007924:	d1f6      	bne.n	8007914 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	69da      	ldr	r2, [r3, #28]
 800792a:	f012 0f10 	tst.w	r2, #16
 800792e:	d001      	beq.n	8007934 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007930:	2210      	movs	r2, #16
 8007932:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007934:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007938:	4620      	mov	r0, r4
 800793a:	f7ff fcc4 	bl	80072c6 <HAL_UARTEx_RxEventCallback>
 800793e:	e762      	b.n	8007806 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007940:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007944:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007946:	2b00      	cmp	r3, #0
 8007948:	f43f af4e 	beq.w	80077e8 <UART_RxISR_8BIT_FIFOEN+0x24>
 800794c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007950:	429a      	cmp	r2, r3
 8007952:	f67f af49 	bls.w	80077e8 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007956:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	f102 0308 	add.w	r3, r2, #8
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	3208      	adds	r2, #8
 8007966:	e842 3100 	strex	r1, r3, [r2]
 800796a:	2900      	cmp	r1, #0
 800796c:	d1f3      	bne.n	8007956 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 800796e:	4b07      	ldr	r3, [pc, #28]	; (800798c <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8007970:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007972:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	e852 3f00 	ldrex	r3, [r2]
 8007978:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	e842 3100 	strex	r1, r3, [r2]
 8007980:	2900      	cmp	r1, #0
 8007982:	d1f6      	bne.n	8007972 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8007984:	e730      	b.n	80077e8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007986:	bf00      	nop
 8007988:	40008000 	.word	0x40008000
 800798c:	08007611 	.word	0x08007611

08007990 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007994:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007998:	6803      	ldr	r3, [r0, #0]
 800799a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800799c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079a0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079a4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80079a8:	2a22      	cmp	r2, #34	; 0x22
 80079aa:	d005      	beq.n	80079b8 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ac:	699a      	ldr	r2, [r3, #24]
 80079ae:	f042 0208 	orr.w	r2, r2, #8
 80079b2:	619a      	str	r2, [r3, #24]
  }
}
 80079b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80079ba:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079be:	e008      	b.n	80079d2 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d14b      	bne.n	8007a60 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80079c8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d04d      	beq.n	8007a6e <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079d2:	2f00      	cmp	r7, #0
 80079d4:	f000 8099 	beq.w	8007b0a <UART_RxISR_16BIT_FIFOEN+0x17a>
 80079d8:	f015 0f20 	tst.w	r5, #32
 80079dc:	f000 8095 	beq.w	8007b0a <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079e4:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80079e6:	4033      	ands	r3, r6
 80079e8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80079ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079ec:	3302      	adds	r3, #2
 80079ee:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80079f0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a02:	f015 0f07 	tst.w	r5, #7
 8007a06:	d0df      	beq.n	80079c8 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a08:	f015 0f01 	tst.w	r5, #1
 8007a0c:	d009      	beq.n	8007a22 <UART_RxISR_16BIT_FIFOEN+0x92>
 8007a0e:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007a12:	d006      	beq.n	8007a22 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a14:	2201      	movs	r2, #1
 8007a16:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a18:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a22:	f015 0f02 	tst.w	r5, #2
 8007a26:	d00b      	beq.n	8007a40 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8007a28:	f018 0f01 	tst.w	r8, #1
 8007a2c:	d008      	beq.n	8007a40 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	2202      	movs	r2, #2
 8007a32:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a34:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007a38:	f043 0304 	orr.w	r3, r3, #4
 8007a3c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a40:	f015 0f04 	tst.w	r5, #4
 8007a44:	d0bc      	beq.n	80079c0 <UART_RxISR_16BIT_FIFOEN+0x30>
 8007a46:	f018 0f01 	tst.w	r8, #1
 8007a4a:	d0b9      	beq.n	80079c0 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	2204      	movs	r2, #4
 8007a50:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a52:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007a56:	f043 0302 	orr.w	r3, r3, #2
 8007a5a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007a5e:	e7af      	b.n	80079c0 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007a60:	4620      	mov	r0, r4
 8007a62:	f7ff fbf9 	bl	8007258 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007a6c:	e7ac      	b.n	80079c8 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	e852 3f00 	ldrex	r3, [r2]
 8007a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	e842 3100 	strex	r1, r3, [r2]
 8007a7c:	2900      	cmp	r1, #0
 8007a7e:	d1f6      	bne.n	8007a6e <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a80:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	f102 0308 	add.w	r3, r2, #8
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a8e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	3208      	adds	r2, #8
 8007a94:	e842 3100 	strex	r1, r3, [r2]
 8007a98:	2900      	cmp	r1, #0
 8007a9a:	d1f1      	bne.n	8007a80 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	2320      	movs	r3, #32
 8007a9e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007aa6:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	4a29      	ldr	r2, [pc, #164]	; (8007b50 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007ab6:	d106      	bne.n	8007ac6 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d00d      	beq.n	8007ada <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f7fa fbbc 	bl	800223c <HAL_UART_RxCpltCallback>
 8007ac4:	e785      	b.n	80079d2 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ac6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	e852 3f00 	ldrex	r3, [r2]
 8007acc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	e842 3100 	strex	r1, r3, [r2]
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	d1f6      	bne.n	8007ac6 <UART_RxISR_16BIT_FIFOEN+0x136>
 8007ad8:	e7ee      	b.n	8007ab8 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ada:	2300      	movs	r3, #0
 8007adc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ade:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	e852 3f00 	ldrex	r3, [r2]
 8007ae4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	e842 3100 	strex	r1, r3, [r2]
 8007aec:	2900      	cmp	r1, #0
 8007aee:	d1f6      	bne.n	8007ade <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	69da      	ldr	r2, [r3, #28]
 8007af4:	f012 0f10 	tst.w	r2, #16
 8007af8:	d001      	beq.n	8007afe <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007afa:	2210      	movs	r2, #16
 8007afc:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007afe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007b02:	4620      	mov	r0, r4
 8007b04:	f7ff fbdf 	bl	80072c6 <HAL_UARTEx_RxEventCallback>
 8007b08:	e763      	b.n	80079d2 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007b0a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007b0e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f43f af4f 	beq.w	80079b4 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007b16:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	f67f af4a 	bls.w	80079b4 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b20:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	f102 0308 	add.w	r3, r2, #8
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	3208      	adds	r2, #8
 8007b30:	e842 3100 	strex	r1, r3, [r2]
 8007b34:	2900      	cmp	r1, #0
 8007b36:	d1f3      	bne.n	8007b20 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8007b38:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8007b3a:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b3c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	e852 3f00 	ldrex	r3, [r2]
 8007b42:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b46:	e842 3100 	strex	r1, r3, [r2]
 8007b4a:	2900      	cmp	r1, #0
 8007b4c:	d1f6      	bne.n	8007b3c <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8007b4e:	e731      	b.n	80079b4 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007b50:	40008000 	.word	0x40008000
 8007b54:	080076ed 	.word	0x080076ed

08007b58 <UART_SetConfig>:
{
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b5c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b5e:	6883      	ldr	r3, [r0, #8]
 8007b60:	6902      	ldr	r2, [r0, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	6942      	ldr	r2, [r0, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	69c2      	ldr	r2, [r0, #28]
 8007b6a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b6c:	6808      	ldr	r0, [r1, #0]
 8007b6e:	4a9d      	ldr	r2, [pc, #628]	; (8007de4 <UART_SetConfig+0x28c>)
 8007b70:	4002      	ands	r2, r0
 8007b72:	431a      	orrs	r2, r3
 8007b74:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	6853      	ldr	r3, [r2, #4]
 8007b7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b7e:	68e1      	ldr	r1, [r4, #12]
 8007b80:	430b      	orrs	r3, r1
 8007b82:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b84:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b86:	6822      	ldr	r2, [r4, #0]
 8007b88:	4b97      	ldr	r3, [pc, #604]	; (8007de8 <UART_SetConfig+0x290>)
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d001      	beq.n	8007b92 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007b8e:	6a23      	ldr	r3, [r4, #32]
 8007b90:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b92:	6893      	ldr	r3, [r2, #8]
 8007b94:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b98:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ba0:	6822      	ldr	r2, [r4, #0]
 8007ba2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ba4:	f023 030f 	bic.w	r3, r3, #15
 8007ba8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007baa:	430b      	orrs	r3, r1
 8007bac:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	4a8e      	ldr	r2, [pc, #568]	; (8007dec <UART_SetConfig+0x294>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d01c      	beq.n	8007bf0 <UART_SetConfig+0x98>
 8007bb6:	4a8e      	ldr	r2, [pc, #568]	; (8007df0 <UART_SetConfig+0x298>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d031      	beq.n	8007c20 <UART_SetConfig+0xc8>
 8007bbc:	4a8a      	ldr	r2, [pc, #552]	; (8007de8 <UART_SetConfig+0x290>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d04b      	beq.n	8007c5a <UART_SetConfig+0x102>
 8007bc2:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bc4:	4988      	ldr	r1, [pc, #544]	; (8007de8 <UART_SetConfig+0x290>)
 8007bc6:	428b      	cmp	r3, r1
 8007bc8:	d068      	beq.n	8007c9c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bca:	69e0      	ldr	r0, [r4, #28]
 8007bcc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007bd0:	f000 80a5 	beq.w	8007d1e <UART_SetConfig+0x1c6>
    switch (clocksource)
 8007bd4:	2a08      	cmp	r2, #8
 8007bd6:	f200 811f 	bhi.w	8007e18 <UART_SetConfig+0x2c0>
 8007bda:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007bde:	00d3      	.short	0x00d3
 8007be0:	00d100f5 	.word	0x00d100f5
 8007be4:	00f8011d 	.word	0x00f8011d
 8007be8:	011d011d 	.word	0x011d011d
 8007bec:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bf4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007bf8:	f002 0203 	and.w	r2, r2, #3
 8007bfc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c00:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8007c04:	2a03      	cmp	r2, #3
 8007c06:	d809      	bhi.n	8007c1c <UART_SetConfig+0xc4>
 8007c08:	e8df f002 	tbb	[pc, r2]
 8007c0c:	063c0402 	.word	0x063c0402
 8007c10:	2201      	movs	r2, #1
 8007c12:	e7d7      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c14:	2204      	movs	r2, #4
 8007c16:	e7d5      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c18:	2208      	movs	r2, #8
 8007c1a:	e7d3      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c1c:	2210      	movs	r2, #16
 8007c1e:	e7d1      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c24:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007c28:	f002 020c 	and.w	r2, r2, #12
 8007c2c:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8007c30:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8007c34:	2a0c      	cmp	r2, #12
 8007c36:	d80e      	bhi.n	8007c56 <UART_SetConfig+0xfe>
 8007c38:	e8df f002 	tbb	[pc, r2]
 8007c3c:	0d0d0d07 	.word	0x0d0d0d07
 8007c40:	0d0d0d09 	.word	0x0d0d0d09
 8007c44:	0d0d0d26 	.word	0x0d0d0d26
 8007c48:	0b          	.byte	0x0b
 8007c49:	00          	.byte	0x00
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	e7ba      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c4e:	2204      	movs	r2, #4
 8007c50:	e7b8      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c52:	2208      	movs	r2, #8
 8007c54:	e7b6      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c56:	2210      	movs	r2, #16
 8007c58:	e7b4      	b.n	8007bc4 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c5e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007c62:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007c66:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007c6a:	d00f      	beq.n	8007c8c <UART_SetConfig+0x134>
 8007c6c:	d805      	bhi.n	8007c7a <UART_SetConfig+0x122>
 8007c6e:	b17a      	cbz	r2, 8007c90 <UART_SetConfig+0x138>
 8007c70:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007c74:	d10e      	bne.n	8007c94 <UART_SetConfig+0x13c>
 8007c76:	2204      	movs	r2, #4
 8007c78:	e7a4      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c7a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007c7e:	d10b      	bne.n	8007c98 <UART_SetConfig+0x140>
 8007c80:	2208      	movs	r2, #8
 8007c82:	e79f      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c84:	2202      	movs	r2, #2
 8007c86:	e79d      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c88:	2202      	movs	r2, #2
 8007c8a:	e79b      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	e799      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c90:	2200      	movs	r2, #0
 8007c92:	e797      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c94:	2210      	movs	r2, #16
 8007c96:	e795      	b.n	8007bc4 <UART_SetConfig+0x6c>
 8007c98:	2210      	movs	r2, #16
 8007c9a:	e793      	b.n	8007bc4 <UART_SetConfig+0x6c>
    switch (clocksource)
 8007c9c:	2a08      	cmp	r2, #8
 8007c9e:	f200 809c 	bhi.w	8007dda <UART_SetConfig+0x282>
 8007ca2:	e8df f002 	tbb	[pc, r2]
 8007ca6:	9a08      	.short	0x9a08
 8007ca8:	9a379a3a 	.word	0x9a379a3a
 8007cac:	9a9a      	.short	0x9a9a
 8007cae:	05          	.byte	0x05
 8007caf:	00          	.byte	0x00
 8007cb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007cb4:	e004      	b.n	8007cc0 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cb6:	f7fe faab 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	f000 808f 	beq.w	8007dde <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007cc2:	4b4c      	ldr	r3, [pc, #304]	; (8007df4 <UART_SetConfig+0x29c>)
 8007cc4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007cc8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ccc:	6865      	ldr	r5, [r4, #4]
 8007cce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007cd2:	4299      	cmp	r1, r3
 8007cd4:	f200 8094 	bhi.w	8007e00 <UART_SetConfig+0x2a8>
 8007cd8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007cdc:	f200 8092 	bhi.w	8007e04 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ce0:	2600      	movs	r6, #0
 8007ce2:	4633      	mov	r3, r6
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	f7f8 ffd5 	bl	8000c94 <__aeabi_uldivmod>
 8007cea:	0209      	lsls	r1, r1, #8
 8007cec:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007cf0:	0200      	lsls	r0, r0, #8
 8007cf2:	086b      	lsrs	r3, r5, #1
 8007cf4:	18c0      	adds	r0, r0, r3
 8007cf6:	462a      	mov	r2, r5
 8007cf8:	4633      	mov	r3, r6
 8007cfa:	f141 0100 	adc.w	r1, r1, #0
 8007cfe:	f7f8 ffc9 	bl	8000c94 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d02:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007d06:	4b3c      	ldr	r3, [pc, #240]	; (8007df8 <UART_SetConfig+0x2a0>)
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d87d      	bhi.n	8007e08 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	60d8      	str	r0, [r3, #12]
 8007d10:	4630      	mov	r0, r6
 8007d12:	e050      	b.n	8007db6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007d14:	f7fd fd7e 	bl	8005814 <HAL_RCC_GetSysClockFreq>
        break;
 8007d18:	e7cf      	b.n	8007cba <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8007d1a:	4838      	ldr	r0, [pc, #224]	; (8007dfc <UART_SetConfig+0x2a4>)
 8007d1c:	e7d0      	b.n	8007cc0 <UART_SetConfig+0x168>
    switch (clocksource)
 8007d1e:	2a08      	cmp	r2, #8
 8007d20:	d874      	bhi.n	8007e0c <UART_SetConfig+0x2b4>
 8007d22:	e8df f002 	tbb	[pc, r2]
 8007d26:	2707      	.short	0x2707
 8007d28:	732a7305 	.word	0x732a7305
 8007d2c:	7373      	.short	0x7373
 8007d2e:	0b          	.byte	0x0b
 8007d2f:	00          	.byte	0x00
 8007d30:	4832      	ldr	r0, [pc, #200]	; (8007dfc <UART_SetConfig+0x2a4>)
 8007d32:	e003      	b.n	8007d3c <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d34:	f7fe fa6c 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d069      	beq.n	8007e10 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d3e:	4b2d      	ldr	r3, [pc, #180]	; (8007df4 <UART_SetConfig+0x29c>)
 8007d40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007d44:	fbb0 f0f3 	udiv	r0, r0, r3
 8007d48:	6862      	ldr	r2, [r4, #4]
 8007d4a:	0853      	lsrs	r3, r2, #1
 8007d4c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007d50:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d54:	f1a3 0110 	sub.w	r1, r3, #16
 8007d58:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007d5c:	4291      	cmp	r1, r2
 8007d5e:	d859      	bhi.n	8007e14 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d66:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007d6a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8007d6c:	6822      	ldr	r2, [r4, #0]
 8007d6e:	60d3      	str	r3, [r2, #12]
 8007d70:	2000      	movs	r0, #0
 8007d72:	e020      	b.n	8007db6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d74:	f7fe fa5c 	bl	8006230 <HAL_RCC_GetPCLK2Freq>
        break;
 8007d78:	e7de      	b.n	8007d38 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8007d7a:	f7fd fd4b 	bl	8005814 <HAL_RCC_GetSysClockFreq>
        break;
 8007d7e:	e7db      	b.n	8007d38 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8007d80:	481e      	ldr	r0, [pc, #120]	; (8007dfc <UART_SetConfig+0x2a4>)
 8007d82:	e003      	b.n	8007d8c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d84:	f7fe fa44 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d047      	beq.n	8007e1c <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d8e:	4b19      	ldr	r3, [pc, #100]	; (8007df4 <UART_SetConfig+0x29c>)
 8007d90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007d94:	fbb0 f0f3 	udiv	r0, r0, r3
 8007d98:	6863      	ldr	r3, [r4, #4]
 8007d9a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007d9e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007da2:	f1a0 0210 	sub.w	r2, r0, #16
 8007da6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d838      	bhi.n	8007e20 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	b280      	uxth	r0, r0
 8007db2:	60d8      	str	r0, [r3, #12]
 8007db4:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007dbc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8007dc4:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dc8:	f7fe fa32 	bl	8006230 <HAL_RCC_GetPCLK2Freq>
        break;
 8007dcc:	e7dc      	b.n	8007d88 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8007dce:	f7fd fd21 	bl	8005814 <HAL_RCC_GetSysClockFreq>
        break;
 8007dd2:	e7d9      	b.n	8007d88 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8007dd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007dd8:	e7d8      	b.n	8007d8c <UART_SetConfig+0x234>
    switch (clocksource)
 8007dda:	2001      	movs	r0, #1
 8007ddc:	e7eb      	b.n	8007db6 <UART_SetConfig+0x25e>
 8007dde:	2000      	movs	r0, #0
 8007de0:	e7e9      	b.n	8007db6 <UART_SetConfig+0x25e>
 8007de2:	bf00      	nop
 8007de4:	cfff69f3 	.word	0xcfff69f3
 8007de8:	40008000 	.word	0x40008000
 8007dec:	40013800 	.word	0x40013800
 8007df0:	40004400 	.word	0x40004400
 8007df4:	08013e00 	.word	0x08013e00
 8007df8:	000ffcff 	.word	0x000ffcff
 8007dfc:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8007e00:	2001      	movs	r0, #1
 8007e02:	e7d8      	b.n	8007db6 <UART_SetConfig+0x25e>
 8007e04:	2001      	movs	r0, #1
 8007e06:	e7d6      	b.n	8007db6 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8007e08:	2001      	movs	r0, #1
 8007e0a:	e7d4      	b.n	8007db6 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	e7d2      	b.n	8007db6 <UART_SetConfig+0x25e>
 8007e10:	2000      	movs	r0, #0
 8007e12:	e7d0      	b.n	8007db6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007e14:	2001      	movs	r0, #1
 8007e16:	e7ce      	b.n	8007db6 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007e18:	2001      	movs	r0, #1
 8007e1a:	e7cc      	b.n	8007db6 <UART_SetConfig+0x25e>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e7ca      	b.n	8007db6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007e20:	2001      	movs	r0, #1
 8007e22:	e7c8      	b.n	8007db6 <UART_SetConfig+0x25e>

08007e24 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e24:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e26:	f013 0f01 	tst.w	r3, #1
 8007e2a:	d006      	beq.n	8007e3a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e2c:	6802      	ldr	r2, [r0, #0]
 8007e2e:	6853      	ldr	r3, [r2, #4]
 8007e30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e34:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007e36:	430b      	orrs	r3, r1
 8007e38:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e3c:	f013 0f02 	tst.w	r3, #2
 8007e40:	d006      	beq.n	8007e50 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e42:	6802      	ldr	r2, [r0, #0]
 8007e44:	6853      	ldr	r3, [r2, #4]
 8007e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e4a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e50:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e52:	f013 0f04 	tst.w	r3, #4
 8007e56:	d006      	beq.n	8007e66 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e58:	6802      	ldr	r2, [r0, #0]
 8007e5a:	6853      	ldr	r3, [r2, #4]
 8007e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e60:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007e62:	430b      	orrs	r3, r1
 8007e64:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e68:	f013 0f08 	tst.w	r3, #8
 8007e6c:	d006      	beq.n	8007e7c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e6e:	6802      	ldr	r2, [r0, #0]
 8007e70:	6853      	ldr	r3, [r2, #4]
 8007e72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e76:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007e78:	430b      	orrs	r3, r1
 8007e7a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e7e:	f013 0f10 	tst.w	r3, #16
 8007e82:	d006      	beq.n	8007e92 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e84:	6802      	ldr	r2, [r0, #0]
 8007e86:	6893      	ldr	r3, [r2, #8]
 8007e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e8c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007e8e:	430b      	orrs	r3, r1
 8007e90:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e94:	f013 0f20 	tst.w	r3, #32
 8007e98:	d006      	beq.n	8007ea8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e9a:	6802      	ldr	r2, [r0, #0]
 8007e9c:	6893      	ldr	r3, [r2, #8]
 8007e9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ea2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ea8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007eaa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007eae:	d00a      	beq.n	8007ec6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eb0:	6802      	ldr	r2, [r0, #0]
 8007eb2:	6853      	ldr	r3, [r2, #4]
 8007eb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007eb8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007eba:	430b      	orrs	r3, r1
 8007ebc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ebe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ec4:	d00b      	beq.n	8007ede <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ec6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ec8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ecc:	d006      	beq.n	8007edc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ece:	6802      	ldr	r2, [r0, #0]
 8007ed0:	6853      	ldr	r3, [r2, #4]
 8007ed2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007ed6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6053      	str	r3, [r2, #4]
}
 8007edc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ede:	6802      	ldr	r2, [r0, #0]
 8007ee0:	6853      	ldr	r3, [r2, #4]
 8007ee2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007ee6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6053      	str	r3, [r2, #4]
 8007eec:	e7eb      	b.n	8007ec6 <UART_AdvFeatureConfig+0xa2>

08007eee <UART_WaitOnFlagUntilTimeout>:
{
 8007eee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	460f      	mov	r7, r1
 8007ef6:	4616      	mov	r6, r2
 8007ef8:	4699      	mov	r9, r3
 8007efa:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007efe:	682b      	ldr	r3, [r5, #0]
 8007f00:	69dc      	ldr	r4, [r3, #28]
 8007f02:	ea37 0404 	bics.w	r4, r7, r4
 8007f06:	bf0c      	ite	eq
 8007f08:	2401      	moveq	r4, #1
 8007f0a:	2400      	movne	r4, #0
 8007f0c:	42b4      	cmp	r4, r6
 8007f0e:	d157      	bne.n	8007fc0 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8007f10:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007f14:	d0f3      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f16:	f7f9 fe71 	bl	8001bfc <HAL_GetTick>
 8007f1a:	eba0 0009 	sub.w	r0, r0, r9
 8007f1e:	4540      	cmp	r0, r8
 8007f20:	d82f      	bhi.n	8007f82 <UART_WaitOnFlagUntilTimeout+0x94>
 8007f22:	f1b8 0f00 	cmp.w	r8, #0
 8007f26:	d02c      	beq.n	8007f82 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	f012 0f04 	tst.w	r2, #4
 8007f30:	d0e5      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f32:	69da      	ldr	r2, [r3, #28]
 8007f34:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007f38:	d0e1      	beq.n	8007efe <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f3e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f40:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	e852 3f00 	ldrex	r3, [r2]
 8007f46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	e842 3100 	strex	r1, r3, [r2]
 8007f4e:	2900      	cmp	r1, #0
 8007f50:	d1f6      	bne.n	8007f40 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f52:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	f102 0308 	add.w	r3, r2, #8
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	3208      	adds	r2, #8
 8007f62:	e842 3100 	strex	r1, r3, [r2]
 8007f66:	2900      	cmp	r1, #0
 8007f68:	d1f3      	bne.n	8007f52 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8007f6a:	2320      	movs	r3, #32
 8007f6c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007f70:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f74:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 8007f7e:	2003      	movs	r0, #3
 8007f80:	e01f      	b.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f82:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	e852 3f00 	ldrex	r3, [r2]
 8007f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	e842 3100 	strex	r1, r3, [r2]
 8007f90:	2900      	cmp	r1, #0
 8007f92:	d1f6      	bne.n	8007f82 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f94:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	f102 0308 	add.w	r3, r2, #8
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa2:	3208      	adds	r2, #8
 8007fa4:	e842 3100 	strex	r1, r3, [r2]
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	d1f3      	bne.n	8007f94 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8007fac:	2320      	movs	r3, #32
 8007fae:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007fb2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 8007fbc:	2003      	movs	r0, #3
 8007fbe:	e000      	b.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8007fc0:	2000      	movs	r0, #0
}
 8007fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007fc6 <UART_CheckIdleState>:
{
 8007fc6:	b530      	push	{r4, r5, lr}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8007fd2:	f7f9 fe13 	bl	8001bfc <HAL_GetTick>
 8007fd6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fd8:	6822      	ldr	r2, [r4, #0]
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	f012 0f08 	tst.w	r2, #8
 8007fe0:	d110      	bne.n	8008004 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f013 0f04 	tst.w	r3, #4
 8007fea:	d119      	bne.n	8008020 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8007fec:	2320      	movs	r3, #32
 8007fee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ffa:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8007ffc:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008000:	b003      	add	sp, #12
 8008002:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	4603      	mov	r3, r0
 800800c:	2200      	movs	r2, #0
 800800e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008012:	4620      	mov	r0, r4
 8008014:	f7ff ff6b 	bl	8007eee <UART_WaitOnFlagUntilTimeout>
 8008018:	2800      	cmp	r0, #0
 800801a:	d0e2      	beq.n	8007fe2 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800801c:	2003      	movs	r0, #3
 800801e:	e7ef      	b.n	8008000 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	462b      	mov	r3, r5
 8008028:	2200      	movs	r2, #0
 800802a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800802e:	4620      	mov	r0, r4
 8008030:	f7ff ff5d 	bl	8007eee <UART_WaitOnFlagUntilTimeout>
 8008034:	2800      	cmp	r0, #0
 8008036:	d0d9      	beq.n	8007fec <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8008038:	2003      	movs	r0, #3
 800803a:	e7e1      	b.n	8008000 <UART_CheckIdleState+0x3a>

0800803c <HAL_UART_Init>:
  if (huart == NULL)
 800803c:	b378      	cbz	r0, 800809e <HAL_UART_Init+0x62>
{
 800803e:	b510      	push	{r4, lr}
 8008040:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008042:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008046:	b30b      	cbz	r3, 800808c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008048:	2324      	movs	r3, #36	; 0x24
 800804a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800804e:	6822      	ldr	r2, [r4, #0]
 8008050:	6813      	ldr	r3, [r2, #0]
 8008052:	f023 0301 	bic.w	r3, r3, #1
 8008056:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008058:	4620      	mov	r0, r4
 800805a:	f7ff fd7d 	bl	8007b58 <UART_SetConfig>
 800805e:	2801      	cmp	r0, #1
 8008060:	d013      	beq.n	800808a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008062:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008064:	b9bb      	cbnz	r3, 8008096 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008066:	6822      	ldr	r2, [r4, #0]
 8008068:	6853      	ldr	r3, [r2, #4]
 800806a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800806e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008070:	6822      	ldr	r2, [r4, #0]
 8008072:	6893      	ldr	r3, [r2, #8]
 8008074:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008078:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800807a:	6822      	ldr	r2, [r4, #0]
 800807c:	6813      	ldr	r3, [r2, #0]
 800807e:	f043 0301 	orr.w	r3, r3, #1
 8008082:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8008084:	4620      	mov	r0, r4
 8008086:	f7ff ff9e 	bl	8007fc6 <UART_CheckIdleState>
}
 800808a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800808c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8008090:	f7f9 ffc0 	bl	8002014 <HAL_UART_MspInit>
 8008094:	e7d8      	b.n	8008048 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8008096:	4620      	mov	r0, r4
 8008098:	f7ff fec4 	bl	8007e24 <UART_AdvFeatureConfig>
 800809c:	e7e3      	b.n	8008066 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800809e:	2001      	movs	r0, #1
}
 80080a0:	4770      	bx	lr
	...

080080a4 <UART_Start_Receive_IT>:
{
 80080a4:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 80080a6:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 80080a8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80080ac:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 80080b4:	6883      	ldr	r3, [r0, #8]
 80080b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ba:	d006      	beq.n	80080ca <UART_Start_Receive_IT+0x26>
 80080bc:	b9a3      	cbnz	r3, 80080e8 <UART_Start_Receive_IT+0x44>
 80080be:	6903      	ldr	r3, [r0, #16]
 80080c0:	b973      	cbnz	r3, 80080e0 <UART_Start_Receive_IT+0x3c>
 80080c2:	23ff      	movs	r3, #255	; 0xff
 80080c4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80080c8:	e014      	b.n	80080f4 <UART_Start_Receive_IT+0x50>
 80080ca:	6903      	ldr	r3, [r0, #16]
 80080cc:	b923      	cbnz	r3, 80080d8 <UART_Start_Receive_IT+0x34>
 80080ce:	f240 13ff 	movw	r3, #511	; 0x1ff
 80080d2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80080d6:	e00d      	b.n	80080f4 <UART_Start_Receive_IT+0x50>
 80080d8:	23ff      	movs	r3, #255	; 0xff
 80080da:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80080de:	e009      	b.n	80080f4 <UART_Start_Receive_IT+0x50>
 80080e0:	237f      	movs	r3, #127	; 0x7f
 80080e2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80080e6:	e005      	b.n	80080f4 <UART_Start_Receive_IT+0x50>
 80080e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ec:	d02d      	beq.n	800814a <UART_Start_Receive_IT+0xa6>
 80080ee:	2300      	movs	r3, #0
 80080f0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080fa:	2322      	movs	r3, #34	; 0x22
 80080fc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008100:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	f101 0308 	add.w	r3, r1, #8
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	3108      	adds	r1, #8
 8008110:	e841 3400 	strex	r4, r3, [r1]
 8008114:	2c00      	cmp	r4, #0
 8008116:	d1f3      	bne.n	8008100 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008118:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800811a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800811e:	d01e      	beq.n	800815e <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008120:	6883      	ldr	r3, [r0, #8]
 8008122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008126:	d042      	beq.n	80081ae <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8008128:	4b29      	ldr	r3, [pc, #164]	; (80081d0 <UART_Start_Receive_IT+0x12c>)
 800812a:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800812c:	6903      	ldr	r3, [r0, #16]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d043      	beq.n	80081ba <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008132:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	e852 3f00 	ldrex	r3, [r2]
 8008138:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	e842 3100 	strex	r1, r3, [r2]
 8008140:	2900      	cmp	r1, #0
 8008142:	d1f6      	bne.n	8008132 <UART_Start_Receive_IT+0x8e>
}
 8008144:	2000      	movs	r0, #0
 8008146:	bc10      	pop	{r4}
 8008148:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800814a:	6903      	ldr	r3, [r0, #16]
 800814c:	b91b      	cbnz	r3, 8008156 <UART_Start_Receive_IT+0xb2>
 800814e:	237f      	movs	r3, #127	; 0x7f
 8008150:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008154:	e7ce      	b.n	80080f4 <UART_Start_Receive_IT+0x50>
 8008156:	233f      	movs	r3, #63	; 0x3f
 8008158:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800815c:	e7ca      	b.n	80080f4 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800815e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008162:	4293      	cmp	r3, r2
 8008164:	d8dc      	bhi.n	8008120 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008166:	6883      	ldr	r3, [r0, #8]
 8008168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800816c:	d019      	beq.n	80081a2 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800816e:	4b19      	ldr	r3, [pc, #100]	; (80081d4 <UART_Start_Receive_IT+0x130>)
 8008170:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008172:	6903      	ldr	r3, [r0, #16]
 8008174:	b143      	cbz	r3, 8008188 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008176:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008178:	e852 3f00 	ldrex	r3, [r2]
 800817c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008180:	e842 3100 	strex	r1, r3, [r2]
 8008184:	2900      	cmp	r1, #0
 8008186:	d1f6      	bne.n	8008176 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008188:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	f102 0308 	add.w	r3, r2, #8
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	3208      	adds	r2, #8
 8008198:	e842 3100 	strex	r1, r3, [r2]
 800819c:	2900      	cmp	r1, #0
 800819e:	d1f3      	bne.n	8008188 <UART_Start_Receive_IT+0xe4>
 80081a0:	e7d0      	b.n	8008144 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081a2:	6903      	ldr	r3, [r0, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e2      	bne.n	800816e <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80081a8:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <UART_Start_Receive_IT+0x134>)
 80081aa:	6743      	str	r3, [r0, #116]	; 0x74
 80081ac:	e7e1      	b.n	8008172 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ae:	6903      	ldr	r3, [r0, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1b9      	bne.n	8008128 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80081b4:	4b09      	ldr	r3, [pc, #36]	; (80081dc <UART_Start_Receive_IT+0x138>)
 80081b6:	6743      	str	r3, [r0, #116]	; 0x74
 80081b8:	e7b8      	b.n	800812c <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	e852 3f00 	ldrex	r3, [r2]
 80081c0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	e842 3100 	strex	r1, r3, [r2]
 80081c8:	2900      	cmp	r1, #0
 80081ca:	d1f6      	bne.n	80081ba <UART_Start_Receive_IT+0x116>
 80081cc:	e7ba      	b.n	8008144 <UART_Start_Receive_IT+0xa0>
 80081ce:	bf00      	nop
 80081d0:	08007611 	.word	0x08007611
 80081d4:	080077c5 	.word	0x080077c5
 80081d8:	08007991 	.word	0x08007991
 80081dc:	080076ed 	.word	0x080076ed

080081e0 <HAL_UART_Receive_IT>:
{
 80081e0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80081e2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80081e6:	2b20      	cmp	r3, #32
 80081e8:	d117      	bne.n	800821a <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80081ea:	b1c1      	cbz	r1, 800821e <HAL_UART_Receive_IT+0x3e>
 80081ec:	b1ca      	cbz	r2, 8008222 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ee:	2300      	movs	r3, #0
 80081f0:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081f2:	6803      	ldr	r3, [r0, #0]
 80081f4:	4c0c      	ldr	r4, [pc, #48]	; (8008228 <HAL_UART_Receive_IT+0x48>)
 80081f6:	42a3      	cmp	r3, r4
 80081f8:	d00c      	beq.n	8008214 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008200:	d008      	beq.n	8008214 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008202:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	e854 3f00 	ldrex	r3, [r4]
 8008208:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	e844 3500 	strex	r5, r3, [r4]
 8008210:	2d00      	cmp	r5, #0
 8008212:	d1f6      	bne.n	8008202 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008214:	f7ff ff46 	bl	80080a4 <UART_Start_Receive_IT>
 8008218:	e000      	b.n	800821c <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 800821a:	2002      	movs	r0, #2
}
 800821c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800821e:	2001      	movs	r0, #1
 8008220:	e7fc      	b.n	800821c <HAL_UART_Receive_IT+0x3c>
 8008222:	2001      	movs	r0, #1
 8008224:	e7fa      	b.n	800821c <HAL_UART_Receive_IT+0x3c>
 8008226:	bf00      	nop
 8008228:	40008000 	.word	0x40008000

0800822c <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800822c:	b082      	sub	sp, #8
 800822e:	ab02      	add	r3, sp, #8
 8008230:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008234:	6802      	ldr	r2, [r0, #0]
 8008236:	6853      	ldr	r3, [r2, #4]
 8008238:	f023 0310 	bic.w	r3, r3, #16
 800823c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008240:	430b      	orrs	r3, r1
 8008242:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008244:	6802      	ldr	r2, [r0, #0]
 8008246:	6853      	ldr	r3, [r2, #4]
 8008248:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800824c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008250:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008254:	6053      	str	r3, [r2, #4]
}
 8008256:	b002      	add	sp, #8
 8008258:	4770      	bx	lr
	...

0800825c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800825c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800825e:	b92b      	cbnz	r3, 800826c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008260:	2301      	movs	r3, #1
 8008262:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008266:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800826a:	4770      	bx	lr
{
 800826c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800826e:	6803      	ldr	r3, [r0, #0]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008276:	6899      	ldr	r1, [r3, #8]
 8008278:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800827a:	4d09      	ldr	r5, [pc, #36]	; (80082a0 <UARTEx_SetNbDataToProcess+0x44>)
 800827c:	5c6b      	ldrb	r3, [r5, r1]
 800827e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008280:	4c08      	ldr	r4, [pc, #32]	; (80082a4 <UARTEx_SetNbDataToProcess+0x48>)
 8008282:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008284:	fb93 f3f1 	sdiv	r3, r3, r1
 8008288:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800828c:	5cab      	ldrb	r3, [r5, r2]
 800828e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008290:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008292:	fb93 f3f2 	sdiv	r3, r3, r2
 8008296:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800829a:	bc30      	pop	{r4, r5}
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	08013e20 	.word	0x08013e20
 80082a4:	08013e18 	.word	0x08013e18

080082a8 <HAL_UARTEx_WakeupCallback>:
}
 80082a8:	4770      	bx	lr

080082aa <HAL_UARTEx_RxFifoFullCallback>:
}
 80082aa:	4770      	bx	lr

080082ac <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80082ac:	4770      	bx	lr

080082ae <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80082ae:	b510      	push	{r4, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	ab04      	add	r3, sp, #16
 80082b4:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80082b8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d035      	beq.n	800832c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80082c0:	4604      	mov	r4, r0
 80082c2:	2301      	movs	r3, #1
 80082c4:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80082c8:	2324      	movs	r3, #36	; 0x24
 80082ca:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80082ce:	6802      	ldr	r2, [r0, #0]
 80082d0:	6813      	ldr	r3, [r2, #0]
 80082d2:	f023 0301 	bic.w	r3, r3, #1
 80082d6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80082d8:	6801      	ldr	r1, [r0, #0]
 80082da:	688b      	ldr	r3, [r1, #8]
 80082dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80082e0:	9a02      	ldr	r2, [sp, #8]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80082e6:	b1aa      	cbz	r2, 8008314 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	f043 0301 	orr.w	r3, r3, #1
 80082f0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80082f2:	f7f9 fc83 	bl	8001bfc <HAL_GetTick>
 80082f6:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082f8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80082fc:	9200      	str	r2, [sp, #0]
 80082fe:	2200      	movs	r2, #0
 8008300:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008304:	4620      	mov	r0, r4
 8008306:	f7ff fdf2 	bl	8007eee <UART_WaitOnFlagUntilTimeout>
 800830a:	b948      	cbnz	r0, 8008320 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800830c:	2320      	movs	r3, #32
 800830e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008312:	e006      	b.n	8008322 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008314:	ab04      	add	r3, sp, #16
 8008316:	e913 0006 	ldmdb	r3, {r1, r2}
 800831a:	f7ff ff87 	bl	800822c <UARTEx_Wakeup_AddressConfig>
 800831e:	e7e3      	b.n	80082e8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8008320:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8008322:	2300      	movs	r3, #0
 8008324:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8008328:	b004      	add	sp, #16
 800832a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800832c:	2002      	movs	r0, #2
 800832e:	e7fb      	b.n	8008328 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08008330 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8008330:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008334:	2b01      	cmp	r3, #1
 8008336:	d010      	beq.n	800835a <HAL_UARTEx_EnableStopMode+0x2a>
 8008338:	2301      	movs	r3, #1
 800833a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800833e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	e852 3f00 	ldrex	r3, [r2]
 8008344:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	e842 3100 	strex	r1, r3, [r2]
 800834c:	2900      	cmp	r1, #0
 800834e:	d1f6      	bne.n	800833e <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008350:	2300      	movs	r3, #0
 8008352:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8008356:	4618      	mov	r0, r3
 8008358:	4770      	bx	lr
  __HAL_LOCK(huart);
 800835a:	2002      	movs	r0, #2
}
 800835c:	4770      	bx	lr

0800835e <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800835e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008362:	2b01      	cmp	r3, #1
 8008364:	d01d      	beq.n	80083a2 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8008366:	b510      	push	{r4, lr}
 8008368:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800836a:	2301      	movs	r3, #1
 800836c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008370:	2324      	movs	r3, #36	; 0x24
 8008372:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008376:	6802      	ldr	r2, [r0, #0]
 8008378:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800837a:	6811      	ldr	r1, [r2, #0]
 800837c:	f021 0101 	bic.w	r1, r1, #1
 8008380:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008382:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008386:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800838a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800838c:	6802      	ldr	r2, [r0, #0]
 800838e:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8008390:	f7ff ff64 	bl	800825c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008394:	2320      	movs	r3, #32
 8008396:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800839a:	2000      	movs	r0, #0
 800839c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80083a0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80083a2:	2002      	movs	r0, #2
}
 80083a4:	4770      	bx	lr

080083a6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80083a6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80083a8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d01d      	beq.n	80083ec <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80083b0:	4604      	mov	r4, r0
 80083b2:	2301      	movs	r3, #1
 80083b4:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80083b8:	2324      	movs	r3, #36	; 0x24
 80083ba:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083be:	6803      	ldr	r3, [r0, #0]
 80083c0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	f022 0201 	bic.w	r2, r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083ca:	6802      	ldr	r2, [r0, #0]
 80083cc:	6893      	ldr	r3, [r2, #8]
 80083ce:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80083d2:	4319      	orrs	r1, r3
 80083d4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80083d6:	f7ff ff41 	bl	800825c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80083de:	2320      	movs	r3, #32
 80083e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80083e4:	2000      	movs	r0, #0
 80083e6:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80083ec:	2002      	movs	r0, #2
 80083ee:	e7fc      	b.n	80083ea <HAL_UARTEx_SetTxFifoThreshold+0x44>

080083f0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80083f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80083f2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d01d      	beq.n	8008436 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80083fa:	4604      	mov	r4, r0
 80083fc:	2301      	movs	r3, #1
 80083fe:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008402:	2324      	movs	r3, #36	; 0x24
 8008404:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008408:	6803      	ldr	r3, [r0, #0]
 800840a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	f022 0201 	bic.w	r2, r2, #1
 8008412:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008414:	6802      	ldr	r2, [r0, #0]
 8008416:	6893      	ldr	r3, [r2, #8]
 8008418:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800841c:	4319      	orrs	r1, r3
 800841e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008420:	f7ff ff1c 	bl	800825c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008428:	2320      	movs	r3, #32
 800842a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800842e:	2000      	movs	r0, #0
 8008430:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008434:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008436:	2002      	movs	r0, #2
 8008438:	e7fc      	b.n	8008434 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800843c <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800843c:	2804      	cmp	r0, #4
 800843e:	d807      	bhi.n	8008450 <LmHandlerPackageIsInitialized+0x14>
{
 8008440:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8008442:	4b05      	ldr	r3, [pc, #20]	; (8008458 <LmHandlerPackageIsInitialized+0x1c>)
 8008444:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	b11b      	cbz	r3, 8008454 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800844c:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800844e:	bd08      	pop	{r3, pc}
        return false;
 8008450:	2000      	movs	r0, #0
}
 8008452:	4770      	bx	lr
        return false;
 8008454:	2000      	movs	r0, #0
 8008456:	e7fa      	b.n	800844e <LmHandlerPackageIsInitialized+0x12>
 8008458:	20000634 	.word	0x20000634

0800845c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	4605      	mov	r5, r0
 8008460:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008462:	2400      	movs	r4, #0
 8008464:	e005      	b.n	8008472 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	b10b      	cbz	r3, 800846e <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800846a:	4630      	mov	r0, r6
 800846c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800846e:	3401      	adds	r4, #1
 8008470:	b264      	sxtb	r4, r4
 8008472:	2c04      	cmp	r4, #4
 8008474:	dc24      	bgt.n	80084c0 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8008476:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <LmHandlerPackagesNotify+0x68>)
 8008478:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0f6      	beq.n	800846e <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8008480:	2d03      	cmp	r5, #3
 8008482:	d8f4      	bhi.n	800846e <LmHandlerPackagesNotify+0x12>
 8008484:	a201      	add	r2, pc, #4	; (adr r2, 800848c <LmHandlerPackagesNotify+0x30>)
 8008486:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800848a:	bf00      	nop
 800848c:	08008467 	.word	0x08008467
 8008490:	0800849d 	.word	0x0800849d
 8008494:	080084a9 	.word	0x080084a9
 8008498:	080084b5 	.word	0x080084b5
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0e5      	beq.n	800846e <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 80084a2:	4630      	mov	r0, r6
 80084a4:	4798      	blx	r3
 80084a6:	e7e2      	b.n	800846e <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0df      	beq.n	800846e <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 80084ae:	4630      	mov	r0, r6
 80084b0:	4798      	blx	r3
 80084b2:	e7dc      	b.n	800846e <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0d9      	beq.n	800846e <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80084ba:	4630      	mov	r0, r6
 80084bc:	4798      	blx	r3
 80084be:	e7d6      	b.n	800846e <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 80084c0:	bd70      	pop	{r4, r5, r6, pc}
 80084c2:	bf00      	nop
 80084c4:	20000634 	.word	0x20000634

080084c8 <MlmeIndication>:
{
 80084c8:	b510      	push	{r4, lr}
 80084ca:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 80084cc:	4b11      	ldr	r3, [pc, #68]	; (8008514 <MlmeIndication+0x4c>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 80084d2:	7842      	ldrb	r2, [r0, #1]
 80084d4:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 80084d6:	f990 2002 	ldrsb.w	r2, [r0, #2]
 80084da:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80084dc:	f9b1 2000 	ldrsh.w	r2, [r1]
 80084e0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80084e2:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80084e6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80084e8:	78ca      	ldrb	r2, [r1, #3]
 80084ea:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80084ec:	6842      	ldr	r2, [r0, #4]
 80084ee:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 80084f0:	4b09      	ldr	r3, [pc, #36]	; (8008518 <MlmeIndication+0x50>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f6:	b13b      	cbz	r3, 8008508 <MlmeIndication+0x40>
 80084f8:	7802      	ldrb	r2, [r0, #0]
 80084fa:	2a0a      	cmp	r2, #10
 80084fc:	d004      	beq.n	8008508 <MlmeIndication+0x40>
 80084fe:	2a0e      	cmp	r2, #14
 8008500:	d002      	beq.n	8008508 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8008502:	4904      	ldr	r1, [pc, #16]	; (8008514 <MlmeIndication+0x4c>)
 8008504:	2000      	movs	r0, #0
 8008506:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8008508:	4621      	mov	r1, r4
 800850a:	2003      	movs	r0, #3
 800850c:	f7ff ffa6 	bl	800845c <LmHandlerPackagesNotify>
}
 8008510:	bd10      	pop	{r4, pc}
 8008512:	bf00      	nop
 8008514:	20000088 	.word	0x20000088
 8008518:	20000630 	.word	0x20000630

0800851c <McpsConfirm>:
{
 800851c:	b510      	push	{r4, lr}
 800851e:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8008520:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <McpsConfirm+0x3c>)
 8008522:	2201      	movs	r2, #1
 8008524:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8008526:	7842      	ldrb	r2, [r0, #1]
 8008528:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800852a:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800852e:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8008530:	68c2      	ldr	r2, [r0, #12]
 8008532:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8008534:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8008538:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800853a:	6902      	ldr	r2, [r0, #16]
 800853c:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800853e:	7902      	ldrb	r2, [r0, #4]
 8008540:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8008542:	4b06      	ldr	r3, [pc, #24]	; (800855c <McpsConfirm+0x40>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008548:	b10b      	cbz	r3, 800854e <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800854a:	4803      	ldr	r0, [pc, #12]	; (8008558 <McpsConfirm+0x3c>)
 800854c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800854e:	4621      	mov	r1, r4
 8008550:	2000      	movs	r0, #0
 8008552:	f7ff ff83 	bl	800845c <LmHandlerPackagesNotify>
}
 8008556:	bd10      	pop	{r4, pc}
 8008558:	2000009c 	.word	0x2000009c
 800855c:	20000630 	.word	0x20000630

08008560 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8008560:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008562:	2400      	movs	r4, #0
 8008564:	e001      	b.n	800856a <LmHandlerPackageIsTxPending+0xa>
 8008566:	3401      	adds	r4, #1
 8008568:	b264      	sxtb	r4, r4
 800856a:	2c04      	cmp	r4, #4
 800856c:	dc0a      	bgt.n	8008584 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800856e:	4b07      	ldr	r3, [pc, #28]	; (800858c <LmHandlerPackageIsTxPending+0x2c>)
 8008570:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d0f6      	beq.n	8008566 <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	4798      	blx	r3
 800857c:	4603      	mov	r3, r0
 800857e:	2800      	cmp	r0, #0
 8008580:	d0f1      	beq.n	8008566 <LmHandlerPackageIsTxPending+0x6>
 8008582:	e000      	b.n	8008586 <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	bd10      	pop	{r4, pc}
 800858a:	bf00      	nop
 800858c:	20000634 	.word	0x20000634

08008590 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8008590:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008592:	2400      	movs	r4, #0
 8008594:	e001      	b.n	800859a <LmHandlerPackagesProcess+0xa>
 8008596:	3401      	adds	r4, #1
 8008598:	b264      	sxtb	r4, r4
 800859a:	2c04      	cmp	r4, #4
 800859c:	dc12      	bgt.n	80085c4 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800859e:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <LmHandlerPackagesProcess+0x38>)
 80085a0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0f6      	beq.n	8008596 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80085a8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0f3      	beq.n	8008596 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 80085ae:	b2e0      	uxtb	r0, r4
 80085b0:	f7ff ff44 	bl	800843c <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d0ee      	beq.n	8008596 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 80085b8:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <LmHandlerPackagesProcess+0x38>)
 80085ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	4798      	blx	r3
 80085c2:	e7e8      	b.n	8008596 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
 80085c6:	bf00      	nop
 80085c8:	20000634 	.word	0x20000634

080085cc <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 80085cc:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80085ce:	4b04      	ldr	r3, [pc, #16]	; (80085e0 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 80085d0:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 80085d2:	4b04      	ldr	r3, [pc, #16]	; (80085e4 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	b103      	cbz	r3, 80085dc <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 80085da:	4798      	blx	r3
    }
}
 80085dc:	bd08      	pop	{r3, pc}
 80085de:	bf00      	nop
 80085e0:	20000648 	.word	0x20000648
 80085e4:	20000630 	.word	0x20000630

080085e8 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 80085e8:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80085ea:	4b04      	ldr	r3, [pc, #16]	; (80085fc <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 80085ec:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 80085ee:	4b04      	ldr	r3, [pc, #16]	; (8008600 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f4:	b103      	cbz	r3, 80085f8 <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 80085f6:	4798      	blx	r3
    }
}
 80085f8:	bd08      	pop	{r3, pc}
 80085fa:	bf00      	nop
 80085fc:	20000648 	.word	0x20000648
 8008600:	20000630 	.word	0x20000630

08008604 <LmHandlerJoin>:
{
 8008604:	b530      	push	{r4, r5, lr}
 8008606:	b091      	sub	sp, #68	; 0x44
 8008608:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800860a:	2301      	movs	r3, #1
 800860c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8008610:	4b33      	ldr	r3, [pc, #204]	; (80086e0 <LmHandlerJoin+0xdc>)
 8008612:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8008616:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800861a:	f993 1005 	ldrsb.w	r1, [r3, #5]
 800861e:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 8008622:	2802      	cmp	r0, #2
 8008624:	d022      	beq.n	800866c <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008626:	2001      	movs	r0, #1
 8008628:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800862c:	4b2d      	ldr	r3, [pc, #180]	; (80086e4 <LmHandlerJoin+0xe0>)
 800862e:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8008630:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8008632:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008634:	2100      	movs	r1, #0
 8008636:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8008638:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 800863a:	4b2b      	ldr	r3, [pc, #172]	; (80086e8 <LmHandlerJoin+0xe4>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	b1f3      	cbz	r3, 800867e <LmHandlerJoin+0x7a>
        LoRaMacStart();
 8008640:	f003 fb0c 	bl	800bc5c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008644:	2301      	movs	r3, #1
 8008646:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800864a:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800864e:	a801      	add	r0, sp, #4
 8008650:	f003 fd42 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 8008654:	4b24      	ldr	r3, [pc, #144]	; (80086e8 <LmHandlerJoin+0xe4>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	b103      	cbz	r3, 800865c <LmHandlerJoin+0x58>
 800865a:	b114      	cbz	r4, 8008662 <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 800865c:	a80b      	add	r0, sp, #44	; 0x2c
 800865e:	f003 ffef 	bl	800c640 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008662:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008664:	4b21      	ldr	r3, [pc, #132]	; (80086ec <LmHandlerJoin+0xe8>)
 8008666:	601a      	str	r2, [r3, #0]
}
 8008668:	b011      	add	sp, #68	; 0x44
 800866a:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800866c:	2202      	movs	r2, #2
 800866e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8008672:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <LmHandlerJoin+0xe0>)
 8008674:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8008676:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 8008678:	f003 faf0 	bl	800bc5c <LoRaMacStart>
 800867c:	e7ea      	b.n	8008654 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800867e:	231f      	movs	r3, #31
 8008680:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8008684:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008688:	a801      	add	r0, sp, #4
 800868a:	f003 fd25 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800868e:	2320      	movs	r3, #32
 8008690:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8008694:	4d12      	ldr	r5, [pc, #72]	; (80086e0 <LmHandlerJoin+0xdc>)
 8008696:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800869a:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800869e:	a801      	add	r0, sp, #4
 80086a0:	f003 fd1a 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 80086a4:	2322      	movs	r3, #34	; 0x22
 80086a6:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 80086aa:	f995 3005 	ldrsb.w	r3, [r5, #5]
 80086ae:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80086b2:	a801      	add	r0, sp, #4
 80086b4:	f003 fd10 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 80086b8:	2321      	movs	r3, #33	; 0x21
 80086ba:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 80086be:	f995 3005 	ldrsb.w	r3, [r5, #5]
 80086c2:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80086c6:	a801      	add	r0, sp, #4
 80086c8:	f003 fd06 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80086cc:	2329      	movs	r3, #41	; 0x29
 80086ce:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80086d2:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <LmHandlerJoin+0xec>)
 80086d4:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80086d6:	a801      	add	r0, sp, #4
 80086d8:	f003 fcfe 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
 80086dc:	e7b0      	b.n	8008640 <LmHandlerJoin+0x3c>
 80086de:	bf00      	nop
 80086e0:	20000648 	.word	0x20000648
 80086e4:	2000007c 	.word	0x2000007c
 80086e8:	20000624 	.word	0x20000624
 80086ec:	20000628 	.word	0x20000628
 80086f0:	01000400 	.word	0x01000400

080086f4 <LmHandlerDeviceTimeReq>:
{
 80086f4:	b500      	push	{lr}
 80086f6:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 80086f8:	2309      	movs	r3, #9
 80086fa:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 80086fe:	a801      	add	r0, sp, #4
 8008700:	f003 ff9e 	bl	800c640 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008704:	9a05      	ldr	r2, [sp, #20]
 8008706:	4b04      	ldr	r3, [pc, #16]	; (8008718 <LmHandlerDeviceTimeReq+0x24>)
 8008708:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800870a:	b910      	cbnz	r0, 8008712 <LmHandlerDeviceTimeReq+0x1e>
}
 800870c:	b007      	add	sp, #28
 800870e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008712:	f04f 30ff 	mov.w	r0, #4294967295
 8008716:	e7f9      	b.n	800870c <LmHandlerDeviceTimeReq+0x18>
 8008718:	20000628 	.word	0x20000628

0800871c <LmHandlerGetDutyCycleWaitTime>:
}
 800871c:	4b01      	ldr	r3, [pc, #4]	; (8008724 <LmHandlerGetDutyCycleWaitTime+0x8>)
 800871e:	6818      	ldr	r0, [r3, #0]
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20000628 	.word	0x20000628

08008728 <LmHandlerJoinStatus>:
{
 8008728:	b500      	push	{lr}
 800872a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800872c:	2301      	movs	r3, #1
 800872e:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8008732:	4668      	mov	r0, sp
 8008734:	f003 fb5c 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8008738:	b920      	cbnz	r0, 8008744 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800873a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800873e:	b110      	cbz	r0, 8008746 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8008740:	2001      	movs	r0, #1
 8008742:	e000      	b.n	8008746 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8008744:	2000      	movs	r0, #0
}
 8008746:	b00b      	add	sp, #44	; 0x2c
 8008748:	f85d fb04 	ldr.w	pc, [sp], #4

0800874c <LmHandlerIsBusy>:
{
 800874c:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 800874e:	f003 f833 	bl	800b7b8 <LoRaMacIsBusy>
 8008752:	b100      	cbz	r0, 8008756 <LmHandlerIsBusy+0xa>
}
 8008754:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008756:	f7ff ffe7 	bl	8008728 <LmHandlerJoinStatus>
 800875a:	2801      	cmp	r0, #1
 800875c:	d006      	beq.n	800876c <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800875e:	4b05      	ldr	r3, [pc, #20]	; (8008774 <LmHandlerIsBusy+0x28>)
 8008760:	7a19      	ldrb	r1, [r3, #8]
 8008762:	79d8      	ldrb	r0, [r3, #7]
 8008764:	f7ff ff4e 	bl	8008604 <LmHandlerJoin>
        return true;
 8008768:	2001      	movs	r0, #1
 800876a:	e7f3      	b.n	8008754 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 800876c:	f7ff fef8 	bl	8008560 <LmHandlerPackageIsTxPending>
 8008770:	e7f0      	b.n	8008754 <LmHandlerIsBusy+0x8>
 8008772:	bf00      	nop
 8008774:	2000007c 	.word	0x2000007c

08008778 <LmHandlerSend>:
{
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	4604      	mov	r4, r0
 800877e:	460d      	mov	r5, r1
 8008780:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 8008782:	f003 f819 	bl	800b7b8 <LoRaMacIsBusy>
 8008786:	2800      	cmp	r0, #0
 8008788:	d168      	bne.n	800885c <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 800878a:	f003 f833 	bl	800b7f4 <LoRaMacIsStopped>
 800878e:	2800      	cmp	r0, #0
 8008790:	d167      	bne.n	8008862 <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008792:	f7ff ffc9 	bl	8008728 <LmHandlerJoinStatus>
 8008796:	2801      	cmp	r0, #1
 8008798:	d137      	bne.n	800880a <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 800879a:	4b35      	ldr	r3, [pc, #212]	; (8008870 <LmHandlerSend+0xf8>)
 800879c:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800879e:	3d00      	subs	r5, #0
 80087a0:	bf18      	it	ne
 80087a2:	2501      	movne	r5, #1
 80087a4:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80087a8:	4b32      	ldr	r3, [pc, #200]	; (8008874 <LmHandlerSend+0xfc>)
 80087aa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80087ae:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80087b2:	4669      	mov	r1, sp
 80087b4:	7860      	ldrb	r0, [r4, #1]
 80087b6:	f003 fab1 	bl	800bd1c <LoRaMacQueryTxPossible>
 80087ba:	b370      	cbz	r0, 800881a <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80087bc:	2300      	movs	r3, #0
 80087be:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80087c2:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80087c4:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 80087c8:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 80087cc:	4b28      	ldr	r3, [pc, #160]	; (8008870 <LmHandlerSend+0xf8>)
 80087ce:	f103 0c10 	add.w	ip, r3, #16
 80087d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087d6:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 80087da:	4a26      	ldr	r2, [pc, #152]	; (8008874 <LmHandlerSend+0xfc>)
 80087dc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80087e0:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 80087e2:	4631      	mov	r1, r6
 80087e4:	a801      	add	r0, sp, #4
 80087e6:	f004 f82f 	bl	800c848 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 80087ea:	9a05      	ldr	r2, [sp, #20]
 80087ec:	4b22      	ldr	r3, [pc, #136]	; (8008878 <LmHandlerSend+0x100>)
 80087ee:	601a      	str	r2, [r3, #0]
    switch( status )
 80087f0:	2811      	cmp	r0, #17
 80087f2:	d830      	bhi.n	8008856 <LmHandlerSend+0xde>
 80087f4:	e8df f000 	tbb	[pc, r0]
 80087f8:	2f2f1c21 	.word	0x2f2f1c21
 80087fc:	382f2f2f 	.word	0x382f2f2f
 8008800:	2c2f2f2f 	.word	0x2c2f2f2f
 8008804:	1c1c2f2f 	.word	0x1c1c2f2f
 8008808:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800880a:	4b1c      	ldr	r3, [pc, #112]	; (800887c <LmHandlerSend+0x104>)
 800880c:	7a19      	ldrb	r1, [r3, #8]
 800880e:	79d8      	ldrb	r0, [r3, #7]
 8008810:	f7ff fef8 	bl	8008604 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008814:	f06f 0502 	mvn.w	r5, #2
 8008818:	e00c      	b.n	8008834 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800881a:	7823      	ldrb	r3, [r4, #0]
 800881c:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008820:	7863      	ldrb	r3, [r4, #1]
 8008822:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008826:	6863      	ldr	r3, [r4, #4]
 8008828:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800882a:	f04f 35ff 	mov.w	r5, #4294967295
 800882e:	e7cd      	b.n	80087cc <LmHandlerSend+0x54>
    switch( status )
 8008830:	f06f 0501 	mvn.w	r5, #1
}
 8008834:	4628      	mov	r0, r5
 8008836:	b006      	add	sp, #24
 8008838:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 800883a:	4b11      	ldr	r3, [pc, #68]	; (8008880 <LmHandlerSend+0x108>)
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8008840:	f115 0f07 	cmn.w	r5, #7
 8008844:	d0f6      	beq.n	8008834 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8008846:	2500      	movs	r5, #0
 8008848:	e7f4      	b.n	8008834 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800884a:	f06f 0504 	mvn.w	r5, #4
            break;
 800884e:	e7f1      	b.n	8008834 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8008850:	f06f 0505 	mvn.w	r5, #5
            break;
 8008854:	e7ee      	b.n	8008834 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008856:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800885a:	e7eb      	b.n	8008834 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800885c:	f06f 0501 	mvn.w	r5, #1
 8008860:	e7e8      	b.n	8008834 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008862:	f06f 0502 	mvn.w	r5, #2
 8008866:	e7e5      	b.n	8008834 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008868:	f06f 0502 	mvn.w	r5, #2
 800886c:	e7e2      	b.n	8008834 <LmHandlerSend+0xbc>
 800886e:	bf00      	nop
 8008870:	2000009c 	.word	0x2000009c
 8008874:	20000648 	.word	0x20000648
 8008878:	20000628 	.word	0x20000628
 800887c:	2000007c 	.word	0x2000007c
 8008880:	2000062c 	.word	0x2000062c

08008884 <LmHandlerProcess>:
{
 8008884:	b500      	push	{lr}
 8008886:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8008888:	f002 ffc0 	bl	800b80c <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800888c:	f7ff fe80 	bl	8008590 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8008890:	f7ff fe66 	bl	8008560 <LmHandlerPackageIsTxPending>
 8008894:	b910      	cbnz	r0, 800889c <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8008896:	4b0b      	ldr	r3, [pc, #44]	; (80088c4 <LmHandlerProcess+0x40>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	b913      	cbnz	r3, 80088a2 <LmHandlerProcess+0x1e>
}
 800889c:	b003      	add	sp, #12
 800889e:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 80088a2:	2200      	movs	r2, #0
 80088a4:	f88d 2000 	strb.w	r2, [sp]
 80088a8:	f88d 2001 	strb.w	r2, [sp, #1]
 80088ac:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 80088ae:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <LmHandlerProcess+0x44>)
 80088b0:	78d9      	ldrb	r1, [r3, #3]
 80088b2:	4668      	mov	r0, sp
 80088b4:	f7ff ff60 	bl	8008778 <LmHandlerSend>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d1ef      	bne.n	800889c <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 80088bc:	4b01      	ldr	r3, [pc, #4]	; (80088c4 <LmHandlerProcess+0x40>)
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	e7eb      	b.n	800889c <LmHandlerProcess+0x18>
 80088c4:	2000062c 	.word	0x2000062c
 80088c8:	20000648 	.word	0x20000648

080088cc <LmHandlerRequestClass>:
{
 80088cc:	b510      	push	{r4, lr}
 80088ce:	b08a      	sub	sp, #40	; 0x28
 80088d0:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 80088d2:	f002 ff71 	bl	800b7b8 <LoRaMacIsBusy>
 80088d6:	bbb0      	cbnz	r0, 8008946 <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 80088d8:	f7ff ff26 	bl	8008728 <LmHandlerJoinStatus>
 80088dc:	2801      	cmp	r0, #1
 80088de:	d135      	bne.n	800894c <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 80088e0:	2300      	movs	r3, #0
 80088e2:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80088e6:	4668      	mov	r0, sp
 80088e8:	f003 fa82 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
 80088ec:	bb88      	cbnz	r0, 8008952 <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 80088ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 80088f2:	42a3      	cmp	r3, r4
 80088f4:	d030      	beq.n	8008958 <LmHandlerRequestClass+0x8c>
        switch( newClass )
 80088f6:	2c01      	cmp	r4, #1
 80088f8:	d030      	beq.n	800895c <LmHandlerRequestClass+0x90>
 80088fa:	2c02      	cmp	r4, #2
 80088fc:	d014      	beq.n	8008928 <LmHandlerRequestClass+0x5c>
 80088fe:	b114      	cbz	r4, 8008906 <LmHandlerRequestClass+0x3a>
 8008900:	2000      	movs	r0, #0
}
 8008902:	b00a      	add	sp, #40	; 0x28
 8008904:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 8008906:	b90b      	cbnz	r3, 800890c <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008908:	2000      	movs	r0, #0
 800890a:	e7fa      	b.n	8008902 <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 800890c:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008910:	4668      	mov	r0, sp
 8008912:	f003 fbe1 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
 8008916:	bb20      	cbnz	r0, 8008962 <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8008918:	4b18      	ldr	r3, [pc, #96]	; (800897c <LmHandlerRequestClass+0xb0>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	b31b      	cbz	r3, 8008968 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8008920:	4620      	mov	r0, r4
 8008922:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008924:	2000      	movs	r0, #0
 8008926:	e7ec      	b.n	8008902 <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 8008928:	bb03      	cbnz	r3, 800896c <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 800892a:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800892e:	4668      	mov	r0, sp
 8008930:	f003 fbd2 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
 8008934:	b9e8      	cbnz	r0, 8008972 <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8008936:	4b11      	ldr	r3, [pc, #68]	; (800897c <LmHandlerRequestClass+0xb0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893c:	b1e3      	cbz	r3, 8008978 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800893e:	4620      	mov	r0, r4
 8008940:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008942:	2000      	movs	r0, #0
 8008944:	e7dd      	b.n	8008902 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008946:	f06f 0001 	mvn.w	r0, #1
 800894a:	e7da      	b.n	8008902 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800894c:	f06f 0002 	mvn.w	r0, #2
 8008950:	e7d7      	b.n	8008902 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 8008952:	f04f 30ff 	mov.w	r0, #4294967295
 8008956:	e7d4      	b.n	8008902 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008958:	2000      	movs	r0, #0
 800895a:	e7d2      	b.n	8008902 <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	e7cf      	b.n	8008902 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8008962:	f04f 30ff 	mov.w	r0, #4294967295
 8008966:	e7cc      	b.n	8008902 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008968:	2000      	movs	r0, #0
 800896a:	e7ca      	b.n	8008902 <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800896c:	f04f 30ff 	mov.w	r0, #4294967295
 8008970:	e7c7      	b.n	8008902 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8008972:	f04f 30ff 	mov.w	r0, #4294967295
 8008976:	e7c4      	b.n	8008902 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008978:	2000      	movs	r0, #0
 800897a:	e7c2      	b.n	8008902 <LmHandlerRequestClass+0x36>
 800897c:	20000630 	.word	0x20000630

08008980 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 8008980:	b170      	cbz	r0, 80089a0 <LmHandlerGetCurrentClass+0x20>
{
 8008982:	b510      	push	{r4, lr}
 8008984:	b08a      	sub	sp, #40	; 0x28
 8008986:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8008988:	2300      	movs	r3, #0
 800898a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800898e:	4668      	mov	r0, sp
 8008990:	f003 fa2e 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
 8008994:	b938      	cbnz	r0, 80089a6 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8008996:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800899a:	7023      	strb	r3, [r4, #0]
}
 800899c:	b00a      	add	sp, #40	; 0x28
 800899e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80089a4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80089a6:	f04f 30ff 	mov.w	r0, #4294967295
 80089aa:	e7f7      	b.n	800899c <LmHandlerGetCurrentClass+0x1c>

080089ac <McpsIndication>:
{
 80089ac:	b510      	push	{r4, lr}
 80089ae:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 80089b0:	2300      	movs	r3, #0
 80089b2:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 80089b6:	4a1d      	ldr	r2, [pc, #116]	; (8008a2c <McpsIndication+0x80>)
 80089b8:	2301      	movs	r3, #1
 80089ba:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 80089bc:	7843      	ldrb	r3, [r0, #1]
 80089be:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d131      	bne.n	8008a28 <McpsIndication+0x7c>
 80089c4:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80089c6:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80089ca:	4b18      	ldr	r3, [pc, #96]	; (8008a2c <McpsIndication+0x80>)
 80089cc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80089ce:	f9b1 2000 	ldrsh.w	r2, [r1]
 80089d2:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 80089d4:	f991 2002 	ldrsb.w	r2, [r1, #2]
 80089d8:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80089da:	78ca      	ldrb	r2, [r1, #3]
 80089dc:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80089de:	6902      	ldr	r2, [r0, #16]
 80089e0:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 80089e2:	78c3      	ldrb	r3, [r0, #3]
 80089e4:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 80089e8:	7b03      	ldrb	r3, [r0, #12]
 80089ea:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 80089ee:	6883      	ldr	r3, [r0, #8]
 80089f0:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 80089f2:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <McpsIndication+0x84>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f8:	b113      	cbz	r3, 8008a00 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 80089fa:	490c      	ldr	r1, [pc, #48]	; (8008a2c <McpsIndication+0x80>)
 80089fc:	a802      	add	r0, sp, #8
 80089fe:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8008a00:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <McpsIndication+0x84>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	b113      	cbz	r3, 8008a0e <McpsIndication+0x62>
 8008a08:	7e22      	ldrb	r2, [r4, #24]
 8008a0a:	b102      	cbz	r2, 8008a0e <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8008a0c:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8008a0e:	4621      	mov	r1, r4
 8008a10:	2001      	movs	r0, #1
 8008a12:	f7ff fd23 	bl	800845c <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8008a16:	f10d 0007 	add.w	r0, sp, #7
 8008a1a:	f7ff ffb1 	bl	8008980 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8008a1e:	7963      	ldrb	r3, [r4, #5]
 8008a20:	b113      	cbz	r3, 8008a28 <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 8008a22:	4b04      	ldr	r3, [pc, #16]	; (8008a34 <McpsIndication+0x88>)
 8008a24:	2201      	movs	r2, #1
 8008a26:	701a      	strb	r2, [r3, #0]
}
 8008a28:	b004      	add	sp, #16
 8008a2a:	bd10      	pop	{r4, pc}
 8008a2c:	20000088 	.word	0x20000088
 8008a30:	20000630 	.word	0x20000630
 8008a34:	2000062c 	.word	0x2000062c

08008a38 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 8008a38:	b180      	cbz	r0, 8008a5c <LmHandlerGetTxDatarate+0x24>
{
 8008a3a:	b510      	push	{r4, lr}
 8008a3c:	b08a      	sub	sp, #40	; 0x28
 8008a3e:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8008a40:	2320      	movs	r3, #32
 8008a42:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8008a46:	4668      	mov	r0, sp
 8008a48:	f003 f9d2 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
 8008a4c:	b948      	cbnz	r0, 8008a62 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8008a4e:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8008a52:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8008a54:	4a04      	ldr	r2, [pc, #16]	; (8008a68 <LmHandlerGetTxDatarate+0x30>)
 8008a56:	7113      	strb	r3, [r2, #4]
}
 8008a58:	b00a      	add	sp, #40	; 0x28
 8008a5a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008a60:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008a62:	f04f 30ff 	mov.w	r0, #4294967295
 8008a66:	e7f7      	b.n	8008a58 <LmHandlerGetTxDatarate+0x20>
 8008a68:	20000648 	.word	0x20000648

08008a6c <LmHandlerSetSystemMaxRxError>:
{
 8008a6c:	b500      	push	{lr}
 8008a6e:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008a70:	2323      	movs	r3, #35	; 0x23
 8008a72:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8008a76:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008a78:	4668      	mov	r0, sp
 8008a7a:	f003 fb2d 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
 8008a7e:	b910      	cbnz	r0, 8008a86 <LmHandlerSetSystemMaxRxError+0x1a>
}
 8008a80:	b00b      	add	sp, #44	; 0x2c
 8008a82:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008a86:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8a:	e7f9      	b.n	8008a80 <LmHandlerSetSystemMaxRxError+0x14>

08008a8c <LmHandlerConfigure>:
{
 8008a8c:	b570      	push	{r4, r5, r6, lr}
 8008a8e:	b08e      	sub	sp, #56	; 0x38
 8008a90:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 8008a92:	4c6d      	ldr	r4, [pc, #436]	; (8008c48 <LmHandlerConfigure+0x1bc>)
 8008a94:	2218      	movs	r2, #24
 8008a96:	4620      	mov	r0, r4
 8008a98:	f008 f94d 	bl	8010d36 <memcpy1>
    IsUplinkTxPending = false;
 8008a9c:	4b6b      	ldr	r3, [pc, #428]	; (8008c4c <LmHandlerConfigure+0x1c0>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 8008aa2:	f7fa f943 	bl	8002d2c <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8008aa6:	7822      	ldrb	r2, [r4, #0]
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	4093      	lsls	r3, r2
 8008aac:	6841      	ldr	r1, [r0, #4]
 8008aae:	420b      	tst	r3, r1
 8008ab0:	d106      	bne.n	8008ac0 <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8008ab2:	4b67      	ldr	r3, [pc, #412]	; (8008c50 <LmHandlerConfigure+0x1c4>)
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	f00a f819 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8008abe:	e7fe      	b.n	8008abe <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8008ac0:	4964      	ldr	r1, [pc, #400]	; (8008c54 <LmHandlerConfigure+0x1c8>)
 8008ac2:	4865      	ldr	r0, [pc, #404]	; (8008c58 <LmHandlerConfigure+0x1cc>)
 8008ac4:	f002 feea 	bl	800b89c <LoRaMacInitialization>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f040 80b7 	bne.w	8008c3c <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 8008ace:	2327      	movs	r3, #39	; 0x27
 8008ad0:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008ad4:	a804      	add	r0, sp, #16
 8008ad6:	f003 faff 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d17c      	bne.n	8008bd8 <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 8008ade:	4b5f      	ldr	r3, [pc, #380]	; (8008c5c <LmHandlerConfigure+0x1d0>)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 8008ae4:	4b5d      	ldr	r3, [pc, #372]	; (8008c5c <LmHandlerConfigure+0x1d0>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 809e 	beq.w	8008c2a <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8008aee:	4b5c      	ldr	r3, [pc, #368]	; (8008c60 <LmHandlerConfigure+0x1d4>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	b10b      	cbz	r3, 8008afa <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8008af6:	2000      	movs	r0, #0
 8008af8:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8008afa:	2327      	movs	r3, #39	; 0x27
 8008afc:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8008b00:	a804      	add	r0, sp, #16
 8008b02:	f003 f975 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 8008b06:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 8008b08:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 8008b0c:	4b4e      	ldr	r3, [pc, #312]	; (8008c48 <LmHandlerConfigure+0x1bc>)
 8008b0e:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 8008b10:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 8008b14:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 8008b16:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 8008b1a:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 8008b1c:	4b4d      	ldr	r3, [pc, #308]	; (8008c54 <LmHandlerConfigure+0x1c8>)
 8008b1e:	68d9      	ldr	r1, [r3, #12]
 8008b20:	6898      	ldr	r0, [r3, #8]
 8008b22:	f008 f81b 	bl	8010b5c <SecureElementInitMcuID>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	f040 808b 	bne.w	8008c42 <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 8008b2c:	2306      	movs	r3, #6
 8008b2e:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008b32:	a804      	add	r0, sp, #16
 8008b34:	f003 f95c 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008b38:	4c4a      	ldr	r4, [pc, #296]	; (8008c64 <LmHandlerConfigure+0x1d8>)
 8008b3a:	9b05      	ldr	r3, [sp, #20]
 8008b3c:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008b3e:	a804      	add	r0, sp, #16
 8008b40:	f003 faca 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 8008b44:	2302      	movs	r3, #2
 8008b46:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 8008b4a:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008b4c:	a804      	add	r0, sp, #16
 8008b4e:	f003 f94f 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 8008b52:	2303      	movs	r3, #3
 8008b54:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 8008b58:	3408      	adds	r4, #8
 8008b5a:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008b5c:	a804      	add	r0, sp, #16
 8008b5e:	f003 f947 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 8008b62:	f008 f895 	bl	8010c90 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8008b66:	260f      	movs	r6, #15
 8008b68:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008b72:	a804      	add	r0, sp, #16
 8008b74:	f003 fab0 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8008b78:	2310      	movs	r3, #16
 8008b7a:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008b7e:	2500      	movs	r5, #0
 8008b80:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008b84:	eb0d 0003 	add.w	r0, sp, r3
 8008b88:	f003 faa6 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8008b8c:	2304      	movs	r3, #4
 8008b8e:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8008b92:	4c2d      	ldr	r4, [pc, #180]	; (8008c48 <LmHandlerConfigure+0x1bc>)
 8008b94:	78a3      	ldrb	r3, [r4, #2]
 8008b96:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008b9a:	a804      	add	r0, sp, #16
 8008b9c:	f003 fa9c 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8008ba0:	233a      	movs	r3, #58	; 0x3a
 8008ba2:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8008ba6:	6963      	ldr	r3, [r4, #20]
 8008ba8:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008baa:	a804      	add	r0, sp, #16
 8008bac:	f003 fa94 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8008bb0:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8008bb4:	a902      	add	r1, sp, #8
 8008bb6:	7820      	ldrb	r0, [r4, #0]
 8008bb8:	f004 ffea 	bl	800db90 <RegionGetPhyParam>
 8008bbc:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 8008bbe:	1b43      	subs	r3, r0, r5
 8008bc0:	bf18      	it	ne
 8008bc2:	2301      	movne	r3, #1
 8008bc4:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 8008bc6:	2014      	movs	r0, #20
 8008bc8:	f7ff ff50 	bl	8008a6c <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8008bcc:	79e0      	ldrb	r0, [r4, #7]
 8008bce:	f003 ff29 	bl	800ca24 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8008bd2:	4628      	mov	r0, r5
}
 8008bd4:	b00e      	add	sp, #56	; 0x38
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8008bd8:	2328      	movs	r3, #40	; 0x28
 8008bda:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 8008bde:	4b20      	ldr	r3, [pc, #128]	; (8008c60 <LmHandlerConfigure+0x1d4>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	b14b      	cbz	r3, 8008bfa <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008be6:	a804      	add	r0, sp, #16
 8008be8:	f003 f902 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8008bec:	4b1c      	ldr	r3, [pc, #112]	; (8008c60 <LmHandlerConfigure+0x1d4>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	f240 51cc 	movw	r1, #1484	; 0x5cc
 8008bf6:	9805      	ldr	r0, [sp, #20]
 8008bf8:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8008bfa:	2327      	movs	r3, #39	; 0x27
 8008bfc:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008c00:	a804      	add	r0, sp, #16
 8008c02:	f003 fa69 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f47f af6c 	bne.w	8008ae4 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008c12:	a804      	add	r0, sp, #16
 8008c14:	f003 f8ec 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008c18:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f43f af61 	beq.w	8008ae4 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 8008c22:	4b0e      	ldr	r3, [pc, #56]	; (8008c5c <LmHandlerConfigure+0x1d0>)
 8008c24:	2201      	movs	r2, #1
 8008c26:	701a      	strb	r2, [r3, #0]
 8008c28:	e75c      	b.n	8008ae4 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 8008c2a:	2305      	movs	r3, #5
 8008c2c:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8008c30:	2300      	movs	r3, #0
 8008c32:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008c34:	a804      	add	r0, sp, #16
 8008c36:	f003 fa4f 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
 8008c3a:	e76f      	b.n	8008b1c <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	e7c8      	b.n	8008bd4 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295
 8008c46:	e7c5      	b.n	8008bd4 <LmHandlerConfigure+0x148>
 8008c48:	20000648 	.word	0x20000648
 8008c4c:	2000062c 	.word	0x2000062c
 8008c50:	08013e28 	.word	0x08013e28
 8008c54:	20000670 	.word	0x20000670
 8008c58:	20000688 	.word	0x20000688
 8008c5c:	20000624 	.word	0x20000624
 8008c60:	20000630 	.word	0x20000630
 8008c64:	2000060c 	.word	0x2000060c

08008c68 <LmHandlerPackageRegister>:
{
 8008c68:	b530      	push	{r4, r5, lr}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9301      	str	r3, [sp, #4]
    switch( id )
 8008c72:	4604      	mov	r4, r0
 8008c74:	b9d8      	cbnz	r0, 8008cae <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 8008c76:	f000 fc1b 	bl	80094b0 <LmhpCompliancePackageFactory>
 8008c7a:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 8008c7c:	9b01      	ldr	r3, [sp, #4]
 8008c7e:	b1f3      	cbz	r3, 8008cbe <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 8008c80:	4a10      	ldr	r2, [pc, #64]	; (8008cc4 <LmHandlerPackageRegister+0x5c>)
 8008c82:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008c86:	4a10      	ldr	r2, [pc, #64]	; (8008cc8 <LmHandlerPackageRegister+0x60>)
 8008c88:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 8008c8a:	4a10      	ldr	r2, [pc, #64]	; (8008ccc <LmHandlerPackageRegister+0x64>)
 8008c8c:	6812      	ldr	r2, [r2, #0]
 8008c8e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8008c90:	6319      	str	r1, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8008c92:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8008c94:	6359      	str	r1, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008c96:	490e      	ldr	r1, [pc, #56]	; (8008cd0 <LmHandlerPackageRegister+0x68>)
 8008c98:	62d9      	str	r1, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8008c9a:	6992      	ldr	r2, [r2, #24]
 8008c9c:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	22f2      	movs	r2, #242	; 0xf2
 8008ca2:	490c      	ldr	r1, [pc, #48]	; (8008cd4 <LmHandlerPackageRegister+0x6c>)
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8008ca8:	2000      	movs	r0, #0
}
 8008caa:	b003      	add	sp, #12
 8008cac:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8008cae:	a901      	add	r1, sp, #4
 8008cb0:	f000 fc04 	bl	80094bc <LmhpPackagesRegister>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d0e1      	beq.n	8008c7c <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e7f5      	b.n	8008caa <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 8008cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc2:	e7f2      	b.n	8008caa <LmHandlerPackageRegister+0x42>
 8008cc4:	20000634 	.word	0x20000634
 8008cc8:	08008605 	.word	0x08008605
 8008ccc:	20000630 	.word	0x20000630
 8008cd0:	080086f5 	.word	0x080086f5
 8008cd4:	20000518 	.word	0x20000518

08008cd8 <LmHandlerInit>:
{
 8008cd8:	b500      	push	{lr}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 8008cde:	4b19      	ldr	r3, [pc, #100]	; (8008d44 <LmHandlerInit+0x6c>)
 8008ce0:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008ce2:	4b19      	ldr	r3, [pc, #100]	; (8008d48 <LmHandlerInit+0x70>)
 8008ce4:	4a19      	ldr	r2, [pc, #100]	; (8008d4c <LmHandlerInit+0x74>)
 8008ce6:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008ce8:	4a19      	ldr	r2, [pc, #100]	; (8008d50 <LmHandlerInit+0x78>)
 8008cea:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008cec:	4a19      	ldr	r2, [pc, #100]	; (8008d54 <LmHandlerInit+0x7c>)
 8008cee:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8008cf0:	4a19      	ldr	r2, [pc, #100]	; (8008d58 <LmHandlerInit+0x80>)
 8008cf2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8008cf4:	6802      	ldr	r2, [r0, #0]
 8008cf6:	4b19      	ldr	r3, [pc, #100]	; (8008d5c <LmHandlerInit+0x84>)
 8008cf8:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8008cfa:	6842      	ldr	r2, [r0, #4]
 8008cfc:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8008cfe:	6882      	ldr	r2, [r0, #8]
 8008d00:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8008d02:	68c2      	ldr	r2, [r0, #12]
 8008d04:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8008d06:	4a16      	ldr	r2, [pc, #88]	; (8008d60 <LmHandlerInit+0x88>)
 8008d08:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8008d0a:	6982      	ldr	r2, [r0, #24]
 8008d0c:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 8008d0e:	4b15      	ldr	r3, [pc, #84]	; (8008d64 <LmHandlerInit+0x8c>)
 8008d10:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8008d12:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008d14:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 8008d16:	4a14      	ldr	r2, [pc, #80]	; (8008d68 <LmHandlerInit+0x90>)
 8008d18:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 8008d1a:	4a14      	ldr	r2, [pc, #80]	; (8008d6c <LmHandlerInit+0x94>)
 8008d1c:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 8008d1e:	4619      	mov	r1, r3
 8008d20:	2000      	movs	r0, #0
 8008d22:	f7ff ffa1 	bl	8008c68 <LmHandlerPackageRegister>
 8008d26:	b930      	cbnz	r0, 8008d36 <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 8008d28:	a801      	add	r0, sp, #4
 8008d2a:	f000 fbc5 	bl	80094b8 <LmhpPackagesRegistrationInit>
 8008d2e:	b928      	cbnz	r0, 8008d3c <LmHandlerInit+0x64>
}
 8008d30:	b003      	add	sp, #12
 8008d32:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008d36:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3a:	e7f9      	b.n	8008d30 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	e7f6      	b.n	8008d30 <LmHandlerInit+0x58>
 8008d42:	bf00      	nop
 8008d44:	20000630 	.word	0x20000630
 8008d48:	20000688 	.word	0x20000688
 8008d4c:	0800851d 	.word	0x0800851d
 8008d50:	080089ad 	.word	0x080089ad
 8008d54:	08008df1 	.word	0x08008df1
 8008d58:	080084c9 	.word	0x080084c9
 8008d5c:	20000670 	.word	0x20000670
 8008d60:	0800db39 	.word	0x0800db39
 8008d64:	20000660 	.word	0x20000660
 8008d68:	080085cd 	.word	0x080085cd
 8008d6c:	080085e9 	.word	0x080085e9

08008d70 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 8008d70:	b161      	cbz	r1, 8008d8c <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 8008d72:	b118      	cbz	r0, 8008d7c <LmHandlerGetVersion+0xc>
 8008d74:	2801      	cmp	r0, #1
 8008d76:	d005      	beq.n	8008d84 <LmHandlerGetVersion+0x14>
 8008d78:	2000      	movs	r0, #0
 8008d7a:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8008d7c:	4a05      	ldr	r2, [pc, #20]	; (8008d94 <LmHandlerGetVersion+0x24>)
 8008d7e:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8008d80:	2000      	movs	r0, #0
            break;
 8008d82:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8008d84:	4a04      	ldr	r2, [pc, #16]	; (8008d98 <LmHandlerGetVersion+0x28>)
 8008d86:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8008d88:	2000      	movs	r0, #0
            break;
 8008d8a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	01000400 	.word	0x01000400
 8008d98:	02010001 	.word	0x02010001

08008d9c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8008d9c:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8008d9e:	f003 fe5f 	bl	800ca60 <LoRaMacDeInitialization>
 8008da2:	b900      	cbnz	r0, 8008da6 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8008da4:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008da6:	f06f 0001 	mvn.w	r0, #1
 8008daa:	e7fb      	b.n	8008da4 <LmHandlerStop+0x8>

08008dac <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8008dac:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8008dae:	f002 ff83 	bl	800bcb8 <LoRaMacHalt>
 8008db2:	b900      	cbnz	r0, 8008db6 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8008db4:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008db6:	f06f 0001 	mvn.w	r0, #1
 8008dba:	e7fb      	b.n	8008db4 <LmHandlerHalt+0x8>

08008dbc <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8008dbc:	b180      	cbz	r0, 8008de0 <LmHandlerGetTxPower+0x24>
{
 8008dbe:	b510      	push	{r4, lr}
 8008dc0:	b08a      	sub	sp, #40	; 0x28
 8008dc2:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8008dc4:	2321      	movs	r3, #33	; 0x21
 8008dc6:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008dca:	4668      	mov	r0, sp
 8008dcc:	f003 f810 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
 8008dd0:	b948      	cbnz	r0, 8008de6 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8008dd2:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8008dd6:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 8008dd8:	4a04      	ldr	r2, [pc, #16]	; (8008dec <LmHandlerGetTxPower+0x30>)
 8008dda:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 8008ddc:	b00a      	add	sp, #40	; 0x28
 8008dde:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008de4:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008de6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dea:	e7f7      	b.n	8008ddc <LmHandlerGetTxPower+0x20>
 8008dec:	20000648 	.word	0x20000648

08008df0 <MlmeConfirm>:
{
 8008df0:	b510      	push	{r4, lr}
 8008df2:	b08a      	sub	sp, #40	; 0x28
 8008df4:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 8008df6:	4b2c      	ldr	r3, [pc, #176]	; (8008ea8 <MlmeConfirm+0xb8>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8008dfc:	7842      	ldrb	r2, [r0, #1]
 8008dfe:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8008e00:	4b2a      	ldr	r3, [pc, #168]	; (8008eac <MlmeConfirm+0xbc>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e06:	b10b      	cbz	r3, 8008e0c <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8008e08:	4827      	ldr	r0, [pc, #156]	; (8008ea8 <MlmeConfirm+0xb8>)
 8008e0a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	2002      	movs	r0, #2
 8008e10:	f7ff fb24 	bl	800845c <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8008e14:	7823      	ldrb	r3, [r4, #0]
 8008e16:	2b05      	cmp	r3, #5
 8008e18:	d037      	beq.n	8008e8a <MlmeConfirm+0x9a>
 8008e1a:	2b0b      	cmp	r3, #11
 8008e1c:	d03d      	beq.n	8008e9a <MlmeConfirm+0xaa>
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d001      	beq.n	8008e26 <MlmeConfirm+0x36>
}
 8008e22:	b00a      	add	sp, #40	; 0x28
 8008e24:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 8008e26:	2306      	movs	r3, #6
 8008e28:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8008e2c:	4668      	mov	r0, sp
 8008e2e:	f002 ffdf 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 8008e32:	9901      	ldr	r1, [sp, #4]
 8008e34:	4b1e      	ldr	r3, [pc, #120]	; (8008eb0 <MlmeConfirm+0xc0>)
 8008e36:	79d8      	ldrb	r0, [r3, #7]
 8008e38:	f007 fe6e 	bl	8010b18 <SecureElementSetDevAddr>
 8008e3c:	b910      	cbnz	r0, 8008e44 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008e3e:	9a01      	ldr	r2, [sp, #4]
 8008e40:	4b1c      	ldr	r3, [pc, #112]	; (8008eb4 <MlmeConfirm+0xc4>)
 8008e42:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8008e44:	4c1a      	ldr	r4, [pc, #104]	; (8008eb0 <MlmeConfirm+0xc0>)
 8008e46:	1d20      	adds	r0, r4, #4
 8008e48:	f7ff fdf6 	bl	8008a38 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8008e4c:	1d60      	adds	r0, r4, #5
 8008e4e:	f7ff ffb5 	bl	8008dbc <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008e52:	4b15      	ldr	r3, [pc, #84]	; (8008ea8 <MlmeConfirm+0xb8>)
 8008e54:	785b      	ldrb	r3, [r3, #1]
 8008e56:	b18b      	cbz	r3, 8008e7c <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008e58:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <MlmeConfirm+0xc0>)
 8008e5a:	22ff      	movs	r2, #255	; 0xff
 8008e5c:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8008e5e:	4b13      	ldr	r3, [pc, #76]	; (8008eac <MlmeConfirm+0xbc>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	b10b      	cbz	r3, 8008e6a <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008e66:	4812      	ldr	r0, [pc, #72]	; (8008eb0 <MlmeConfirm+0xc0>)
 8008e68:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008e6a:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <MlmeConfirm+0xb8>)
 8008e6c:	785b      	ldrb	r3, [r3, #1]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1d7      	bne.n	8008e22 <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8008e72:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <MlmeConfirm+0xc0>)
 8008e74:	79d8      	ldrb	r0, [r3, #7]
 8008e76:	f007 ff1d 	bl	8010cb4 <SecureElementPrintSessionKeys>
            break;
 8008e7a:	e7d2      	b.n	8008e22 <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8008e80:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <MlmeConfirm+0xc8>)
 8008e82:	7858      	ldrb	r0, [r3, #1]
 8008e84:	f7ff fd22 	bl	80088cc <LmHandlerRequestClass>
 8008e88:	e7e9      	b.n	8008e5e <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 8008e8a:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <MlmeConfirm+0xcc>)
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8008e90:	7a22      	ldrb	r2, [r4, #8]
 8008e92:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8008e94:	7a62      	ldrb	r2, [r4, #9]
 8008e96:	74da      	strb	r2, [r3, #19]
            break;
 8008e98:	e7c3      	b.n	8008e22 <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008e9a:	7863      	ldrb	r3, [r4, #1]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d0c0      	beq.n	8008e22 <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 8008ea0:	f7ff fc28 	bl	80086f4 <LmHandlerDeviceTimeReq>
}
 8008ea4:	e7bd      	b.n	8008e22 <MlmeConfirm+0x32>
 8008ea6:	bf00      	nop
 8008ea8:	2000009c 	.word	0x2000009c
 8008eac:	20000630 	.word	0x20000630
 8008eb0:	2000007c 	.word	0x2000007c
 8008eb4:	2000060c 	.word	0x2000060c
 8008eb8:	20000648 	.word	0x20000648
 8008ebc:	20000088 	.word	0x20000088

08008ec0 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8008ec4:	f7ff ff72 	bl	8008dac <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8008ec8:	4604      	mov	r4, r0
 8008eca:	b148      	cbz	r0, 8008ee0 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 8008ecc:	b92c      	cbnz	r4, 8008eda <LmHandlerNvmDataStore+0x1a>
 8008ece:	4b18      	ldr	r3, [pc, #96]	; (8008f30 <LmHandlerNvmDataStore+0x70>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	b10b      	cbz	r3, 8008eda <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8008ed6:	2001      	movs	r0, #1
 8008ed8:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8008eda:	4620      	mov	r0, r4
 8008edc:	b00a      	add	sp, #40	; 0x28
 8008ede:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8008ee0:	f004 fe32 	bl	800db48 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 8008ee4:	f110 0f02 	cmn.w	r0, #2
 8008ee8:	d012      	beq.n	8008f10 <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 8008eea:	b9d0      	cbnz	r0, 8008f22 <LmHandlerNvmDataStore+0x62>
 8008eec:	4b10      	ldr	r3, [pc, #64]	; (8008f30 <LmHandlerNvmDataStore+0x70>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	695b      	ldr	r3, [r3, #20]
 8008ef2:	b1cb      	cbz	r3, 8008f28 <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 8008ef4:	2327      	movs	r3, #39	; 0x27
 8008ef6:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008efa:	4668      	mov	r0, sp
 8008efc:	f002 ff78 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 8008f00:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <LmHandlerNvmDataStore+0x70>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 8008f0a:	9801      	ldr	r0, [sp, #4]
 8008f0c:	4798      	blx	r3
 8008f0e:	e001      	b.n	8008f14 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8008f10:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8008f14:	f004 fe28 	bl	800db68 <NvmDataMgmtStoreEnd>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d0d7      	beq.n	8008ecc <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8008f20:	e7db      	b.n	8008eda <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008f22:	f04f 34ff 	mov.w	r4, #4294967295
 8008f26:	e7f5      	b.n	8008f14 <LmHandlerNvmDataStore+0x54>
 8008f28:	f04f 34ff 	mov.w	r4, #4294967295
 8008f2c:	e7f2      	b.n	8008f14 <LmHandlerNvmDataStore+0x54>
 8008f2e:	bf00      	nop
 8008f30:	20000630 	.word	0x20000630

08008f34 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8008f34:	4b01      	ldr	r3, [pc, #4]	; (8008f3c <LmhpComplianceIsInitialized+0x8>)
 8008f36:	7818      	ldrb	r0, [r3, #0]
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	2000069c 	.word	0x2000069c

08008f40 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8008f40:	4b01      	ldr	r3, [pc, #4]	; (8008f48 <LmhpComplianceIsTxPending+0x8>)
 8008f42:	7858      	ldrb	r0, [r3, #1]
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	2000069c 	.word	0x2000069c

08008f4c <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8008f4c:	4770      	bx	lr

08008f4e <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8008f4e:	4770      	bx	lr

08008f50 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8008f50:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 8008f52:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <OnProcessTimer+0x18>)
 8008f54:	7a9b      	ldrb	r3, [r3, #10]
 8008f56:	b113      	cbz	r3, 8008f5e <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 8008f58:	4b03      	ldr	r3, [pc, #12]	; (8008f68 <OnProcessTimer+0x18>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8008f5e:	4b03      	ldr	r3, [pc, #12]	; (8008f6c <OnProcessTimer+0x1c>)
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	b103      	cbz	r3, 8008f66 <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 8008f64:	4798      	blx	r3
    }
}
 8008f66:	bd08      	pop	{r3, pc}
 8008f68:	2000069c 	.word	0x2000069c
 8008f6c:	200000b8 	.word	0x200000b8

08008f70 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8008f70:	4b8c      	ldr	r3, [pc, #560]	; (80091a4 <LmhpComplianceOnMcpsIndication+0x234>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 8205 	beq.w	8009384 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 8008f7a:	78c3      	ldrb	r3, [r0, #3]
 8008f7c:	b90b      	cbnz	r3, 8008f82 <LmhpComplianceOnMcpsIndication+0x12>
 8008f7e:	7b83      	ldrb	r3, [r0, #14]
 8008f80:	b11b      	cbz	r3, 8008f8a <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8008f82:	4a88      	ldr	r2, [pc, #544]	; (80091a4 <LmhpComplianceOnMcpsIndication+0x234>)
 8008f84:	8a13      	ldrh	r3, [r2, #16]
 8008f86:	3301      	adds	r3, #1
 8008f88:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 8008f8a:	7b43      	ldrb	r3, [r0, #13]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 81f9 	beq.w	8009384 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8008f92:	78c3      	ldrb	r3, [r0, #3]
 8008f94:	2be0      	cmp	r3, #224	; 0xe0
 8008f96:	f040 81f5 	bne.w	8009384 <LmhpComplianceOnMcpsIndication+0x414>
{
 8008f9a:	b570      	push	{r4, r5, r6, lr}
 8008f9c:	b096      	sub	sp, #88	; 0x58
    ComplianceTestState.DataBufferSize = 0;
 8008f9e:	4b81      	ldr	r3, [pc, #516]	; (80091a4 <LmhpComplianceOnMcpsIndication+0x234>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 8008fa4:	6884      	ldr	r4, [r0, #8]
 8008fa6:	7823      	ldrb	r3, [r4, #0]
 8008fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8008faa:	f200 8093 	bhi.w	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
 8008fae:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008fb2:	0080      	.short	0x0080
 8008fb4:	00a2009d 	.word	0x00a2009d
 8008fb8:	00b200aa 	.word	0x00b200aa
 8008fbc:	00c600bf 	.word	0x00c600bf
 8008fc0:	00f000df 	.word	0x00f000df
 8008fc4:	0131011d 	.word	0x0131011d
 8008fc8:	00910091 	.word	0x00910091
 8008fcc:	00910091 	.word	0x00910091
 8008fd0:	00910091 	.word	0x00910091
 8008fd4:	00910091 	.word	0x00910091
 8008fd8:	00910091 	.word	0x00910091
 8008fdc:	00910091 	.word	0x00910091
 8008fe0:	00910091 	.word	0x00910091
 8008fe4:	00910091 	.word	0x00910091
 8008fe8:	00910091 	.word	0x00910091
 8008fec:	00910091 	.word	0x00910091
 8008ff0:	01350091 	.word	0x01350091
 8008ff4:	0140013c 	.word	0x0140013c
 8008ff8:	00910091 	.word	0x00910091
 8008ffc:	00910091 	.word	0x00910091
 8009000:	00910091 	.word	0x00910091
 8009004:	00910091 	.word	0x00910091
 8009008:	00910091 	.word	0x00910091
 800900c:	00910091 	.word	0x00910091
 8009010:	00910091 	.word	0x00910091
 8009014:	00910091 	.word	0x00910091
 8009018:	00910091 	.word	0x00910091
 800901c:	00910091 	.word	0x00910091
 8009020:	00910091 	.word	0x00910091
 8009024:	00910091 	.word	0x00910091
 8009028:	00910091 	.word	0x00910091
 800902c:	00910091 	.word	0x00910091
 8009030:	00910091 	.word	0x00910091
 8009034:	00910091 	.word	0x00910091
 8009038:	00910091 	.word	0x00910091
 800903c:	00910091 	.word	0x00910091
 8009040:	00910091 	.word	0x00910091
 8009044:	00910091 	.word	0x00910091
 8009048:	00910091 	.word	0x00910091
 800904c:	00910091 	.word	0x00910091
 8009050:	00910091 	.word	0x00910091
 8009054:	00910091 	.word	0x00910091
 8009058:	00910091 	.word	0x00910091
 800905c:	00910091 	.word	0x00910091
 8009060:	00910091 	.word	0x00910091
 8009064:	00910091 	.word	0x00910091
 8009068:	00910091 	.word	0x00910091
 800906c:	00910091 	.word	0x00910091
 8009070:	00910091 	.word	0x00910091
 8009074:	00910091 	.word	0x00910091
 8009078:	00910091 	.word	0x00910091
 800907c:	00910091 	.word	0x00910091
 8009080:	00910091 	.word	0x00910091
 8009084:	00910091 	.word	0x00910091
 8009088:	00910091 	.word	0x00910091
 800908c:	00910091 	.word	0x00910091
 8009090:	00910091 	.word	0x00910091
 8009094:	00910091 	.word	0x00910091
 8009098:	00910091 	.word	0x00910091
 800909c:	00910091 	.word	0x00910091
 80090a0:	00910091 	.word	0x00910091
 80090a4:	00910091 	.word	0x00910091
 80090a8:	00910091 	.word	0x00910091
 80090ac:	016c014b 	.word	0x016c014b
 80090b0:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 80090b2:	4b3c      	ldr	r3, [pc, #240]	; (80091a4 <LmhpComplianceOnMcpsIndication+0x234>)
 80090b4:	68da      	ldr	r2, [r3, #12]
 80090b6:	2101      	movs	r1, #1
 80090b8:	7299      	strb	r1, [r3, #10]
 80090ba:	2000      	movs	r0, #0
 80090bc:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 80090be:	68d8      	ldr	r0, [r3, #12]
 80090c0:	7a9a      	ldrb	r2, [r3, #10]
 80090c2:	1854      	adds	r4, r2, r1
 80090c4:	729c      	strb	r4, [r3, #10]
 80090c6:	2406      	movs	r4, #6
 80090c8:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 80090ca:	68d8      	ldr	r0, [r3, #12]
 80090cc:	7a9a      	ldrb	r2, [r3, #10]
 80090ce:	1854      	adds	r4, r2, r1
 80090d0:	729c      	strb	r4, [r3, #10]
 80090d2:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 80090d4:	4b33      	ldr	r3, [pc, #204]	; (80091a4 <LmhpComplianceOnMcpsIndication+0x234>)
 80090d6:	7a9b      	ldrb	r3, [r3, #10]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 814c 	beq.w	8009376 <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 80090de:	4b32      	ldr	r3, [pc, #200]	; (80091a8 <LmhpComplianceOnMcpsIndication+0x238>)
 80090e0:	7a5b      	ldrb	r3, [r3, #9]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 813d 	beq.w	8009362 <LmhpComplianceOnMcpsIndication+0x3f2>
}
 80090e8:	b016      	add	sp, #88	; 0x58
 80090ea:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 80090ec:	4b2d      	ldr	r3, [pc, #180]	; (80091a4 <LmhpComplianceOnMcpsIndication+0x234>)
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 80090f4:	e7ee      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 80090f6:	4b2d      	ldr	r3, [pc, #180]	; (80091ac <LmhpComplianceOnMcpsIndication+0x23c>)
 80090f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0ea      	beq.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80090fe:	2101      	movs	r1, #1
 8009100:	2002      	movs	r0, #2
 8009102:	4798      	blx	r3
 8009104:	e7e6      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8009106:	7862      	ldrb	r2, [r4, #1]
 8009108:	4b26      	ldr	r3, [pc, #152]	; (80091a4 <LmhpComplianceOnMcpsIndication+0x234>)
 800910a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 8009114:	e7de      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 8009116:	2304      	movs	r3, #4
 8009118:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800911c:	7863      	ldrb	r3, [r4, #1]
 800911e:	3b00      	subs	r3, #0
 8009120:	bf18      	it	ne
 8009122:	2301      	movne	r3, #1
 8009124:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8009128:	a801      	add	r0, sp, #4
 800912a:	f002 ffd5 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
                break;
 800912e:	e7d1      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8009130:	7860      	ldrb	r0, [r4, #1]
 8009132:	3800      	subs	r0, #0
 8009134:	bf18      	it	ne
 8009136:	2001      	movne	r0, #1
 8009138:	f003 fc74 	bl	800ca24 <LoRaMacTestSetDutyCycleOn>
                break;
 800913c:	e7ca      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800913e:	ad01      	add	r5, sp, #4
 8009140:	4e1b      	ldr	r6, [pc, #108]	; (80091b0 <LmhpComplianceOnMcpsIndication+0x240>)
 8009142:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009146:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800914a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800914e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8009152:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8009154:	2b0a      	cmp	r3, #10
 8009156:	d8bd      	bhi.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8009158:	4a16      	ldr	r2, [pc, #88]	; (80091b4 <LmhpComplianceOnMcpsIndication+0x244>)
 800915a:	6812      	ldr	r2, [r2, #0]
 800915c:	6852      	ldr	r2, [r2, #4]
 800915e:	2a00      	cmp	r2, #0
 8009160:	d0b8      	beq.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8009162:	a916      	add	r1, sp, #88	; 0x58
 8009164:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009168:	f853 0c54 	ldr.w	r0, [r3, #-84]
 800916c:	4790      	blx	r2
                break;
 800916e:	e7b1      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8009170:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8009172:	1e53      	subs	r3, r2, #1
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b01      	cmp	r3, #1
 8009178:	d8ac      	bhi.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800917a:	1e50      	subs	r0, r2, #1
 800917c:	bf18      	it	ne
 800917e:	2001      	movne	r0, #1
 8009180:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <LmhpComplianceOnMcpsIndication+0x234>)
 8009182:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8009184:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <LmhpComplianceOnMcpsIndication+0x244>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0a2      	beq.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800918e:	4798      	blx	r3
 8009190:	e7a0      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8009192:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <LmhpComplianceOnMcpsIndication+0x234>)
 8009194:	68da      	ldr	r2, [r3, #12]
 8009196:	2101      	movs	r1, #1
 8009198:	7299      	strb	r1, [r3, #10]
 800919a:	2308      	movs	r3, #8
 800919c:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800919e:	460b      	mov	r3, r1
 80091a0:	e01b      	b.n	80091da <LmhpComplianceOnMcpsIndication+0x26a>
 80091a2:	bf00      	nop
 80091a4:	2000069c 	.word	0x2000069c
 80091a8:	200006d4 	.word	0x200006d4
 80091ac:	200000b8 	.word	0x200000b8
 80091b0:	08013804 	.word	0x08013804
 80091b4:	20000698 	.word	0x20000698
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80091b8:	6882      	ldr	r2, [r0, #8]
 80091ba:	f101 0c01 	add.w	ip, r1, #1
 80091be:	5c52      	ldrb	r2, [r2, r1]
 80091c0:	4971      	ldr	r1, [pc, #452]	; (8009388 <LmhpComplianceOnMcpsIndication+0x418>)
 80091c2:	68cd      	ldr	r5, [r1, #12]
 80091c4:	7a8c      	ldrb	r4, [r1, #10]
 80091c6:	f104 0e01 	add.w	lr, r4, #1
 80091ca:	f881 e00a 	strb.w	lr, [r1, #10]
 80091ce:	3201      	adds	r2, #1
 80091d0:	552a      	strb	r2, [r5, r4]
                     i++ )
 80091d2:	3301      	adds	r3, #1
 80091d4:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80091d6:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80091da:	4a6b      	ldr	r2, [pc, #428]	; (8009388 <LmhpComplianceOnMcpsIndication+0x418>)
 80091dc:	7a52      	ldrb	r2, [r2, #9]
 80091de:	7b04      	ldrb	r4, [r0, #12]
 80091e0:	42a2      	cmp	r2, r4
 80091e2:	bf28      	it	cs
 80091e4:	4622      	movcs	r2, r4
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d8e6      	bhi.n	80091b8 <LmhpComplianceOnMcpsIndication+0x248>
 80091ea:	e773      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 80091ec:	4b66      	ldr	r3, [pc, #408]	; (8009388 <LmhpComplianceOnMcpsIndication+0x418>)
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	2101      	movs	r1, #1
 80091f2:	7299      	strb	r1, [r3, #10]
 80091f4:	2109      	movs	r1, #9
 80091f6:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 80091f8:	8a18      	ldrh	r0, [r3, #16]
 80091fa:	68d9      	ldr	r1, [r3, #12]
 80091fc:	7a9a      	ldrb	r2, [r3, #10]
 80091fe:	1c54      	adds	r4, r2, #1
 8009200:	729c      	strb	r4, [r3, #10]
 8009202:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8009204:	8a1a      	ldrh	r2, [r3, #16]
 8009206:	68d8      	ldr	r0, [r3, #12]
 8009208:	7a99      	ldrb	r1, [r3, #10]
 800920a:	1c4c      	adds	r4, r1, #1
 800920c:	729c      	strb	r4, [r3, #10]
 800920e:	0a13      	lsrs	r3, r2, #8
 8009210:	5443      	strb	r3, [r0, r1]
                break;
 8009212:	e75f      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 8009214:	4b5c      	ldr	r3, [pc, #368]	; (8009388 <LmhpComplianceOnMcpsIndication+0x418>)
 8009216:	2200      	movs	r2, #0
 8009218:	821a      	strh	r2, [r3, #16]
                break;
 800921a:	e75b      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 800921c:	2305      	movs	r3, #5
 800921e:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 8009222:	a801      	add	r0, sp, #4
 8009224:	f003 fa0c 	bl	800c640 <LoRaMacMlmeRequest>
                break;
 8009228:	e754      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 800922a:	4b58      	ldr	r3, [pc, #352]	; (800938c <LmhpComplianceOnMcpsIndication+0x41c>)
 800922c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922e:	4798      	blx	r3
                break;
 8009230:	e750      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8009232:	7860      	ldrb	r0, [r4, #1]
 8009234:	4b54      	ldr	r3, [pc, #336]	; (8009388 <LmhpComplianceOnMcpsIndication+0x418>)
 8009236:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8009238:	4b55      	ldr	r3, [pc, #340]	; (8009390 <LmhpComplianceOnMcpsIndication+0x420>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	f43f af48 	beq.w	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8009244:	4798      	blx	r3
 8009246:	e745      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 8009248:	7b03      	ldrb	r3, [r0, #12]
 800924a:	2b07      	cmp	r3, #7
 800924c:	f47f af42 	bne.w	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 8009250:	2306      	movs	r3, #6
 8009252:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8009256:	7863      	ldrb	r3, [r4, #1]
 8009258:	78a2      	ldrb	r2, [r4, #2]
 800925a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 800925e:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8009262:	78e3      	ldrb	r3, [r4, #3]
 8009264:	7922      	ldrb	r2, [r4, #4]
 8009266:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800926a:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800926c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8009270:	2264      	movs	r2, #100	; 0x64
 8009272:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8009276:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8009278:	6883      	ldr	r3, [r0, #8]
 800927a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800927e:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 8009282:	a801      	add	r0, sp, #4
 8009284:	f003 f9dc 	bl	800c640 <LoRaMacMlmeRequest>
                break;
 8009288:	e724      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800928a:	233b      	movs	r3, #59	; 0x3b
 800928c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                mibReq.Param.IsCertPortOn = false;
 8009290:	2300      	movs	r3, #0
 8009292:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 8009296:	a80c      	add	r0, sp, #48	; 0x30
 8009298:	f002 ff1e 	bl	800c0d8 <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 800929c:	4b3a      	ldr	r3, [pc, #232]	; (8009388 <LmhpComplianceOnMcpsIndication+0x418>)
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 80092a4:	e716      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 80092a6:	232a      	movs	r3, #42	; 0x2a
 80092a8:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80092ac:	a801      	add	r0, sp, #4
 80092ae:	f002 fd9f 	bl	800bdf0 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 80092b2:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 80092b4:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 80092b6:	4b34      	ldr	r3, [pc, #208]	; (8009388 <LmhpComplianceOnMcpsIndication+0x418>)
 80092b8:	68dc      	ldr	r4, [r3, #12]
 80092ba:	7a98      	ldrb	r0, [r3, #10]
 80092bc:	1c45      	adds	r5, r0, #1
 80092be:	729d      	strb	r5, [r3, #10]
 80092c0:	257f      	movs	r5, #127	; 0x7f
 80092c2:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 80092c4:	4832      	ldr	r0, [pc, #200]	; (8009390 <LmhpComplianceOnMcpsIndication+0x420>)
 80092c6:	6800      	ldr	r0, [r0, #0]
 80092c8:	68dd      	ldr	r5, [r3, #12]
 80092ca:	7a9c      	ldrb	r4, [r3, #10]
 80092cc:	1c66      	adds	r6, r4, #1
 80092ce:	729e      	strb	r6, [r3, #10]
 80092d0:	78c6      	ldrb	r6, [r0, #3]
 80092d2:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 80092d4:	68dd      	ldr	r5, [r3, #12]
 80092d6:	7a9c      	ldrb	r4, [r3, #10]
 80092d8:	1c66      	adds	r6, r4, #1
 80092da:	729e      	strb	r6, [r3, #10]
 80092dc:	7886      	ldrb	r6, [r0, #2]
 80092de:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 80092e0:	68dd      	ldr	r5, [r3, #12]
 80092e2:	7a9c      	ldrb	r4, [r3, #10]
 80092e4:	1c66      	adds	r6, r4, #1
 80092e6:	729e      	strb	r6, [r3, #10]
 80092e8:	7846      	ldrb	r6, [r0, #1]
 80092ea:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 80092ec:	68dd      	ldr	r5, [r3, #12]
 80092ee:	7a9c      	ldrb	r4, [r3, #10]
 80092f0:	1c66      	adds	r6, r4, #1
 80092f2:	729e      	strb	r6, [r3, #10]
 80092f4:	7800      	ldrb	r0, [r0, #0]
 80092f6:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 80092f8:	68dc      	ldr	r4, [r3, #12]
 80092fa:	7a98      	ldrb	r0, [r3, #10]
 80092fc:	1c45      	adds	r5, r0, #1
 80092fe:	729d      	strb	r5, [r3, #10]
 8009300:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8009304:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8009306:	68dc      	ldr	r4, [r3, #12]
 8009308:	7a98      	ldrb	r0, [r3, #10]
 800930a:	1c45      	adds	r5, r0, #1
 800930c:	729d      	strb	r5, [r3, #10]
 800930e:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8009312:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8009314:	68dc      	ldr	r4, [r3, #12]
 8009316:	7a98      	ldrb	r0, [r3, #10]
 8009318:	1c45      	adds	r5, r0, #1
 800931a:	729d      	strb	r5, [r3, #10]
 800931c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8009320:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8009322:	68dc      	ldr	r4, [r3, #12]
 8009324:	7a98      	ldrb	r0, [r3, #10]
 8009326:	1c45      	adds	r5, r0, #1
 8009328:	729d      	strb	r5, [r3, #10]
 800932a:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800932c:	68d8      	ldr	r0, [r3, #12]
 800932e:	7a99      	ldrb	r1, [r3, #10]
 8009330:	1c4c      	adds	r4, r1, #1
 8009332:	729c      	strb	r4, [r3, #10]
 8009334:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8009338:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800933a:	68d8      	ldr	r0, [r3, #12]
 800933c:	7a99      	ldrb	r1, [r3, #10]
 800933e:	1c4c      	adds	r4, r1, #1
 8009340:	729c      	strb	r4, [r3, #10]
 8009342:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009346:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8009348:	68d8      	ldr	r0, [r3, #12]
 800934a:	7a99      	ldrb	r1, [r3, #10]
 800934c:	1c4c      	adds	r4, r1, #1
 800934e:	729c      	strb	r4, [r3, #10]
 8009350:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8009354:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8009356:	68d8      	ldr	r0, [r3, #12]
 8009358:	7a99      	ldrb	r1, [r3, #10]
 800935a:	1c4c      	adds	r4, r1, #1
 800935c:	729c      	strb	r4, [r3, #10]
 800935e:	5442      	strb	r2, [r0, r1]
                break;
 8009360:	e6b8      	b.n	80090d4 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 8009362:	4c0c      	ldr	r4, [pc, #48]	; (8009394 <LmhpComplianceOnMcpsIndication+0x424>)
 8009364:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009368:	4620      	mov	r0, r4
 800936a:	f009 ffb3 	bl	80132d4 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800936e:	4620      	mov	r0, r4
 8009370:	f009 ff6a 	bl	8013248 <UTIL_TIMER_Start>
 8009374:	e6b8      	b.n	80090e8 <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 8009376:	4807      	ldr	r0, [pc, #28]	; (8009394 <LmhpComplianceOnMcpsIndication+0x424>)
 8009378:	f009 ff0c 	bl	8013194 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800937c:	4b02      	ldr	r3, [pc, #8]	; (8009388 <LmhpComplianceOnMcpsIndication+0x418>)
 800937e:	2200      	movs	r2, #0
 8009380:	705a      	strb	r2, [r3, #1]
 8009382:	e6b1      	b.n	80090e8 <LmhpComplianceOnMcpsIndication+0x178>
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	2000069c 	.word	0x2000069c
 800938c:	200000b8 	.word	0x200000b8
 8009390:	20000698 	.word	0x20000698
 8009394:	200006d4 	.word	0x200006d4

08009398 <LmhpComplianceProcess>:
{
 8009398:	b530      	push	{r4, r5, lr}
 800939a:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 800939c:	4b27      	ldr	r3, [pc, #156]	; (800943c <LmhpComplianceProcess+0xa4>)
 800939e:	785b      	ldrb	r3, [r3, #1]
 80093a0:	b993      	cbnz	r3, 80093c8 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 80093a2:	4b26      	ldr	r3, [pc, #152]	; (800943c <LmhpComplianceProcess+0xa4>)
 80093a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d13d      	bne.n	8009428 <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 80093ac:	4b23      	ldr	r3, [pc, #140]	; (800943c <LmhpComplianceProcess+0xa4>)
 80093ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093b2:	b13b      	cbz	r3, 80093c4 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 80093b4:	4b21      	ldr	r3, [pc, #132]	; (800943c <LmhpComplianceProcess+0xa4>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 80093bc:	4b20      	ldr	r3, [pc, #128]	; (8009440 <LmhpComplianceProcess+0xa8>)
 80093be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c0:	b103      	cbz	r3, 80093c4 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 80093c2:	4798      	blx	r3
}
 80093c4:	b003      	add	sp, #12
 80093c6:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 80093c8:	f009 fea4 	bl	8013114 <UTIL_TIMER_GetCurrentTime>
 80093cc:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 80093ce:	4b1b      	ldr	r3, [pc, #108]	; (800943c <LmhpComplianceProcess+0xa4>)
 80093d0:	685d      	ldr	r5, [r3, #4]
 80093d2:	f7ff f9a3 	bl	800871c <LmHandlerGetDutyCycleWaitTime>
 80093d6:	4405      	add	r5, r0
 80093d8:	42a5      	cmp	r5, r4
 80093da:	d2e7      	bcs.n	80093ac <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 80093dc:	4b17      	ldr	r3, [pc, #92]	; (800943c <LmhpComplianceProcess+0xa4>)
 80093de:	7a9b      	ldrb	r3, [r3, #10]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0e3      	beq.n	80093ac <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 80093e4:	22e0      	movs	r2, #224	; 0xe0
 80093e6:	f88d 2000 	strb.w	r2, [sp]
 80093ea:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 80093ee:	4b13      	ldr	r3, [pc, #76]	; (800943c <LmhpComplianceProcess+0xa4>)
 80093f0:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 80093f2:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 80093f4:	2201      	movs	r2, #1
 80093f6:	7a19      	ldrb	r1, [r3, #8]
 80093f8:	4668      	mov	r0, sp
 80093fa:	f7ff f9bd 	bl	8008778 <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 80093fe:	b110      	cbz	r0, 8009406 <LmhpComplianceProcess+0x6e>
 8009400:	f110 0f07 	cmn.w	r0, #7
 8009404:	d106      	bne.n	8009414 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 8009406:	4b0d      	ldr	r3, [pc, #52]	; (800943c <LmhpComplianceProcess+0xa4>)
 8009408:	2200      	movs	r2, #0
 800940a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800940c:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 800940e:	4b0b      	ldr	r3, [pc, #44]	; (800943c <LmhpComplianceProcess+0xa4>)
 8009410:	605c      	str	r4, [r3, #4]
 8009412:	e7cb      	b.n	80093ac <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 8009414:	4d0b      	ldr	r5, [pc, #44]	; (8009444 <LmhpComplianceProcess+0xac>)
 8009416:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800941a:	4628      	mov	r0, r5
 800941c:	f009 ff5a 	bl	80132d4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8009420:	4628      	mov	r0, r5
 8009422:	f009 ff11 	bl	8013248 <UTIL_TIMER_Start>
 8009426:	e7f2      	b.n	800940e <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 8009428:	4b04      	ldr	r3, [pc, #16]	; (800943c <LmhpComplianceProcess+0xa4>)
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8009430:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 8009434:	f7ff fa4a 	bl	80088cc <LmHandlerRequestClass>
 8009438:	e7b8      	b.n	80093ac <LmhpComplianceProcess+0x14>
 800943a:	bf00      	nop
 800943c:	2000069c 	.word	0x2000069c
 8009440:	200000b8 	.word	0x200000b8
 8009444:	200006d4 	.word	0x200006d4

08009448 <LmhpComplianceInit>:
{
 8009448:	b530      	push	{r4, r5, lr}
 800944a:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800944c:	b188      	cbz	r0, 8009472 <LmhpComplianceInit+0x2a>
 800944e:	4603      	mov	r3, r0
 8009450:	b179      	cbz	r1, 8009472 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 8009452:	4813      	ldr	r0, [pc, #76]	; (80094a0 <LmhpComplianceInit+0x58>)
 8009454:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8009456:	4b13      	ldr	r3, [pc, #76]	; (80094a4 <LmhpComplianceInit+0x5c>)
 8009458:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800945a:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 800945c:	2201      	movs	r2, #1
 800945e:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8009460:	2200      	movs	r2, #0
 8009462:	9200      	str	r2, [sp, #0]
 8009464:	4b10      	ldr	r3, [pc, #64]	; (80094a8 <LmhpComplianceInit+0x60>)
 8009466:	f04f 31ff 	mov.w	r1, #4294967295
 800946a:	4810      	ldr	r0, [pc, #64]	; (80094ac <LmhpComplianceInit+0x64>)
 800946c:	f009 fe34 	bl	80130d8 <UTIL_TIMER_Create>
 8009470:	e004      	b.n	800947c <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8009472:	2300      	movs	r3, #0
 8009474:	4a0a      	ldr	r2, [pc, #40]	; (80094a0 <LmhpComplianceInit+0x58>)
 8009476:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8009478:	4a0a      	ldr	r2, [pc, #40]	; (80094a4 <LmhpComplianceInit+0x5c>)
 800947a:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 800947c:	4c09      	ldr	r4, [pc, #36]	; (80094a4 <LmhpComplianceInit+0x5c>)
 800947e:	2500      	movs	r5, #0
 8009480:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8009482:	2220      	movs	r2, #32
 8009484:	4629      	mov	r1, r5
 8009486:	f104 0014 	add.w	r0, r4, #20
 800948a:	f007 fc6c 	bl	8010d66 <memset1>
    ComplianceTestState.IsTxPending = false;
 800948e:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8009490:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8009492:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8009496:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800949a:	b003      	add	sp, #12
 800949c:	bd30      	pop	{r4, r5, pc}
 800949e:	bf00      	nop
 80094a0:	20000698 	.word	0x20000698
 80094a4:	2000069c 	.word	0x2000069c
 80094a8:	08008f51 	.word	0x08008f51
 80094ac:	200006d4 	.word	0x200006d4

080094b0 <LmhpCompliancePackageFactory>:
}
 80094b0:	4800      	ldr	r0, [pc, #0]	; (80094b4 <LmhpCompliancePackageFactory+0x4>)
 80094b2:	4770      	bx	lr
 80094b4:	200000b8 	.word	0x200000b8

080094b8 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 80094b8:	2000      	movs	r0, #0
 80094ba:	4770      	bx	lr

080094bc <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	4770      	bx	lr
	...

080094c4 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80094c4:	4b07      	ldr	r3, [pc, #28]	; (80094e4 <UpdateRxSlotIdleState+0x20>)
 80094c6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d004      	beq.n	80094d8 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80094ce:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <UpdateRxSlotIdleState+0x24>)
 80094d0:	2206      	movs	r2, #6
 80094d2:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 80094d6:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80094d8:	4b03      	ldr	r3, [pc, #12]	; (80094e8 <UpdateRxSlotIdleState+0x24>)
 80094da:	2202      	movs	r2, #2
 80094dc:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	20008000 	.word	0x20008000
 80094e8:	200006f0 	.word	0x200006f0

080094ec <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 80094ec:	4b01      	ldr	r3, [pc, #4]	; (80094f4 <LoRaMacEnableRequests+0x8>)
 80094ee:	f883 0492 	strb.w	r0, [r3, #1170]	; 0x492
}
 80094f2:	4770      	bx	lr
 80094f4:	200006f0 	.word	0x200006f0

080094f8 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 80094f8:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80094fa:	4b15      	ldr	r3, [pc, #84]	; (8009550 <LoRaMacHandleIndicationEvents+0x58>)
 80094fc:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8009500:	f013 0f08 	tst.w	r3, #8
 8009504:	d00e      	beq.n	8009524 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8009506:	4812      	ldr	r0, [pc, #72]	; (8009550 <LoRaMacHandleIndicationEvents+0x58>)
 8009508:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 800950c:	f36f 03c3 	bfc	r3, #3, #1
 8009510:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8009514:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800951e:	f500 608d 	add.w	r0, r0, #1128	; 0x468
 8009522:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009524:	4b0a      	ldr	r3, [pc, #40]	; (8009550 <LoRaMacHandleIndicationEvents+0x58>)
 8009526:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800952a:	f013 0f02 	tst.w	r3, #2
 800952e:	d00e      	beq.n	800954e <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8009530:	4807      	ldr	r0, [pc, #28]	; (8009550 <LoRaMacHandleIndicationEvents+0x58>)
 8009532:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 8009536:	f36f 0341 	bfc	r3, #1, #1
 800953a:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800953e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8009548:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 800954c:	4798      	blx	r3
    }
}
 800954e:	bd08      	pop	{r3, pc}
 8009550:	200006f0 	.word	0x200006f0

08009554 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8009554:	b110      	cbz	r0, 800955c <CheckForMinimumAbpDatarate+0x8>
 8009556:	2901      	cmp	r1, #1
 8009558:	d001      	beq.n	800955e <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800955a:	2000      	movs	r0, #0
}
 800955c:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800955e:	2a00      	cmp	r2, #0
 8009560:	d0fc      	beq.n	800955c <CheckForMinimumAbpDatarate+0x8>
    return false;
 8009562:	2000      	movs	r0, #0
 8009564:	4770      	bx	lr
	...

08009568 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009568:	4b07      	ldr	r3, [pc, #28]	; (8009588 <LoRaMacCheckForRxAbort+0x20>)
 800956a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800956e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009572:	d008      	beq.n	8009586 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8009574:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009578:	4a03      	ldr	r2, [pc, #12]	; (8009588 <LoRaMacCheckForRxAbort+0x20>)
 800957a:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800957e:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8009582:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8009586:	4770      	bx	lr
 8009588:	200006f0 	.word	0x200006f0

0800958c <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800958c:	4b06      	ldr	r3, [pc, #24]	; (80095a8 <CalculateBackOff+0x1c>)
 800958e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009590:	b94b      	cbnz	r3, 80095a6 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8009592:	4a05      	ldr	r2, [pc, #20]	; (80095a8 <CalculateBackOff+0x1c>)
 8009594:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
 8009598:	4904      	ldr	r1, [pc, #16]	; (80095ac <CalculateBackOff+0x20>)
 800959a:	f8d1 141c 	ldr.w	r1, [r1, #1052]	; 0x41c
 800959e:	3b01      	subs	r3, #1
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80095a6:	4770      	bx	lr
 80095a8:	20008000 	.word	0x20008000
 80095ac:	200006f0 	.word	0x200006f0

080095b0 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80095b0:	b508      	push	{r3, lr}
 80095b2:	4684      	mov	ip, r0
 80095b4:	4608      	mov	r0, r1
 80095b6:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80095b8:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <SetTxContinuousWave+0x24>)
 80095ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095bc:	4662      	mov	r2, ip
 80095be:	b249      	sxtb	r1, r1
 80095c0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80095c2:	4a05      	ldr	r2, [pc, #20]	; (80095d8 <SetTxContinuousWave+0x28>)
 80095c4:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 80095c8:	f043 0302 	orr.w	r3, r3, #2
 80095cc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 80095d0:	2000      	movs	r0, #0
 80095d2:	bd08      	pop	{r3, pc}
 80095d4:	0801458c 	.word	0x0801458c
 80095d8:	200006f0 	.word	0x200006f0

080095dc <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80095dc:	4602      	mov	r2, r0
 80095de:	b1f8      	cbz	r0, 8009620 <DetermineFrameType+0x44>
 80095e0:	b301      	cbz	r1, 8009624 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80095e2:	7b03      	ldrb	r3, [r0, #12]
 80095e4:	f013 030f 	ands.w	r3, r3, #15
 80095e8:	d005      	beq.n	80095f6 <DetermineFrameType+0x1a>
 80095ea:	f890 0020 	ldrb.w	r0, [r0, #32]
 80095ee:	b110      	cbz	r0, 80095f6 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 80095f0:	2000      	movs	r0, #0
 80095f2:	7008      	strb	r0, [r1, #0]
 80095f4:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80095f6:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 80095fa:	b910      	cbnz	r0, 8009602 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 80095fc:	2301      	movs	r3, #1
 80095fe:	700b      	strb	r3, [r1, #0]
 8009600:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8009602:	b92b      	cbnz	r3, 8009610 <DetermineFrameType+0x34>
 8009604:	f892 0020 	ldrb.w	r0, [r2, #32]
 8009608:	b910      	cbnz	r0, 8009610 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800960a:	2302      	movs	r3, #2
 800960c:	700b      	strb	r3, [r1, #0]
 800960e:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8009610:	b953      	cbnz	r3, 8009628 <DetermineFrameType+0x4c>
 8009612:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009616:	b14a      	cbz	r2, 800962c <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8009618:	2203      	movs	r2, #3
 800961a:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800961c:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800961e:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009620:	2003      	movs	r0, #3
 8009622:	4770      	bx	lr
 8009624:	2003      	movs	r0, #3
 8009626:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8009628:	2018      	movs	r0, #24
 800962a:	4770      	bx	lr
 800962c:	2018      	movs	r0, #24
}
 800962e:	4770      	bx	lr

08009630 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8009630:	4288      	cmp	r0, r1
 8009632:	d201      	bcs.n	8009638 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 8009634:	2000      	movs	r0, #0
 8009636:	4770      	bx	lr
        return true;
 8009638:	2001      	movs	r0, #1
}
 800963a:	4770      	bx	lr

0800963c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800963c:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800963e:	4b0b      	ldr	r3, [pc, #44]	; (800966c <CheckRetransUnconfirmedUplink+0x30>)
 8009640:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8009644:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <CheckRetransUnconfirmedUplink+0x34>)
 8009646:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 800964a:	f7ff fff1 	bl	8009630 <CheckRetrans>
 800964e:	b950      	cbnz	r0, 8009666 <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009650:	4b07      	ldr	r3, [pc, #28]	; (8009670 <CheckRetransUnconfirmedUplink+0x34>)
 8009652:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8009656:	f013 0f02 	tst.w	r3, #2
 800965a:	d004      	beq.n	8009666 <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800965c:	4b04      	ldr	r3, [pc, #16]	; (8009670 <CheckRetransUnconfirmedUplink+0x34>)
 800965e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8009662:	2b01      	cmp	r3, #1
 8009664:	d900      	bls.n	8009668 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 8009666:	bd08      	pop	{r3, pc}
            return true;
 8009668:	2001      	movs	r0, #1
 800966a:	e7fc      	b.n	8009666 <CheckRetransUnconfirmedUplink+0x2a>
 800966c:	20008000 	.word	0x20008000
 8009670:	200006f0 	.word	0x200006f0

08009674 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8009674:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8009676:	4b09      	ldr	r3, [pc, #36]	; (800969c <CheckRetransConfirmedUplink+0x28>)
 8009678:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800967c:	4b08      	ldr	r3, [pc, #32]	; (80096a0 <CheckRetransConfirmedUplink+0x2c>)
 800967e:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 8009682:	f7ff ffd5 	bl	8009630 <CheckRetrans>
 8009686:	b940      	cbnz	r0, 800969a <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009688:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <CheckRetransConfirmedUplink+0x2c>)
 800968a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800968e:	f013 0f02 	tst.w	r3, #2
 8009692:	d002      	beq.n	800969a <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <CheckRetransConfirmedUplink+0x2c>)
 8009696:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
        {
            return true;
        }
    }
    return false;
}
 800969a:	bd08      	pop	{r3, pc}
 800969c:	20008000 	.word	0x20008000
 80096a0:	200006f0 	.word	0x200006f0

080096a4 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 80096a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096a8:	d000      	beq.n	80096ac <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 80096aa:	3001      	adds	r0, #1
    }
    return counter;
}
 80096ac:	4770      	bx	lr
	...

080096b0 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80096b0:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80096b2:	4b12      	ldr	r3, [pc, #72]	; (80096fc <StopRetransmission+0x4c>)
 80096b4:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80096b8:	f013 0f02 	tst.w	r3, #2
 80096bc:	d004      	beq.n	80096c8 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80096be:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <StopRetransmission+0x4c>)
 80096c0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d908      	bls.n	80096da <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80096c8:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <StopRetransmission+0x50>)
 80096ca:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80096ce:	b123      	cbz	r3, 80096da <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80096d0:	4c0b      	ldr	r4, [pc, #44]	; (8009700 <StopRetransmission+0x50>)
 80096d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80096d4:	f7ff ffe6 	bl	80096a4 <IncreaseAdrAckCounter>
 80096d8:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80096da:	4b08      	ldr	r3, [pc, #32]	; (80096fc <StopRetransmission+0x4c>)
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 80096e2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80096e6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80096ea:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80096ee:	f022 0202 	bic.w	r2, r2, #2
 80096f2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 80096f6:	2001      	movs	r0, #1
 80096f8:	bd10      	pop	{r4, pc}
 80096fa:	bf00      	nop
 80096fc:	200006f0 	.word	0x200006f0
 8009700:	20008000 	.word	0x20008000

08009704 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8009704:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009706:	4b04      	ldr	r3, [pc, #16]	; (8009718 <OnMacProcessNotify+0x14>)
 8009708:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800970c:	b113      	cbz	r3, 8009714 <OnMacProcessNotify+0x10>
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	b103      	cbz	r3, 8009714 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009712:	4798      	blx	r3
    }
}
 8009714:	bd08      	pop	{r3, pc}
 8009716:	bf00      	nop
 8009718:	200006f0 	.word	0x200006f0

0800971c <OnRadioRxError>:
{
 800971c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800971e:	4a04      	ldr	r2, [pc, #16]	; (8009730 <OnRadioRxError+0x14>)
 8009720:	7813      	ldrb	r3, [r2, #0]
 8009722:	f043 0304 	orr.w	r3, r3, #4
 8009726:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8009728:	f7ff ffec 	bl	8009704 <OnMacProcessNotify>
}
 800972c:	bd08      	pop	{r3, pc}
 800972e:	bf00      	nop
 8009730:	200006ec 	.word	0x200006ec

08009734 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8009734:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8009736:	4b04      	ldr	r3, [pc, #16]	; (8009748 <CallNvmDataChangeCallback+0x14>)
 8009738:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800973c:	b113      	cbz	r3, 8009744 <CallNvmDataChangeCallback+0x10>
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	b103      	cbz	r3, 8009744 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8009742:	4798      	blx	r3
    }
}
 8009744:	bd08      	pop	{r3, pc}
 8009746:	bf00      	nop
 8009748:	200006f0 	.word	0x200006f0

0800974c <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800974c:	4b04      	ldr	r3, [pc, #16]	; (8009760 <IsRequestPending+0x14>)
 800974e:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
 8009752:	f010 0005 	ands.w	r0, r0, #5
 8009756:	d100      	bne.n	800975a <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8009758:	4770      	bx	lr
        return 1;
 800975a:	2001      	movs	r0, #1
 800975c:	e7fc      	b.n	8009758 <IsRequestPending+0xc>
 800975e:	bf00      	nop
 8009760:	200006f0 	.word	0x200006f0

08009764 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8009764:	b500      	push	{lr}
 8009766:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009768:	4b0d      	ldr	r3, [pc, #52]	; (80097a0 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800976a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800976e:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8009772:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009776:	220d      	movs	r2, #13
 8009778:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800977c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009780:	b113      	cbz	r3, 8009788 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009782:	230e      	movs	r3, #14
 8009784:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009788:	a902      	add	r1, sp, #8
 800978a:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800978c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009790:	f004 f9fe 	bl	800db90 <RegionGetPhyParam>
 8009794:	9001      	str	r0, [sp, #4]
}
 8009796:	b2c0      	uxtb	r0, r0
 8009798:	b005      	add	sp, #20
 800979a:	f85d fb04 	ldr.w	pc, [sp], #4
 800979e:	bf00      	nop
 80097a0:	20008000 	.word	0x20008000

080097a4 <ValidatePayloadLength>:
{
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	4605      	mov	r5, r0
 80097a8:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80097aa:	4608      	mov	r0, r1
 80097ac:	f7ff ffda 	bl	8009764 <GetMaxAppPayloadWithoutFOptsLength>
 80097b0:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 80097b2:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d303      	bcc.n	80097c0 <ValidatePayloadLength+0x1c>
 80097b8:	2aff      	cmp	r2, #255	; 0xff
 80097ba:	d903      	bls.n	80097c4 <ValidatePayloadLength+0x20>
    return false;
 80097bc:	2000      	movs	r0, #0
 80097be:	e000      	b.n	80097c2 <ValidatePayloadLength+0x1e>
 80097c0:	2000      	movs	r0, #0
}
 80097c2:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 80097c4:	2001      	movs	r0, #1
 80097c6:	e7fc      	b.n	80097c2 <ValidatePayloadLength+0x1e>

080097c8 <ProcessRadioTxDone>:
{
 80097c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ca:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80097cc:	4b3b      	ldr	r3, [pc, #236]	; (80098bc <ProcessRadioTxDone+0xf4>)
 80097ce:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d002      	beq.n	80097dc <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 80097d6:	4b3a      	ldr	r3, [pc, #232]	; (80098c0 <ProcessRadioTxDone+0xf8>)
 80097d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097da:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097dc:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80097e0:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 80097e2:	f009 fc97 	bl	8013114 <UTIL_TIMER_GetCurrentTime>
 80097e6:	4b37      	ldr	r3, [pc, #220]	; (80098c4 <ProcessRadioTxDone+0xfc>)
 80097e8:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 80097ea:	4c37      	ldr	r4, [pc, #220]	; (80098c8 <ProcessRadioTxDone+0x100>)
 80097ec:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 80097f0:	1a2d      	subs	r5, r5, r0
 80097f2:	f504 7660 	add.w	r6, r4, #896	; 0x380
 80097f6:	4429      	add	r1, r5
 80097f8:	4630      	mov	r0, r6
 80097fa:	f009 fd6b 	bl	80132d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80097fe:	4630      	mov	r0, r6
 8009800:	f009 fd22 	bl	8013248 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8009804:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8009808:	f504 7666 	add.w	r6, r4, #920	; 0x398
 800980c:	4429      	add	r1, r5
 800980e:	4630      	mov	r0, r6
 8009810:	f009 fd60 	bl	80132d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009814:	4630      	mov	r0, r6
 8009816:	f009 fd17 	bl	8013248 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800981a:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 800981e:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8009822:	2b00      	cmp	r3, #0
 8009824:	d134      	bne.n	8009890 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009826:	4b28      	ldr	r3, [pc, #160]	; (80098c8 <ProcessRadioTxDone+0x100>)
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800982e:	4b25      	ldr	r3, [pc, #148]	; (80098c4 <ProcessRadioTxDone+0xfc>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4c22      	ldr	r4, [pc, #136]	; (80098bc <ProcessRadioTxDone+0xf4>)
 8009834:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8009836:	4f24      	ldr	r7, [pc, #144]	; (80098c8 <ProcessRadioTxDone+0x100>)
 8009838:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 800983c:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009840:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009842:	ae0c      	add	r6, sp, #48	; 0x30
 8009844:	4630      	mov	r0, r6
 8009846:	f009 fbd9 	bl	8012ffc <SysTimeGetMcuTime>
 800984a:	ad02      	add	r5, sp, #8
 800984c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8009856:	e896 0006 	ldmia.w	r6, {r1, r2}
 800985a:	4628      	mov	r0, r5
 800985c:	f009 fb6b 	bl	8012f36 <SysTimeSub>
 8009860:	ab07      	add	r3, sp, #28
 8009862:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009866:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800986a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800986e:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8009870:	2301      	movs	r3, #1
 8009872:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009876:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800987a:	b90b      	cbnz	r3, 8009880 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 800987c:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009880:	a904      	add	r1, sp, #16
 8009882:	4b0e      	ldr	r3, [pc, #56]	; (80098bc <ProcessRadioTxDone+0xf4>)
 8009884:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009888:	f004 f99a 	bl	800dbc0 <RegionSetBandTxDone>
}
 800988c:	b00f      	add	sp, #60	; 0x3c
 800988e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8009890:	2315      	movs	r3, #21
 8009892:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009896:	a90a      	add	r1, sp, #40	; 0x28
 8009898:	4b08      	ldr	r3, [pc, #32]	; (80098bc <ProcessRadioTxDone+0xf4>)
 800989a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800989e:	f004 f977 	bl	800db90 <RegionGetPhyParam>
 80098a2:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80098a4:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80098a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80098ac:	4401      	add	r1, r0
 80098ae:	4620      	mov	r0, r4
 80098b0:	f009 fd10 	bl	80132d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 80098b4:	4620      	mov	r0, r4
 80098b6:	f009 fcc7 	bl	8013248 <UTIL_TIMER_Start>
 80098ba:	e7b8      	b.n	800982e <ProcessRadioTxDone+0x66>
 80098bc:	20008000 	.word	0x20008000
 80098c0:	0801458c 	.word	0x0801458c
 80098c4:	20000cac 	.word	0x20000cac
 80098c8:	200006f0 	.word	0x200006f0

080098cc <OnRetransmitTimeoutTimerEvent>:
{
 80098cc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80098ce:	4c07      	ldr	r4, [pc, #28]	; (80098ec <OnRetransmitTimeoutTimerEvent+0x20>)
 80098d0:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80098d4:	f009 fc5e 	bl	8013194 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80098d8:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 80098dc:	b113      	cbz	r3, 80098e4 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 80098de:	2201      	movs	r2, #1
 80098e0:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    OnMacProcessNotify( );
 80098e4:	f7ff ff0e 	bl	8009704 <OnMacProcessNotify>
}
 80098e8:	bd10      	pop	{r4, pc}
 80098ea:	bf00      	nop
 80098ec:	200006f0 	.word	0x200006f0

080098f0 <PrepareRxDoneAbort>:
{
 80098f0:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80098f2:	4b0e      	ldr	r3, [pc, #56]	; (800992c <PrepareRxDoneAbort+0x3c>)
 80098f4:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80098f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098fc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8009900:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8009904:	b973      	cbnz	r3, 8009924 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8009906:	4b09      	ldr	r3, [pc, #36]	; (800992c <PrepareRxDoneAbort+0x3c>)
 8009908:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800990c:	f042 0202 	orr.w	r2, r2, #2
 8009910:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009914:	b2d2      	uxtb	r2, r2
 8009916:	f042 0210 	orr.w	r2, r2, #16
 800991a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800991e:	f7ff fdd1 	bl	80094c4 <UpdateRxSlotIdleState>
}
 8009922:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 8009924:	2000      	movs	r0, #0
 8009926:	f7ff ffd1 	bl	80098cc <OnRetransmitTimeoutTimerEvent>
 800992a:	e7ec      	b.n	8009906 <PrepareRxDoneAbort+0x16>
 800992c:	200006f0 	.word	0x200006f0

08009930 <LoRaMacCheckForBeaconAcquisition>:
{
 8009930:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009932:	200b      	movs	r0, #11
 8009934:	f003 fbb2 	bl	800d09c <LoRaMacConfirmQueueIsCmdActive>
 8009938:	b188      	cbz	r0, 800995e <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800993a:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <LoRaMacCheckForBeaconAcquisition+0x38>)
 800993c:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009940:	f010 0f01 	tst.w	r0, #1
 8009944:	d10d      	bne.n	8009962 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009946:	f010 0004 	ands.w	r0, r0, #4
 800994a:	d009      	beq.n	8009960 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800994c:	461a      	mov	r2, r3
 800994e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009952:	f023 0302 	bic.w	r3, r3, #2
 8009956:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800995a:	2001      	movs	r0, #1
 800995c:	e000      	b.n	8009960 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800995e:	2000      	movs	r0, #0
}
 8009960:	bd08      	pop	{r3, pc}
    return 0x00;
 8009962:	2000      	movs	r0, #0
 8009964:	e7fc      	b.n	8009960 <LoRaMacCheckForBeaconAcquisition+0x30>
 8009966:	bf00      	nop
 8009968:	200006f0 	.word	0x200006f0

0800996c <GetFCntDown>:
{
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	9c04      	ldr	r4, [sp, #16]
 8009970:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8009972:	b1f2      	cbz	r2, 80099b2 <GetFCntDown+0x46>
 8009974:	4694      	mov	ip, r2
 8009976:	b1f4      	cbz	r4, 80099b6 <GetFCntDown+0x4a>
 8009978:	b1fd      	cbz	r5, 80099ba <GetFCntDown+0x4e>
    switch( addrID )
 800997a:	b188      	cbz	r0, 80099a0 <GetFCntDown+0x34>
 800997c:	2801      	cmp	r0, #1
 800997e:	d11e      	bne.n	80099be <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8009980:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009984:	2b01      	cmp	r3, #1
 8009986:	d002      	beq.n	800998e <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8009988:	2303      	movs	r3, #3
 800998a:	7023      	strb	r3, [r4, #0]
 800998c:	e00a      	b.n	80099a4 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800998e:	b121      	cbz	r1, 800999a <GetFCntDown+0x2e>
 8009990:	2903      	cmp	r1, #3
 8009992:	d002      	beq.n	800999a <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8009994:	2301      	movs	r3, #1
 8009996:	7023      	strb	r3, [r4, #0]
 8009998:	e004      	b.n	80099a4 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800999a:	2302      	movs	r3, #2
 800999c:	7023      	strb	r3, [r4, #0]
 800999e:	e001      	b.n	80099a4 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 80099a0:	2304      	movs	r3, #4
 80099a2:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 80099a4:	462a      	mov	r2, r5
 80099a6:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 80099aa:	7820      	ldrb	r0, [r4, #0]
 80099ac:	f003 fda0 	bl	800d4f0 <LoRaMacCryptoGetFCntDown>
}
 80099b0:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80099b2:	2009      	movs	r0, #9
 80099b4:	e7fc      	b.n	80099b0 <GetFCntDown+0x44>
 80099b6:	2009      	movs	r0, #9
 80099b8:	e7fa      	b.n	80099b0 <GetFCntDown+0x44>
 80099ba:	2009      	movs	r0, #9
 80099bc:	e7f8      	b.n	80099b0 <GetFCntDown+0x44>
    switch( addrID )
 80099be:	2005      	movs	r0, #5
 80099c0:	e7f6      	b.n	80099b0 <GetFCntDown+0x44>

080099c2 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80099c2:	2801      	cmp	r0, #1
 80099c4:	d900      	bls.n	80099c8 <RemoveMacCommands+0x6>
 80099c6:	4770      	bx	lr
{
 80099c8:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 80099ca:	2a01      	cmp	r2, #1
 80099cc:	d105      	bne.n	80099da <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 80099ce:	f011 0f20 	tst.w	r1, #32
 80099d2:	d004      	beq.n	80099de <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80099d4:	f003 fa0e 	bl	800cdf4 <LoRaMacCommandsRemoveStickyAnsCmds>
 80099d8:	e001      	b.n	80099de <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80099da:	f003 fa0b 	bl	800cdf4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80099de:	bd08      	pop	{r3, pc}

080099e0 <ProcessMacCommands>:
{
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	b08f      	sub	sp, #60	; 0x3c
 80099e6:	4698      	mov	r8, r3
    uint8_t status = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80099ee:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 80099f2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	f200 82da 	bhi.w	8009fb0 <ProcessMacCommands+0x5d0>
 80099fc:	4605      	mov	r5, r0
 80099fe:	460c      	mov	r4, r1
 8009a00:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 8009a02:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 8009a06:	42bc      	cmp	r4, r7
 8009a08:	f080 82d2 	bcs.w	8009fb0 <ProcessMacCommands+0x5d0>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8009a0c:	5d28      	ldrb	r0, [r5, r4]
 8009a0e:	f003 fa49 	bl	800cea4 <LoRaMacCommandsGetCmdSize>
 8009a12:	4420      	add	r0, r4
 8009a14:	42b8      	cmp	r0, r7
 8009a16:	f300 82cb 	bgt.w	8009fb0 <ProcessMacCommands+0x5d0>
        switch( payload[macIndex++] )
 8009a1a:	1c66      	adds	r6, r4, #1
 8009a1c:	b2f6      	uxtb	r6, r6
 8009a1e:	5d2b      	ldrb	r3, [r5, r4]
 8009a20:	3b02      	subs	r3, #2
 8009a22:	2b11      	cmp	r3, #17
 8009a24:	f200 82c4 	bhi.w	8009fb0 <ProcessMacCommands+0x5d0>
 8009a28:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009a2c:	00280012 	.word	0x00280012
 8009a30:	00c000ad 	.word	0x00c000ad
 8009a34:	011e0106 	.word	0x011e0106
 8009a38:	01740157 	.word	0x01740157
 8009a3c:	02c201c0 	.word	0x02c201c0
 8009a40:	01f002c2 	.word	0x01f002c2
 8009a44:	02c202c2 	.word	0x02c202c2
 8009a48:	02690252 	.word	0x02690252
 8009a4c:	02a20288 	.word	0x02a20288
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8009a50:	2005      	movs	r0, #5
 8009a52:	f003 fb23 	bl	800d09c <LoRaMacConfirmQueueIsCmdActive>
 8009a56:	b908      	cbnz	r0, 8009a5c <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 8009a58:	4634      	mov	r4, r6
 8009a5a:	e7d4      	b.n	8009a06 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009a5c:	2105      	movs	r1, #5
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f003 fad0 	bl	800d004 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009a64:	1ca3      	adds	r3, r4, #2
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	5da9      	ldrb	r1, [r5, r6]
 8009a6a:	4aa7      	ldr	r2, [pc, #668]	; (8009d08 <ProcessMacCommands+0x328>)
 8009a6c:	f882 145c 	strb.w	r1, [r2, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009a70:	3403      	adds	r4, #3
 8009a72:	b2e4      	uxtb	r4, r4
 8009a74:	5ceb      	ldrb	r3, [r5, r3]
 8009a76:	f882 345d 	strb.w	r3, [r2, #1117]	; 0x45d
 8009a7a:	e7c4      	b.n	8009a06 <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8009a82:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8009a86:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8009a8a:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8009a8e:	f1b9 0f00 	cmp.w	r9, #0
 8009a92:	d036      	beq.n	8009b02 <ProcessMacCommands+0x122>
                    macIndex += 4;
 8009a94:	3405      	adds	r4, #5
 8009a96:	b2e4      	uxtb	r4, r4
 8009a98:	e7b5      	b.n	8009a06 <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 8009a9a:	2305      	movs	r3, #5
 8009a9c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009aa0:	e050      	b.n	8009b44 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8009aa2:	4b9a      	ldr	r3, [pc, #616]	; (8009d0c <ProcessMacCommands+0x32c>)
 8009aa4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8009aa8:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8009aac:	4293      	cmp	r3, r2
 8009aae:	da03      	bge.n	8009ab8 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8009ab0:	4b96      	ldr	r3, [pc, #600]	; (8009d0c <ProcessMacCommands+0x32c>)
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	f883 111d 	strb.w	r1, [r3, #285]	; 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8009ab8:	4b94      	ldr	r3, [pc, #592]	; (8009d0c <ProcessMacCommands+0x32c>)
 8009aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8009abe:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8009ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8009ac6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009aca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8009ace:	e04d      	b.n	8009b6c <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8009ad6:	2003      	movs	r0, #3
 8009ad8:	f003 f918 	bl	800cd0c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009adc:	3401      	adds	r4, #1
 8009ade:	b2e4      	uxtb	r4, r4
 8009ae0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009ae4:	498a      	ldr	r1, [pc, #552]	; (8009d10 <ProcessMacCommands+0x330>)
 8009ae6:	fba1 2103 	umull	r2, r1, r1, r3
 8009aea:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 8009aee:	d3ef      	bcc.n	8009ad0 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 8009af0:	4433      	add	r3, r6
 8009af2:	b2de      	uxtb	r6, r3
 8009af4:	1e74      	subs	r4, r6, #1
 8009af6:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 8009af8:	42a7      	cmp	r7, r4
 8009afa:	d93a      	bls.n	8009b72 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8009afc:	5d2b      	ldrb	r3, [r5, r4]
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d136      	bne.n	8009b70 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8009b02:	1e73      	subs	r3, r6, #1
 8009b04:	442b      	add	r3, r5
 8009b06:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009b08:	4b80      	ldr	r3, [pc, #512]	; (8009d0c <ProcessMacCommands+0x32c>)
 8009b0a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8009b0e:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009b12:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 8009b16:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009b1a:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8009b1e:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009b22:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 8009b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009b2a:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8009b2e:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8009b32:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8009b36:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8009b38:	2a00      	cmp	r2, #0
 8009b3a:	d0ae      	beq.n	8009a9a <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009b3c:	1bbb      	subs	r3, r7, r6
 8009b3e:	3301      	adds	r3, #1
 8009b40:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8009b44:	ab05      	add	r3, sp, #20
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	ab03      	add	r3, sp, #12
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	f10d 030b 	add.w	r3, sp, #11
 8009b50:	f10d 020a 	add.w	r2, sp, #10
 8009b54:	a907      	add	r1, sp, #28
 8009b56:	486d      	ldr	r0, [pc, #436]	; (8009d0c <ProcessMacCommands+0x32c>)
 8009b58:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8009b5c:	f004 f8b0 	bl	800dcc0 <RegionLinkAdrReq>
 8009b60:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 8009b64:	f000 0007 	and.w	r0, r0, #7
 8009b68:	2807      	cmp	r0, #7
 8009b6a:	d09a      	beq.n	8009aa2 <ProcessMacCommands+0xc2>
{
 8009b6c:	2400      	movs	r4, #0
 8009b6e:	e7b7      	b.n	8009ae0 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8009b70:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 8009b72:	42bc      	cmp	r4, r7
 8009b74:	d204      	bcs.n	8009b80 <ProcessMacCommands+0x1a0>
                        macIndex--;
 8009b76:	3c01      	subs	r4, #1
 8009b78:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 8009b7a:	f04f 0901 	mov.w	r9, #1
 8009b7e:	e742      	b.n	8009a06 <ProcessMacCommands+0x26>
 8009b80:	f04f 0901 	mov.w	r9, #1
                break;
 8009b84:	e73f      	b.n	8009a06 <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8009b86:	3402      	adds	r4, #2
 8009b88:	b2e4      	uxtb	r4, r4
 8009b8a:	5dab      	ldrb	r3, [r5, r6]
 8009b8c:	f003 030f 	and.w	r3, r3, #15
 8009b90:	495e      	ldr	r1, [pc, #376]	; (8009d0c <ProcessMacCommands+0x32c>)
 8009b92:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8009b96:	2201      	movs	r2, #1
 8009b98:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9c:	f8a1 3120 	strh.w	r3, [r1, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	a90b      	add	r1, sp, #44	; 0x2c
 8009ba4:	2004      	movs	r0, #4
 8009ba6:	f003 f8b1 	bl	800cd0c <LoRaMacCommandsAddCmd>
                break;
 8009baa:	e72c      	b.n	8009a06 <ProcessMacCommands+0x26>
                status = 0x07;
 8009bac:	2307      	movs	r3, #7
 8009bae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8009bb2:	5dab      	ldrb	r3, [r5, r6]
 8009bb4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009bb8:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8009bbc:	57ab      	ldrsb	r3, [r5, r6]
 8009bbe:	f003 030f 	and.w	r3, r3, #15
 8009bc2:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8009bc6:	1ca3      	adds	r3, r4, #2
 8009bc8:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009bca:	1ce1      	adds	r1, r4, #3
 8009bcc:	b2c9      	uxtb	r1, r1
 8009bce:	5ceb      	ldrb	r3, [r5, r3]
 8009bd0:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009bd2:	1d22      	adds	r2, r4, #4
 8009bd4:	b2d2      	uxtb	r2, r2
 8009bd6:	5c69      	ldrb	r1, [r5, r1]
 8009bd8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009bdc:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009bde:	3405      	adds	r4, #5
 8009be0:	b2e4      	uxtb	r4, r4
 8009be2:	5caa      	ldrb	r2, [r5, r2]
 8009be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009be8:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 8009bea:	2264      	movs	r2, #100	; 0x64
 8009bec:	fb02 f303 	mul.w	r3, r2, r3
 8009bf0:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8009bf2:	a907      	add	r1, sp, #28
 8009bf4:	4b45      	ldr	r3, [pc, #276]	; (8009d0c <ProcessMacCommands+0x32c>)
 8009bf6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009bfa:	f004 f87d 	bl	800dcf8 <RegionRxParamSetupReq>
 8009bfe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8009c02:	f000 0307 	and.w	r3, r0, #7
 8009c06:	2b07      	cmp	r3, #7
 8009c08:	d007      	beq.n	8009c1a <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 8009c0a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8009c0e:	2201      	movs	r2, #1
 8009c10:	a90b      	add	r1, sp, #44	; 0x2c
 8009c12:	2005      	movs	r0, #5
 8009c14:	f003 f87a 	bl	800cd0c <LoRaMacCommandsAddCmd>
                break;
 8009c18:	e6f5      	b.n	8009a06 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8009c1a:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8009c1e:	4b3b      	ldr	r3, [pc, #236]	; (8009d0c <ProcessMacCommands+0x32c>)
 8009c20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8009c24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8009c28:	9a08      	ldr	r2, [sp, #32]
 8009c2a:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8009c2c:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8009c2e:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8009c32:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8009c36:	e7e8      	b.n	8009c0a <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8009c38:	4b33      	ldr	r3, [pc, #204]	; (8009d08 <ProcessMacCommands+0x328>)
 8009c3a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009c3e:	b17b      	cbz	r3, 8009c60 <ProcessMacCommands+0x280>
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	b17b      	cbz	r3, 8009c64 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8009c44:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8009c46:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8009c4a:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 8009c4e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8009c52:	2202      	movs	r2, #2
 8009c54:	a90b      	add	r1, sp, #44	; 0x2c
 8009c56:	2006      	movs	r0, #6
 8009c58:	f003 f858 	bl	800cd0c <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8009c5c:	4634      	mov	r4, r6
                break;
 8009c5e:	e6d2      	b.n	8009a06 <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8009c60:	20ff      	movs	r0, #255	; 0xff
 8009c62:	e7f0      	b.n	8009c46 <ProcessMacCommands+0x266>
 8009c64:	20ff      	movs	r0, #255	; 0xff
 8009c66:	e7ee      	b.n	8009c46 <ProcessMacCommands+0x266>
                status = 0x03;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8009c6e:	1ca3      	adds	r3, r4, #2
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	57aa      	ldrsb	r2, [r5, r6]
 8009c74:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8009c78:	aa07      	add	r2, sp, #28
 8009c7a:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009c7c:	1ce2      	adds	r2, r4, #3
 8009c7e:	b2d2      	uxtb	r2, r2
 8009c80:	5ceb      	ldrb	r3, [r5, r3]
 8009c82:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009c84:	1d21      	adds	r1, r4, #4
 8009c86:	b2c9      	uxtb	r1, r1
 8009c88:	5caa      	ldrb	r2, [r5, r2]
 8009c8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c8e:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009c90:	1d62      	adds	r2, r4, #5
 8009c92:	b2d2      	uxtb	r2, r2
 8009c94:	5c69      	ldrb	r1, [r5, r1]
 8009c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009c9a:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8009c9c:	2164      	movs	r1, #100	; 0x64
 8009c9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ca2:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8009ca8:	3406      	adds	r4, #6
 8009caa:	b2e4      	uxtb	r4, r4
 8009cac:	56ab      	ldrsb	r3, [r5, r2]
 8009cae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8009cb2:	a905      	add	r1, sp, #20
 8009cb4:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <ProcessMacCommands+0x32c>)
 8009cb6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009cba:	f004 f82c 	bl	800dd16 <RegionNewChannelReq>
 8009cbe:	b2c3      	uxtb	r3, r0
 8009cc0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	f6ff ae9e 	blt.w	8009a06 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8009cca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8009cce:	2201      	movs	r2, #1
 8009cd0:	a90b      	add	r1, sp, #44	; 0x2c
 8009cd2:	2007      	movs	r0, #7
 8009cd4:	f003 f81a 	bl	800cd0c <LoRaMacCommandsAddCmd>
                break;
 8009cd8:	e695      	b.n	8009a06 <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009cda:	3402      	adds	r4, #2
 8009cdc:	b2e4      	uxtb	r4, r4
 8009cde:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 8009ce0:	f013 030f 	ands.w	r3, r3, #15
 8009ce4:	d100      	bne.n	8009ce8 <ProcessMacCommands+0x308>
                    delay++;
 8009ce6:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8009ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cec:	fb02 f303 	mul.w	r3, r2, r3
 8009cf0:	4a06      	ldr	r2, [pc, #24]	; (8009d0c <ProcessMacCommands+0x32c>)
 8009cf2:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009cf4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8009cf8:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	a90b      	add	r1, sp, #44	; 0x2c
 8009cfe:	2008      	movs	r0, #8
 8009d00:	f003 f804 	bl	800cd0c <LoRaMacCommandsAddCmd>
                break;
 8009d04:	e67f      	b.n	8009a06 <ProcessMacCommands+0x26>
 8009d06:	bf00      	nop
 8009d08:	200006f0 	.word	0x200006f0
 8009d0c:	20008000 	.word	0x20008000
 8009d10:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8009d14:	3402      	adds	r4, #2
 8009d16:	b2e4      	uxtb	r4, r4
 8009d18:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8009d20:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009d24:	f013 0f20 	tst.w	r3, #32
 8009d28:	d002      	beq.n	8009d30 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8009d30:	f013 0f10 	tst.w	r3, #16
 8009d34:	d002      	beq.n	8009d3c <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 8009d36:	2201      	movs	r2, #1
 8009d38:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009d3c:	f003 030f 	and.w	r3, r3, #15
 8009d40:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8009d44:	a903      	add	r1, sp, #12
 8009d46:	4b9c      	ldr	r3, [pc, #624]	; (8009fb8 <ProcessMacCommands+0x5d8>)
 8009d48:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009d4c:	f003 fff2 	bl	800dd34 <RegionTxParamSetupReq>
 8009d50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009d54:	f43f ae57 	beq.w	8009a06 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8009d58:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8009d5c:	4e96      	ldr	r6, [pc, #600]	; (8009fb8 <ProcessMacCommands+0x5d8>)
 8009d5e:	f886 a07c 	strb.w	sl, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8009d62:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009d66:	f886 307d 	strb.w	r3, [r6, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009d6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8009d6e:	4a93      	ldr	r2, [pc, #588]	; (8009fbc <ProcessMacCommands+0x5dc>)
 8009d70:	5cd0      	ldrb	r0, [r2, r3]
 8009d72:	f7f6 fd2b 	bl	80007cc <__aeabi_ui2f>
 8009d76:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009d80:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009d84:	a907      	add	r1, sp, #28
 8009d86:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 8009d8a:	f003 ff01 	bl	800db90 <RegionGetPhyParam>
 8009d8e:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009d90:	b240      	sxtb	r0, r0
 8009d92:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8009d96:	4298      	cmp	r0, r3
 8009d98:	bfb8      	it	lt
 8009d9a:	4618      	movlt	r0, r3
 8009d9c:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8009da0:	2200      	movs	r2, #0
 8009da2:	a90b      	add	r1, sp, #44	; 0x2c
 8009da4:	2009      	movs	r0, #9
 8009da6:	f002 ffb1 	bl	800cd0c <LoRaMacCommandsAddCmd>
                break;
 8009daa:	e62c      	b.n	8009a06 <ProcessMacCommands+0x26>
                status = 0x03;
 8009dac:	2303      	movs	r3, #3
 8009dae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8009db2:	1ca3      	adds	r3, r4, #2
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	5daa      	ldrb	r2, [r5, r6]
 8009db8:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009dbc:	1ce1      	adds	r1, r4, #3
 8009dbe:	b2c9      	uxtb	r1, r1
 8009dc0:	5ceb      	ldrb	r3, [r5, r3]
 8009dc2:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009dc4:	1d22      	adds	r2, r4, #4
 8009dc6:	b2d2      	uxtb	r2, r2
 8009dc8:	5c69      	ldrb	r1, [r5, r1]
 8009dca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009dce:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009dd0:	3405      	adds	r4, #5
 8009dd2:	b2e4      	uxtb	r4, r4
 8009dd4:	5caa      	ldrb	r2, [r5, r2]
 8009dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dda:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 8009ddc:	2264      	movs	r2, #100	; 0x64
 8009dde:	fb02 f303 	mul.w	r3, r2, r3
 8009de2:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8009de4:	a907      	add	r1, sp, #28
 8009de6:	4b74      	ldr	r3, [pc, #464]	; (8009fb8 <ProcessMacCommands+0x5d8>)
 8009de8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009dec:	f003 ffb1 	bl	800dd52 <RegionDlChannelReq>
 8009df0:	b2c3      	uxtb	r3, r0
 8009df2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f6ff ae05 	blt.w	8009a06 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8009dfc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009e00:	2201      	movs	r2, #1
 8009e02:	a90b      	add	r1, sp, #44	; 0x2c
 8009e04:	200a      	movs	r0, #10
 8009e06:	f002 ff81 	bl	800cd0c <LoRaMacCommandsAddCmd>
                break;
 8009e0a:	e5fc      	b.n	8009a06 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8009e0c:	2009      	movs	r0, #9
 8009e0e:	f003 f945 	bl	800d09c <LoRaMacConfirmQueueIsCmdActive>
 8009e12:	b928      	cbnz	r0, 8009e20 <ProcessMacCommands+0x440>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009e14:	4b6a      	ldr	r3, [pc, #424]	; (8009fc0 <ProcessMacCommands+0x5e0>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
        switch( payload[macIndex++] )
 8009e1c:	4634      	mov	r4, r6
 8009e1e:	e5f2      	b.n	8009a06 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8009e20:	2109      	movs	r1, #9
 8009e22:	2000      	movs	r0, #0
 8009e24:	f003 f8ee 	bl	800d004 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8009e28:	a903      	add	r1, sp, #12
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	9303      	str	r3, [sp, #12]
 8009e2e:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 8009e30:	f10d 0a14 	add.w	sl, sp, #20
 8009e34:	9305      	str	r3, [sp, #20]
 8009e36:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 8009e38:	f10d 0b1c 	add.w	fp, sp, #28
 8009e3c:	9307      	str	r3, [sp, #28]
 8009e3e:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009e40:	1ca0      	adds	r0, r4, #2
 8009e42:	b2c0      	uxtb	r0, r0
 8009e44:	5dab      	ldrb	r3, [r5, r6]
 8009e46:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8009e48:	1ce2      	adds	r2, r4, #3
 8009e4a:	b2d2      	uxtb	r2, r2
 8009e4c:	5c28      	ldrb	r0, [r5, r0]
 8009e4e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8009e52:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009e54:	1d20      	adds	r0, r4, #4
 8009e56:	b2c0      	uxtb	r0, r0
 8009e58:	5caa      	ldrb	r2, [r5, r2]
 8009e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e5e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009e60:	1d62      	adds	r2, r4, #5
 8009e62:	b2d2      	uxtb	r2, r2
 8009e64:	5c28      	ldrb	r0, [r5, r0]
 8009e66:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8009e6a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009e6c:	3406      	adds	r4, #6
 8009e6e:	b2e4      	uxtb	r4, r4
 8009e70:	5caa      	ldrb	r2, [r5, r2]
 8009e72:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009e76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009e7a:	fb00 f202 	mul.w	r2, r0, r2
 8009e7e:	0a12      	lsrs	r2, r2, #8
 8009e80:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8009e84:	c903      	ldmia	r1, {r0, r1}
 8009e86:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8009e8a:	4a4e      	ldr	r2, [pc, #312]	; (8009fc4 <ProcessMacCommands+0x5e4>)
 8009e8c:	441a      	add	r2, r3
 8009e8e:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8009e90:	4658      	mov	r0, fp
 8009e92:	f009 f891 	bl	8012fb8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8009e96:	4e4a      	ldr	r6, [pc, #296]	; (8009fc0 <ProcessMacCommands+0x5e0>)
 8009e98:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 8009ea2:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8009ea6:	a80c      	add	r0, sp, #48	; 0x30
 8009ea8:	f009 f845 	bl	8012f36 <SysTimeSub>
 8009eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eb2:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8009eb6:	4650      	mov	r0, sl
 8009eb8:	f009 f81e 	bl	8012ef8 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8009ebc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8009ec0:	f009 f858 	bl	8012f74 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8009ec4:	f002 fe88 	bl	800cbd8 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
 8009ece:	e59a      	b.n	8009a06 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8009ed0:	200c      	movs	r0, #12
 8009ed2:	f003 f8e3 	bl	800d09c <LoRaMacConfirmQueueIsCmdActive>
 8009ed6:	b908      	cbnz	r0, 8009edc <ProcessMacCommands+0x4fc>
        switch( payload[macIndex++] )
 8009ed8:	4634      	mov	r4, r6
 8009eda:	e594      	b.n	8009a06 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8009edc:	210c      	movs	r1, #12
 8009ede:	2000      	movs	r0, #0
 8009ee0:	f003 f890 	bl	800d004 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8009ee4:	4b36      	ldr	r3, [pc, #216]	; (8009fc0 <ProcessMacCommands+0x5e0>)
 8009ee6:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8009eea:	3b04      	subs	r3, #4
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d801      	bhi.n	8009ef6 <ProcessMacCommands+0x516>
        switch( payload[macIndex++] )
 8009ef2:	4634      	mov	r4, r6
 8009ef4:	e587      	b.n	8009a06 <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 8009ef6:	f002 fe6b 	bl	800cbd0 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8009efa:	4634      	mov	r4, r6
 8009efc:	e583      	b.n	8009a06 <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 8009efe:	1ca2      	adds	r2, r4, #2
 8009f00:	b2d2      	uxtb	r2, r2
 8009f02:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009f04:	1ce1      	adds	r1, r4, #3
 8009f06:	b2c9      	uxtb	r1, r1
 8009f08:	5caa      	ldrb	r2, [r5, r2]
 8009f0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009f0e:	1d22      	adds	r2, r4, #4
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	5c69      	ldrb	r1, [r5, r1]
 8009f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8009f18:	3405      	adds	r4, #5
 8009f1a:	b2e4      	uxtb	r4, r4
 8009f1c:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8009f1e:	2164      	movs	r1, #100	; 0x64
 8009f20:	fb03 f101 	mul.w	r1, r3, r1
 8009f24:	f000 000f 	and.w	r0, r0, #15
 8009f28:	f002 fe53 	bl	800cbd2 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8009f2c:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8009f30:	2201      	movs	r2, #1
 8009f32:	a90b      	add	r1, sp, #44	; 0x2c
 8009f34:	2011      	movs	r0, #17
 8009f36:	f002 fee9 	bl	800cd0c <LoRaMacCommandsAddCmd>
                break;
 8009f3a:	e564      	b.n	8009a06 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8009f3c:	200d      	movs	r0, #13
 8009f3e:	f003 f8ad 	bl	800d09c <LoRaMacConfirmQueueIsCmdActive>
 8009f42:	b908      	cbnz	r0, 8009f48 <ProcessMacCommands+0x568>
        switch( payload[macIndex++] )
 8009f44:	4634      	mov	r4, r6
 8009f46:	e55e      	b.n	8009a06 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8009f48:	210d      	movs	r1, #13
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	f003 f85a 	bl	800d004 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8009f50:	1ca2      	adds	r2, r4, #2
 8009f52:	b2d2      	uxtb	r2, r2
 8009f54:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8009f56:	1ce3      	adds	r3, r4, #3
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8009f5c:	3404      	adds	r4, #4
 8009f5e:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009f60:	4a19      	ldr	r2, [pc, #100]	; (8009fc8 <ProcessMacCommands+0x5e8>)
 8009f62:	6812      	ldr	r2, [r2, #0]
 8009f64:	5ce9      	ldrb	r1, [r5, r3]
 8009f66:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8009f6a:	f002 fe34 	bl	800cbd6 <LoRaMacClassBBeaconTimingAns>
 8009f6e:	e54a      	b.n	8009a06 <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 8009f70:	1ca1      	adds	r1, r4, #2
 8009f72:	b2c9      	uxtb	r1, r1
 8009f74:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009f76:	1ce2      	adds	r2, r4, #3
 8009f78:	b2d2      	uxtb	r2, r2
 8009f7a:	5c69      	ldrb	r1, [r5, r1]
 8009f7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009f80:	3404      	adds	r4, #4
 8009f82:	b2e4      	uxtb	r4, r4
 8009f84:	5caa      	ldrb	r2, [r5, r2]
 8009f86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8009f8a:	2064      	movs	r0, #100	; 0x64
 8009f8c:	fb03 f000 	mul.w	r0, r3, r0
 8009f90:	f002 fe23 	bl	800cbda <LoRaMacClassBBeaconFreqReq>
 8009f94:	b140      	cbz	r0, 8009fa8 <ProcessMacCommands+0x5c8>
                        macCmdPayload[0] = 1;
 8009f96:	2301      	movs	r3, #1
 8009f98:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	a90b      	add	r1, sp, #44	; 0x2c
 8009fa0:	2013      	movs	r0, #19
 8009fa2:	f002 feb3 	bl	800cd0c <LoRaMacCommandsAddCmd>
                break;
 8009fa6:	e52e      	b.n	8009a06 <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8009fae:	e7f5      	b.n	8009f9c <ProcessMacCommands+0x5bc>
}
 8009fb0:	b00f      	add	sp, #60	; 0x3c
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	bf00      	nop
 8009fb8:	20008000 	.word	0x20008000
 8009fbc:	08013eb4 	.word	0x08013eb4
 8009fc0:	200006f0 	.word	0x200006f0
 8009fc4:	12d53d80 	.word	0x12d53d80
 8009fc8:	20000c9c 	.word	0x20000c9c

08009fcc <ProcessRadioRxDone>:
{
 8009fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fd0:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 8009fd2:	4ba5      	ldr	r3, [pc, #660]	; (800a268 <ProcessRadioRxDone+0x29c>)
 8009fd4:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8009fd6:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8009fd8:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8009fdc:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8009fe4:	4aa1      	ldr	r2, [pc, #644]	; (800a26c <ProcessRadioRxDone+0x2a0>)
 8009fe6:	f8d2 90e4 	ldr.w	r9, [r2, #228]	; 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8009fea:	4aa1      	ldr	r2, [pc, #644]	; (800a270 <ProcessRadioRxDone+0x2a4>)
 8009fec:	7811      	ldrb	r1, [r2, #0]
 8009fee:	f363 0100 	bfi	r1, r3, #0, #1
 8009ff2:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 8009ff4:	4c9f      	ldr	r4, [pc, #636]	; (800a274 <ProcessRadioRxDone+0x2a8>)
 8009ff6:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8009ffa:	f8a4 848c 	strh.w	r8, [r4, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 8009ffe:	f884 748e 	strb.w	r7, [r4, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800a002:	f894 2490 	ldrb.w	r2, [r4, #1168]	; 0x490
 800a006:	f884 248f 	strb.w	r2, [r4, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800a00a:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800a00e:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800a012:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800a016:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800a01a:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800a01e:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800a022:	f884 342e 	strb.w	r3, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a026:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a02a:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800a02e:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a032:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800a036:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 800a03a:	4b8f      	ldr	r3, [pc, #572]	; (800a278 <ProcessRadioRxDone+0x2ac>)
 800a03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03e:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800a040:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800a044:	b1d3      	cbz	r3, 800a07c <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a046:	4629      	mov	r1, r5
 800a048:	4630      	mov	r0, r6
 800a04a:	f002 fdae 	bl	800cbaa <LoRaMacClassBRxBeacon>
 800a04e:	b9d0      	cbnz	r0, 800a086 <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a050:	4b86      	ldr	r3, [pc, #536]	; (800a26c <ProcessRadioRxDone+0x2a0>)
 800a052:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a056:	2b01      	cmp	r3, #1
 800a058:	d01d      	beq.n	800a096 <ProcessRadioRxDone+0xca>
    if( size == 0 )
 800a05a:	2d00      	cmp	r5, #0
 800a05c:	d038      	beq.n	800a0d0 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 800a05e:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800a060:	0963      	lsrs	r3, r4, #5
 800a062:	3b01      	subs	r3, #1
 800a064:	2b06      	cmp	r3, #6
 800a066:	f200 82fd 	bhi.w	800a664 <ProcessRadioRxDone+0x698>
 800a06a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a06e:	0038      	.short	0x0038
 800a070:	00d102fb 	.word	0x00d102fb
 800a074:	00cd02fb 	.word	0x00cd02fb
 800a078:	02cd02fb 	.word	0x02cd02fb
        TimerStop( &MacCtx.RxWindowTimer2 );
 800a07c:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a080:	f009 f888 	bl	8013194 <UTIL_TIMER_Stop>
 800a084:	e7df      	b.n	800a046 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a086:	4b7b      	ldr	r3, [pc, #492]	; (800a274 <ProcessRadioRxDone+0x2a8>)
 800a088:	f8a3 847e 	strh.w	r8, [r3, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a08c:	f883 7480 	strb.w	r7, [r3, #1152]	; 0x480
}
 800a090:	b025      	add	sp, #148	; 0x94
 800a092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a096:	f002 fd8c 	bl	800cbb2 <LoRaMacClassBIsPingExpected>
 800a09a:	b150      	cbz	r0, 800a0b2 <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a09c:	2000      	movs	r0, #0
 800a09e:	f002 fd7d 	bl	800cb9c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	f002 fd7f 	bl	800cba6 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a0a8:	4b72      	ldr	r3, [pc, #456]	; (800a274 <ProcessRadioRxDone+0x2a8>)
 800a0aa:	2204      	movs	r2, #4
 800a0ac:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800a0b0:	e7d3      	b.n	800a05a <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a0b2:	f002 fd80 	bl	800cbb6 <LoRaMacClassBIsMulticastExpected>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d0cf      	beq.n	800a05a <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	f002 fd6f 	bl	800cb9e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	f002 fd71 	bl	800cba8 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a0c6:	4b6b      	ldr	r3, [pc, #428]	; (800a274 <ProcessRadioRxDone+0x2a8>)
 800a0c8:	2205      	movs	r2, #5
 800a0ca:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800a0ce:	e7c4      	b.n	800a05a <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a0d0:	4b68      	ldr	r3, [pc, #416]	; (800a274 <ProcessRadioRxDone+0x2a8>)
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800a0d8:	f7ff fc0a 	bl	80098f0 <PrepareRxDoneAbort>
        return;
 800a0dc:	e7d8      	b.n	800a090 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800a0de:	2d10      	cmp	r5, #16
 800a0e0:	d92e      	bls.n	800a140 <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 800a0e2:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 800a0e4:	b2ed      	uxtb	r5, r5
 800a0e6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a0ea:	4b60      	ldr	r3, [pc, #384]	; (800a26c <ProcessRadioRxDone+0x2a0>)
 800a0ec:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a0f0:	bb6b      	cbnz	r3, 800a14e <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 800a0f2:	a804      	add	r0, sp, #16
 800a0f4:	f006 fd02 	bl	8010afc <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800a0f8:	aa08      	add	r2, sp, #32
 800a0fa:	a904      	add	r1, sp, #16
 800a0fc:	20ff      	movs	r0, #255	; 0xff
 800a0fe:	f003 fb49 	bl	800d794 <LoRaMacCryptoHandleJoinAccept>
 800a102:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a104:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800a108:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a10c:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a110:	4b56      	ldr	r3, [pc, #344]	; (800a26c <ProcessRadioRxDone+0x2a0>)
 800a112:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a116:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800a11a:	2207      	movs	r2, #7
 800a11c:	a903      	add	r1, sp, #12
 800a11e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a122:	f003 fd69 	bl	800dbf8 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800a126:	b904      	cbnz	r4, 800a12a <ProcessRadioRxDone+0x15e>
 800a128:	b9c0      	cbnz	r0, 800a15c <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a12a:	2001      	movs	r0, #1
 800a12c:	f002 ffb6 	bl	800d09c <LoRaMacConfirmQueueIsCmdActive>
 800a130:	2800      	cmp	r0, #0
 800a132:	f000 8283 	beq.w	800a63c <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a136:	2101      	movs	r1, #1
 800a138:	2007      	movs	r0, #7
 800a13a:	f002 ff63 	bl	800d004 <LoRaMacConfirmQueueSetStatus>
 800a13e:	e27d      	b.n	800a63c <ProcessRadioRxDone+0x670>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a140:	4b4c      	ldr	r3, [pc, #304]	; (800a274 <ProcessRadioRxDone+0x2a8>)
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a148:	f7ff fbd2 	bl	80098f0 <PrepareRxDoneAbort>
                return;
 800a14c:	e7a0      	b.n	800a090 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a14e:	4b49      	ldr	r3, [pc, #292]	; (800a274 <ProcessRadioRxDone+0x2a8>)
 800a150:	2201      	movs	r2, #1
 800a152:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a156:	f7ff fbcb 	bl	80098f0 <PrepareRxDoneAbort>
                return;
 800a15a:	e799      	b.n	800a090 <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a15c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800a160:	4c42      	ldr	r4, [pc, #264]	; (800a26c <ProcessRadioRxDone+0x2a0>)
 800a162:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a166:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 800a16a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a16e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a172:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 800a176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a17a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800a17e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a180:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800a184:	2002      	movs	r0, #2
 800a186:	f006 fcc7 	bl	8010b18 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a18a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800a18e:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800a192:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a196:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a19a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a19e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a1a2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800a1a6:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800a1a8:	b90b      	cbnz	r3, 800a1ae <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800a1ae:	4c2f      	ldr	r4, [pc, #188]	; (800a26c <ProcessRadioRxDone+0x2a0>)
 800a1b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1b6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ba:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a1bc:	4413      	add	r3, r2
 800a1be:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800a1c0:	2601      	movs	r6, #1
 800a1c2:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a1cc:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800a1d0:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 800a1d2:	3d11      	subs	r5, #17
 800a1d4:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 800a1d8:	4b26      	ldr	r3, [pc, #152]	; (800a274 <ProcessRadioRxDone+0x2a8>)
 800a1da:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800a1de:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800a1e2:	a921      	add	r1, sp, #132	; 0x84
 800a1e4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a1e8:	f003 fd16 	bl	800dc18 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f002 ff52 	bl	800d09c <LoRaMacConfirmQueueIsCmdActive>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	f000 821f 	beq.w	800a63c <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800a1fe:	4631      	mov	r1, r6
 800a200:	2000      	movs	r0, #0
 800a202:	f002 feff 	bl	800d004 <LoRaMacConfirmQueueSetStatus>
 800a206:	e219      	b.n	800a63c <ProcessRadioRxDone+0x670>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a208:	4b1a      	ldr	r3, [pc, #104]	; (800a274 <ProcessRadioRxDone+0x2a8>)
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a210:	4b16      	ldr	r3, [pc, #88]	; (800a26c <ProcessRadioRxDone+0x2a0>)
 800a212:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a216:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a21a:	4a16      	ldr	r2, [pc, #88]	; (800a274 <ProcessRadioRxDone+0x2a8>)
 800a21c:	f992 2424 	ldrsb.w	r2, [r2, #1060]	; 0x424
 800a220:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800a224:	220d      	movs	r2, #13
 800a226:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800a22a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a22e:	b113      	cbz	r3, 800a236 <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800a230:	230e      	movs	r3, #14
 800a232:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a236:	a91f      	add	r1, sp, #124	; 0x7c
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <ProcessRadioRxDone+0x2a0>)
 800a23a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a23e:	f003 fca7 	bl	800db90 <RegionGetPhyParam>
 800a242:	901e      	str	r0, [sp, #120]	; 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a244:	f1a5 030d 	sub.w	r3, r5, #13
 800a248:	b21b      	sxth	r3, r3
 800a24a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a24e:	b200      	sxth	r0, r0
 800a250:	4283      	cmp	r3, r0
 800a252:	dc01      	bgt.n	800a258 <ProcessRadioRxDone+0x28c>
 800a254:	2d0b      	cmp	r5, #11
 800a256:	d811      	bhi.n	800a27c <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a258:	4b06      	ldr	r3, [pc, #24]	; (800a274 <ProcessRadioRxDone+0x2a8>)
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a260:	f7ff fb46 	bl	80098f0 <PrepareRxDoneAbort>
                return;
 800a264:	e714      	b.n	800a090 <ProcessRadioRxDone+0xc4>
 800a266:	bf00      	nop
 800a268:	20000c9c 	.word	0x20000c9c
 800a26c:	20008000 	.word	0x20008000
 800a270:	200006ec 	.word	0x200006ec
 800a274:	200006f0 	.word	0x200006f0
 800a278:	0801458c 	.word	0x0801458c
            macMsgData.Buffer = payload;
 800a27c:	9612      	str	r6, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 800a27e:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a282:	4ba5      	ldr	r3, [pc, #660]	; (800a518 <ProcessRadioRxDone+0x54c>)
 800a284:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a286:	23ff      	movs	r3, #255	; 0xff
 800a288:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a28c:	a812      	add	r0, sp, #72	; 0x48
 800a28e:	f003 fb4f 	bl	800d930 <LoRaMacParserData>
 800a292:	2800      	cmp	r0, #0
 800a294:	d142      	bne.n	800a31c <ProcessRadioRxDone+0x350>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a296:	4ba1      	ldr	r3, [pc, #644]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a298:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d044      	beq.n	800a32a <ProcessRadioRxDone+0x35e>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a2a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a2a2:	4b9f      	ldr	r3, [pc, #636]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a2a4:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800a2a8:	a904      	add	r1, sp, #16
 800a2aa:	a812      	add	r0, sp, #72	; 0x48
 800a2ac:	f7ff f996 	bl	80095dc <DetermineFrameType>
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d164      	bne.n	800a380 <ProcessRadioRxDone+0x3b4>
            downLinkCounter = 0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d066      	beq.n	800a38e <ProcessRadioRxDone+0x3c2>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a2c0:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a2c2:	2d01      	cmp	r5, #1
 800a2c4:	d10a      	bne.n	800a2dc <ProcessRadioRxDone+0x310>
 800a2c6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	f040 808e 	bne.w	800a3ec <ProcessRadioRxDone+0x420>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800a2d0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800a2d4:	f013 0f60 	tst.w	r3, #96	; 0x60
 800a2d8:	f040 8088 	bne.w	800a3ec <ProcessRadioRxDone+0x420>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800a2dc:	ab07      	add	r3, sp, #28
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	f10d 031b 	add.w	r3, sp, #27
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	4b8d      	ldr	r3, [pc, #564]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a2e8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800a2ec:	aa12      	add	r2, sp, #72	; 0x48
 800a2ee:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7ff fb3a 	bl	800996c <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	f000 8083 	beq.w	800a404 <ProcessRadioRxDone+0x438>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a2fe:	2807      	cmp	r0, #7
 800a300:	d07b      	beq.n	800a3fa <ProcessRadioRxDone+0x42e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a302:	4b87      	ldr	r3, [pc, #540]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a304:	2201      	movs	r2, #1
 800a306:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a30a:	9a07      	ldr	r2, [sp, #28]
 800a30c:	4b84      	ldr	r3, [pc, #528]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a30e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a312:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800a316:	f7ff faeb 	bl	80098f0 <PrepareRxDoneAbort>
                return;
 800a31a:	e6b9      	b.n	800a090 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a31c:	4b80      	ldr	r3, [pc, #512]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a324:	f7ff fae4 	bl	80098f0 <PrepareRxDoneAbort>
                return;
 800a328:	e6b2      	b.n	800a090 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800a32a:	f002 fc42 	bl	800cbb2 <LoRaMacClassBIsPingExpected>
 800a32e:	b188      	cbz	r0, 800a354 <ProcessRadioRxDone+0x388>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a330:	2000      	movs	r0, #0
 800a332:	f002 fc33 	bl	800cb9c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800a336:	2000      	movs	r0, #0
 800a338:	f002 fc35 	bl	800cba6 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a33c:	4b78      	ldr	r3, [pc, #480]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a33e:	2204      	movs	r2, #4
 800a340:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a344:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800a348:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800a34c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a34e:	f002 fc49 	bl	800cbe4 <LoRaMacClassBSetFPendingBit>
 800a352:	e7a5      	b.n	800a2a0 <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a354:	f002 fc2f 	bl	800cbb6 <LoRaMacClassBIsMulticastExpected>
 800a358:	2800      	cmp	r0, #0
 800a35a:	d0a1      	beq.n	800a2a0 <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a35c:	2000      	movs	r0, #0
 800a35e:	f002 fc1e 	bl	800cb9e <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a362:	2000      	movs	r0, #0
 800a364:	f002 fc20 	bl	800cba8 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a368:	4b6d      	ldr	r3, [pc, #436]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a36a:	2205      	movs	r2, #5
 800a36c:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800a370:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800a374:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800a378:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a37a:	f002 fc33 	bl	800cbe4 <LoRaMacClassBSetFPendingBit>
 800a37e:	e78f      	b.n	800a2a0 <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a380:	4b67      	ldr	r3, [pc, #412]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a388:	f7ff fab2 	bl	80098f0 <PrepareRxDoneAbort>
                return;
 800a38c:	e680      	b.n	800a090 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a38e:	4618      	mov	r0, r3
 800a390:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800a394:	4a61      	ldr	r2, [pc, #388]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a396:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a39a:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800a39e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a3a0:	428a      	cmp	r2, r1
 800a3a2:	d002      	beq.n	800a3aa <ProcessRadioRxDone+0x3de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	e788      	b.n	800a2bc <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a3aa:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800a3ae:	495b      	ldr	r1, [pc, #364]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a3b0:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800a3b4:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a3b8:	2900      	cmp	r1, #0
 800a3ba:	d0f3      	beq.n	800a3a4 <ProcessRadioRxDone+0x3d8>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800a3bc:	4b57      	ldr	r3, [pc, #348]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a3be:	2130      	movs	r1, #48	; 0x30
 800a3c0:	fb01 3000 	mla	r0, r1, r0, r3
 800a3c4:	f890 60ea 	ldrb.w	r6, [r0, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800a3c8:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800a3cc:	6809      	ldr	r1, [r1, #0]
 800a3ce:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a3d0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d002      	beq.n	800a3de <ProcessRadioRxDone+0x412>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a3d8:	4691      	mov	r9, r2
                    multicast = 1;
 800a3da:	2501      	movs	r5, #1
 800a3dc:	e771      	b.n	800a2c2 <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a3de:	4b50      	ldr	r3, [pc, #320]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a3e0:	2103      	movs	r1, #3
 800a3e2:	f883 148f 	strb.w	r1, [r3, #1167]	; 0x48f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800a3e6:	4691      	mov	r9, r2
                    multicast = 1;
 800a3e8:	2501      	movs	r5, #1
 800a3ea:	e76a      	b.n	800a2c2 <ProcessRadioRxDone+0x2f6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a3ec:	4b4c      	ldr	r3, [pc, #304]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a3f4:	f7ff fa7c 	bl	80098f0 <PrepareRxDoneAbort>
                return;
 800a3f8:	e64a      	b.n	800a090 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a3fa:	4b49      	ldr	r3, [pc, #292]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a3fc:	2208      	movs	r2, #8
 800a3fe:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800a402:	e782      	b.n	800a30a <ProcessRadioRxDone+0x33e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a404:	ab12      	add	r3, sp, #72	; 0x48
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	9b07      	ldr	r3, [sp, #28]
 800a40a:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800a40e:	4649      	mov	r1, r9
 800a410:	4630      	mov	r0, r6
 800a412:	f003 f917 	bl	800d644 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a416:	2800      	cmp	r0, #0
 800a418:	d14a      	bne.n	800a4b0 <ProcessRadioRxDone+0x4e4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a41a:	4b41      	ldr	r3, [pc, #260]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a41c:	2100      	movs	r1, #0
 800a41e:	f883 1421 	strb.w	r1, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800a422:	f883 5422 	strb.w	r5, [r3, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800a426:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800a42a:	f883 142c 	strb.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a42e:	9a07      	ldr	r2, [sp, #28]
 800a430:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800a434:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a438:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800a43c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800a440:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a444:	f883 1441 	strb.w	r1, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a448:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800a44c:	f893 048f 	ldrb.w	r0, [r3, #1167]	; 0x48f
 800a450:	2801      	cmp	r0, #1
 800a452:	d93b      	bls.n	800a4cc <ProcessRadioRxDone+0x500>
            if( multicast == 1 )
 800a454:	2d01      	cmp	r5, #1
 800a456:	d03f      	beq.n	800a4d8 <ProcessRadioRxDone+0x50c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a458:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800a45c:	2ca0      	cmp	r4, #160	; 0xa0
 800a45e:	d040      	beq.n	800a4e2 <ProcessRadioRxDone+0x516>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800a460:	2300      	movs	r3, #0
 800a462:	4a2e      	ldr	r2, [pc, #184]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a464:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a468:	4a2d      	ldr	r2, [pc, #180]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a46a:	f882 3420 	strb.w	r3, [r2, #1056]	; 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800a46e:	4b2b      	ldr	r3, [pc, #172]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a470:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a474:	b923      	cbnz	r3, 800a480 <ProcessRadioRxDone+0x4b4>
 800a476:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800a47a:	f013 0f10 	tst.w	r3, #16
 800a47e:	d007      	beq.n	800a490 <ProcessRadioRxDone+0x4c4>
 800a480:	4b26      	ldr	r3, [pc, #152]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a482:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a486:	b91b      	cbnz	r3, 800a490 <ProcessRadioRxDone+0x4c4>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800a488:	4b25      	ldr	r3, [pc, #148]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a490:	4b23      	ldr	r3, [pc, #140]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a492:	f893 2440 	ldrb.w	r2, [r3, #1088]	; 0x440
 800a496:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800a49a:	f7ff fa92 	bl	80099c2 <RemoveMacCommands>
            switch( fType )
 800a49e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	f200 8099 	bhi.w	800a5da <ProcessRadioRxDone+0x60e>
 800a4a8:	e8df f003 	tbb	[pc, r3]
 800a4ac:	8777653e 	.word	0x8777653e
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800a4b0:	2802      	cmp	r0, #2
 800a4b2:	d006      	beq.n	800a4c2 <ProcessRadioRxDone+0x4f6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a4b4:	4b1a      	ldr	r3, [pc, #104]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a4b6:	220b      	movs	r2, #11
 800a4b8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a4bc:	f7ff fa18 	bl	80098f0 <PrepareRxDoneAbort>
                return;
 800a4c0:	e5e6      	b.n	800a090 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a4c2:	4b17      	ldr	r3, [pc, #92]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a4c4:	220a      	movs	r2, #10
 800a4c6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800a4ca:	e7f7      	b.n	800a4bc <ProcessRadioRxDone+0x4f0>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800a4cc:	4b13      	ldr	r3, [pc, #76]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a4ce:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
 800a4d6:	e7bd      	b.n	800a454 <ProcessRadioRxDone+0x488>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a4d8:	4b11      	ldr	r3, [pc, #68]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a4da:	2202      	movs	r2, #2
 800a4dc:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800a4e0:	e7c5      	b.n	800a46e <ProcessRadioRxDone+0x4a2>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800a4e2:	4b0e      	ldr	r3, [pc, #56]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800a4ea:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800a4ee:	b913      	cbnz	r3, 800a4f6 <ProcessRadioRxDone+0x52a>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800a4f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a4f2:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a4f4:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800a4fe:	4290      	cmp	r0, r2
 800a500:	d9b5      	bls.n	800a46e <ProcessRadioRxDone+0x4a2>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a502:	4b06      	ldr	r3, [pc, #24]	; (800a51c <ProcessRadioRxDone+0x550>)
 800a504:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a508:	4b05      	ldr	r3, [pc, #20]	; (800a520 <ProcessRadioRxDone+0x554>)
 800a50a:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800a50e:	4a05      	ldr	r2, [pc, #20]	; (800a524 <ProcessRadioRxDone+0x558>)
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 800a516:	e7aa      	b.n	800a46e <ProcessRadioRxDone+0x4a2>
 800a518:	20000928 	.word	0x20000928
 800a51c:	20008000 	.word	0x20008000
 800a520:	200006f0 	.word	0x200006f0
 800a524:	20000c9c 	.word	0x20000c9c
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a528:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800a52c:	4c58      	ldr	r4, [pc, #352]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a52e:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	463b      	mov	r3, r7
 800a536:	f002 020f 	and.w	r2, r2, #15
 800a53a:	2100      	movs	r1, #0
 800a53c:	a816      	add	r0, sp, #88	; 0x58
 800a53e:	f7ff fa4f 	bl	80099e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a542:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800a546:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a54a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a54c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a550:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800a554:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800a558:	2301      	movs	r3, #1
 800a55a:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800a55e:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800a562:	2be0      	cmp	r3, #224	; 0xe0
 800a564:	d040      	beq.n	800a5e8 <ProcessRadioRxDone+0x61c>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a566:	4a4a      	ldr	r2, [pc, #296]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a568:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800a56c:	f043 0302 	orr.w	r3, r3, #2
 800a570:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800a574:	e062      	b.n	800a63c <ProcessRadioRxDone+0x670>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a576:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800a57a:	4c45      	ldr	r4, [pc, #276]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a57c:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	463b      	mov	r3, r7
 800a584:	f002 020f 	and.w	r2, r2, #15
 800a588:	2100      	movs	r1, #0
 800a58a:	a816      	add	r0, sp, #88	; 0x58
 800a58c:	f7ff fa28 	bl	80099e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a590:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800a594:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800a598:	e7e1      	b.n	800a55e <ProcessRadioRxDone+0x592>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800a59a:	4c3d      	ldr	r4, [pc, #244]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a59c:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	463b      	mov	r3, r7
 800a5a4:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a5ac:	f7ff fa18 	bl	80099e0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a5b0:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800a5b4:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800a5b8:	e7d1      	b.n	800a55e <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a5ba:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800a5be:	4b34      	ldr	r3, [pc, #208]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a5c0:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a5c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a5c6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a5ca:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800a5ce:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800a5d8:	e7c1      	b.n	800a55e <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a5da:	4b2d      	ldr	r3, [pc, #180]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800a5e2:	f7ff f985 	bl	80098f0 <PrepareRxDoneAbort>
                    break;
 800a5e6:	e7ba      	b.n	800a55e <ProcessRadioRxDone+0x592>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800a5e8:	4a2a      	ldr	r2, [pc, #168]	; (800a694 <ProcessRadioRxDone+0x6c8>)
 800a5ea:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 800a5ee:	2a00      	cmp	r2, #0
 800a5f0:	d1b9      	bne.n	800a566 <ProcessRadioRxDone+0x59a>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a5f2:	4a27      	ldr	r2, [pc, #156]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a5f4:	f882 3423 	strb.w	r3, [r2, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800a5fe:	f882 342c 	strb.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800a602:	f882 342d 	strb.w	r3, [r2, #1069]	; 0x42d
 800a606:	e7ae      	b.n	800a566 <ProcessRadioRxDone+0x59a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a608:	1e6a      	subs	r2, r5, #1
 800a60a:	4c21      	ldr	r4, [pc, #132]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a60c:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800a610:	b292      	uxth	r2, r2
 800a612:	1c71      	adds	r1, r6, #1
 800a614:	4638      	mov	r0, r7
 800a616:	f006 fb8e 	bl	8010d36 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a61a:	2303      	movs	r3, #3
 800a61c:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a626:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a62a:	3d01      	subs	r5, #1
 800a62c:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a630:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800a634:	f043 0302 	orr.w	r3, r3, #2
 800a638:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800a63c:	4b14      	ldr	r3, [pc, #80]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a63e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800a642:	2b01      	cmp	r3, #1
 800a644:	d915      	bls.n	800a672 <ProcessRadioRxDone+0x6a6>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800a646:	4b12      	ldr	r3, [pc, #72]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a648:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d006      	beq.n	800a65e <ProcessRadioRxDone+0x692>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800a650:	4a0f      	ldr	r2, [pc, #60]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a652:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800a656:	f043 0310 	orr.w	r3, r3, #16
 800a65a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800a65e:	f7fe ff31 	bl	80094c4 <UpdateRxSlotIdleState>
 800a662:	e515      	b.n	800a090 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a664:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800a66c:	f7ff f940 	bl	80098f0 <PrepareRxDoneAbort>
            break;
 800a670:	e7e4      	b.n	800a63c <ProcessRadioRxDone+0x670>
        if( MacCtx.NodeAckRequested == true )
 800a672:	4b07      	ldr	r3, [pc, #28]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a674:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0e4      	beq.n	800a646 <ProcessRadioRxDone+0x67a>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800a67c:	4b04      	ldr	r3, [pc, #16]	; (800a690 <ProcessRadioRxDone+0x6c4>)
 800a67e:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800a682:	2b00      	cmp	r3, #0
 800a684:	d0df      	beq.n	800a646 <ProcessRadioRxDone+0x67a>
                OnRetransmitTimeoutTimerEvent( NULL );
 800a686:	2000      	movs	r0, #0
 800a688:	f7ff f920 	bl	80098cc <OnRetransmitTimeoutTimerEvent>
 800a68c:	e7db      	b.n	800a646 <ProcessRadioRxDone+0x67a>
 800a68e:	bf00      	nop
 800a690:	200006f0 	.word	0x200006f0
 800a694:	20008000 	.word	0x20008000

0800a698 <ProcessRadioTxTimeout>:
{
 800a698:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a69a:	4b0f      	ldr	r3, [pc, #60]	; (800a6d8 <ProcessRadioTxTimeout+0x40>)
 800a69c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d002      	beq.n	800a6aa <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800a6a4:	4b0d      	ldr	r3, [pc, #52]	; (800a6dc <ProcessRadioTxTimeout+0x44>)
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800a6aa:	f7fe ff0b 	bl	80094c4 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800a6ae:	4c0c      	ldr	r4, [pc, #48]	; (800a6e0 <ProcessRadioTxTimeout+0x48>)
 800a6b0:	2002      	movs	r0, #2
 800a6b2:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800a6b6:	f002 fcd3 	bl	800d060 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800a6ba:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800a6be:	b113      	cbz	r3, 800a6c6 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a6c6:	4a06      	ldr	r2, [pc, #24]	; (800a6e0 <ProcessRadioTxTimeout+0x48>)
 800a6c8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800a6cc:	f043 0310 	orr.w	r3, r3, #16
 800a6d0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800a6d4:	bd10      	pop	{r4, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20008000 	.word	0x20008000
 800a6dc:	0801458c 	.word	0x0801458c
 800a6e0:	200006f0 	.word	0x200006f0

0800a6e4 <CheckForClassBCollision>:
{
 800a6e4:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a6e6:	f002 fa62 	bl	800cbae <LoRaMacClassBIsBeaconExpected>
 800a6ea:	b978      	cbnz	r0, 800a70c <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a6ec:	4b09      	ldr	r3, [pc, #36]	; (800a714 <CheckForClassBCollision+0x30>)
 800a6ee:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d001      	beq.n	800a6fa <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800a6f6:	2000      	movs	r0, #0
}
 800a6f8:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a6fa:	f002 fa5a 	bl	800cbb2 <LoRaMacClassBIsPingExpected>
 800a6fe:	b938      	cbnz	r0, 800a710 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a700:	f002 fa59 	bl	800cbb6 <LoRaMacClassBIsMulticastExpected>
 800a704:	2800      	cmp	r0, #0
 800a706:	d0f7      	beq.n	800a6f8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a708:	200f      	movs	r0, #15
 800a70a:	e7f5      	b.n	800a6f8 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800a70c:	200e      	movs	r0, #14
 800a70e:	e7f3      	b.n	800a6f8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a710:	200f      	movs	r0, #15
 800a712:	e7f1      	b.n	800a6f8 <CheckForClassBCollision+0x14>
 800a714:	20008000 	.word	0x20008000

0800a718 <HandleRadioRxErrorTimeout>:
{
 800a718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71a:	4605      	mov	r5, r0
 800a71c:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a71e:	4b34      	ldr	r3, [pc, #208]	; (800a7f0 <HandleRadioRxErrorTimeout+0xd8>)
 800a720:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a724:	2b02      	cmp	r3, #2
 800a726:	d002      	beq.n	800a72e <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800a728:	4b32      	ldr	r3, [pc, #200]	; (800a7f4 <HandleRadioRxErrorTimeout+0xdc>)
 800a72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72c:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a72e:	f002 fa3e 	bl	800cbae <LoRaMacClassBIsBeaconExpected>
 800a732:	4606      	mov	r6, r0
 800a734:	bb50      	cbnz	r0, 800a78c <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a736:	4b2e      	ldr	r3, [pc, #184]	; (800a7f0 <HandleRadioRxErrorTimeout+0xd8>)
 800a738:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d02c      	beq.n	800a79a <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800a740:	2e00      	cmp	r6, #0
 800a742:	d152      	bne.n	800a7ea <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a744:	4b2c      	ldr	r3, [pc, #176]	; (800a7f8 <HandleRadioRxErrorTimeout+0xe0>)
 800a746:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d13c      	bne.n	800a7c8 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800a74e:	4b2a      	ldr	r3, [pc, #168]	; (800a7f8 <HandleRadioRxErrorTimeout+0xe0>)
 800a750:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800a754:	b113      	cbz	r3, 800a75c <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800a756:	4b28      	ldr	r3, [pc, #160]	; (800a7f8 <HandleRadioRxErrorTimeout+0xe0>)
 800a758:	f883 5441 	strb.w	r5, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800a75c:	4628      	mov	r0, r5
 800a75e:	f002 fc7f 	bl	800d060 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800a762:	4b23      	ldr	r3, [pc, #140]	; (800a7f0 <HandleRadioRxErrorTimeout+0xd8>)
 800a764:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a766:	f008 fcdf 	bl	8013128 <UTIL_TIMER_GetElapsedTime>
 800a76a:	4b23      	ldr	r3, [pc, #140]	; (800a7f8 <HandleRadioRxErrorTimeout+0xe0>)
 800a76c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800a770:	4298      	cmp	r0, r3
 800a772:	d33a      	bcc.n	800a7ea <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800a774:	4c20      	ldr	r4, [pc, #128]	; (800a7f8 <HandleRadioRxErrorTimeout+0xe0>)
 800a776:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a77a:	f008 fd0b 	bl	8013194 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a77e:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800a782:	f043 0310 	orr.w	r3, r3, #16
 800a786:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
 800a78a:	e02e      	b.n	800a7ea <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800a78c:	2002      	movs	r0, #2
 800a78e:	f002 fa04 	bl	800cb9a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800a792:	2000      	movs	r0, #0
 800a794:	f002 fa06 	bl	800cba4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800a798:	e7cd      	b.n	800a736 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a79a:	f002 fa0a 	bl	800cbb2 <LoRaMacClassBIsPingExpected>
 800a79e:	4607      	mov	r7, r0
 800a7a0:	b950      	cbnz	r0, 800a7b8 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a7a2:	f002 fa08 	bl	800cbb6 <LoRaMacClassBIsMulticastExpected>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d0ca      	beq.n	800a740 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	f002 f9f7 	bl	800cb9e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	f002 f9f9 	bl	800cba8 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800a7b6:	e018      	b.n	800a7ea <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	f002 f9ef 	bl	800cb9c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a7be:	2000      	movs	r0, #0
 800a7c0:	f002 f9f1 	bl	800cba6 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800a7c4:	463e      	mov	r6, r7
 800a7c6:	e7ec      	b.n	800a7a2 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800a7c8:	4b0b      	ldr	r3, [pc, #44]	; (800a7f8 <HandleRadioRxErrorTimeout+0xe0>)
 800a7ca:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800a7ce:	b113      	cbz	r3, 800a7d6 <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800a7d0:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <HandleRadioRxErrorTimeout+0xe0>)
 800a7d2:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f002 fc42 	bl	800d060 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800a7dc:	4a06      	ldr	r2, [pc, #24]	; (800a7f8 <HandleRadioRxErrorTimeout+0xe0>)
 800a7de:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800a7e2:	f043 0310 	orr.w	r3, r3, #16
 800a7e6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800a7ea:	f7fe fe6b 	bl	80094c4 <UpdateRxSlotIdleState>
}
 800a7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f0:	20008000 	.word	0x20008000
 800a7f4:	0801458c 	.word	0x0801458c
 800a7f8:	200006f0 	.word	0x200006f0

0800a7fc <ProcessRadioRxError>:
{
 800a7fc:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800a7fe:	2106      	movs	r1, #6
 800a800:	2005      	movs	r0, #5
 800a802:	f7ff ff89 	bl	800a718 <HandleRadioRxErrorTimeout>
}
 800a806:	bd08      	pop	{r3, pc}

0800a808 <ProcessRadioRxTimeout>:
{
 800a808:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800a80a:	2104      	movs	r1, #4
 800a80c:	2003      	movs	r0, #3
 800a80e:	f7ff ff83 	bl	800a718 <HandleRadioRxErrorTimeout>
}
 800a812:	bd08      	pop	{r3, pc}

0800a814 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a814:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a818:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800a81a:	4a14      	ldr	r2, [pc, #80]	; (800a86c <LoRaMacHandleIrqEvents+0x58>)
 800a81c:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800a81e:	2000      	movs	r0, #0
 800a820:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a822:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800a826:	b303      	cbz	r3, 800a86a <LoRaMacHandleIrqEvents+0x56>
{
 800a828:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800a82a:	b2dc      	uxtb	r4, r3
 800a82c:	f013 0f20 	tst.w	r3, #32
 800a830:	d10c      	bne.n	800a84c <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800a832:	f014 0f10 	tst.w	r4, #16
 800a836:	d10c      	bne.n	800a852 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800a838:	f014 0f08 	tst.w	r4, #8
 800a83c:	d10c      	bne.n	800a858 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800a83e:	f014 0f04 	tst.w	r4, #4
 800a842:	d10c      	bne.n	800a85e <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800a844:	f014 0f02 	tst.w	r4, #2
 800a848:	d10c      	bne.n	800a864 <LoRaMacHandleIrqEvents+0x50>
}
 800a84a:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800a84c:	f7fe ffbc 	bl	80097c8 <ProcessRadioTxDone>
 800a850:	e7ef      	b.n	800a832 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800a852:	f7ff fbbb 	bl	8009fcc <ProcessRadioRxDone>
 800a856:	e7ef      	b.n	800a838 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800a858:	f7ff ff1e 	bl	800a698 <ProcessRadioTxTimeout>
 800a85c:	e7ef      	b.n	800a83e <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800a85e:	f7ff ffcd 	bl	800a7fc <ProcessRadioRxError>
 800a862:	e7ef      	b.n	800a844 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800a864:	f7ff ffd0 	bl	800a808 <ProcessRadioRxTimeout>
}
 800a868:	e7ef      	b.n	800a84a <LoRaMacHandleIrqEvents+0x36>
 800a86a:	4770      	bx	lr
 800a86c:	200006ec 	.word	0x200006ec

0800a870 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800a870:	b909      	cbnz	r1, 800a876 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800a872:	2000      	movs	r0, #0
}
 800a874:	4770      	bx	lr
{
 800a876:	b510      	push	{r4, lr}
 800a878:	4604      	mov	r4, r0
 800a87a:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800a87c:	f008 fc54 	bl	8013128 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800a880:	42a0      	cmp	r0, r4
 800a882:	d801      	bhi.n	800a888 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800a884:	2000      	movs	r0, #0
}
 800a886:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800a888:	4b02      	ldr	r3, [pc, #8]	; (800a894 <LoRaMacHandleResponseTimeout+0x24>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800a890:	2001      	movs	r0, #1
 800a892:	e7f8      	b.n	800a886 <LoRaMacHandleResponseTimeout+0x16>
 800a894:	20008000 	.word	0x20008000

0800a898 <LoRaMacHandleMlmeRequest>:
{
 800a898:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a89a:	4b14      	ldr	r3, [pc, #80]	; (800a8ec <LoRaMacHandleMlmeRequest+0x54>)
 800a89c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800a8a0:	f013 0f04 	tst.w	r3, #4
 800a8a4:	d100      	bne.n	800a8a8 <LoRaMacHandleMlmeRequest+0x10>
}
 800a8a6:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a8a8:	2001      	movs	r0, #1
 800a8aa:	f002 fbf7 	bl	800d09c <LoRaMacConfirmQueueIsCmdActive>
 800a8ae:	b178      	cbz	r0, 800a8d0 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a8b0:	2001      	movs	r0, #1
 800a8b2:	f002 fbbd 	bl	800d030 <LoRaMacConfirmQueueGetStatus>
 800a8b6:	b918      	cbnz	r0, 800a8c0 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	; (800a8ec <LoRaMacHandleMlmeRequest+0x54>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a8c0:	4a0a      	ldr	r2, [pc, #40]	; (800a8ec <LoRaMacHandleMlmeRequest+0x54>)
 800a8c2:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800a8c6:	f023 0302 	bic.w	r3, r3, #2
 800a8ca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800a8ce:	e7ea      	b.n	800a8a6 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800a8d0:	2006      	movs	r0, #6
 800a8d2:	f002 fbe3 	bl	800d09c <LoRaMacConfirmQueueIsCmdActive>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d0e5      	beq.n	800a8a6 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a8da:	4a04      	ldr	r2, [pc, #16]	; (800a8ec <LoRaMacHandleMlmeRequest+0x54>)
 800a8dc:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800a8e0:	f023 0302 	bic.w	r3, r3, #2
 800a8e4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800a8e8:	e7dd      	b.n	800a8a6 <LoRaMacHandleMlmeRequest+0xe>
 800a8ea:	bf00      	nop
 800a8ec:	200006f0 	.word	0x200006f0

0800a8f0 <SerializeTxFrame>:
{
 800a8f0:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800a8f2:	4b0f      	ldr	r3, [pc, #60]	; (800a930 <SerializeTxFrame+0x40>)
 800a8f4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a8f8:	b11b      	cbz	r3, 800a902 <SerializeTxFrame+0x12>
 800a8fa:	2b04      	cmp	r3, #4
 800a8fc:	d00a      	beq.n	800a914 <SerializeTxFrame+0x24>
 800a8fe:	2003      	movs	r0, #3
}
 800a900:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a902:	480c      	ldr	r0, [pc, #48]	; (800a934 <SerializeTxFrame+0x44>)
 800a904:	f003 f873 	bl	800d9ee <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a908:	b968      	cbnz	r0, 800a926 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a90a:	4b09      	ldr	r3, [pc, #36]	; (800a930 <SerializeTxFrame+0x40>)
 800a90c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a910:	801a      	strh	r2, [r3, #0]
            break;
 800a912:	e7f5      	b.n	800a900 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800a914:	4807      	ldr	r0, [pc, #28]	; (800a934 <SerializeTxFrame+0x44>)
 800a916:	f003 f8a0 	bl	800da5a <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a91a:	b930      	cbnz	r0, 800a92a <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a91c:	4b04      	ldr	r3, [pc, #16]	; (800a930 <SerializeTxFrame+0x40>)
 800a91e:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a922:	801a      	strh	r2, [r3, #0]
            break;
 800a924:	e7ec      	b.n	800a900 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a926:	2011      	movs	r0, #17
 800a928:	e7ea      	b.n	800a900 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a92a:	2011      	movs	r0, #17
 800a92c:	e7e8      	b.n	800a900 <SerializeTxFrame+0x10>
 800a92e:	bf00      	nop
 800a930:	200006f0 	.word	0x200006f0
 800a934:	200007f8 	.word	0x200007f8

0800a938 <ComputeRxWindowParameters>:
{
 800a938:	b570      	push	{r4, r5, r6, lr}
 800a93a:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a93c:	4c1e      	ldr	r4, [pc, #120]	; (800a9b8 <ComputeRxWindowParameters+0x80>)
 800a93e:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800a942:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800a946:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800a94a:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 800a94e:	4630      	mov	r0, r6
 800a950:	f003 fa33 	bl	800ddba <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a954:	4d19      	ldr	r5, [pc, #100]	; (800a9bc <ComputeRxWindowParameters+0x84>)
 800a956:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a95e:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800a962:	b241      	sxtb	r1, r0
 800a964:	4630      	mov	r0, r6
 800a966:	f003 f974 	bl	800dc52 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a96a:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a972:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800a976:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800a97a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a97e:	f003 f968 	bl	800dc52 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a982:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a984:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800a988:	440b      	add	r3, r1
 800a98a:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a98e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a990:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800a994:	4413      	add	r3, r2
 800a996:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800a99a:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800a99e:	2b04      	cmp	r3, #4
 800a9a0:	d007      	beq.n	800a9b2 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a9a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a9a4:	4419      	add	r1, r3
 800a9a6:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a9aa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a9ac:	440a      	add	r2, r1
 800a9ae:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800a9b2:	b002      	add	sp, #8
 800a9b4:	bd70      	pop	{r4, r5, r6, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20008000 	.word	0x20008000
 800a9bc:	200006f0 	.word	0x200006f0

0800a9c0 <VerifyTxFrame>:
{
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a9c8:	4b0d      	ldr	r3, [pc, #52]	; (800aa00 <VerifyTxFrame+0x40>)
 800a9ca:	f893 4130 	ldrb.w	r4, [r3, #304]	; 0x130
 800a9ce:	b914      	cbnz	r4, 800a9d6 <VerifyTxFrame+0x16>
}
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	b002      	add	sp, #8
 800a9d4:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a9d6:	a801      	add	r0, sp, #4
 800a9d8:	f002 fa26 	bl	800ce28 <LoRaMacCommandsGetSizeSerializedCmds>
 800a9dc:	4604      	mov	r4, r0
 800a9de:	b968      	cbnz	r0, 800a9fc <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800a9e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a9e4:	4b06      	ldr	r3, [pc, #24]	; (800aa00 <VerifyTxFrame+0x40>)
 800a9e6:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800a9ea:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <VerifyTxFrame+0x44>)
 800a9ec:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800a9f0:	f7fe fed8 	bl	80097a4 <ValidatePayloadLength>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d1eb      	bne.n	800a9d0 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800a9f8:	2408      	movs	r4, #8
 800a9fa:	e7e9      	b.n	800a9d0 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a9fc:	2413      	movs	r4, #19
 800a9fe:	e7e7      	b.n	800a9d0 <VerifyTxFrame+0x10>
 800aa00:	20008000 	.word	0x20008000
 800aa04:	200006f0 	.word	0x200006f0

0800aa08 <SecureFrame>:
{
 800aa08:	b530      	push	{r4, r5, lr}
 800aa0a:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800aa10:	4b18      	ldr	r3, [pc, #96]	; (800aa74 <SecureFrame+0x6c>)
 800aa12:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800aa16:	b133      	cbz	r3, 800aa26 <SecureFrame+0x1e>
 800aa18:	4605      	mov	r5, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d00b      	beq.n	800aa38 <SecureFrame+0x30>
 800aa20:	2003      	movs	r0, #3
}
 800aa22:	b003      	add	sp, #12
 800aa24:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800aa26:	4814      	ldr	r0, [pc, #80]	; (800aa78 <SecureFrame+0x70>)
 800aa28:	f002 fda2 	bl	800d570 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800aa2c:	b9d8      	cbnz	r0, 800aa66 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800aa2e:	4b11      	ldr	r3, [pc, #68]	; (800aa74 <SecureFrame+0x6c>)
 800aa30:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800aa34:	801a      	strh	r2, [r3, #0]
            break;
 800aa36:	e7f4      	b.n	800aa22 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800aa38:	a801      	add	r0, sp, #4
 800aa3a:	f002 fd4d 	bl	800d4d8 <LoRaMacCryptoGetFCntUp>
 800aa3e:	b9a0      	cbnz	r0, 800aa6a <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800aa40:	4b0c      	ldr	r3, [pc, #48]	; (800aa74 <SecureFrame+0x6c>)
 800aa42:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800aa46:	b113      	cbz	r3, 800aa4e <SecureFrame+0x46>
                fCntUp -= 1;
 800aa48:	9b01      	ldr	r3, [sp, #4]
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	; (800aa78 <SecureFrame+0x70>)
 800aa50:	4622      	mov	r2, r4
 800aa52:	4629      	mov	r1, r5
 800aa54:	9801      	ldr	r0, [sp, #4]
 800aa56:	f002 fdb1 	bl	800d5bc <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800aa5a:	b940      	cbnz	r0, 800aa6e <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800aa5c:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <SecureFrame+0x6c>)
 800aa5e:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800aa62:	801a      	strh	r2, [r3, #0]
            break;
 800aa64:	e7dd      	b.n	800aa22 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa66:	2011      	movs	r0, #17
 800aa68:	e7db      	b.n	800aa22 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800aa6a:	2012      	movs	r0, #18
 800aa6c:	e7d9      	b.n	800aa22 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa6e:	2011      	movs	r0, #17
 800aa70:	e7d7      	b.n	800aa22 <SecureFrame+0x1a>
 800aa72:	bf00      	nop
 800aa74:	200006f0 	.word	0x200006f0
 800aa78:	200007f8 	.word	0x200007f8

0800aa7c <SendFrameOnChannel>:
{
 800aa7c:	b570      	push	{r4, r5, r6, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800aa88:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800aa8c:	4d36      	ldr	r5, [pc, #216]	; (800ab68 <SendFrameOnChannel+0xec>)
 800aa8e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800aa92:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800aa96:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800aa9a:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800aa9e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800aaa2:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800aaa4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800aaa8:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800aaaa:	4c30      	ldr	r4, [pc, #192]	; (800ab6c <SendFrameOnChannel+0xf0>)
 800aaac:	8823      	ldrh	r3, [r4, #0]
 800aaae:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800aab2:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
 800aab6:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800aaba:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 800aabe:	f10d 0207 	add.w	r2, sp, #7
 800aac2:	a902      	add	r1, sp, #8
 800aac4:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800aac8:	f003 f8e7 	bl	800dc9a <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800aad2:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800aad6:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800aada:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aade:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800aae2:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800aae6:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 800aaea:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800aaee:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800aaf2:	f002 f862 	bl	800cbba <LoRaMacClassBIsBeaconModeActive>
 800aaf6:	bb60      	cbnz	r0, 800ab52 <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800aaf8:	4b1b      	ldr	r3, [pc, #108]	; (800ab68 <SendFrameOnChannel+0xec>)
 800aafa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d02f      	beq.n	800ab62 <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800ab02:	f002 f85d 	bl	800cbc0 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800ab06:	4b18      	ldr	r3, [pc, #96]	; (800ab68 <SendFrameOnChannel+0xec>)
 800ab08:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800ab0c:	4b17      	ldr	r3, [pc, #92]	; (800ab6c <SendFrameOnChannel+0xf0>)
 800ab0e:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
 800ab12:	b2c0      	uxtb	r0, r0
 800ab14:	f7ff ff78 	bl	800aa08 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800ab18:	4604      	mov	r4, r0
 800ab1a:	b9b8      	cbnz	r0, 800ab4c <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ab1c:	4813      	ldr	r0, [pc, #76]	; (800ab6c <SendFrameOnChannel+0xf0>)
 800ab1e:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800ab22:	f043 0302 	orr.w	r3, r3, #2
 800ab26:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800ab2a:	f890 3418 	ldrb.w	r3, [r0, #1048]	; 0x418
 800ab2e:	3301      	adds	r3, #1
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	f880 3418 	strb.w	r3, [r0, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800ab36:	f880 3445 	strb.w	r3, [r0, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800ab40:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <SendFrameOnChannel+0xf4>)
 800ab42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab44:	f830 1b02 	ldrh.w	r1, [r0], #2
 800ab48:	b2c9      	uxtb	r1, r1
 800ab4a:	4798      	blx	r3
}
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	b006      	add	sp, #24
 800ab50:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800ab52:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 800ab56:	f002 f842 	bl	800cbde <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d0cc      	beq.n	800aaf8 <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800ab5e:	2410      	movs	r4, #16
 800ab60:	e7f4      	b.n	800ab4c <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 800ab62:	f002 f83e 	bl	800cbe2 <LoRaMacClassBStopRxSlots>
 800ab66:	e7cc      	b.n	800ab02 <SendFrameOnChannel+0x86>
 800ab68:	20008000 	.word	0x20008000
 800ab6c:	200006f0 	.word	0x200006f0
 800ab70:	0801458c 	.word	0x0801458c

0800ab74 <ScheduleTx>:
{
 800ab74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab78:	b08c      	sub	sp, #48	; 0x30
 800ab7a:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800ab7c:	f7ff fdb2 	bl	800a6e4 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800ab80:	4604      	mov	r4, r0
 800ab82:	b118      	cbz	r0, 800ab8c <ScheduleTx+0x18>
}
 800ab84:	4620      	mov	r0, r4
 800ab86:	b00c      	add	sp, #48	; 0x30
 800ab88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800ab8c:	f7fe fcfe 	bl	800958c <CalculateBackOff>
    status = SerializeTxFrame( );
 800ab90:	f7ff feae 	bl	800a8f0 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800ab94:	4604      	mov	r4, r0
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d1f4      	bne.n	800ab84 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800ab9a:	4e36      	ldr	r6, [pc, #216]	; (800ac74 <ScheduleTx+0x100>)
 800ab9c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800ab9e:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800aba0:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800aba4:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800aba8:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800abac:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800abb0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800abb4:	4640      	mov	r0, r8
 800abb6:	f008 fa21 	bl	8012ffc <SysTimeGetMcuTime>
 800abba:	af02      	add	r7, sp, #8
 800abbc:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800abc6:	e898 0006 	ldmia.w	r8, {r1, r2}
 800abca:	4638      	mov	r0, r7
 800abcc:	f008 f9b3 	bl	8012f36 <SysTimeSub>
 800abd0:	ab07      	add	r3, sp, #28
 800abd2:	e897 0003 	ldmia.w	r7, {r0, r1}
 800abd6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800abda:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800abdc:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800abde:	2300      	movs	r3, #0
 800abe0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800abe4:	2301      	movs	r3, #1
 800abe6:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800abea:	4b23      	ldr	r3, [pc, #140]	; (800ac78 <ScheduleTx+0x104>)
 800abec:	881b      	ldrh	r3, [r3, #0]
 800abee:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800abf2:	f896 3130 	ldrb.w	r3, [r6, #304]	; 0x130
 800abf6:	b92b      	cbnz	r3, 800ac04 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800abf8:	2301      	movs	r3, #1
 800abfa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800abfe:	2300      	movs	r3, #0
 800ac00:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800ac04:	4a1c      	ldr	r2, [pc, #112]	; (800ac78 <ScheduleTx+0x104>)
 800ac06:	481b      	ldr	r0, [pc, #108]	; (800ac74 <ScheduleTx+0x100>)
 800ac08:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	f202 4394 	addw	r3, r2, #1172	; 0x494
 800ac12:	f202 421b 	addw	r2, r2, #1051	; 0x41b
 800ac16:	a904      	add	r1, sp, #16
 800ac18:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800ac1c:	f003 f8b8 	bl	800dd90 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800ac20:	b1c0      	cbz	r0, 800ac54 <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800ac22:	280b      	cmp	r0, #11
 800ac24:	d124      	bne.n	800ac70 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800ac26:	4a14      	ldr	r2, [pc, #80]	; (800ac78 <ScheduleTx+0x104>)
 800ac28:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
 800ac2c:	b191      	cbz	r1, 800ac54 <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 800ac2e:	b90d      	cbnz	r5, 800ac34 <ScheduleTx+0xc0>
                return status;
 800ac30:	4604      	mov	r4, r0
 800ac32:	e7a7      	b.n	800ab84 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800ac34:	4615      	mov	r5, r2
 800ac36:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800ac3a:	f042 0220 	orr.w	r2, r2, #32
 800ac3e:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800ac42:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800ac46:	4628      	mov	r0, r5
 800ac48:	f008 fb44 	bl	80132d4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f008 fafb 	bl	8013248 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800ac52:	e797      	b.n	800ab84 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800ac54:	f7ff fe70 	bl	800a938 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800ac58:	f7ff feb2 	bl	800a9c0 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	d190      	bne.n	800ab84 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800ac62:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <ScheduleTx+0x104>)
 800ac64:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800ac68:	f7ff ff08 	bl	800aa7c <SendFrameOnChannel>
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	e789      	b.n	800ab84 <ScheduleTx+0x10>
            return status;
 800ac70:	4604      	mov	r4, r0
 800ac72:	e787      	b.n	800ab84 <ScheduleTx+0x10>
 800ac74:	20008000 	.word	0x20008000
 800ac78:	200006f0 	.word	0x200006f0

0800ac7c <OnTxDelayedTimerEvent>:
{
 800ac7c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800ac7e:	4c16      	ldr	r4, [pc, #88]	; (800acd8 <OnTxDelayedTimerEvent+0x5c>)
 800ac80:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800ac84:	f008 fa86 	bl	8013194 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ac88:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800ac8c:	f023 0320 	bic.w	r3, r3, #32
 800ac90:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ac94:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 800ac98:	4b10      	ldr	r3, [pc, #64]	; (800acdc <OnTxDelayedTimerEvent+0x60>)
 800ac9a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800ac9e:	f7ff fde7 	bl	800a870 <LoRaMacHandleResponseTimeout>
 800aca2:	b100      	cbz	r0, 800aca6 <OnTxDelayedTimerEvent+0x2a>
}
 800aca4:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800aca6:	2001      	movs	r0, #1
 800aca8:	f7ff ff64 	bl	800ab74 <ScheduleTx>
 800acac:	2800      	cmp	r0, #0
 800acae:	d0f9      	beq.n	800aca4 <OnTxDelayedTimerEvent+0x28>
 800acb0:	280b      	cmp	r0, #11
 800acb2:	d0f7      	beq.n	800aca4 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800acb4:	4b09      	ldr	r3, [pc, #36]	; (800acdc <OnTxDelayedTimerEvent+0x60>)
 800acb6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800acba:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800acbe:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800acc2:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800acc6:	2009      	movs	r0, #9
 800acc8:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800accc:	f002 f9c8 	bl	800d060 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800acd0:	f7fe fcee 	bl	80096b0 <StopRetransmission>
            break;
 800acd4:	e7e6      	b.n	800aca4 <OnTxDelayedTimerEvent+0x28>
 800acd6:	bf00      	nop
 800acd8:	200006f0 	.word	0x200006f0
 800acdc:	20008000 	.word	0x20008000

0800ace0 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ace0:	4b1c      	ldr	r3, [pc, #112]	; (800ad54 <LoRaMacHandleMcpsRequest+0x74>)
 800ace2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ace6:	f013 0f01 	tst.w	r3, #1
 800acea:	d032      	beq.n	800ad52 <LoRaMacHandleMcpsRequest+0x72>
{
 800acec:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800acee:	4b19      	ldr	r3, [pc, #100]	; (800ad54 <LoRaMacHandleMcpsRequest+0x74>)
 800acf0:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800acf4:	b12b      	cbz	r3, 800ad02 <LoRaMacHandleMcpsRequest+0x22>
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	d003      	beq.n	800ad02 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d006      	beq.n	800ad0c <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800acfe:	2000      	movs	r0, #0
 800ad00:	e002      	b.n	800ad08 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ad02:	f7fe fc9b 	bl	800963c <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800ad06:	b940      	cbnz	r0, 800ad1a <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800ad08:	b1b8      	cbz	r0, 800ad3a <LoRaMacHandleMcpsRequest+0x5a>
}
 800ad0a:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800ad0c:	4b11      	ldr	r3, [pc, #68]	; (800ad54 <LoRaMacHandleMcpsRequest+0x74>)
 800ad0e:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800ad12:	b183      	cbz	r3, 800ad36 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ad14:	f7fe fcae 	bl	8009674 <CheckRetransConfirmedUplink>
 800ad18:	e7f5      	b.n	800ad06 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800ad1a:	4c0e      	ldr	r4, [pc, #56]	; (800ad54 <LoRaMacHandleMcpsRequest+0x74>)
 800ad1c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800ad20:	f008 fa38 	bl	8013194 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ad24:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800ad28:	f023 0320 	bic.w	r3, r3, #32
 800ad2c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800ad30:	f7fe fcbe 	bl	80096b0 <StopRetransmission>
 800ad34:	e7e9      	b.n	800ad0a <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800ad36:	2001      	movs	r0, #1
 800ad38:	e7e6      	b.n	800ad08 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ad3a:	4b06      	ldr	r3, [pc, #24]	; (800ad54 <LoRaMacHandleMcpsRequest+0x74>)
 800ad3c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800ad40:	f36f 1204 	bfc	r2, #4, #1
 800ad44:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800ad48:	f883 0419 	strb.w	r0, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800ad4c:	f7ff ff96 	bl	800ac7c <OnTxDelayedTimerEvent>
}
 800ad50:	e7db      	b.n	800ad0a <LoRaMacHandleMcpsRequest+0x2a>
 800ad52:	4770      	bx	lr
 800ad54:	200006f0 	.word	0x200006f0

0800ad58 <LoRaMacHandleRequestEvents>:
{
 800ad58:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800ad5a:	4b22      	ldr	r3, [pc, #136]	; (800ade4 <LoRaMacHandleRequestEvents+0x8c>)
 800ad5c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ad60:	bb7b      	cbnz	r3, 800adc2 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ad62:	4b20      	ldr	r3, [pc, #128]	; (800ade4 <LoRaMacHandleRequestEvents+0x8c>)
 800ad64:	f893 4491 	ldrb.w	r4, [r3, #1169]	; 0x491
 800ad68:	f014 0501 	ands.w	r5, r4, #1
 800ad6c:	d005      	beq.n	800ad7a <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ad6e:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800ad72:	f36f 0200 	bfc	r2, #0, #1
 800ad76:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ad7a:	4b1a      	ldr	r3, [pc, #104]	; (800ade4 <LoRaMacHandleRequestEvents+0x8c>)
 800ad7c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ad80:	f013 0f04 	tst.w	r3, #4
 800ad84:	d006      	beq.n	800ad94 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ad86:	4b17      	ldr	r3, [pc, #92]	; (800ade4 <LoRaMacHandleRequestEvents+0x8c>)
 800ad88:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800ad8c:	f36f 0282 	bfc	r2, #2, #1
 800ad90:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ad94:	2001      	movs	r0, #1
 800ad96:	f7fe fba9 	bl	80094ec <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800ad9a:	b135      	cbz	r5, 800adaa <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ad9c:	4811      	ldr	r0, [pc, #68]	; (800ade4 <LoRaMacHandleRequestEvents+0x8c>)
 800ad9e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f500 6088 	add.w	r0, r0, #1088	; 0x440
 800ada8:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800adaa:	f014 0f04 	tst.w	r4, #4
 800adae:	d109      	bne.n	800adc4 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800adb0:	f001 ff07 	bl	800cbc2 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800adb4:	4b0b      	ldr	r3, [pc, #44]	; (800ade4 <LoRaMacHandleRequestEvents+0x8c>)
 800adb6:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800adba:	f36f 1204 	bfc	r2, #4, #1
 800adbe:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
}
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800adc4:	4808      	ldr	r0, [pc, #32]	; (800ade8 <LoRaMacHandleRequestEvents+0x90>)
 800adc6:	f002 f975 	bl	800d0b4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800adca:	f002 f9ab 	bl	800d124 <LoRaMacConfirmQueueGetCnt>
 800adce:	2800      	cmp	r0, #0
 800add0:	d0ee      	beq.n	800adb0 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800add2:	4a04      	ldr	r2, [pc, #16]	; (800ade4 <LoRaMacHandleRequestEvents+0x8c>)
 800add4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800add8:	f043 0304 	orr.w	r3, r3, #4
 800addc:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800ade0:	e7e6      	b.n	800adb0 <LoRaMacHandleRequestEvents+0x58>
 800ade2:	bf00      	nop
 800ade4:	200006f0 	.word	0x200006f0
 800ade8:	20000b44 	.word	0x20000b44

0800adec <OpenContinuousRxCWindow>:
{
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800adf0:	4c16      	ldr	r4, [pc, #88]	; (800ae4c <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800adf2:	4d17      	ldr	r5, [pc, #92]	; (800ae50 <OpenContinuousRxCWindow+0x64>)
 800adf4:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800adf8:	9600      	str	r6, [sp, #0]
 800adfa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800adfc:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800ae00:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800ae04:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ae08:	f002 ff23 	bl	800dc52 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ae12:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800ae16:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ae20:	f205 4224 	addw	r2, r5, #1060	; 0x424
 800ae24:	4631      	mov	r1, r6
 800ae26:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ae2a:	f002 ff26 	bl	800dc7a <RegionRxConfig>
 800ae2e:	b158      	cbz	r0, 800ae48 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800ae30:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800ae34:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800ae38:	4b06      	ldr	r3, [pc, #24]	; (800ae54 <OpenContinuousRxCWindow+0x68>)
 800ae3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800ae40:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800ae44:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800ae48:	b002      	add	sp, #8
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}
 800ae4c:	20008000 	.word	0x20008000
 800ae50:	200006f0 	.word	0x200006f0
 800ae54:	0801458c 	.word	0x0801458c

0800ae58 <RxWindowSetup>:
{
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800ae5c:	f008 f99a 	bl	8013194 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800ae60:	4b0c      	ldr	r3, [pc, #48]	; (800ae94 <RxWindowSetup+0x3c>)
 800ae62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae64:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ae66:	4a0c      	ldr	r2, [pc, #48]	; (800ae98 <RxWindowSetup+0x40>)
 800ae68:	4621      	mov	r1, r4
 800ae6a:	4b0c      	ldr	r3, [pc, #48]	; (800ae9c <RxWindowSetup+0x44>)
 800ae6c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ae70:	f002 ff03 	bl	800dc7a <RegionRxConfig>
 800ae74:	b160      	cbz	r0, 800ae90 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800ae76:	4d0a      	ldr	r5, [pc, #40]	; (800aea0 <RxWindowSetup+0x48>)
 800ae78:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800ae7c:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800ae80:	4b04      	ldr	r3, [pc, #16]	; (800ae94 <RxWindowSetup+0x3c>)
 800ae82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae84:	4a05      	ldr	r2, [pc, #20]	; (800ae9c <RxWindowSetup+0x44>)
 800ae86:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800ae88:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800ae8a:	7ce3      	ldrb	r3, [r4, #19]
 800ae8c:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800ae90:	bd38      	pop	{r3, r4, r5, pc}
 800ae92:	bf00      	nop
 800ae94:	0801458c 	.word	0x0801458c
 800ae98:	20000b14 	.word	0x20000b14
 800ae9c:	20008000 	.word	0x20008000
 800aea0:	200006f0 	.word	0x200006f0

0800aea4 <OnRxWindow2TimerEvent>:
{
 800aea4:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800aea6:	4b13      	ldr	r3, [pc, #76]	; (800aef4 <OnRxWindow2TimerEvent+0x50>)
 800aea8:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800aeac:	b903      	cbnz	r3, 800aeb0 <OnRxWindow2TimerEvent+0xc>
}
 800aeae:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800aeb0:	4810      	ldr	r0, [pc, #64]	; (800aef4 <OnRxWindow2TimerEvent+0x50>)
 800aeb2:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800aeb6:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800aeba:	4b0f      	ldr	r3, [pc, #60]	; (800aef8 <OnRxWindow2TimerEvent+0x54>)
 800aebc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aebe:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aec2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800aec6:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800aeca:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800aece:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800aed2:	2200      	movs	r2, #0
 800aed4:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800aed8:	2201      	movs	r2, #1
 800aeda:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800aede:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800aee2:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800aee6:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800aeea:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800aeee:	f7ff ffb3 	bl	800ae58 <RxWindowSetup>
 800aef2:	e7dc      	b.n	800aeae <OnRxWindow2TimerEvent+0xa>
 800aef4:	200006f0 	.word	0x200006f0
 800aef8:	20008000 	.word	0x20008000

0800aefc <OnRxWindow1TimerEvent>:
{
 800aefc:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800aefe:	4811      	ldr	r0, [pc, #68]	; (800af44 <OnRxWindow1TimerEvent+0x48>)
 800af00:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800af04:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800af08:	4b0f      	ldr	r3, [pc, #60]	; (800af48 <OnRxWindow1TimerEvent+0x4c>)
 800af0a:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 800af0e:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800af12:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800af16:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800af1a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800af1e:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800af22:	2200      	movs	r2, #0
 800af24:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800af28:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800af2c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800af30:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800af34:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800af38:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800af3c:	f7ff ff8c 	bl	800ae58 <RxWindowSetup>
}
 800af40:	bd08      	pop	{r3, pc}
 800af42:	bf00      	nop
 800af44:	200006f0 	.word	0x200006f0
 800af48:	20008000 	.word	0x20008000

0800af4c <LoRaMacHandleNvm>:
{
 800af4c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800af4e:	4b31      	ldr	r3, [pc, #196]	; (800b014 <LoRaMacHandleNvm+0xc8>)
 800af50:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800af54:	b103      	cbz	r3, 800af58 <LoRaMacHandleNvm+0xc>
}
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800af5a:	2124      	movs	r1, #36	; 0x24
 800af5c:	f005 ff0c 	bl	8010d78 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800af60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af62:	4283      	cmp	r3, r0
 800af64:	d053      	beq.n	800b00e <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800af66:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800af68:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800af6a:	211c      	movs	r1, #28
 800af6c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800af70:	f005 ff02 	bl	8010d78 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800af74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800af76:	4283      	cmp	r3, r0
 800af78:	d002      	beq.n	800af80 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800af7a:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800af7c:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800af80:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af84:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800af88:	f005 fef6 	bl	8010d78 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800af8c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800af90:	4283      	cmp	r3, r0
 800af92:	d003      	beq.n	800af9c <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800af94:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800af98:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800af9c:	21d4      	movs	r1, #212	; 0xd4
 800af9e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800afa2:	f005 fee9 	bl	8010d78 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800afa6:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800afaa:	4283      	cmp	r3, r0
 800afac:	d003      	beq.n	800afb6 <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800afae:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800afb2:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800afb6:	2110      	movs	r1, #16
 800afb8:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800afbc:	f005 fedc 	bl	8010d78 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800afc0:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800afc4:	4283      	cmp	r3, r0
 800afc6:	d003      	beq.n	800afd0 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800afc8:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800afcc:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800afd0:	f44f 715e 	mov.w	r1, #888	; 0x378
 800afd4:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800afd8:	f005 fece 	bl	8010d78 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800afdc:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800afe0:	4283      	cmp	r3, r0
 800afe2:	d003      	beq.n	800afec <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800afe4:	f8c4 05b0 	str.w	r0, [r4, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800afe8:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800afec:	2114      	movs	r1, #20
 800afee:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800aff2:	f005 fec1 	bl	8010d78 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800aff6:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800affa:	4283      	cmp	r3, r0
 800affc:	d003      	beq.n	800b006 <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800affe:	f8c4 05c8 	str.w	r0, [r4, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800b002:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800b006:	4628      	mov	r0, r5
 800b008:	f7fe fb94 	bl	8009734 <CallNvmDataChangeCallback>
 800b00c:	e7a3      	b.n	800af56 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800b00e:	2500      	movs	r5, #0
 800b010:	e7ab      	b.n	800af6a <LoRaMacHandleNvm+0x1e>
 800b012:	bf00      	nop
 800b014:	200006f0 	.word	0x200006f0

0800b018 <RestoreNvmData>:
{
 800b018:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800b01a:	4b3d      	ldr	r3, [pc, #244]	; (800b110 <RestoreNvmData+0xf8>)
 800b01c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b020:	2b01      	cmp	r3, #1
 800b022:	d001      	beq.n	800b028 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800b024:	2001      	movs	r0, #1
}
 800b026:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800b028:	4c3a      	ldr	r4, [pc, #232]	; (800b114 <RestoreNvmData+0xfc>)
 800b02a:	2124      	movs	r1, #36	; 0x24
 800b02c:	4620      	mov	r0, r4
 800b02e:	f005 fea3 	bl	8010d78 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800b032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b034:	4283      	cmp	r3, r0
 800b036:	d001      	beq.n	800b03c <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b038:	2017      	movs	r0, #23
 800b03a:	e7f4      	b.n	800b026 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800b03c:	211c      	movs	r1, #28
 800b03e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b042:	f005 fe99 	bl	8010d78 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800b046:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b048:	4283      	cmp	r3, r0
 800b04a:	d001      	beq.n	800b050 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b04c:	2017      	movs	r0, #23
 800b04e:	e7ea      	b.n	800b026 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800b050:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b054:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800b058:	f005 fe8e 	bl	8010d78 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800b05c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800b060:	4283      	cmp	r3, r0
 800b062:	d001      	beq.n	800b068 <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b064:	2017      	movs	r0, #23
 800b066:	e7de      	b.n	800b026 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800b068:	21d4      	movs	r1, #212	; 0xd4
 800b06a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800b06e:	f005 fe83 	bl	8010d78 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800b072:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800b076:	4283      	cmp	r3, r0
 800b078:	d001      	beq.n	800b07e <RestoreNvmData+0x66>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b07a:	2017      	movs	r0, #23
 800b07c:	e7d3      	b.n	800b026 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800b07e:	2110      	movs	r1, #16
 800b080:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800b084:	f005 fe78 	bl	8010d78 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800b088:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800b08c:	4283      	cmp	r3, r0
 800b08e:	d001      	beq.n	800b094 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b090:	2017      	movs	r0, #23
 800b092:	e7c8      	b.n	800b026 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800b094:	f44f 715e 	mov.w	r1, #888	; 0x378
 800b098:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800b09c:	f005 fe6c 	bl	8010d78 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800b0a0:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800b0a4:	4283      	cmp	r3, r0
 800b0a6:	d001      	beq.n	800b0ac <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b0a8:	2017      	movs	r0, #23
 800b0aa:	e7bc      	b.n	800b026 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800b0ac:	2114      	movs	r1, #20
 800b0ae:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800b0b2:	f005 fe61 	bl	8010d78 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800b0b6:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800b0ba:	4283      	cmp	r3, r0
 800b0bc:	d001      	beq.n	800b0c2 <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800b0be:	2017      	movs	r0, #23
 800b0c0:	e7b1      	b.n	800b026 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800b0c2:	4625      	mov	r5, r4
 800b0c4:	4c14      	ldr	r4, [pc, #80]	; (800b118 <RestoreNvmData+0x100>)
 800b0c6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f005 fe32 	bl	8010d36 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800b0d2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	4628      	mov	r0, r5
 800b0da:	f005 fe44 	bl	8010d66 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b0de:	4b0c      	ldr	r3, [pc, #48]	; (800b110 <RestoreNvmData+0xf8>)
 800b0e0:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800b0e4:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b0e8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b0ea:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b0ee:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800b0f2:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b0fc:	2202      	movs	r2, #2
 800b0fe:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b102:	4b06      	ldr	r3, [pc, #24]	; (800b11c <RestoreNvmData+0x104>)
 800b104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b106:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 800b10a:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800b10c:	2000      	movs	r0, #0
 800b10e:	e78a      	b.n	800b026 <RestoreNvmData+0xe>
 800b110:	200006f0 	.word	0x200006f0
 800b114:	200085cc 	.word	0x200085cc
 800b118:	20008000 	.word	0x20008000
 800b11c:	0801458c 	.word	0x0801458c

0800b120 <OnRadioRxTimeout>:
{
 800b120:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800b122:	4a07      	ldr	r2, [pc, #28]	; (800b140 <OnRadioRxTimeout+0x20>)
 800b124:	7813      	ldrb	r3, [r2, #0]
 800b126:	f043 0302 	orr.w	r3, r3, #2
 800b12a:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b12c:	f7fe faea 	bl	8009704 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800b130:	4b04      	ldr	r3, [pc, #16]	; (800b144 <OnRadioRxTimeout+0x24>)
 800b132:	2201      	movs	r2, #1
 800b134:	2100      	movs	r1, #0
 800b136:	2002      	movs	r0, #2
 800b138:	f007 fcda 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 800b13c:	bd08      	pop	{r3, pc}
 800b13e:	bf00      	nop
 800b140:	200006ec 	.word	0x200006ec
 800b144:	08013e74 	.word	0x08013e74

0800b148 <OnRadioTxTimeout>:
{
 800b148:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800b14a:	4a07      	ldr	r2, [pc, #28]	; (800b168 <OnRadioTxTimeout+0x20>)
 800b14c:	7813      	ldrb	r3, [r2, #0]
 800b14e:	f043 0308 	orr.w	r3, r3, #8
 800b152:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b154:	f7fe fad6 	bl	8009704 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800b158:	4b04      	ldr	r3, [pc, #16]	; (800b16c <OnRadioTxTimeout+0x24>)
 800b15a:	2201      	movs	r2, #1
 800b15c:	2100      	movs	r1, #0
 800b15e:	2002      	movs	r0, #2
 800b160:	f007 fcc6 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 800b164:	bd08      	pop	{r3, pc}
 800b166:	bf00      	nop
 800b168:	200006ec 	.word	0x200006ec
 800b16c:	08013e84 	.word	0x08013e84

0800b170 <OnRadioRxDone>:
{
 800b170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b174:	4680      	mov	r8, r0
 800b176:	460f      	mov	r7, r1
 800b178:	4616      	mov	r6, r2
 800b17a:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800b17c:	f007 ffca 	bl	8013114 <UTIL_TIMER_GetCurrentTime>
 800b180:	4c0c      	ldr	r4, [pc, #48]	; (800b1b4 <OnRadioRxDone+0x44>)
 800b182:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800b184:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800b188:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800b18a:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800b18c:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800b18e:	4b0a      	ldr	r3, [pc, #40]	; (800b1b8 <OnRadioRxDone+0x48>)
 800b190:	781a      	ldrb	r2, [r3, #0]
 800b192:	f042 0210 	orr.w	r2, r2, #16
 800b196:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800b198:	b2d2      	uxtb	r2, r2
 800b19a:	f042 0201 	orr.w	r2, r2, #1
 800b19e:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800b1a0:	f7fe fab0 	bl	8009704 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800b1a4:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <OnRadioRxDone+0x4c>)
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	2002      	movs	r0, #2
 800b1ac:	f007 fca0 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 800b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b4:	20000c9c 	.word	0x20000c9c
 800b1b8:	200006ec 	.word	0x200006ec
 800b1bc:	08013e94 	.word	0x08013e94

0800b1c0 <OnRadioTxDone>:
{
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800b1c4:	f007 ffa6 	bl	8013114 <UTIL_TIMER_GetCurrentTime>
 800b1c8:	4b0c      	ldr	r3, [pc, #48]	; (800b1fc <OnRadioTxDone+0x3c>)
 800b1ca:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800b1cc:	466c      	mov	r4, sp
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f007 fef2 	bl	8012fb8 <SysTimeGet>
 800b1d4:	4b0a      	ldr	r3, [pc, #40]	; (800b200 <OnRadioTxDone+0x40>)
 800b1d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b1da:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800b1de:	4a09      	ldr	r2, [pc, #36]	; (800b204 <OnRadioTxDone+0x44>)
 800b1e0:	7813      	ldrb	r3, [r2, #0]
 800b1e2:	f043 0320 	orr.w	r3, r3, #32
 800b1e6:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b1e8:	f7fe fa8c 	bl	8009704 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800b1ec:	4b06      	ldr	r3, [pc, #24]	; (800b208 <OnRadioTxDone+0x48>)
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	2002      	movs	r0, #2
 800b1f4:	f007 fc7c 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 800b1f8:	b002      	add	sp, #8
 800b1fa:	bd10      	pop	{r4, pc}
 800b1fc:	20000cac 	.word	0x20000cac
 800b200:	20000a28 	.word	0x20000a28
 800b204:	200006ec 	.word	0x200006ec
 800b208:	08013ea4 	.word	0x08013ea4

0800b20c <ResetMacParameters>:
{
 800b20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b20e:	b091      	sub	sp, #68	; 0x44
    if( isRejoin == false )
 800b210:	b918      	cbnz	r0, 800b21a <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800b212:	4b61      	ldr	r3, [pc, #388]	; (800b398 <ResetMacParameters+0x18c>)
 800b214:	2200      	movs	r2, #0
 800b216:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800b21a:	4c5f      	ldr	r4, [pc, #380]	; (800b398 <ResetMacParameters+0x18c>)
 800b21c:	2500      	movs	r5, #0
 800b21e:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800b220:	4e5e      	ldr	r6, [pc, #376]	; (800b39c <ResetMacParameters+0x190>)
 800b222:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800b226:	f886 5419 	strb.w	r5, [r6, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800b22a:	f8c6 5498 	str.w	r5, [r6, #1176]	; 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800b22e:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800b232:	2701      	movs	r7, #1
 800b234:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b238:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 800b23c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b240:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 800b244:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800b248:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800b24c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b250:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800b254:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800b258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b25c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b260:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800b264:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800b268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b26c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800b270:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800b274:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800b278:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800b27c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800b280:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800b284:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b288:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800b28c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800b290:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800b294:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800b298:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800b29c:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800b2a0:	f886 541a 	strb.w	r5, [r6, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800b2a4:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800b2a8:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800b2ac:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800b2b0:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800b2b4:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800b2b8:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800b2bc:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800b2c0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800b2c4:	f884 5145 	strb.w	r5, [r4, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800b2c8:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800b2cc:	f884 5147 	strb.w	r5, [r4, #327]	; 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800b2d0:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b2d4:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800b2d8:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b2da:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800b2de:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800b2e0:	4b2f      	ldr	r3, [pc, #188]	; (800b3a0 <ResetMacParameters+0x194>)
 800b2e2:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b2e4:	a901      	add	r1, sp, #4
 800b2e6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b2ea:	f002 fc77 	bl	800dbdc <RegionInitDefaults>
    MacCtx.Channel = 0;
 800b2ee:	f886 541b 	strb.w	r5, [r6, #1051]	; 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800b2f2:	f886 53d0 	strb.w	r5, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800b2f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b2f8:	f8c6 33d4 	str.w	r3, [r6, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b2fc:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800b300:	f886 33e0 	strb.w	r3, [r6, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b304:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800b308:	f886 33e1 	strb.w	r3, [r6, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800b30c:	f886 53e2 	strb.w	r5, [r6, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800b310:	f886 73e3 	strb.w	r7, [r6, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b314:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800b318:	f886 33e4 	strb.w	r3, [r6, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b31c:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800b320:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800b324:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b32a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b32e:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b332:	f886 73fa 	strb.w	r7, [r6, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b336:	2302      	movs	r3, #2
 800b338:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800b33c:	950e      	str	r5, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800b33e:	950f      	str	r5, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800b340:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800b344:	b11b      	cbz	r3, 800b34e <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800b34e:	4b13      	ldr	r3, [pc, #76]	; (800b39c <ResetMacParameters+0x190>)
 800b350:	f503 628d 	add.w	r2, r3, #1128	; 0x468
 800b354:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800b356:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 800b35a:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800b35c:	f203 4254 	addw	r2, r3, #1108	; 0x454
 800b360:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800b362:	f203 4391 	addw	r3, r3, #1169	; 0x491
 800b366:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800b368:	4a0b      	ldr	r2, [pc, #44]	; (800b398 <ResetMacParameters+0x18c>)
 800b36a:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800b36e:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800b370:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800b374:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800b376:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800b37a:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800b37c:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800b380:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800b382:	f502 7398 	add.w	r3, r2, #304	; 0x130
 800b386:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800b388:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800b38c:	a90e      	add	r1, sp, #56	; 0x38
 800b38e:	a805      	add	r0, sp, #20
 800b390:	f001 fc02 	bl	800cb98 <LoRaMacClassBInit>
}
 800b394:	b011      	add	sp, #68	; 0x44
 800b396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b398:	20008000 	.word	0x20008000
 800b39c:	200006f0 	.word	0x200006f0
 800b3a0:	20000c0c 	.word	0x20000c0c

0800b3a4 <SwitchClass>:
{
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800b3a8:	4b45      	ldr	r3, [pc, #276]	; (800b4c0 <SwitchClass+0x11c>)
 800b3aa:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 800b3ae:	2d01      	cmp	r5, #1
 800b3b0:	d06e      	beq.n	800b490 <SwitchClass+0xec>
 800b3b2:	2d02      	cmp	r5, #2
 800b3b4:	d074      	beq.n	800b4a0 <SwitchClass+0xfc>
 800b3b6:	b10d      	cbz	r5, 800b3bc <SwitchClass+0x18>
 800b3b8:	2003      	movs	r0, #3
}
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800b3bc:	bb58      	cbnz	r0, 800b416 <SwitchClass+0x72>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b3be:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800b3c2:	336c      	adds	r3, #108	; 0x6c
 800b3c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b3c8:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800b3cc:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800b3ce:	2c01      	cmp	r4, #1
 800b3d0:	d023      	beq.n	800b41a <SwitchClass+0x76>
            if( deviceClass == CLASS_C )
 800b3d2:	2c02      	cmp	r4, #2
 800b3d4:	d1f1      	bne.n	800b3ba <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b3d6:	4b3a      	ldr	r3, [pc, #232]	; (800b4c0 <SwitchClass+0x11c>)
 800b3d8:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800b3dc:	4e39      	ldr	r6, [pc, #228]	; (800b4c4 <SwitchClass+0x120>)
 800b3de:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800b3e2:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800b3e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b3ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3ec:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800b3f0:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	dd15      	ble.n	800b42c <SwitchClass+0x88>
                MacCtx.NodeAckRequested = false;
 800b400:	4b30      	ldr	r3, [pc, #192]	; (800b4c4 <SwitchClass+0x120>)
 800b402:	2200      	movs	r2, #0
 800b404:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                Radio.Sleep( );
 800b408:	4b2f      	ldr	r3, [pc, #188]	; (800b4c8 <SwitchClass+0x124>)
 800b40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40c:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800b40e:	f7ff fced 	bl	800adec <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800b412:	4628      	mov	r0, r5
 800b414:	e7d1      	b.n	800b3ba <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b416:	2003      	movs	r0, #3
 800b418:	e7d9      	b.n	800b3ce <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800b41a:	4620      	mov	r0, r4
 800b41c:	f001 fbd2 	bl	800cbc4 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800b420:	2800      	cmp	r0, #0
 800b422:	d1d6      	bne.n	800b3d2 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800b424:	4b26      	ldr	r3, [pc, #152]	; (800b4c0 <SwitchClass+0x11c>)
 800b426:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800b42a:	e7d2      	b.n	800b3d2 <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800b42c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800b430:	4a23      	ldr	r2, [pc, #140]	; (800b4c0 <SwitchClass+0x11c>)
 800b432:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800b436:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800b43a:	b132      	cbz	r2, 800b44a <SwitchClass+0xa6>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800b43c:	4a20      	ldr	r2, [pc, #128]	; (800b4c0 <SwitchClass+0x11c>)
 800b43e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800b442:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800b446:	2a02      	cmp	r2, #2
 800b448:	d002      	beq.n	800b450 <SwitchClass+0xac>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b44a:	3301      	adds	r3, #1
 800b44c:	b25b      	sxtb	r3, r3
 800b44e:	e7d5      	b.n	800b3fc <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800b450:	4a1b      	ldr	r2, [pc, #108]	; (800b4c0 <SwitchClass+0x11c>)
 800b452:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800b456:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800b45a:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800b45c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800b460:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b464:	4b17      	ldr	r3, [pc, #92]	; (800b4c4 <SwitchClass+0x120>)
 800b466:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800b46a:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b46e:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b472:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 800b476:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b47a:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800b47e:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800b482:	2203      	movs	r2, #3
 800b484:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800b48e:	e7b7      	b.n	800b400 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800b490:	f001 fb98 	bl	800cbc4 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800b494:	2800      	cmp	r0, #0
 800b496:	d190      	bne.n	800b3ba <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b498:	4b09      	ldr	r3, [pc, #36]	; (800b4c0 <SwitchClass+0x11c>)
 800b49a:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800b49e:	e78c      	b.n	800b3ba <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800b4a0:	b958      	cbnz	r0, 800b4ba <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800b4a2:	4b08      	ldr	r3, [pc, #32]	; (800b4c4 <SwitchClass+0x120>)
 800b4a4:	2206      	movs	r2, #6
 800b4a6:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b4aa:	4b05      	ldr	r3, [pc, #20]	; (800b4c0 <SwitchClass+0x11c>)
 800b4ac:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 800b4b0:	4b05      	ldr	r3, [pc, #20]	; (800b4c8 <SwitchClass+0x124>)
 800b4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b4:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	e77f      	b.n	800b3ba <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b4ba:	2003      	movs	r0, #3
 800b4bc:	e77d      	b.n	800b3ba <SwitchClass+0x16>
 800b4be:	bf00      	nop
 800b4c0:	20008000 	.word	0x20008000
 800b4c4:	200006f0 	.word	0x200006f0
 800b4c8:	0801458c 	.word	0x0801458c

0800b4cc <SendReJoinReq>:
{
 800b4cc:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800b4ce:	28ff      	cmp	r0, #255	; 0xff
 800b4d0:	d003      	beq.n	800b4da <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800b4d2:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800b4d4:	f7ff fb4e 	bl	800ab74 <ScheduleTx>
}
 800b4d8:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800b4da:	2000      	movs	r0, #0
 800b4dc:	f7ff ff62 	bl	800b3a4 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b4e0:	4d0a      	ldr	r5, [pc, #40]	; (800b50c <SendReJoinReq+0x40>)
 800b4e2:	2400      	movs	r4, #0
 800b4e4:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b4e8:	1cab      	adds	r3, r5, #2
 800b4ea:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b4ee:	23ff      	movs	r3, #255	; 0xff
 800b4f0:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800b4f4:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800b4f8:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800b4fc:	f005 fafe 	bl	8010afc <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800b500:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800b504:	f005 fadc 	bl	8010ac0 <SecureElementGetDevEui>
            allowDelayedTx = false;
 800b508:	4620      	mov	r0, r4
            break;
 800b50a:	e7e3      	b.n	800b4d4 <SendReJoinReq+0x8>
 800b50c:	200006f0 	.word	0x200006f0

0800b510 <PrepareFrame>:
{
 800b510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b514:	b083      	sub	sp, #12
 800b516:	4605      	mov	r5, r0
 800b518:	460e      	mov	r6, r1
 800b51a:	4617      	mov	r7, r2
 800b51c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800b520:	4959      	ldr	r1, [pc, #356]	; (800b688 <PrepareFrame+0x178>)
 800b522:	2200      	movs	r2, #0
 800b524:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800b526:	f881 241a 	strb.w	r2, [r1, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 800b52a:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800b52c:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800b52e:	4698      	mov	r8, r3
 800b530:	b1cb      	cbz	r3, 800b566 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b532:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800b688 <PrepareFrame+0x178>
 800b536:	4622      	mov	r2, r4
 800b538:	4641      	mov	r1, r8
 800b53a:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800b53e:	f005 fbfa 	bl	8010d36 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b542:	b2e0      	uxtb	r0, r4
 800b544:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b548:	782b      	ldrb	r3, [r5, #0]
 800b54a:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800b54e:	782b      	ldrb	r3, [r5, #0]
 800b550:	095b      	lsrs	r3, r3, #5
 800b552:	2b04      	cmp	r3, #4
 800b554:	d009      	beq.n	800b56a <PrepareFrame+0x5a>
 800b556:	2b07      	cmp	r3, #7
 800b558:	d079      	beq.n	800b64e <PrepareFrame+0x13e>
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d009      	beq.n	800b572 <PrepareFrame+0x62>
 800b55e:	2002      	movs	r0, #2
}
 800b560:	b003      	add	sp, #12
 800b562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800b566:	4614      	mov	r4, r2
 800b568:	e7e3      	b.n	800b532 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800b56a:	4b47      	ldr	r3, [pc, #284]	; (800b688 <PrepareFrame+0x178>)
 800b56c:	2201      	movs	r2, #1
 800b56e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b572:	4b45      	ldr	r3, [pc, #276]	; (800b688 <PrepareFrame+0x178>)
 800b574:	2204      	movs	r2, #4
 800b576:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b57a:	1c9a      	adds	r2, r3, #2
 800b57c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b580:	22ff      	movs	r2, #255	; 0xff
 800b582:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b586:	782a      	ldrb	r2, [r5, #0]
 800b588:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b58c:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800b590:	4a3e      	ldr	r2, [pc, #248]	; (800b68c <PrepareFrame+0x17c>)
 800b592:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800b596:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b59a:	7832      	ldrb	r2, [r6, #0]
 800b59c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b5a0:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b5a4:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800b5a8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b5ac:	a801      	add	r0, sp, #4
 800b5ae:	f001 ff93 	bl	800d4d8 <LoRaMacCryptoGetFCntUp>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d15c      	bne.n	800b670 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b5b6:	9a01      	ldr	r2, [sp, #4]
 800b5b8:	4b33      	ldr	r3, [pc, #204]	; (800b688 <PrepareFrame+0x178>)
 800b5ba:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800b5be:	2100      	movs	r1, #0
 800b5c0:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800b5c4:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b5c8:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b5cc:	4668      	mov	r0, sp
 800b5ce:	f001 fc2b 	bl	800ce28 <LoRaMacCommandsGetSizeSerializedCmds>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d14e      	bne.n	800b674 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800b5d6:	9b00      	ldr	r3, [sp, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d0c1      	beq.n	800b560 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800b5dc:	4b2b      	ldr	r3, [pc, #172]	; (800b68c <PrepareFrame+0x17c>)
 800b5de:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800b5e2:	f7fe f8bf 	bl	8009764 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b5e6:	4b28      	ldr	r3, [pc, #160]	; (800b688 <PrepareFrame+0x178>)
 800b5e8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800b5ec:	b113      	cbz	r3, 800b5f4 <PrepareFrame+0xe4>
 800b5ee:	9a00      	ldr	r2, [sp, #0]
 800b5f0:	2a0f      	cmp	r2, #15
 800b5f2:	d915      	bls.n	800b620 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b5f4:	b113      	cbz	r3, 800b5fc <PrepareFrame+0xec>
 800b5f6:	9b00      	ldr	r3, [sp, #0]
 800b5f8:	2b0f      	cmp	r3, #15
 800b5fa:	d821      	bhi.n	800b640 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b5fc:	4a24      	ldr	r2, [pc, #144]	; (800b690 <PrepareFrame+0x180>)
 800b5fe:	4669      	mov	r1, sp
 800b600:	f001 fc1e 	bl	800ce40 <LoRaMacCommandsSerializeCmds>
 800b604:	2800      	cmp	r0, #0
 800b606:	d13b      	bne.n	800b680 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b608:	4b1f      	ldr	r3, [pc, #124]	; (800b688 <PrepareFrame+0x178>)
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800b610:	f203 429c 	addw	r2, r3, #1180	; 0x49c
 800b614:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b618:	9a00      	ldr	r2, [sp, #0]
 800b61a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800b61e:	e79f      	b.n	800b560 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b620:	4a1c      	ldr	r2, [pc, #112]	; (800b694 <PrepareFrame+0x184>)
 800b622:	4669      	mov	r1, sp
 800b624:	200f      	movs	r0, #15
 800b626:	f001 fc0b 	bl	800ce40 <LoRaMacCommandsSerializeCmds>
 800b62a:	bb28      	cbnz	r0, 800b678 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b62c:	7833      	ldrb	r3, [r6, #0]
 800b62e:	9a00      	ldr	r2, [sp, #0]
 800b630:	f362 0303 	bfi	r3, r2, #0, #4
 800b634:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b636:	b2da      	uxtb	r2, r3
 800b638:	4b13      	ldr	r3, [pc, #76]	; (800b688 <PrepareFrame+0x178>)
 800b63a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800b63e:	e78f      	b.n	800b560 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b640:	4a13      	ldr	r2, [pc, #76]	; (800b690 <PrepareFrame+0x180>)
 800b642:	4669      	mov	r1, sp
 800b644:	f001 fbfc 	bl	800ce40 <LoRaMacCommandsSerializeCmds>
 800b648:	b1c0      	cbz	r0, 800b67c <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b64a:	2013      	movs	r0, #19
 800b64c:	e788      	b.n	800b560 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800b64e:	f1b8 0f00 	cmp.w	r8, #0
 800b652:	d017      	beq.n	800b684 <PrepareFrame+0x174>
 800b654:	2800      	cmp	r0, #0
 800b656:	d083      	beq.n	800b560 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800b658:	4c0b      	ldr	r4, [pc, #44]	; (800b688 <PrepareFrame+0x178>)
 800b65a:	b282      	uxth	r2, r0
 800b65c:	4641      	mov	r1, r8
 800b65e:	1ce0      	adds	r0, r4, #3
 800b660:	f005 fb69 	bl	8010d36 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800b664:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800b668:	3301      	adds	r3, #1
 800b66a:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800b66c:	2000      	movs	r0, #0
 800b66e:	e777      	b.n	800b560 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b670:	2012      	movs	r0, #18
 800b672:	e775      	b.n	800b560 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b674:	2013      	movs	r0, #19
 800b676:	e773      	b.n	800b560 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b678:	2013      	movs	r0, #19
 800b67a:	e771      	b.n	800b560 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800b67c:	200a      	movs	r0, #10
 800b67e:	e76f      	b.n	800b560 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b680:	2013      	movs	r0, #19
 800b682:	e76d      	b.n	800b560 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800b684:	2000      	movs	r0, #0
 800b686:	e76b      	b.n	800b560 <PrepareFrame+0x50>
 800b688:	200006f0 	.word	0x200006f0
 800b68c:	20008000 	.word	0x20008000
 800b690:	20000b8c 	.word	0x20000b8c
 800b694:	20000808 	.word	0x20000808

0800b698 <Send>:
{
 800b698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b69c:	b08a      	sub	sp, #40	; 0x28
 800b69e:	4617      	mov	r7, r2
 800b6a0:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b6a2:	4c44      	ldr	r4, [pc, #272]	; (800b7b4 <Send+0x11c>)
 800b6a4:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800b6a8:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b6ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b6ae:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b6b0:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d07a      	beq.n	800b7ae <Send+0x116>
 800b6b8:	4605      	mov	r5, r0
 800b6ba:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800b6bc:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800b6c0:	b90b      	cbnz	r3, 800b6c6 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800b6cc:	4839      	ldr	r0, [pc, #228]	; (800b7b4 <Send+0x11c>)
 800b6ce:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 800b6d2:	f361 13c7 	bfi	r3, r1, #7, #1
 800b6d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b6da:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d052      	beq.n	800b788 <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800b6e2:	4b34      	ldr	r3, [pc, #208]	; (800b7b4 <Send+0x11c>)
 800b6e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b6e8:	b12b      	cbz	r3, 800b6f6 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800b6ea:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b6ee:	f043 0320 	orr.w	r3, r3, #32
 800b6f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b6fc:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b700:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800b702:	492c      	ldr	r1, [pc, #176]	; (800b7b4 <Send+0x11c>)
 800b704:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800b708:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800b70c:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800b710:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b714:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b718:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b71c:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800b720:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800b724:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800b728:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b72c:	460b      	mov	r3, r1
 800b72e:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800b732:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800b736:	aa08      	add	r2, sp, #32
 800b738:	9200      	str	r2, [sp, #0]
 800b73a:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800b73e:	3139      	adds	r1, #57	; 0x39
 800b740:	a803      	add	r0, sp, #12
 800b742:	f001 f9af 	bl	800caa4 <LoRaMacAdrCalcNext>
 800b746:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b74a:	f360 1386 	bfi	r3, r0, #6, #1
 800b74e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800b752:	f8cd 8000 	str.w	r8, [sp]
 800b756:	463b      	mov	r3, r7
 800b758:	4632      	mov	r2, r6
 800b75a:	a909      	add	r1, sp, #36	; 0x24
 800b75c:	4628      	mov	r0, r5
 800b75e:	f7ff fed7 	bl	800b510 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b762:	4604      	mov	r4, r0
 800b764:	b108      	cbz	r0, 800b76a <Send+0xd2>
 800b766:	280a      	cmp	r0, #10
 800b768:	d104      	bne.n	800b774 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800b76a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800b76e:	f7ff fa01 	bl	800ab74 <ScheduleTx>
 800b772:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800b774:	b17c      	cbz	r4, 800b796 <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800b776:	4b0f      	ldr	r3, [pc, #60]	; (800b7b4 <Send+0x11c>)
 800b778:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800b77c:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800b780:	4620      	mov	r0, r4
 800b782:	b00a      	add	sp, #40	; 0x28
 800b784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800b788:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b78c:	f043 0310 	orr.w	r3, r3, #16
 800b790:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b794:	e7a5      	b.n	800b6e2 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800b796:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <Send+0x11c>)
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800b79e:	9a08      	ldr	r2, [sp, #32]
 800b7a0:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800b7a2:	f001 fb0f 	bl	800cdc4 <LoRaMacCommandsRemoveNoneStickyCmds>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d0ea      	beq.n	800b780 <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b7aa:	2413      	movs	r4, #19
 800b7ac:	e7e8      	b.n	800b780 <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800b7ae:	2407      	movs	r4, #7
 800b7b0:	e7e6      	b.n	800b780 <Send+0xe8>
 800b7b2:	bf00      	nop
 800b7b4:	20008000 	.word	0x20008000

0800b7b8 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b7b8:	4b0c      	ldr	r3, [pc, #48]	; (800b7ec <LoRaMacIsBusy+0x34>)
 800b7ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d00c      	beq.n	800b7dc <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800b7c2:	4a0b      	ldr	r2, [pc, #44]	; (800b7f0 <LoRaMacIsBusy+0x38>)
 800b7c4:	7812      	ldrb	r2, [r2, #0]
 800b7c6:	f012 0f01 	tst.w	r2, #1
 800b7ca:	d109      	bne.n	800b7e0 <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b7cc:	b953      	cbnz	r3, 800b7e4 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b7ce:	4b07      	ldr	r3, [pc, #28]	; (800b7ec <LoRaMacIsBusy+0x34>)
 800b7d0:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d007      	beq.n	800b7e8 <LoRaMacIsBusy+0x30>
    return true;
 800b7d8:	2001      	movs	r0, #1
 800b7da:	4770      	bx	lr
        return false;
 800b7dc:	2000      	movs	r0, #0
 800b7de:	4770      	bx	lr
        return true;
 800b7e0:	2001      	movs	r0, #1
 800b7e2:	4770      	bx	lr
    return true;
 800b7e4:	2001      	movs	r0, #1
 800b7e6:	4770      	bx	lr
        return false;
 800b7e8:	2000      	movs	r0, #0
}
 800b7ea:	4770      	bx	lr
 800b7ec:	200006f0 	.word	0x200006f0
 800b7f0:	200006ec 	.word	0x200006ec

0800b7f4 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b7f4:	4b04      	ldr	r3, [pc, #16]	; (800b808 <LoRaMacIsStopped+0x14>)
 800b7f6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d001      	beq.n	800b802 <LoRaMacIsStopped+0xe>
    return false;
 800b7fe:	2000      	movs	r0, #0
 800b800:	4770      	bx	lr
        return true;
 800b802:	2001      	movs	r0, #1
}
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	200006f0 	.word	0x200006f0

0800b80c <LoRaMacProcess>:
{
 800b80c:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800b80e:	f7ff f801 	bl	800a814 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800b812:	f001 f9e8 	bl	800cbe6 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800b816:	4b1f      	ldr	r3, [pc, #124]	; (800b894 <LoRaMacProcess+0x88>)
 800b818:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b81c:	f013 0f10 	tst.w	r3, #16
 800b820:	d10d      	bne.n	800b83e <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800b822:	f7fd fe69 	bl	80094f8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800b826:	4b1b      	ldr	r3, [pc, #108]	; (800b894 <LoRaMacProcess+0x88>)
 800b828:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d022      	beq.n	800b876 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800b830:	4b18      	ldr	r3, [pc, #96]	; (800b894 <LoRaMacProcess+0x88>)
 800b832:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b836:	f013 0f20 	tst.w	r3, #32
 800b83a:	d11f      	bne.n	800b87c <LoRaMacProcess+0x70>
}
 800b83c:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800b83e:	2000      	movs	r0, #0
 800b840:	f7fd fe54 	bl	80094ec <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800b844:	f7fd fe90 	bl	8009568 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800b848:	f7fd ff80 	bl	800974c <IsRequestPending>
 800b84c:	b110      	cbz	r0, 800b854 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800b84e:	f7fe f86f 	bl	8009930 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800b852:	b918      	cbnz	r0, 800b85c <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800b854:	f7ff f820 	bl	800a898 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800b858:	f7ff fa42 	bl	800ace0 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800b85c:	f7ff fa7c 	bl	800ad58 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b860:	2001      	movs	r0, #1
 800b862:	f7fd fe43 	bl	80094ec <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b866:	4a0b      	ldr	r2, [pc, #44]	; (800b894 <LoRaMacProcess+0x88>)
 800b868:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800b86c:	f043 0320 	orr.w	r3, r3, #32
 800b870:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800b874:	e7d5      	b.n	800b822 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800b876:	f7ff fab9 	bl	800adec <OpenContinuousRxCWindow>
 800b87a:	e7d9      	b.n	800b830 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800b87c:	4b05      	ldr	r3, [pc, #20]	; (800b894 <LoRaMacProcess+0x88>)
 800b87e:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800b882:	f36f 1245 	bfc	r2, #5, #1
 800b886:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800b88a:	4803      	ldr	r0, [pc, #12]	; (800b898 <LoRaMacProcess+0x8c>)
 800b88c:	f7ff fb5e 	bl	800af4c <LoRaMacHandleNvm>
}
 800b890:	e7d4      	b.n	800b83c <LoRaMacProcess+0x30>
 800b892:	bf00      	nop
 800b894:	200006f0 	.word	0x200006f0
 800b898:	20008000 	.word	0x20008000

0800b89c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a0:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	f000 81a3 	beq.w	800bbee <LoRaMacInitialization+0x352>
 800b8a8:	4688      	mov	r8, r1
 800b8aa:	4691      	mov	r9, r2
 800b8ac:	4607      	mov	r7, r0
 800b8ae:	2900      	cmp	r1, #0
 800b8b0:	f000 819f 	beq.w	800bbf2 <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800b8b4:	6803      	ldr	r3, [r0, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 819d 	beq.w	800bbf6 <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800b8bc:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f000 819b 	beq.w	800bbfa <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b8c4:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f000 8199 	beq.w	800bbfe <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800b8cc:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f000 8197 	beq.w	800bc02 <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	f002 f951 	bl	800db7c <RegionIsActive>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	f000 8193 	beq.w	800bc06 <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	f001 fb41 	bl	800cf68 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800b8e6:	4ccb      	ldr	r4, [pc, #812]	; (800bc14 <LoRaMacInitialization+0x378>)
 800b8e8:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f005 fa39 	bl	8010d66 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800b8f4:	4ec8      	ldr	r6, [pc, #800]	; (800bc18 <LoRaMacInitialization+0x37c>)
 800b8f6:	f240 521c 	movw	r2, #1308	; 0x51c
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f005 fa32 	bl	8010d66 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800b902:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800b906:	2500      	movs	r5, #0
 800b908:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800b90c:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800b910:	4bc2      	ldr	r3, [pc, #776]	; (800bc1c <LoRaMacInitialization+0x380>)
 800b912:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800b916:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b91a:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800b91e:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b920:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800b924:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800b926:	4bbe      	ldr	r3, [pc, #760]	; (800bc20 <LoRaMacInitialization+0x384>)
 800b928:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b92a:	a905      	add	r1, sp, #20
 800b92c:	4648      	mov	r0, r9
 800b92e:	f002 f955 	bl	800dbdc <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b932:	230f      	movs	r3, #15
 800b934:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b938:	a90a      	add	r1, sp, #40	; 0x28
 800b93a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b93e:	f002 f927 	bl	800db90 <RegionGetPhyParam>
 800b942:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800b944:	1b40      	subs	r0, r0, r5
 800b946:	bf18      	it	ne
 800b948:	2001      	movne	r0, #1
 800b94a:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800b94e:	f04f 0a0a 	mov.w	sl, #10
 800b952:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b956:	a90a      	add	r1, sp, #40	; 0x28
 800b958:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b95c:	f002 f918 	bl	800db90 <RegionGetPhyParam>
 800b960:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800b962:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800b966:	f04f 0906 	mov.w	r9, #6
 800b96a:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b96e:	a90a      	add	r1, sp, #40	; 0x28
 800b970:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b974:	f002 f90c 	bl	800db90 <RegionGetPhyParam>
 800b978:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800b97a:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800b97e:	2310      	movs	r3, #16
 800b980:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b984:	a90a      	add	r1, sp, #40	; 0x28
 800b986:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b98a:	f002 f901 	bl	800db90 <RegionGetPhyParam>
 800b98e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800b990:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800b994:	2311      	movs	r3, #17
 800b996:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b99a:	a90a      	add	r1, sp, #40	; 0x28
 800b99c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b9a0:	f002 f8f6 	bl	800db90 <RegionGetPhyParam>
 800b9a4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800b9a6:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800b9aa:	2312      	movs	r3, #18
 800b9ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b9b0:	a90a      	add	r1, sp, #40	; 0x28
 800b9b2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b9b6:	f002 f8eb 	bl	800db90 <RegionGetPhyParam>
 800b9ba:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800b9bc:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800b9c0:	2313      	movs	r3, #19
 800b9c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b9c6:	a90a      	add	r1, sp, #40	; 0x28
 800b9c8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b9cc:	f002 f8e0 	bl	800db90 <RegionGetPhyParam>
 800b9d0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800b9d2:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800b9d6:	2314      	movs	r3, #20
 800b9d8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b9dc:	a90a      	add	r1, sp, #40	; 0x28
 800b9de:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b9e2:	f002 f8d5 	bl	800db90 <RegionGetPhyParam>
 800b9e6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800b9e8:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800b9ec:	2316      	movs	r3, #22
 800b9ee:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b9f2:	a90a      	add	r1, sp, #40	; 0x28
 800b9f4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b9f8:	f002 f8ca 	bl	800db90 <RegionGetPhyParam>
 800b9fc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800b9fe:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800ba02:	2317      	movs	r3, #23
 800ba04:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ba08:	a90a      	add	r1, sp, #40	; 0x28
 800ba0a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ba0e:	f002 f8bf 	bl	800db90 <RegionGetPhyParam>
 800ba12:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800ba14:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800ba18:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800ba1c:	2318      	movs	r3, #24
 800ba1e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ba22:	a90a      	add	r1, sp, #40	; 0x28
 800ba24:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ba28:	f002 f8b2 	bl	800db90 <RegionGetPhyParam>
 800ba2c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800ba2e:	b2c0      	uxtb	r0, r0
 800ba30:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800ba34:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800ba38:	231d      	movs	r3, #29
 800ba3a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ba3e:	a90a      	add	r1, sp, #40	; 0x28
 800ba40:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ba44:	f002 f8a4 	bl	800db90 <RegionGetPhyParam>
 800ba48:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800ba4a:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800ba4e:	231e      	movs	r3, #30
 800ba50:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ba54:	a90a      	add	r1, sp, #40	; 0x28
 800ba56:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ba5a:	f002 f899 	bl	800db90 <RegionGetPhyParam>
 800ba5e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800ba60:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800ba64:	231f      	movs	r3, #31
 800ba66:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ba6a:	a90a      	add	r1, sp, #40	; 0x28
 800ba6c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ba70:	f002 f88e 	bl	800db90 <RegionGetPhyParam>
 800ba74:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800ba76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba78:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800ba7c:	2320      	movs	r3, #32
 800ba7e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ba82:	a90a      	add	r1, sp, #40	; 0x28
 800ba84:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ba88:	f002 f882 	bl	800db90 <RegionGetPhyParam>
 800ba8c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800ba8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba90:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800ba94:	230b      	movs	r3, #11
 800ba96:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ba9a:	a90a      	add	r1, sp, #40	; 0x28
 800ba9c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800baa0:	f002 f876 	bl	800db90 <RegionGetPhyParam>
 800baa4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800baa6:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800baaa:	230c      	movs	r3, #12
 800baac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bab0:	a90a      	add	r1, sp, #40	; 0x28
 800bab2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bab6:	f002 f86b 	bl	800db90 <RegionGetPhyParam>
 800baba:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800babc:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800bac0:	f04f 0b01 	mov.w	fp, #1
 800bac4:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800bac8:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800bacc:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800bad0:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800bad4:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800bad8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800badc:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800bade:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bae2:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800bae4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800bae8:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800baea:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800baee:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800baf0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800baf4:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800baf6:	f884 b068 	strb.w	fp, [r4, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800bafa:	f884 b11f 	strb.w	fp, [r4, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800bafe:	f8c6 8348 	str.w	r8, [r6, #840]	; 0x348
    ResetMacParameters( false );
 800bb02:	4628      	mov	r0, r5
 800bb04:	f7ff fb82 	bl	800b20c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800bb08:	f884 b119 	strb.w	fp, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800bb0c:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800bb10:	f886 5491 	strb.w	r5, [r6, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800bb14:	f8c6 b340 	str.w	fp, [r6, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800bb18:	62e5      	str	r5, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800bb1a:	6325      	str	r5, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800bb1c:	9500      	str	r5, [sp, #0]
 800bb1e:	4b41      	ldr	r3, [pc, #260]	; (800bc24 <LoRaMacInitialization+0x388>)
 800bb20:	462a      	mov	r2, r5
 800bb22:	f04f 31ff 	mov.w	r1, #4294967295
 800bb26:	f506 705a 	add.w	r0, r6, #872	; 0x368
 800bb2a:	f007 fad5 	bl	80130d8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800bb2e:	9500      	str	r5, [sp, #0]
 800bb30:	4b3d      	ldr	r3, [pc, #244]	; (800bc28 <LoRaMacInitialization+0x38c>)
 800bb32:	462a      	mov	r2, r5
 800bb34:	f04f 31ff 	mov.w	r1, #4294967295
 800bb38:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800bb3c:	f007 facc 	bl	80130d8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800bb40:	9500      	str	r5, [sp, #0]
 800bb42:	4b3a      	ldr	r3, [pc, #232]	; (800bc2c <LoRaMacInitialization+0x390>)
 800bb44:	462a      	mov	r2, r5
 800bb46:	f04f 31ff 	mov.w	r1, #4294967295
 800bb4a:	f506 7066 	add.w	r0, r6, #920	; 0x398
 800bb4e:	f007 fac3 	bl	80130d8 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800bb52:	9500      	str	r5, [sp, #0]
 800bb54:	4b36      	ldr	r3, [pc, #216]	; (800bc30 <LoRaMacInitialization+0x394>)
 800bb56:	462a      	mov	r2, r5
 800bb58:	f04f 31ff 	mov.w	r1, #4294967295
 800bb5c:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800bb60:	f007 faba 	bl	80130d8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800bb64:	af02      	add	r7, sp, #8
 800bb66:	4638      	mov	r0, r7
 800bb68:	f007 fa48 	bl	8012ffc <SysTimeGetMcuTime>
 800bb6c:	f504 7392 	add.w	r3, r4, #292	; 0x124
 800bb70:	e897 0003 	ldmia.w	r7, {r0, r1}
 800bb74:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800bb78:	4b2e      	ldr	r3, [pc, #184]	; (800bc34 <LoRaMacInitialization+0x398>)
 800bb7a:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800bb7c:	4b2e      	ldr	r3, [pc, #184]	; (800bc38 <LoRaMacInitialization+0x39c>)
 800bb7e:	f8c6 334c 	str.w	r3, [r6, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800bb82:	4b2e      	ldr	r3, [pc, #184]	; (800bc3c <LoRaMacInitialization+0x3a0>)
 800bb84:	f8c6 3354 	str.w	r3, [r6, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800bb88:	4b2d      	ldr	r3, [pc, #180]	; (800bc40 <LoRaMacInitialization+0x3a4>)
 800bb8a:	f8c6 335c 	str.w	r3, [r6, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800bb8e:	4b2d      	ldr	r3, [pc, #180]	; (800bc44 <LoRaMacInitialization+0x3a8>)
 800bb90:	f8c6 3350 	str.w	r3, [r6, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800bb94:	4b2c      	ldr	r3, [pc, #176]	; (800bc48 <LoRaMacInitialization+0x3ac>)
 800bb96:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800bb9a:	4b2c      	ldr	r3, [pc, #176]	; (800bc4c <LoRaMacInitialization+0x3b0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f506 7053 	add.w	r0, r6, #844	; 0x34c
 800bba2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800bba4:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800bba8:	f004 fdf2 	bl	8010790 <SecureElementInit>
 800bbac:	bb80      	cbnz	r0, 800bc10 <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f001 fc72 	bl	800d498 <LoRaMacCryptoInit>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d14b      	bne.n	800bc50 <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800bbb8:	f001 f898 	bl	800ccec <LoRaMacCommandsInit>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d149      	bne.n	800bc54 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800bbc0:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800bbc4:	f001 fcba 	bl	800d53c <LoRaMacCryptoSetMulticastReference>
 800bbc8:	4604      	mov	r4, r0
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d144      	bne.n	800bc58 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800bbce:	4d1f      	ldr	r5, [pc, #124]	; (800bc4c <LoRaMacInitialization+0x3b0>)
 800bbd0:	696b      	ldr	r3, [r5, #20]
 800bbd2:	4798      	blx	r3
 800bbd4:	f005 f89c 	bl	8010d10 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800bbd8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800bbda:	4a0e      	ldr	r2, [pc, #56]	; (800bc14 <LoRaMacInitialization+0x378>)
 800bbdc:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800bbe0:	4798      	blx	r3
    Radio.Sleep( );
 800bbe2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bbe4:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800bbe6:	4658      	mov	r0, fp
 800bbe8:	f7fd fc80 	bl	80094ec <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800bbec:	e00c      	b.n	800bc08 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bbee:	2403      	movs	r4, #3
 800bbf0:	e00a      	b.n	800bc08 <LoRaMacInitialization+0x36c>
 800bbf2:	2403      	movs	r4, #3
 800bbf4:	e008      	b.n	800bc08 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bbf6:	2403      	movs	r4, #3
 800bbf8:	e006      	b.n	800bc08 <LoRaMacInitialization+0x36c>
 800bbfa:	2403      	movs	r4, #3
 800bbfc:	e004      	b.n	800bc08 <LoRaMacInitialization+0x36c>
 800bbfe:	2403      	movs	r4, #3
 800bc00:	e002      	b.n	800bc08 <LoRaMacInitialization+0x36c>
 800bc02:	2403      	movs	r4, #3
 800bc04:	e000      	b.n	800bc08 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800bc06:	2409      	movs	r4, #9
}
 800bc08:	4620      	mov	r0, r4
 800bc0a:	b00d      	add	sp, #52	; 0x34
 800bc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800bc10:	2411      	movs	r4, #17
 800bc12:	e7f9      	b.n	800bc08 <LoRaMacInitialization+0x36c>
 800bc14:	20008000 	.word	0x20008000
 800bc18:	200006f0 	.word	0x200006f0
 800bc1c:	01000400 	.word	0x01000400
 800bc20:	20000c0c 	.word	0x20000c0c
 800bc24:	0800ac7d 	.word	0x0800ac7d
 800bc28:	0800aefd 	.word	0x0800aefd
 800bc2c:	0800aea5 	.word	0x0800aea5
 800bc30:	080098cd 	.word	0x080098cd
 800bc34:	200006ec 	.word	0x200006ec
 800bc38:	0800b1c1 	.word	0x0800b1c1
 800bc3c:	0800b171 	.word	0x0800b171
 800bc40:	0800971d 	.word	0x0800971d
 800bc44:	0800b149 	.word	0x0800b149
 800bc48:	0800b121 	.word	0x0800b121
 800bc4c:	0801458c 	.word	0x0801458c
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800bc50:	2411      	movs	r4, #17
 800bc52:	e7d9      	b.n	800bc08 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bc54:	2413      	movs	r4, #19
 800bc56:	e7d7      	b.n	800bc08 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800bc58:	2411      	movs	r4, #17
 800bc5a:	e7d5      	b.n	800bc08 <LoRaMacInitialization+0x36c>

0800bc5c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800bc5c:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800bc5e:	2400      	movs	r4, #0
 800bc60:	4b03      	ldr	r3, [pc, #12]	; (800bc70 <LoRaMacStart+0x14>)
 800bc62:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800bc66:	f7fd fc2d 	bl	80094c4 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	bd10      	pop	{r4, pc}
 800bc6e:	bf00      	nop
 800bc70:	200006f0 	.word	0x200006f0

0800bc74 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800bc74:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800bc76:	f7ff fd9f 	bl	800b7b8 <LoRaMacIsBusy>
 800bc7a:	b130      	cbz	r0, 800bc8a <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800bc7c:	4b0b      	ldr	r3, [pc, #44]	; (800bcac <LoRaMacStop+0x38>)
 800bc7e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d010      	beq.n	800bca8 <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800bc86:	2001      	movs	r0, #1
}
 800bc88:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800bc8a:	4b09      	ldr	r3, [pc, #36]	; (800bcb0 <LoRaMacStop+0x3c>)
 800bc8c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d005      	beq.n	800bca0 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800bc94:	4b05      	ldr	r3, [pc, #20]	; (800bcac <LoRaMacStop+0x38>)
 800bc96:	2201      	movs	r2, #1
 800bc98:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	e7f3      	b.n	800bc88 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800bca0:	4b04      	ldr	r3, [pc, #16]	; (800bcb4 <LoRaMacStop+0x40>)
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	4798      	blx	r3
 800bca6:	e7f5      	b.n	800bc94 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800bca8:	2000      	movs	r0, #0
 800bcaa:	e7ed      	b.n	800bc88 <LoRaMacStop+0x14>
 800bcac:	200006f0 	.word	0x200006f0
 800bcb0:	20008000 	.word	0x20008000
 800bcb4:	0801458c 	.word	0x0801458c

0800bcb8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800bcb8:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800bcba:	4c14      	ldr	r4, [pc, #80]	; (800bd0c <LoRaMacHalt+0x54>)
 800bcbc:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800bcc0:	f007 fa68 	bl	8013194 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800bcc4:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800bcc8:	f007 fa64 	bl	8013194 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800bccc:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800bcd0:	f007 fa60 	bl	8013194 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800bcd4:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800bcd8:	f007 fa5c 	bl	8013194 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800bcdc:	f000 ff70 	bl	800cbc0 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800bce0:	4b0b      	ldr	r3, [pc, #44]	; (800bd10 <LoRaMacHalt+0x58>)
 800bce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800bce6:	2500      	movs	r5, #0
 800bce8:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800bcec:	4e09      	ldr	r6, [pc, #36]	; (800bd14 <LoRaMacHalt+0x5c>)
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f7ff f92c 	bl	800af4c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800bcf4:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800bcf8:	4631      	mov	r1, r6
 800bcfa:	4807      	ldr	r0, [pc, #28]	; (800bd18 <LoRaMacHalt+0x60>)
 800bcfc:	f005 f81b 	bl	8010d36 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800bd00:	2301      	movs	r3, #1
 800bd02:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800bd06:	4628      	mov	r0, r5
 800bd08:	bd70      	pop	{r4, r5, r6, pc}
 800bd0a:	bf00      	nop
 800bd0c:	200006f0 	.word	0x200006f0
 800bd10:	0801458c 	.word	0x0801458c
 800bd14:	20008000 	.word	0x20008000
 800bd18:	200085cc 	.word	0x200085cc

0800bd1c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800bd1c:	b530      	push	{r4, r5, lr}
 800bd1e:	b08b      	sub	sp, #44	; 0x2c
 800bd20:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bd22:	4b31      	ldr	r3, [pc, #196]	; (800bde8 <LoRaMacQueryTxPossible+0xcc>)
 800bd24:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bd26:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800bd28:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 800bd2c:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800bd30:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800bd34:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800bd38:	4b2c      	ldr	r3, [pc, #176]	; (800bdec <LoRaMacQueryTxPossible+0xd0>)
 800bd3a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800bd3e:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800bd46:	2900      	cmp	r1, #0
 800bd48:	d048      	beq.n	800bddc <LoRaMacQueryTxPossible+0xc0>
 800bd4a:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800bd4c:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800bd50:	4b25      	ldr	r3, [pc, #148]	; (800bde8 <LoRaMacQueryTxPossible+0xcc>)
 800bd52:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800bd56:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800bd5a:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800bd5c:	f8b3 1088 	ldrh.w	r1, [r3, #136]	; 0x88
 800bd60:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800bd64:	f8b3 108a 	ldrh.w	r1, [r3, #138]	; 0x8a
 800bd68:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bd6c:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800bd70:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800bd74:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800bd78:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800bd7c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bd80:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800bd84:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800bd88:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800bd8c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800bd90:	ab04      	add	r3, sp, #16
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	f10d 030d 	add.w	r3, sp, #13
 800bd98:	f10d 020e 	add.w	r2, sp, #14
 800bd9c:	f10d 010f 	add.w	r1, sp, #15
 800bda0:	a805      	add	r0, sp, #20
 800bda2:	f000 fe7f 	bl	800caa4 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800bda6:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800bdaa:	f7fd fcdb 	bl	8009764 <GetMaxAppPayloadWithoutFOptsLength>
 800bdae:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800bdb0:	a802      	add	r0, sp, #8
 800bdb2:	f001 f839 	bl	800ce28 <LoRaMacCommandsGetSizeSerializedCmds>
 800bdb6:	b998      	cbnz	r0, 800bde0 <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800bdb8:	9b02      	ldr	r3, [sp, #8]
 800bdba:	2b0f      	cmp	r3, #15
 800bdbc:	d80a      	bhi.n	800bdd4 <LoRaMacQueryTxPossible+0xb8>
 800bdbe:	786a      	ldrb	r2, [r5, #1]
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d807      	bhi.n	800bdd4 <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800bdc8:	9b02      	ldr	r3, [sp, #8]
 800bdca:	441c      	add	r4, r3
 800bdcc:	42a2      	cmp	r2, r4
 800bdce:	d309      	bcc.n	800bde4 <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800bdd0:	b00b      	add	sp, #44	; 0x2c
 800bdd2:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800bdd8:	2008      	movs	r0, #8
 800bdda:	e7f9      	b.n	800bdd0 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bddc:	2003      	movs	r0, #3
 800bdde:	e7f7      	b.n	800bdd0 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bde0:	2013      	movs	r0, #19
 800bde2:	e7f5      	b.n	800bdd0 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800bde4:	2008      	movs	r0, #8
 800bde6:	e7f3      	b.n	800bdd0 <LoRaMacQueryTxPossible+0xb4>
 800bde8:	20008000 	.word	0x20008000
 800bdec:	200006f0 	.word	0x200006f0

0800bdf0 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	f000 815f 	beq.w	800c0b4 <LoRaMacMibGetRequestConfirm+0x2c4>
{
 800bdf6:	b510      	push	{r4, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800bdfc:	7800      	ldrb	r0, [r0, #0]
 800bdfe:	2841      	cmp	r0, #65	; 0x41
 800be00:	f200 8154 	bhi.w	800c0ac <LoRaMacMibGetRequestConfirm+0x2bc>
 800be04:	e8df f010 	tbh	[pc, r0, lsl #1]
 800be08:	00470042 	.word	0x00470042
 800be0c:	0052004d 	.word	0x0052004d
 800be10:	005d0057 	.word	0x005d0057
 800be14:	01520063 	.word	0x01520063
 800be18:	01520152 	.word	0x01520152
 800be1c:	01520152 	.word	0x01520152
 800be20:	01520152 	.word	0x01520152
 800be24:	006b0152 	.word	0x006b0152
 800be28:	00770071 	.word	0x00770071
 800be2c:	008c0084 	.word	0x008c0084
 800be30:	009c0094 	.word	0x009c0094
 800be34:	00a400b1 	.word	0x00a400b1
 800be38:	00c400be 	.word	0x00c400be
 800be3c:	00ce00c9 	.word	0x00ce00c9
 800be40:	00d800d3 	.word	0x00d800d3
 800be44:	00ee00dd 	.word	0x00ee00dd
 800be48:	010000f4 	.word	0x010000f4
 800be4c:	010600fa 	.word	0x010600fa
 800be50:	0111010b 	.word	0x0111010b
 800be54:	0117011f 	.word	0x0117011f
 800be58:	0152011b 	.word	0x0152011b
 800be5c:	01520125 	.word	0x01520125
 800be60:	01520152 	.word	0x01520152
 800be64:	01520152 	.word	0x01520152
 800be68:	01520152 	.word	0x01520152
 800be6c:	01520152 	.word	0x01520152
 800be70:	01520152 	.word	0x01520152
 800be74:	01520152 	.word	0x01520152
 800be78:	01520152 	.word	0x01520152
 800be7c:	0134012e 	.word	0x0134012e
 800be80:	0140013a 	.word	0x0140013a
 800be84:	014c0146 	.word	0x014c0146
 800be88:	01580158 	.word	0x01580158
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800be8c:	4b8c      	ldr	r3, [pc, #560]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800be8e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800be92:	7123      	strb	r3, [r4, #4]
            break;
 800be94:	e111      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800be96:	4b8a      	ldr	r3, [pc, #552]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800be98:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800be9c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be9e:	2000      	movs	r0, #0
            break;
 800bea0:	e10b      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800bea2:	6860      	ldr	r0, [r4, #4]
 800bea4:	f004 fe0c 	bl	8010ac0 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bea8:	2000      	movs	r0, #0
            break;
 800beaa:	e106      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800beac:	6860      	ldr	r0, [r4, #4]
 800beae:	f004 fe25 	bl	8010afc <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800beb2:	2000      	movs	r0, #0
            break;
 800beb4:	e101      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800beb6:	4b82      	ldr	r3, [pc, #520]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800beb8:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800bebc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bebe:	2000      	movs	r0, #0
            break;
 800bec0:	e0fb      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800bec2:	4b7f      	ldr	r3, [pc, #508]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bec8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800beca:	2000      	movs	r0, #0
            break;
 800becc:	e0f5      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800bece:	1d21      	adds	r1, r4, #4
 800bed0:	4b7b      	ldr	r3, [pc, #492]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bed2:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800bed6:	f004 fe2d 	bl	8010b34 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800beda:	2000      	movs	r0, #0
            break;
 800bedc:	e0ed      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800bede:	4b78      	ldr	r3, [pc, #480]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bee0:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800bee4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bee6:	2000      	movs	r0, #0
            break;
 800bee8:	e0e7      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800beea:	4b75      	ldr	r3, [pc, #468]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800beec:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800bef0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bef2:	2000      	movs	r0, #0
            break;
 800bef4:	e0e1      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800bef6:	231c      	movs	r3, #28
 800bef8:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800befc:	a902      	add	r1, sp, #8
 800befe:	4b70      	ldr	r3, [pc, #448]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bf00:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bf04:	f001 fe44 	bl	800db90 <RegionGetPhyParam>
 800bf08:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800bf0a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf0c:	2000      	movs	r0, #0
            break;
 800bf0e:	e0d4      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800bf10:	3404      	adds	r4, #4
 800bf12:	4b6c      	ldr	r3, [pc, #432]	; (800c0c4 <LoRaMacMibGetRequestConfirm+0x2d4>)
 800bf14:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf18:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf1c:	2000      	movs	r0, #0
            break;
 800bf1e:	e0cc      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800bf20:	3404      	adds	r4, #4
 800bf22:	4b69      	ldr	r3, [pc, #420]	; (800c0c8 <LoRaMacMibGetRequestConfirm+0x2d8>)
 800bf24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf28:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf2c:	2000      	movs	r0, #0
            break;
 800bf2e:	e0c4      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800bf30:	3404      	adds	r4, #4
 800bf32:	4b66      	ldr	r3, [pc, #408]	; (800c0cc <LoRaMacMibGetRequestConfirm+0x2dc>)
 800bf34:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf38:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf3c:	2000      	movs	r0, #0
            break;
 800bf3e:	e0bc      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800bf40:	3404      	adds	r4, #4
 800bf42:	4b63      	ldr	r3, [pc, #396]	; (800c0d0 <LoRaMacMibGetRequestConfirm+0x2e0>)
 800bf44:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf48:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf4c:	2000      	movs	r0, #0
            break;
 800bf4e:	e0b4      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800bf50:	231a      	movs	r3, #26
 800bf52:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf56:	a902      	add	r1, sp, #8
 800bf58:	4b59      	ldr	r3, [pc, #356]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bf5a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bf5e:	f001 fe17 	bl	800db90 <RegionGetPhyParam>
 800bf62:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800bf64:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf66:	2000      	movs	r0, #0
            break;
 800bf68:	e0a7      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800bf6a:	2319      	movs	r3, #25
 800bf6c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bf70:	a902      	add	r1, sp, #8
 800bf72:	4b53      	ldr	r3, [pc, #332]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bf74:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bf78:	f001 fe0a 	bl	800db90 <RegionGetPhyParam>
 800bf7c:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800bf7e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf80:	2000      	movs	r0, #0
            break;
 800bf82:	e09a      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800bf84:	4b4e      	ldr	r3, [pc, #312]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bf86:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800bf8a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf8c:	2000      	movs	r0, #0
            break;
 800bf8e:	e094      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800bf90:	4b4b      	ldr	r3, [pc, #300]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bf92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf94:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf96:	2000      	movs	r0, #0
            break;
 800bf98:	e08f      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800bf9a:	4b49      	ldr	r3, [pc, #292]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bf9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf9e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfa0:	2000      	movs	r0, #0
            break;
 800bfa2:	e08a      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800bfa4:	4b46      	ldr	r3, [pc, #280]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bfa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfa8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfaa:	2000      	movs	r0, #0
            break;
 800bfac:	e085      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800bfae:	4b44      	ldr	r3, [pc, #272]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bfb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfb2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfb4:	2000      	movs	r0, #0
            break;
 800bfb6:	e080      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800bfb8:	4b41      	ldr	r3, [pc, #260]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bfba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfbc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfbe:	2000      	movs	r0, #0
            break;
 800bfc0:	e07b      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800bfc2:	2302      	movs	r3, #2
 800bfc4:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bfc8:	4b3d      	ldr	r3, [pc, #244]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bfca:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800bfce:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bfd2:	a902      	add	r1, sp, #8
 800bfd4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bfd8:	f001 fdda 	bl	800db90 <RegionGetPhyParam>
 800bfdc:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800bfde:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfe0:	2000      	movs	r0, #0
            break;
 800bfe2:	e06a      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800bfe4:	4b36      	ldr	r3, [pc, #216]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bfe6:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800bfea:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfec:	2000      	movs	r0, #0
            break;
 800bfee:	e064      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800bff0:	4b33      	ldr	r3, [pc, #204]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bff2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800bff6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bff8:	2000      	movs	r0, #0
            break;
 800bffa:	e05e      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800bffc:	4b30      	ldr	r3, [pc, #192]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bffe:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800c002:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c004:	2000      	movs	r0, #0
            break;
 800c006:	e058      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c008:	4b2d      	ldr	r3, [pc, #180]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c00a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800c00e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c010:	2000      	movs	r0, #0
            break;
 800c012:	e052      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800c014:	4b2a      	ldr	r3, [pc, #168]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c018:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c01a:	2000      	movs	r0, #0
            break;
 800c01c:	e04d      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800c01e:	4b28      	ldr	r3, [pc, #160]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c020:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c024:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c026:	2000      	movs	r0, #0
            break;
 800c028:	e047      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800c02a:	4b25      	ldr	r3, [pc, #148]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c02c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c030:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c032:	2000      	movs	r0, #0
            break;
 800c034:	e041      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800c036:	4b22      	ldr	r3, [pc, #136]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c038:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c03a:	2000      	movs	r0, #0
            break;
 800c03c:	e03d      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800c03e:	4b25      	ldr	r3, [pc, #148]	; (800c0d4 <LoRaMacMibGetRequestConfirm+0x2e4>)
 800c040:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c042:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800c044:	e039      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800c046:	4b1e      	ldr	r3, [pc, #120]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c048:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c04c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c04e:	2000      	movs	r0, #0
            break;
 800c050:	e033      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800c052:	4b1b      	ldr	r3, [pc, #108]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c054:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c058:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800c05a:	f001 fec1 	bl	800dde0 <RegionGetVersion>
 800c05e:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c060:	2000      	movs	r0, #0
            break;
 800c062:	e02a      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800c064:	4b16      	ldr	r3, [pc, #88]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c06a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c06c:	2000      	movs	r0, #0
            break;
 800c06e:	e024      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800c070:	4b13      	ldr	r3, [pc, #76]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c072:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800c076:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c078:	2000      	movs	r0, #0
            break;
 800c07a:	e01e      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800c07c:	4b10      	ldr	r3, [pc, #64]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c07e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800c082:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c084:	2000      	movs	r0, #0
            break;
 800c086:	e018      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800c088:	4b0d      	ldr	r3, [pc, #52]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c08a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800c08e:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c090:	2000      	movs	r0, #0
            break;
 800c092:	e012      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c096:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800c09a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c09c:	2000      	movs	r0, #0
            break;
 800c09e:	e00c      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800c0a0:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800c0a2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800c0a6:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0a8:	2000      	movs	r0, #0
            break;
 800c0aa:	e006      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f000 fd8b 	bl	800cbc8 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800c0b2:	e002      	b.n	800c0ba <LoRaMacMibGetRequestConfirm+0x2ca>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c0b4:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800c0b6:	4770      	bx	lr
    switch( mibGet->Type )
 800c0b8:	2018      	movs	r0, #24
}
 800c0ba:	b004      	add	sp, #16
 800c0bc:	bd10      	pop	{r4, pc}
 800c0be:	bf00      	nop
 800c0c0:	20008000 	.word	0x20008000
 800c0c4:	2000806c 	.word	0x2000806c
 800c0c8:	200080b4 	.word	0x200080b4
 800c0cc:	20008074 	.word	0x20008074
 800c0d0:	200080bc 	.word	0x200080bc
 800c0d4:	200085cc 	.word	0x200085cc

0800c0d8 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	f000 827f 	beq.w	800c5dc <LoRaMacMibSetRequestConfirm+0x504>
{
 800c0de:	b530      	push	{r4, r5, lr}
 800c0e0:	b085      	sub	sp, #20
 800c0e2:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800c0e4:	4b9b      	ldr	r3, [pc, #620]	; (800c354 <LoRaMacMibSetRequestConfirm+0x27c>)
 800c0e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c0ea:	f013 0f02 	tst.w	r3, #2
 800c0ee:	f040 8277 	bne.w	800c5e0 <LoRaMacMibSetRequestConfirm+0x508>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800c0f2:	7805      	ldrb	r5, [r0, #0]
 800c0f4:	2d41      	cmp	r5, #65	; 0x41
 800c0f6:	f200 826e 	bhi.w	800c5d6 <LoRaMacMibSetRequestConfirm+0x4fe>
 800c0fa:	e8df f015 	tbh	[pc, r5, lsl #1]
 800c0fe:	0042      	.short	0x0042
 800c100:	0058004f 	.word	0x0058004f
 800c104:	0066005f 	.word	0x0066005f
 800c108:	0072006c 	.word	0x0072006c
 800c10c:	008b0080 	.word	0x008b0080
 800c110:	00a10096 	.word	0x00a10096
 800c114:	00b700ac 	.word	0x00b700ac
 800c118:	00ce00c2 	.word	0x00ce00c2
 800c11c:	00e500da 	.word	0x00e500da
 800c120:	00eb026c 	.word	0x00eb026c
 800c124:	01350111 	.word	0x01350111
 800c128:	018d0163 	.word	0x018d0163
 800c12c:	019d017d 	.word	0x019d017d
 800c130:	01ad01a8 	.word	0x01ad01a8
 800c134:	01b701b2 	.word	0x01b701b2
 800c138:	026c01bc 	.word	0x026c01bc
 800c13c:	01d601c1 	.word	0x01d601c1
 800c140:	01ef0204 	.word	0x01ef0204
 800c144:	02200219 	.word	0x02200219
 800c148:	022e0228 	.word	0x022e0228
 800c14c:	026c0234 	.word	0x026c0234
 800c150:	026c0237 	.word	0x026c0237
 800c154:	026c026c 	.word	0x026c026c
 800c158:	026c026c 	.word	0x026c026c
 800c15c:	026c026c 	.word	0x026c026c
 800c160:	026c026c 	.word	0x026c026c
 800c164:	026c026c 	.word	0x026c026c
 800c168:	026c026c 	.word	0x026c026c
 800c16c:	026c026c 	.word	0x026c026c
 800c170:	0248026c 	.word	0x0248026c
 800c174:	0254024e 	.word	0x0254024e
 800c178:	0260025a 	.word	0x0260025a
 800c17c:	02730266 	.word	0x02730266
 800c180:	0273      	.short	0x0273
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800c182:	7900      	ldrb	r0, [r0, #4]
 800c184:	f7ff f90e 	bl	800b3a4 <SwitchClass>
            break;
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800c188:	b930      	cbnz	r0, 800c198 <LoRaMacMibSetRequestConfirm+0xc0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800c18a:	4a72      	ldr	r2, [pc, #456]	; (800c354 <LoRaMacMibSetRequestConfirm+0x27c>)
 800c18c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c190:	f043 0320 	orr.w	r3, r3, #32
 800c194:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800c198:	b005      	add	sp, #20
 800c19a:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800c19c:	7903      	ldrb	r3, [r0, #4]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	f000 8222 	beq.w	800c5e8 <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800c1a4:	4a6c      	ldr	r2, [pc, #432]	; (800c358 <LoRaMacMibSetRequestConfirm+0x280>)
 800c1a6:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	e7ed      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800c1ae:	6840      	ldr	r0, [r0, #4]
 800c1b0:	f004 fc78 	bl	8010aa4 <SecureElementSetDevEui>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d0e8      	beq.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1b8:	2003      	movs	r0, #3
 800c1ba:	e7ed      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800c1bc:	6840      	ldr	r0, [r0, #4]
 800c1be:	f004 fc8d 	bl	8010adc <SecureElementSetJoinEui>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d0e1      	beq.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	e7e6      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800c1ca:	7902      	ldrb	r2, [r0, #4]
 800c1cc:	4b62      	ldr	r3, [pc, #392]	; (800c358 <LoRaMacMibSetRequestConfirm+0x280>)
 800c1ce:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	e7d9      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800c1d6:	6842      	ldr	r2, [r0, #4]
 800c1d8:	4b5f      	ldr	r3, [pc, #380]	; (800c358 <LoRaMacMibSetRequestConfirm+0x280>)
 800c1da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c1de:	2000      	movs	r0, #0
 800c1e0:	e7d3      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800c1e2:	6841      	ldr	r1, [r0, #4]
 800c1e4:	4b5c      	ldr	r3, [pc, #368]	; (800c358 <LoRaMacMibSetRequestConfirm+0x280>)
 800c1e6:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800c1ea:	f004 fc95 	bl	8010b18 <SecureElementSetDevAddr>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f040 81fc 	bne.w	800c5ec <LoRaMacMibSetRequestConfirm+0x514>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800c1f4:	6862      	ldr	r2, [r4, #4]
 800c1f6:	4b58      	ldr	r3, [pc, #352]	; (800c358 <LoRaMacMibSetRequestConfirm+0x280>)
 800c1f8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if( status == LORAMAC_STATUS_OK )
 800c1fc:	e7c5      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 800c1fe:	6841      	ldr	r1, [r0, #4]
 800c200:	2900      	cmp	r1, #0
 800c202:	f000 81f5 	beq.w	800c5f0 <LoRaMacMibSetRequestConfirm+0x518>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800c206:	2000      	movs	r0, #0
 800c208:	f001 faa2 	bl	800d750 <LoRaMacCryptoSetKey>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	d0bc      	beq.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c210:	2011      	movs	r0, #17
 800c212:	e7c1      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkKey != NULL )
 800c214:	6841      	ldr	r1, [r0, #4]
 800c216:	2900      	cmp	r1, #0
 800c218:	f000 81ec 	beq.w	800c5f4 <LoRaMacMibSetRequestConfirm+0x51c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800c21c:	2001      	movs	r0, #1
 800c21e:	f001 fa97 	bl	800d750 <LoRaMacCryptoSetKey>
 800c222:	2800      	cmp	r0, #0
 800c224:	d0b0      	beq.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c226:	2011      	movs	r0, #17
 800c228:	e7b6      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkSKey != NULL )
 800c22a:	6841      	ldr	r1, [r0, #4]
 800c22c:	2900      	cmp	r1, #0
 800c22e:	f000 81e3 	beq.w	800c5f8 <LoRaMacMibSetRequestConfirm+0x520>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800c232:	2008      	movs	r0, #8
 800c234:	f001 fa8c 	bl	800d750 <LoRaMacCryptoSetKey>
 800c238:	2800      	cmp	r0, #0
 800c23a:	d0a5      	beq.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c23c:	2011      	movs	r0, #17
 800c23e:	e7ab      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.AppSKey != NULL )
 800c240:	6841      	ldr	r1, [r0, #4]
 800c242:	2900      	cmp	r1, #0
 800c244:	f000 81da 	beq.w	800c5fc <LoRaMacMibSetRequestConfirm+0x524>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800c248:	2009      	movs	r0, #9
 800c24a:	f001 fa81 	bl	800d750 <LoRaMacCryptoSetKey>
 800c24e:	2800      	cmp	r0, #0
 800c250:	d09a      	beq.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c252:	2011      	movs	r0, #17
 800c254:	e7a0      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKEKey != NULL )
 800c256:	6841      	ldr	r1, [r0, #4]
 800c258:	2900      	cmp	r1, #0
 800c25a:	f000 81d1 	beq.w	800c600 <LoRaMacMibSetRequestConfirm+0x528>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800c25e:	200c      	movs	r0, #12
 800c260:	f001 fa76 	bl	800d750 <LoRaMacCryptoSetKey>
 800c264:	2800      	cmp	r0, #0
 800c266:	d08f      	beq.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c268:	2011      	movs	r0, #17
 800c26a:	e795      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKey0 != NULL )
 800c26c:	6841      	ldr	r1, [r0, #4]
 800c26e:	2900      	cmp	r1, #0
 800c270:	f000 81c8 	beq.w	800c604 <LoRaMacMibSetRequestConfirm+0x52c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800c274:	200d      	movs	r0, #13
 800c276:	f001 fa6b 	bl	800d750 <LoRaMacCryptoSetKey>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d084      	beq.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c27e:	2011      	movs	r0, #17
 800c280:	e78a      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800c282:	6841      	ldr	r1, [r0, #4]
 800c284:	2900      	cmp	r1, #0
 800c286:	f000 81bf 	beq.w	800c608 <LoRaMacMibSetRequestConfirm+0x530>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800c28a:	200e      	movs	r0, #14
 800c28c:	f001 fa60 	bl	800d750 <LoRaMacCryptoSetKey>
 800c290:	2800      	cmp	r0, #0
 800c292:	f43f af79 	beq.w	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c296:	2011      	movs	r0, #17
 800c298:	e77e      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800c29a:	6841      	ldr	r1, [r0, #4]
 800c29c:	2900      	cmp	r1, #0
 800c29e:	f000 81b5 	beq.w	800c60c <LoRaMacMibSetRequestConfirm+0x534>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800c2a2:	200f      	movs	r0, #15
 800c2a4:	f001 fa54 	bl	800d750 <LoRaMacCryptoSetKey>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	f43f af6d 	beq.w	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c2ae:	2011      	movs	r0, #17
 800c2b0:	e772      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800c2b2:	7900      	ldrb	r0, [r0, #4]
 800c2b4:	4b28      	ldr	r3, [pc, #160]	; (800c358 <LoRaMacMibSetRequestConfirm+0x280>)
 800c2b6:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800c2ba:	4c28      	ldr	r4, [pc, #160]	; (800c35c <LoRaMacMibSetRequestConfirm+0x284>)
 800c2bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2be:	4798      	blx	r3
            Radio.Sleep( );
 800c2c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2c2:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	e760      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800c2c8:	7902      	ldrb	r2, [r0, #4]
 800c2ca:	4b23      	ldr	r3, [pc, #140]	; (800c358 <LoRaMacMibSetRequestConfirm+0x280>)
 800c2cc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	e75a      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c2d4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c2d8:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c2dc:	4b1e      	ldr	r3, [pc, #120]	; (800c358 <LoRaMacMibSetRequestConfirm+0x280>)
 800c2de:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c2e2:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800c2e6:	2207      	movs	r2, #7
 800c2e8:	a901      	add	r1, sp, #4
 800c2ea:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c2ee:	f001 fc83 	bl	800dbf8 <RegionVerify>
 800c2f2:	b908      	cbnz	r0, 800c2f8 <LoRaMacMibSetRequestConfirm+0x220>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c2f4:	2003      	movs	r0, #3
 800c2f6:	e747      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800c2f8:	6863      	ldr	r3, [r4, #4]
 800c2fa:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	a901      	add	r1, sp, #4
 800c300:	4b15      	ldr	r3, [pc, #84]	; (800c358 <LoRaMacMibSetRequestConfirm+0x280>)
 800c302:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c306:	f001 fc77 	bl	800dbf8 <RegionVerify>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	f000 8180 	beq.w	800c610 <LoRaMacMibSetRequestConfirm+0x538>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800c310:	4b13      	ldr	r3, [pc, #76]	; (800c360 <LoRaMacMibSetRequestConfirm+0x288>)
 800c312:	3404      	adds	r4, #4
 800c314:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c318:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c31c:	2000      	movs	r0, #0
 800c31e:	e733      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800c320:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c324:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c328:	4b0b      	ldr	r3, [pc, #44]	; (800c358 <LoRaMacMibSetRequestConfirm+0x280>)
 800c32a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c32e:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c332:	2207      	movs	r2, #7
 800c334:	a901      	add	r1, sp, #4
 800c336:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c33a:	f001 fc5d 	bl	800dbf8 <RegionVerify>
 800c33e:	2800      	cmp	r0, #0
 800c340:	f000 8168 	beq.w	800c614 <LoRaMacMibSetRequestConfirm+0x53c>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800c344:	4b07      	ldr	r3, [pc, #28]	; (800c364 <LoRaMacMibSetRequestConfirm+0x28c>)
 800c346:	3404      	adds	r4, #4
 800c348:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c34c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c350:	2000      	movs	r0, #0
 800c352:	e719      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
 800c354:	200006f0 	.word	0x200006f0
 800c358:	20008000 	.word	0x20008000
 800c35c:	0801458c 	.word	0x0801458c
 800c360:	2000806c 	.word	0x2000806c
 800c364:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c368:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c36c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c370:	4bb0      	ldr	r3, [pc, #704]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c372:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c376:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c37a:	2207      	movs	r2, #7
 800c37c:	a901      	add	r1, sp, #4
 800c37e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c382:	f001 fc39 	bl	800dbf8 <RegionVerify>
 800c386:	2800      	cmp	r0, #0
 800c388:	f000 8146 	beq.w	800c618 <LoRaMacMibSetRequestConfirm+0x540>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800c38c:	4ba9      	ldr	r3, [pc, #676]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c38e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800c392:	3404      	adds	r4, #4
 800c394:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c398:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c39c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c3a0:	2b02      	cmp	r3, #2
 800c3a2:	d001      	beq.n	800c3a8 <LoRaMacMibSetRequestConfirm+0x2d0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	e6ef      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800c3a8:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800c3ac:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	f43f aee9 	beq.w	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                    Radio.Sleep( );
 800c3b6:	4ba0      	ldr	r3, [pc, #640]	; (800c638 <LoRaMacMibSetRequestConfirm+0x560>)
 800c3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ba:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800c3bc:	f7fe fd16 	bl	800adec <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	e6e1      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800c3c4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800c3c8:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c3cc:	4b99      	ldr	r3, [pc, #612]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c3ce:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c3d2:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800c3d6:	2207      	movs	r2, #7
 800c3d8:	a901      	add	r1, sp, #4
 800c3da:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c3de:	f001 fc0b 	bl	800dbf8 <RegionVerify>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	f000 811a 	beq.w	800c61c <LoRaMacMibSetRequestConfirm+0x544>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800c3e8:	4b94      	ldr	r3, [pc, #592]	; (800c63c <LoRaMacMibSetRequestConfirm+0x564>)
 800c3ea:	3404      	adds	r4, #4
 800c3ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c3f0:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	e6c7      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800c3f8:	6843      	ldr	r3, [r0, #4]
 800c3fa:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c402:	a902      	add	r1, sp, #8
 800c404:	4b8b      	ldr	r3, [pc, #556]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c406:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c40a:	f001 fc13 	bl	800dc34 <RegionChanMaskSet>
 800c40e:	b108      	cbz	r0, 800c414 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c410:	2000      	movs	r0, #0
 800c412:	e6b9      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c414:	2003      	movs	r0, #3
 800c416:	e6bf      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800c418:	6843      	ldr	r3, [r0, #4]
 800c41a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800c41c:	2300      	movs	r3, #0
 800c41e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800c422:	a902      	add	r1, sp, #8
 800c424:	4b83      	ldr	r3, [pc, #524]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c426:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c42a:	f001 fc03 	bl	800dc34 <RegionChanMaskSet>
 800c42e:	b108      	cbz	r0, 800c434 <LoRaMacMibSetRequestConfirm+0x35c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c430:	2000      	movs	r0, #0
 800c432:	e6a9      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c434:	2003      	movs	r0, #3
 800c436:	e6af      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800c438:	7902      	ldrb	r2, [r0, #4]
 800c43a:	1e53      	subs	r3, r2, #1
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	2b0e      	cmp	r3, #14
 800c440:	f200 80ee 	bhi.w	800c620 <LoRaMacMibSetRequestConfirm+0x548>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800c444:	4b7b      	ldr	r3, [pc, #492]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c446:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c44a:	2000      	movs	r0, #0
 800c44c:	e69c      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800c44e:	6842      	ldr	r2, [r0, #4]
 800c450:	4b78      	ldr	r3, [pc, #480]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c452:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c454:	2000      	movs	r0, #0
 800c456:	e698      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800c458:	6842      	ldr	r2, [r0, #4]
 800c45a:	4b76      	ldr	r3, [pc, #472]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c45c:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c45e:	2000      	movs	r0, #0
 800c460:	e693      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800c462:	6842      	ldr	r2, [r0, #4]
 800c464:	4b73      	ldr	r3, [pc, #460]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c466:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c468:	2000      	movs	r0, #0
 800c46a:	e68e      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800c46c:	6842      	ldr	r2, [r0, #4]
 800c46e:	4b71      	ldr	r3, [pc, #452]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c470:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c472:	2000      	movs	r0, #0
 800c474:	e689      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800c476:	6842      	ldr	r2, [r0, #4]
 800c478:	4b6e      	ldr	r3, [pc, #440]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c47a:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c47c:	2000      	movs	r0, #0
 800c47e:	e684      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800c480:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c484:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800c488:	2206      	movs	r2, #6
 800c48a:	a901      	add	r1, sp, #4
 800c48c:	4b69      	ldr	r3, [pc, #420]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c48e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c492:	f001 fbb1 	bl	800dbf8 <RegionVerify>
 800c496:	2800      	cmp	r0, #0
 800c498:	f000 80c4 	beq.w	800c624 <LoRaMacMibSetRequestConfirm+0x54c>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800c49c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c4a0:	4b64      	ldr	r3, [pc, #400]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c4a2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	e66e      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800c4aa:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c4ae:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c4b2:	4b60      	ldr	r3, [pc, #384]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c4b4:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800c4b8:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c4bc:	2205      	movs	r2, #5
 800c4be:	a901      	add	r1, sp, #4
 800c4c0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c4c4:	f001 fb98 	bl	800dbf8 <RegionVerify>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	f000 80ad 	beq.w	800c628 <LoRaMacMibSetRequestConfirm+0x550>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c4ce:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c4d2:	4b58      	ldr	r3, [pc, #352]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c4d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c4d8:	2000      	movs	r0, #0
 800c4da:	e655      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800c4dc:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c4e0:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800c4e4:	220a      	movs	r2, #10
 800c4e6:	a901      	add	r1, sp, #4
 800c4e8:	4b52      	ldr	r3, [pc, #328]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c4ea:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c4ee:	f001 fb83 	bl	800dbf8 <RegionVerify>
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	f000 809a 	beq.w	800c62c <LoRaMacMibSetRequestConfirm+0x554>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800c4f8:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c4fc:	4b4d      	ldr	r3, [pc, #308]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c4fe:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c502:	2000      	movs	r0, #0
 800c504:	e640      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800c506:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c50a:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800c50e:	2209      	movs	r2, #9
 800c510:	a901      	add	r1, sp, #4
 800c512:	4b48      	ldr	r3, [pc, #288]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c514:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c518:	f001 fb6e 	bl	800dbf8 <RegionVerify>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	f000 8087 	beq.w	800c630 <LoRaMacMibSetRequestConfirm+0x558>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800c522:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c526:	4b43      	ldr	r3, [pc, #268]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c52c:	2000      	movs	r0, #0
 800c52e:	e62b      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800c530:	6842      	ldr	r2, [r0, #4]
 800c532:	4b40      	ldr	r3, [pc, #256]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c534:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800c538:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c53a:	2000      	movs	r0, #0
 800c53c:	e625      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800c53e:	7902      	ldrb	r2, [r0, #4]
 800c540:	4b3c      	ldr	r3, [pc, #240]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c542:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800c546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c54a:	2000      	movs	r0, #0
 800c54c:	e61d      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800c54e:	6842      	ldr	r2, [r0, #4]
 800c550:	4b38      	ldr	r3, [pc, #224]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c556:	2000      	movs	r0, #0
 800c558:	e617      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800c55a:	6842      	ldr	r2, [r0, #4]
 800c55c:	4b35      	ldr	r3, [pc, #212]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c55e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c562:	2000      	movs	r0, #0
 800c564:	e611      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 800c566:	f7fe fd57 	bl	800b018 <RestoreNvmData>
            break;
 800c56a:	e60d      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800c56c:	7983      	ldrb	r3, [r0, #6]
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d901      	bls.n	800c576 <LoRaMacMibSetRequestConfirm+0x49e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c572:	2003      	movs	r0, #3
 800c574:	e610      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800c576:	6842      	ldr	r2, [r0, #4]
 800c578:	4b2e      	ldr	r3, [pc, #184]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c57a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800c57e:	6840      	ldr	r0, [r0, #4]
 800c580:	f000 ffa2 	bl	800d4c8 <LoRaMacCryptoSetLrWanVersion>
 800c584:	2800      	cmp	r0, #0
 800c586:	f43f ae00 	beq.w	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c58a:	2011      	movs	r0, #17
 800c58c:	e604      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800c58e:	6842      	ldr	r2, [r0, #4]
 800c590:	4b28      	ldr	r3, [pc, #160]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c596:	2000      	movs	r0, #0
 800c598:	e5f7      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800c59a:	7902      	ldrb	r2, [r0, #4]
 800c59c:	4b25      	ldr	r3, [pc, #148]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c59e:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	e5f1      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800c5a6:	8882      	ldrh	r2, [r0, #4]
 800c5a8:	4b22      	ldr	r3, [pc, #136]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c5aa:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	e5eb      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800c5b2:	8882      	ldrh	r2, [r0, #4]
 800c5b4:	4b1f      	ldr	r3, [pc, #124]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c5b6:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	e5e5      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800c5be:	8882      	ldrh	r2, [r0, #4]
 800c5c0:	4b1c      	ldr	r3, [pc, #112]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c5c2:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	e5df      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800c5ca:	8882      	ldrh	r2, [r0, #4]
 800c5cc:	4b19      	ldr	r3, [pc, #100]	; (800c634 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c5ce:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	e5d9      	b.n	800c18a <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800c5d6:	f000 faf9 	bl	800cbcc <LoRaMacMibClassBSetRequestConfirm>
            break;
 800c5da:	e5d5      	b.n	800c188 <LoRaMacMibSetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c5dc:	2003      	movs	r0, #3
}
 800c5de:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800c5e0:	2001      	movs	r0, #1
 800c5e2:	e5d9      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
    switch( mibSet->Type )
 800c5e4:	2018      	movs	r0, #24
 800c5e6:	e5d7      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c5e8:	2003      	movs	r0, #3
 800c5ea:	e5d5      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c5ec:	2003      	movs	r0, #3
 800c5ee:	e5d3      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c5f0:	2003      	movs	r0, #3
 800c5f2:	e5d1      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c5f4:	2003      	movs	r0, #3
 800c5f6:	e5cf      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c5f8:	2003      	movs	r0, #3
 800c5fa:	e5cd      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c5fc:	2003      	movs	r0, #3
 800c5fe:	e5cb      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c600:	2003      	movs	r0, #3
 800c602:	e5c9      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c604:	2003      	movs	r0, #3
 800c606:	e5c7      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c608:	2003      	movs	r0, #3
 800c60a:	e5c5      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c60c:	2003      	movs	r0, #3
 800c60e:	e5c3      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c610:	2003      	movs	r0, #3
 800c612:	e5c1      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c614:	2003      	movs	r0, #3
 800c616:	e5bf      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c618:	2003      	movs	r0, #3
 800c61a:	e5bd      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c61c:	2003      	movs	r0, #3
 800c61e:	e5bb      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c620:	2003      	movs	r0, #3
 800c622:	e5b9      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c624:	2003      	movs	r0, #3
 800c626:	e5b7      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c628:	2003      	movs	r0, #3
 800c62a:	e5b5      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c62c:	2003      	movs	r0, #3
 800c62e:	e5b3      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c630:	2003      	movs	r0, #3
 800c632:	e5b1      	b.n	800c198 <LoRaMacMibSetRequestConfirm+0xc0>
 800c634:	20008000 	.word	0x20008000
 800c638:	0801458c 	.word	0x0801458c
 800c63c:	200080bc 	.word	0x200080bc

0800c640 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c644:	2300      	movs	r3, #0
 800c646:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800c64a:	2800      	cmp	r0, #0
 800c64c:	f000 80f3 	beq.w	800c836 <LoRaMacMlmeRequest+0x1f6>
 800c650:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800c652:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800c654:	f7ff f8b0 	bl	800b7b8 <LoRaMacIsBusy>
 800c658:	b118      	cbz	r0, 800c662 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800c65a:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800c65c:	4620      	mov	r0, r4
 800c65e:	b006      	add	sp, #24
 800c660:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800c662:	f000 fd65 	bl	800d130 <LoRaMacConfirmQueueIsFull>
 800c666:	b108      	cbz	r0, 800c66c <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800c668:	2401      	movs	r4, #1
 800c66a:	e7f7      	b.n	800c65c <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800c66c:	f000 fd5a 	bl	800d124 <LoRaMacConfirmQueueGetCnt>
 800c670:	b308      	cbz	r0, 800c6b6 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c672:	4b72      	ldr	r3, [pc, #456]	; (800c83c <LoRaMacMlmeRequest+0x1fc>)
 800c674:	2101      	movs	r1, #1
 800c676:	f883 1455 	strb.w	r1, [r3, #1109]	; 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c67a:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800c67e:	f042 0204 	orr.w	r2, r2, #4
 800c682:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 800c686:	782b      	ldrb	r3, [r5, #0]
 800c688:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c68c:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800c690:	2200      	movs	r2, #0
 800c692:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800c696:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800c69a:	461c      	mov	r4, r3
 800c69c:	3b01      	subs	r3, #1
 800c69e:	2b0c      	cmp	r3, #12
 800c6a0:	f200 80af 	bhi.w	800c802 <LoRaMacMlmeRequest+0x1c2>
 800c6a4:	e8df f003 	tbb	[pc, r3]
 800c6a8:	adadad0d 	.word	0xadadad0d
 800c6ac:	adad675d 	.word	0xadad675d
 800c6b0:	7f9ead70 	.word	0x7f9ead70
 800c6b4:	95          	.byte	0x95
 800c6b5:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800c6b6:	2214      	movs	r2, #20
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	4861      	ldr	r0, [pc, #388]	; (800c840 <LoRaMacMlmeRequest+0x200>)
 800c6bc:	f004 fb53 	bl	8010d66 <memset1>
 800c6c0:	e7d7      	b.n	800c672 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800c6c2:	4b5e      	ldr	r3, [pc, #376]	; (800c83c <LoRaMacMlmeRequest+0x1fc>)
 800c6c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c6c8:	f013 0f20 	tst.w	r3, #32
 800c6cc:	d1c6      	bne.n	800c65c <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800c6ce:	792b      	ldrb	r3, [r5, #4]
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d003      	beq.n	800c6dc <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d026      	beq.n	800c726 <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c6d8:	2402      	movs	r4, #2
 800c6da:	e093      	b.n	800c804 <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800c6dc:	2000      	movs	r0, #0
 800c6de:	f7fe fd95 	bl	800b20c <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800c6e2:	4c58      	ldr	r4, [pc, #352]	; (800c844 <LoRaMacMlmeRequest+0x204>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800c6ea:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c6ee:	f001 fb3f 	bl	800dd70 <RegionAlternateDr>
 800c6f2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800c6f6:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800c6fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800c6fe:	2307      	movs	r3, #7
 800c700:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800c704:	20ff      	movs	r0, #255	; 0xff
 800c706:	f7fe fee1 	bl	800b4cc <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800c70a:	4604      	mov	r4, r0
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d079      	beq.n	800c804 <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800c710:	4e4c      	ldr	r6, [pc, #304]	; (800c844 <LoRaMacMlmeRequest+0x204>)
 800c712:	2201      	movs	r2, #1
 800c714:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800c718:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800c71c:	f001 fb28 	bl	800dd70 <RegionAlternateDr>
 800c720:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800c724:	e06e      	b.n	800c804 <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800c726:	4e47      	ldr	r6, [pc, #284]	; (800c844 <LoRaMacMlmeRequest+0x204>)
 800c728:	2400      	movs	r4, #0
 800c72a:	f886 411d 	strb.w	r4, [r6, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c72e:	2302      	movs	r3, #2
 800c730:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800c734:	4669      	mov	r1, sp
 800c736:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800c73a:	f001 fa4f 	bl	800dbdc <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800c73e:	792b      	ldrb	r3, [r5, #4]
 800c740:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c744:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800c748:	2301      	movs	r3, #1
 800c74a:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800c74e:	f7fc ffd9 	bl	8009704 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c752:	4a3a      	ldr	r2, [pc, #232]	; (800c83c <LoRaMacMlmeRequest+0x1fc>)
 800c754:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c758:	f043 0310 	orr.w	r3, r3, #16
 800c75c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 800c760:	e050      	b.n	800c804 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c762:	2200      	movs	r2, #0
 800c764:	a904      	add	r1, sp, #16
 800c766:	2002      	movs	r0, #2
 800c768:	f000 fad0 	bl	800cd0c <LoRaMacCommandsAddCmd>
 800c76c:	4604      	mov	r4, r0
 800c76e:	2800      	cmp	r0, #0
 800c770:	d048      	beq.n	800c804 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c772:	2413      	movs	r4, #19
 800c774:	e046      	b.n	800c804 <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800c776:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800c77a:	b2d2      	uxtb	r2, r2
 800c77c:	68a9      	ldr	r1, [r5, #8]
 800c77e:	88a8      	ldrh	r0, [r5, #4]
 800c780:	f7fc ff16 	bl	80095b0 <SetTxContinuousWave>
 800c784:	4604      	mov	r4, r0
            break;
 800c786:	e03d      	b.n	800c804 <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800c788:	4669      	mov	r1, sp
 800c78a:	200d      	movs	r0, #13
 800c78c:	f000 fb0a 	bl	800cda4 <LoRaMacCommandsGetCmd>
 800c790:	4604      	mov	r4, r0
 800c792:	b3b8      	cbz	r0, 800c804 <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c794:	2200      	movs	r2, #0
 800c796:	a904      	add	r1, sp, #16
 800c798:	200d      	movs	r0, #13
 800c79a:	f000 fab7 	bl	800cd0c <LoRaMacCommandsAddCmd>
 800c79e:	4604      	mov	r4, r0
 800c7a0:	b380      	cbz	r0, 800c804 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c7a2:	2413      	movs	r4, #19
            break;
 800c7a4:	e02e      	b.n	800c804 <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800c7a6:	4b27      	ldr	r3, [pc, #156]	; (800c844 <LoRaMacMlmeRequest+0x204>)
 800c7a8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c7ac:	b10b      	cbz	r3, 800c7b2 <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c7ae:	2402      	movs	r4, #2
 800c7b0:	e028      	b.n	800c804 <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800c7b2:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800c7b4:	f004 0007 	and.w	r0, r4, #7
 800c7b8:	f000 fa01 	bl	800cbbe <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800c7bc:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	a904      	add	r1, sp, #16
 800c7c4:	2010      	movs	r0, #16
 800c7c6:	f000 faa1 	bl	800cd0c <LoRaMacCommandsAddCmd>
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	b1d0      	cbz	r0, 800c804 <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c7ce:	2413      	movs	r4, #19
 800c7d0:	e018      	b.n	800c804 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	a904      	add	r1, sp, #16
 800c7d6:	2012      	movs	r0, #18
 800c7d8:	f000 fa98 	bl	800cd0c <LoRaMacCommandsAddCmd>
 800c7dc:	4604      	mov	r4, r0
 800c7de:	b188      	cbz	r0, 800c804 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c7e0:	2413      	movs	r4, #19
 800c7e2:	e00f      	b.n	800c804 <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800c7ea:	f000 f9d9 	bl	800cba0 <LoRaMacClassBIsAcquisitionInProgress>
 800c7ee:	b108      	cbz	r0, 800c7f4 <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800c7f0:	2401      	movs	r4, #1
 800c7f2:	e007      	b.n	800c804 <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800c7f4:	f000 f9d1 	bl	800cb9a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	f000 f9d3 	bl	800cba4 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800c7fe:	2400      	movs	r4, #0
 800c800:	e000      	b.n	800c804 <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800c802:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800c804:	4b0d      	ldr	r3, [pc, #52]	; (800c83c <LoRaMacMlmeRequest+0x1fc>)
 800c806:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800c80a:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800c80c:	b17c      	cbz	r4, 800c82e <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800c80e:	f000 fc89 	bl	800d124 <LoRaMacConfirmQueueGetCnt>
 800c812:	2800      	cmp	r0, #0
 800c814:	f47f af22 	bne.w	800c65c <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800c818:	4b08      	ldr	r3, [pc, #32]	; (800c83c <LoRaMacMlmeRequest+0x1fc>)
 800c81a:	2100      	movs	r1, #0
 800c81c:	f883 141a 	strb.w	r1, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c820:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800c824:	f361 0282 	bfi	r2, r1, #2, #1
 800c828:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800c82c:	e716      	b.n	800c65c <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800c82e:	a805      	add	r0, sp, #20
 800c830:	f000 fbae 	bl	800cf90 <LoRaMacConfirmQueueAdd>
 800c834:	e712      	b.n	800c65c <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c836:	2403      	movs	r4, #3
 800c838:	e710      	b.n	800c65c <LoRaMacMlmeRequest+0x1c>
 800c83a:	bf00      	nop
 800c83c:	200006f0 	.word	0x200006f0
 800c840:	20000b44 	.word	0x20000b44
 800c844:	20008000 	.word	0x20008000

0800c848 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	b091      	sub	sp, #68	; 0x44
 800c84e:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800c850:	2800      	cmp	r0, #0
 800c852:	f000 80de 	beq.w	800ca12 <LoRaMacMcpsRequest+0x1ca>
 800c856:	f04f 0a00 	mov.w	sl, #0
 800c85a:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800c85c:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800c860:	f7fe ffaa 	bl	800b7b8 <LoRaMacIsBusy>
 800c864:	4680      	mov	r8, r0
 800c866:	b118      	cbz	r0, 800c870 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800c868:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800c86a:	b011      	add	sp, #68	; 0x44
 800c86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800c870:	ac06      	add	r4, sp, #24
 800c872:	462e      	mov	r6, r5
 800c874:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c878:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800c87c:	4651      	mov	r1, sl
 800c87e:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800c882:	4c66      	ldr	r4, [pc, #408]	; (800ca1c <LoRaMacMcpsRequest+0x1d4>)
 800c884:	2214      	movs	r2, #20
 800c886:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 800c88a:	f004 fa6c 	bl	8010d66 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800c894:	4b62      	ldr	r3, [pc, #392]	; (800ca20 <LoRaMacMcpsRequest+0x1d8>)
 800c896:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d065      	beq.n	800c96a <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800c89e:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800c8a2:	2f01      	cmp	r7, #1
 800c8a4:	f000 8086 	beq.w	800c9b4 <LoRaMacMcpsRequest+0x16c>
 800c8a8:	2f03      	cmp	r7, #3
 800c8aa:	f000 8096 	beq.w	800c9da <LoRaMacMcpsRequest+0x192>
 800c8ae:	2f00      	cmp	r7, #0
 800c8b0:	d06d      	beq.n	800c98e <LoRaMacMcpsRequest+0x146>
 800c8b2:	f04f 0b00 	mov.w	fp, #0
 800c8b6:	f8cd b014 	str.w	fp, [sp, #20]
 800c8ba:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800c8be:	2302      	movs	r3, #2
 800c8c0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c8c4:	4e56      	ldr	r6, [pc, #344]	; (800ca20 <LoRaMacMcpsRequest+0x1d8>)
 800c8c6:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 800c8ca:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c8ce:	a90e      	add	r1, sp, #56	; 0x38
 800c8d0:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800c8d4:	f001 f95c 	bl	800db90 <RegionGetPhyParam>
 800c8d8:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800c8da:	b244      	sxtb	r4, r0
 800c8dc:	45a3      	cmp	fp, r4
 800c8de:	bfb8      	it	lt
 800c8e0:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800c8e2:	f896 911a 	ldrb.w	r9, [r6, #282]	; 0x11a
 800c8e6:	f896 211d 	ldrb.w	r2, [r6, #285]	; 0x11d
 800c8ea:	f896 1130 	ldrb.w	r1, [r6, #304]	; 0x130
 800c8ee:	4648      	mov	r0, r9
 800c8f0:	f7fc fe30 	bl	8009554 <CheckForMinimumAbpDatarate>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	b900      	cbnz	r0, 800c8fa <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800c8f8:	465c      	mov	r4, fp
    if( readyToSend == true )
 800c8fa:	f1b8 0f00 	cmp.w	r8, #0
 800c8fe:	f000 8082 	beq.w	800ca06 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800c902:	f1b9 0f00 	cmp.w	r9, #0
 800c906:	d000      	beq.n	800c90a <LoRaMacMcpsRequest+0xc2>
 800c908:	b19b      	cbz	r3, 800c932 <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800c90a:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c90e:	4b44      	ldr	r3, [pc, #272]	; (800ca20 <LoRaMacMcpsRequest+0x1d8>)
 800c910:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800c914:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c918:	2205      	movs	r2, #5
 800c91a:	a90b      	add	r1, sp, #44	; 0x2c
 800c91c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c920:	f001 f96a 	bl	800dbf8 <RegionVerify>
 800c924:	2800      	cmp	r0, #0
 800c926:	d076      	beq.n	800ca16 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c928:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800c92c:	4b3c      	ldr	r3, [pc, #240]	; (800ca20 <LoRaMacMcpsRequest+0x1d8>)
 800c92e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800c932:	4b3a      	ldr	r3, [pc, #232]	; (800ca1c <LoRaMacMcpsRequest+0x1d4>)
 800c934:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800c938:	4b39      	ldr	r3, [pc, #228]	; (800ca20 <LoRaMacMcpsRequest+0x1d8>)
 800c93a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800c93e:	f7fd ff97 	bl	800a870 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800c942:	9b03      	ldr	r3, [sp, #12]
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	4653      	mov	r3, sl
 800c948:	9a05      	ldr	r2, [sp, #20]
 800c94a:	9904      	ldr	r1, [sp, #16]
 800c94c:	a80c      	add	r0, sp, #48	; 0x30
 800c94e:	f7fe fea3 	bl	800b698 <Send>
        if( status == LORAMAC_STATUS_OK )
 800c952:	2800      	cmp	r0, #0
 800c954:	d152      	bne.n	800c9fc <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800c956:	4b31      	ldr	r3, [pc, #196]	; (800ca1c <LoRaMacMcpsRequest+0x1d4>)
 800c958:	f883 7440 	strb.w	r7, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800c95c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800c960:	f042 0201 	orr.w	r2, r2, #1
 800c964:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800c968:	e04e      	b.n	800ca08 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800c96a:	4b2d      	ldr	r3, [pc, #180]	; (800ca20 <LoRaMacMcpsRequest+0x1d8>)
 800c96c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800c970:	2b02      	cmp	r3, #2
 800c972:	d194      	bne.n	800c89e <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800c974:	4b2a      	ldr	r3, [pc, #168]	; (800ca20 <LoRaMacMcpsRequest+0x1d8>)
 800c976:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d18f      	bne.n	800c89e <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800c97e:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800c982:	2b00      	cmp	r3, #0
 800c984:	d18b      	bne.n	800c89e <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800c986:	2301      	movs	r3, #1
 800c988:	f88d 3018 	strb.w	r3, [sp, #24]
 800c98c:	e787      	b.n	800c89e <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800c98e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c992:	2202      	movs	r2, #2
 800c994:	f362 1347 	bfi	r3, r2, #5, #3
 800c998:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800c99c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c9a0:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800c9a2:	9b08      	ldr	r3, [sp, #32]
 800c9a4:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800c9a6:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800c9aa:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800c9ae:	f04f 0801 	mov.w	r8, #1
            break;
 800c9b2:	e784      	b.n	800c8be <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800c9b4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c9b8:	2204      	movs	r2, #4
 800c9ba:	f362 1347 	bfi	r3, r2, #5, #3
 800c9be:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800c9c2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c9c6:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800c9c8:	9b08      	ldr	r3, [sp, #32]
 800c9ca:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800c9cc:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800c9d0:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800c9d4:	f04f 0801 	mov.w	r8, #1
            break;
 800c9d8:	e771      	b.n	800c8be <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800c9da:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c9de:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800c9e2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800c9e6:	9b07      	ldr	r3, [sp, #28]
 800c9e8:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800c9ea:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800c9ee:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800c9f2:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	9304      	str	r3, [sp, #16]
            break;
 800c9fa:	e760      	b.n	800c8be <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800c9fc:	4b07      	ldr	r3, [pc, #28]	; (800ca1c <LoRaMacMcpsRequest+0x1d4>)
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 800ca04:	e000      	b.n	800ca08 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ca06:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ca08:	4b04      	ldr	r3, [pc, #16]	; (800ca1c <LoRaMacMcpsRequest+0x1d4>)
 800ca0a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800ca0e:	612b      	str	r3, [r5, #16]
    return status;
 800ca10:	e72b      	b.n	800c86a <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ca12:	2003      	movs	r0, #3
 800ca14:	e729      	b.n	800c86a <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800ca16:	2003      	movs	r0, #3
 800ca18:	e727      	b.n	800c86a <LoRaMacMcpsRequest+0x22>
 800ca1a:	bf00      	nop
 800ca1c:	200006f0 	.word	0x200006f0
 800ca20:	20008000 	.word	0x20008000

0800ca24 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800ca24:	b510      	push	{r4, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800ca2a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800ca2e:	220f      	movs	r2, #15
 800ca30:	a901      	add	r1, sp, #4
 800ca32:	4b09      	ldr	r3, [pc, #36]	; (800ca58 <LoRaMacTestSetDutyCycleOn+0x34>)
 800ca34:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ca38:	f001 f8de 	bl	800dbf8 <RegionVerify>
 800ca3c:	b148      	cbz	r0, 800ca52 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800ca3e:	4b06      	ldr	r3, [pc, #24]	; (800ca58 <LoRaMacTestSetDutyCycleOn+0x34>)
 800ca40:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ca44:	4a05      	ldr	r2, [pc, #20]	; (800ca5c <LoRaMacTestSetDutyCycleOn+0x38>)
 800ca46:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ca4a:	f043 0320 	orr.w	r3, r3, #32
 800ca4e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800ca52:	b002      	add	sp, #8
 800ca54:	bd10      	pop	{r4, pc}
 800ca56:	bf00      	nop
 800ca58:	20008000 	.word	0x20008000
 800ca5c:	200006f0 	.word	0x200006f0

0800ca60 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800ca60:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800ca62:	f7ff f907 	bl	800bc74 <LoRaMacStop>
 800ca66:	b110      	cbz	r0, 800ca6e <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800ca68:	2401      	movs	r4, #1
    }
}
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	bd38      	pop	{r3, r4, r5, pc}
 800ca6e:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800ca70:	4d0a      	ldr	r5, [pc, #40]	; (800ca9c <LoRaMacDeInitialization+0x3c>)
 800ca72:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800ca76:	f006 fb8d 	bl	8013194 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800ca7a:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800ca7e:	f006 fb89 	bl	8013194 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800ca82:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800ca86:	f006 fb85 	bl	8013194 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800ca8a:	f000 f899 	bl	800cbc0 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800ca8e:	2000      	movs	r0, #0
 800ca90:	f7fe fbbc 	bl	800b20c <ResetMacParameters>
        Radio.Sleep( );
 800ca94:	4b02      	ldr	r3, [pc, #8]	; (800caa0 <LoRaMacDeInitialization+0x40>)
 800ca96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca98:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800ca9a:	e7e6      	b.n	800ca6a <LoRaMacDeInitialization+0xa>
 800ca9c:	200006f0 	.word	0x200006f0
 800caa0:	0801458c 	.word	0x0801458c

0800caa4 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa8:	b08b      	sub	sp, #44	; 0x2c
 800caaa:	460f      	mov	r7, r1
 800caac:	4616      	mov	r6, r2
 800caae:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800cab0:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800cab4:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800cab8:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800cabc:	6842      	ldr	r2, [r0, #4]
 800cabe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cac0:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800cac2:	f890 8001 	ldrb.w	r8, [r0, #1]
 800cac6:	f1b8 0f00 	cmp.w	r8, #0
 800caca:	d109      	bne.n	800cae0 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800cacc:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800cad0:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800cad4:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800cad8:	4640      	mov	r0, r8
 800cada:	b00b      	add	sp, #44	; 0x2c
 800cadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae0:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800cae2:	2302      	movs	r3, #2
 800cae4:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800cae8:	7bc3      	ldrb	r3, [r0, #15]
 800caea:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800caee:	a908      	add	r1, sp, #32
 800caf0:	7c00      	ldrb	r0, [r0, #16]
 800caf2:	f001 f84d 	bl	800db90 <RegionGetPhyParam>
 800caf6:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800caf8:	b243      	sxtb	r3, r0
 800cafa:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800cafc:	454b      	cmp	r3, r9
 800cafe:	bfb8      	it	lt
 800cb00:	464b      	movlt	r3, r9
 800cb02:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800cb04:	6862      	ldr	r2, [r4, #4]
 800cb06:	8923      	ldrh	r3, [r4, #8]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d201      	bcs.n	800cb10 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800cb0c:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800cb10:	8961      	ldrh	r1, [r4, #10]
 800cb12:	440b      	add	r3, r1
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d224      	bcs.n	800cb62 <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800cb18:	6863      	ldr	r3, [r4, #4]
 800cb1a:	8921      	ldrh	r1, [r4, #8]
 800cb1c:	8962      	ldrh	r2, [r4, #10]
 800cb1e:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800cb22:	4283      	cmp	r3, r0
 800cb24:	d332      	bcc.n	800cb8c <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800cb26:	1a5b      	subs	r3, r3, r1
 800cb28:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb2c:	fb02 3311 	mls	r3, r2, r1, r3
 800cb30:	bb7b      	cbnz	r3, 800cb92 <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800cb32:	9b01      	ldr	r3, [sp, #4]
 800cb34:	4599      	cmp	r9, r3
 800cb36:	dc03      	bgt.n	800cb40 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800cb38:	7823      	ldrb	r3, [r4, #0]
 800cb3a:	b9eb      	cbnz	r3, 800cb78 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800cb3c:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800cb40:	2321      	movs	r3, #33	; 0x21
 800cb42:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800cb46:	9b00      	ldr	r3, [sp, #0]
 800cb48:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800cb4c:	7be3      	ldrb	r3, [r4, #15]
 800cb4e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800cb52:	a908      	add	r1, sp, #32
 800cb54:	7c20      	ldrb	r0, [r4, #16]
 800cb56:	f001 f81b 	bl	800db90 <RegionGetPhyParam>
 800cb5a:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800cb5c:	fa4f f980 	sxtb.w	r9, r0
 800cb60:	e7b4      	b.n	800cacc <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800cb62:	230a      	movs	r3, #10
 800cb64:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800cb68:	a908      	add	r1, sp, #32
 800cb6a:	7c20      	ldrb	r0, [r4, #16]
 800cb6c:	f001 f810 	bl	800db90 <RegionGetPhyParam>
 800cb70:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800cb72:	fa4f fa80 	sxtb.w	sl, r0
 800cb76:	e7cf      	b.n	800cb18 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800cb78:	2302      	movs	r3, #2
 800cb7a:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800cb7e:	a903      	add	r1, sp, #12
 800cb80:	7c20      	ldrb	r0, [r4, #16]
 800cb82:	f001 f82b 	bl	800dbdc <RegionInitDefaults>
                    nbTrans = 1;
 800cb86:	f04f 0b01 	mov.w	fp, #1
 800cb8a:	e7d9      	b.n	800cb40 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800cb8c:	f8dd 9000 	ldr.w	r9, [sp]
 800cb90:	e79c      	b.n	800cacc <LoRaMacAdrCalcNext+0x28>
 800cb92:	f8dd 9000 	ldr.w	r9, [sp]
 800cb96:	e799      	b.n	800cacc <LoRaMacAdrCalcNext+0x28>

0800cb98 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cb98:	4770      	bx	lr

0800cb9a <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cb9a:	4770      	bx	lr

0800cb9c <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cb9c:	4770      	bx	lr

0800cb9e <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cb9e:	4770      	bx	lr

0800cba0 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cba0:	2000      	movs	r0, #0
 800cba2:	4770      	bx	lr

0800cba4 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cba4:	4770      	bx	lr

0800cba6 <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cba6:	4770      	bx	lr

0800cba8 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cba8:	4770      	bx	lr

0800cbaa <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbaa:	2000      	movs	r0, #0
 800cbac:	4770      	bx	lr

0800cbae <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbae:	2000      	movs	r0, #0
 800cbb0:	4770      	bx	lr

0800cbb2 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbb2:	2000      	movs	r0, #0
 800cbb4:	4770      	bx	lr

0800cbb6 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	4770      	bx	lr

0800cbba <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbba:	2000      	movs	r0, #0
 800cbbc:	4770      	bx	lr

0800cbbe <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbbe:	4770      	bx	lr

0800cbc0 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbc0:	4770      	bx	lr

0800cbc2 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbc2:	4770      	bx	lr

0800cbc4 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbc4:	2002      	movs	r0, #2
 800cbc6:	4770      	bx	lr

0800cbc8 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbc8:	2002      	movs	r0, #2
 800cbca:	4770      	bx	lr

0800cbcc <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbcc:	2002      	movs	r0, #2
 800cbce:	4770      	bx	lr

0800cbd0 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbd0:	4770      	bx	lr

0800cbd2 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	4770      	bx	lr

0800cbd6 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbd6:	4770      	bx	lr

0800cbd8 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbd8:	4770      	bx	lr

0800cbda <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbda:	2000      	movs	r0, #0
 800cbdc:	4770      	bx	lr

0800cbde <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbde:	2000      	movs	r0, #0
 800cbe0:	4770      	bx	lr

0800cbe2 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbe2:	4770      	bx	lr

0800cbe4 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbe4:	4770      	bx	lr

0800cbe6 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800cbe6:	4770      	bx	lr

0800cbe8 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800cbe8:	2300      	movs	r3, #0
 800cbea:	2b0f      	cmp	r3, #15
 800cbec:	d804      	bhi.n	800cbf8 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800cbee:	5cc2      	ldrb	r2, [r0, r3]
 800cbf0:	b922      	cbnz	r2, 800cbfc <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	e7f8      	b.n	800cbea <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800cbf8:	2001      	movs	r0, #1
 800cbfa:	4770      	bx	lr
            return false;
 800cbfc:	2000      	movs	r0, #0
}
 800cbfe:	4770      	bx	lr

0800cc00 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800cc00:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800cc02:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800cc04:	0123      	lsls	r3, r4, #4
 800cc06:	3308      	adds	r3, #8
 800cc08:	4d06      	ldr	r5, [pc, #24]	; (800cc24 <MallocNewMacCommandSlot+0x24>)
 800cc0a:	441d      	add	r5, r3
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f7ff ffeb 	bl	800cbe8 <IsSlotFree>
 800cc12:	b920      	cbnz	r0, 800cc1e <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800cc14:	3401      	adds	r4, #1
 800cc16:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800cc18:	2c20      	cmp	r4, #32
 800cc1a:	d1f3      	bne.n	800cc04 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800cc1c:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800cc1e:	4628      	mov	r0, r5
 800cc20:	bd38      	pop	{r3, r4, r5, pc}
 800cc22:	bf00      	nop
 800cc24:	20000cb0 	.word	0x20000cb0

0800cc28 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800cc28:	b120      	cbz	r0, 800cc34 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800cc2e:	6042      	str	r2, [r0, #4]

    return true;
 800cc30:	2001      	movs	r0, #1
 800cc32:	4770      	bx	lr
        return false;
 800cc34:	2000      	movs	r0, #0
}
 800cc36:	4770      	bx	lr

0800cc38 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cc38:	4603      	mov	r3, r0
 800cc3a:	b160      	cbz	r0, 800cc56 <LinkedListAdd+0x1e>
 800cc3c:	b169      	cbz	r1, 800cc5a <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800cc3e:	6802      	ldr	r2, [r0, #0]
 800cc40:	b13a      	cbz	r2, 800cc52 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	b102      	cbz	r2, 800cc48 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800cc46:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800cc48:	2200      	movs	r2, #0
 800cc4a:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800cc4c:	6059      	str	r1, [r3, #4]

    return true;
 800cc4e:	2001      	movs	r0, #1
 800cc50:	4770      	bx	lr
        list->First = element;
 800cc52:	6001      	str	r1, [r0, #0]
 800cc54:	e7f5      	b.n	800cc42 <LinkedListAdd+0xa>
        return false;
 800cc56:	2000      	movs	r0, #0
 800cc58:	4770      	bx	lr
 800cc5a:	2000      	movs	r0, #0
}
 800cc5c:	4770      	bx	lr

0800cc5e <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cc5e:	b160      	cbz	r0, 800cc7a <LinkedListGetPrevious+0x1c>
 800cc60:	b161      	cbz	r1, 800cc7c <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800cc62:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800cc64:	4281      	cmp	r1, r0
 800cc66:	d102      	bne.n	800cc6e <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800cc68:	2000      	movs	r0, #0
    }

    return curElement;
}
 800cc6a:	4770      	bx	lr
            curElement = curElement->Next;
 800cc6c:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d0fb      	beq.n	800cc6a <LinkedListGetPrevious+0xc>
 800cc72:	6803      	ldr	r3, [r0, #0]
 800cc74:	428b      	cmp	r3, r1
 800cc76:	d1f9      	bne.n	800cc6c <LinkedListGetPrevious+0xe>
 800cc78:	4770      	bx	lr
 800cc7a:	4770      	bx	lr
        return NULL;
 800cc7c:	4608      	mov	r0, r1
 800cc7e:	4770      	bx	lr

0800cc80 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cc80:	b1b8      	cbz	r0, 800ccb2 <LinkedListRemove+0x32>
{
 800cc82:	b538      	push	{r3, r4, r5, lr}
 800cc84:	460c      	mov	r4, r1
 800cc86:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800cc88:	b1a9      	cbz	r1, 800ccb6 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800cc8a:	f7ff ffe8 	bl	800cc5e <LinkedListGetPrevious>

    if( list->First == element )
 800cc8e:	682b      	ldr	r3, [r5, #0]
 800cc90:	42a3      	cmp	r3, r4
 800cc92:	d009      	beq.n	800cca8 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800cc94:	686b      	ldr	r3, [r5, #4]
 800cc96:	42a3      	cmp	r3, r4
 800cc98:	d009      	beq.n	800ccae <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800cc9a:	b108      	cbz	r0, 800cca0 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800cc9c:	6823      	ldr	r3, [r4, #0]
 800cc9e:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800cca0:	2300      	movs	r3, #0
 800cca2:	6023      	str	r3, [r4, #0]

    return true;
 800cca4:	2001      	movs	r0, #1
}
 800cca6:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800cca8:	6823      	ldr	r3, [r4, #0]
 800ccaa:	602b      	str	r3, [r5, #0]
 800ccac:	e7f2      	b.n	800cc94 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800ccae:	6068      	str	r0, [r5, #4]
 800ccb0:	e7f3      	b.n	800cc9a <LinkedListRemove+0x1a>
        return false;
 800ccb2:	2000      	movs	r0, #0
}
 800ccb4:	4770      	bx	lr
        return false;
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	e7f5      	b.n	800cca6 <LinkedListRemove+0x26>
	...

0800ccbc <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800ccbc:	2811      	cmp	r0, #17
 800ccbe:	d805      	bhi.n	800cccc <IsSticky+0x10>
 800ccc0:	4b03      	ldr	r3, [pc, #12]	; (800ccd0 <IsSticky+0x14>)
 800ccc2:	fa23 f000 	lsr.w	r0, r3, r0
 800ccc6:	f000 0001 	and.w	r0, r0, #1
 800ccca:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800cccc:	2000      	movs	r0, #0
    }
}
 800ccce:	4770      	bx	lr
 800ccd0:	00020720 	.word	0x00020720

0800ccd4 <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	4770      	bx	lr

0800ccd8 <FreeMacCommandSlot>:
    if( slot == NULL )
 800ccd8:	b130      	cbz	r0, 800cce8 <FreeMacCommandSlot+0x10>
{
 800ccda:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800ccdc:	2210      	movs	r2, #16
 800ccde:	2100      	movs	r1, #0
 800cce0:	f004 f841 	bl	8010d66 <memset1>
    return true;
 800cce4:	2001      	movs	r0, #1
}
 800cce6:	bd08      	pop	{r3, pc}
        return false;
 800cce8:	2000      	movs	r0, #0
}
 800ccea:	4770      	bx	lr

0800ccec <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800ccec:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800ccee:	4c06      	ldr	r4, [pc, #24]	; (800cd08 <LoRaMacCommandsInit+0x1c>)
 800ccf0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f004 f835 	bl	8010d66 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f7ff ff93 	bl	800cc28 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cd02:	2000      	movs	r0, #0
 800cd04:	bd10      	pop	{r4, pc}
 800cd06:	bf00      	nop
 800cd08:	20000cb0 	.word	0x20000cb0

0800cd0c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800cd0c:	b321      	cbz	r1, 800cd58 <LoRaMacCommandsAddCmd+0x4c>
{
 800cd0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd10:	4605      	mov	r5, r0
 800cd12:	4614      	mov	r4, r2
 800cd14:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800cd16:	f7ff ff73 	bl	800cc00 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800cd1a:	4606      	mov	r6, r0
 800cd1c:	b1f0      	cbz	r0, 800cd5c <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800cd1e:	4601      	mov	r1, r0
 800cd20:	4810      	ldr	r0, [pc, #64]	; (800cd64 <LoRaMacCommandsAddCmd+0x58>)
 800cd22:	f7ff ff89 	bl	800cc38 <LinkedListAdd>
 800cd26:	b1d8      	cbz	r0, 800cd60 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800cd28:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800cd2a:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800cd2c:	b2a2      	uxth	r2, r4
 800cd2e:	4639      	mov	r1, r7
 800cd30:	1d70      	adds	r0, r6, #5
 800cd32:	f004 f800 	bl	8010d36 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800cd36:	4628      	mov	r0, r5
 800cd38:	f7ff ffc0 	bl	800ccbc <IsSticky>
 800cd3c:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800cd3e:	4628      	mov	r0, r5
 800cd40:	f7ff ffc8 	bl	800ccd4 <IsConfirmationRequired>
 800cd44:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800cd46:	4b07      	ldr	r3, [pc, #28]	; (800cd64 <LoRaMacCommandsAddCmd+0x58>)
 800cd48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cd4c:	4414      	add	r4, r2
 800cd4e:	3401      	adds	r4, #1
 800cd50:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800cd54:	2000      	movs	r0, #0
}
 800cd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cd58:	2001      	movs	r0, #1
}
 800cd5a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800cd5c:	2002      	movs	r0, #2
 800cd5e:	e7fa      	b.n	800cd56 <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800cd60:	2005      	movs	r0, #5
 800cd62:	e7f8      	b.n	800cd56 <LoRaMacCommandsAddCmd+0x4a>
 800cd64:	20000cb0 	.word	0x20000cb0

0800cd68 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800cd68:	b1a0      	cbz	r0, 800cd94 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800cd6a:	b510      	push	{r4, lr}
 800cd6c:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800cd6e:	4601      	mov	r1, r0
 800cd70:	480b      	ldr	r0, [pc, #44]	; (800cda0 <LoRaMacCommandsRemoveCmd+0x38>)
 800cd72:	f7ff ff85 	bl	800cc80 <LinkedListRemove>
 800cd76:	b178      	cbz	r0, 800cd98 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800cd78:	68a1      	ldr	r1, [r4, #8]
 800cd7a:	4a09      	ldr	r2, [pc, #36]	; (800cda0 <LoRaMacCommandsRemoveCmd+0x38>)
 800cd7c:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800cd80:	1a5b      	subs	r3, r3, r1
 800cd82:	3b01      	subs	r3, #1
 800cd84:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f7ff ffa5 	bl	800ccd8 <FreeMacCommandSlot>
 800cd8e:	b128      	cbz	r0, 800cd9c <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800cd90:	2000      	movs	r0, #0
}
 800cd92:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cd94:	2001      	movs	r0, #1
}
 800cd96:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800cd98:	2003      	movs	r0, #3
 800cd9a:	e7fa      	b.n	800cd92 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800cd9c:	2005      	movs	r0, #5
 800cd9e:	e7f8      	b.n	800cd92 <LoRaMacCommandsRemoveCmd+0x2a>
 800cda0:	20000cb0 	.word	0x20000cb0

0800cda4 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800cda4:	4b06      	ldr	r3, [pc, #24]	; (800cdc0 <LoRaMacCommandsGetCmd+0x1c>)
 800cda6:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800cda8:	e000      	b.n	800cdac <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800cdaa:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800cdac:	b113      	cbz	r3, 800cdb4 <LoRaMacCommandsGetCmd+0x10>
 800cdae:	791a      	ldrb	r2, [r3, #4]
 800cdb0:	4282      	cmp	r2, r0
 800cdb2:	d1fa      	bne.n	800cdaa <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800cdb4:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800cdb6:	b10b      	cbz	r3, 800cdbc <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800cdb8:	2000      	movs	r0, #0
 800cdba:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800cdbc:	2003      	movs	r0, #3
}
 800cdbe:	4770      	bx	lr
 800cdc0:	20000cb0 	.word	0x20000cb0

0800cdc4 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800cdc4:	4b0a      	ldr	r3, [pc, #40]	; (800cdf0 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800cdc6:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cdc8:	b120      	cbz	r0, 800cdd4 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800cdca:	7b03      	ldrb	r3, [r0, #12]
 800cdcc:	b11b      	cbz	r3, 800cdd6 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800cdce:	6800      	ldr	r0, [r0, #0]
 800cdd0:	e7fa      	b.n	800cdc8 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cdd2:	bd10      	pop	{r4, pc}
 800cdd4:	4770      	bx	lr
{
 800cdd6:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800cdd8:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800cdda:	f7ff ffc5 	bl	800cd68 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800cdde:	4620      	mov	r0, r4
    while( curElement != NULL )
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d0f6      	beq.n	800cdd2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800cde4:	7b03      	ldrb	r3, [r0, #12]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d0f6      	beq.n	800cdd8 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800cdea:	6800      	ldr	r0, [r0, #0]
 800cdec:	e7f8      	b.n	800cde0 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800cdee:	bf00      	nop
 800cdf0:	20000cb0 	.word	0x20000cb0

0800cdf4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800cdf4:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800cdf6:	4b0b      	ldr	r3, [pc, #44]	; (800ce24 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800cdf8:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800cdfa:	e000      	b.n	800cdfe <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800cdfc:	4634      	mov	r4, r6
    while( curElement != NULL )
 800cdfe:	b17c      	cbz	r4, 800ce20 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800ce00:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800ce02:	7925      	ldrb	r5, [r4, #4]
 800ce04:	4628      	mov	r0, r5
 800ce06:	f7ff ff59 	bl	800ccbc <IsSticky>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d0f6      	beq.n	800cdfc <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f7ff ff60 	bl	800ccd4 <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d1f1      	bne.n	800cdfc <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f7ff ffa5 	bl	800cd68 <LoRaMacCommandsRemoveCmd>
 800ce1e:	e7ed      	b.n	800cdfc <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ce20:	2000      	movs	r0, #0
 800ce22:	bd70      	pop	{r4, r5, r6, pc}
 800ce24:	20000cb0 	.word	0x20000cb0

0800ce28 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800ce28:	b128      	cbz	r0, 800ce36 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800ce2a:	4a04      	ldr	r2, [pc, #16]	; (800ce3c <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800ce2c:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800ce30:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800ce32:	2000      	movs	r0, #0
 800ce34:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ce36:	2001      	movs	r0, #1
}
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	20000cb0 	.word	0x20000cb0

0800ce40 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800ce40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800ce44:	4b16      	ldr	r3, [pc, #88]	; (800cea0 <LoRaMacCommandsSerializeCmds+0x60>)
 800ce46:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800ce48:	b32a      	cbz	r2, 800ce96 <LoRaMacCommandsSerializeCmds+0x56>
 800ce4a:	4607      	mov	r7, r0
 800ce4c:	4688      	mov	r8, r1
 800ce4e:	4616      	mov	r6, r2
 800ce50:	b319      	cbz	r1, 800ce9a <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800ce52:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800ce54:	b194      	cbz	r4, 800ce7c <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800ce56:	1a7a      	subs	r2, r7, r1
 800ce58:	68a3      	ldr	r3, [r4, #8]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d30d      	bcc.n	800ce7c <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800ce60:	1c4d      	adds	r5, r1, #1
 800ce62:	b2ed      	uxtb	r5, r5
 800ce64:	7923      	ldrb	r3, [r4, #4]
 800ce66:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800ce68:	8922      	ldrh	r2, [r4, #8]
 800ce6a:	1d61      	adds	r1, r4, #5
 800ce6c:	1970      	adds	r0, r6, r5
 800ce6e:	f003 ff62 	bl	8010d36 <memcpy1>
            itr += curElement->PayloadSize;
 800ce72:	68a3      	ldr	r3, [r4, #8]
 800ce74:	441d      	add	r5, r3
 800ce76:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800ce78:	6824      	ldr	r4, [r4, #0]
 800ce7a:	e7eb      	b.n	800ce54 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800ce7c:	b12c      	cbz	r4, 800ce8a <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800ce7e:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800ce80:	4620      	mov	r0, r4
 800ce82:	f7ff ff71 	bl	800cd68 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800ce86:	462c      	mov	r4, r5
 800ce88:	e7f8      	b.n	800ce7c <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	f7ff ffcc 	bl	800ce28 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800ce90:	2000      	movs	r0, #0
}
 800ce92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ce96:	2001      	movs	r0, #1
 800ce98:	e7fb      	b.n	800ce92 <LoRaMacCommandsSerializeCmds+0x52>
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	e7f9      	b.n	800ce92 <LoRaMacCommandsSerializeCmds+0x52>
 800ce9e:	bf00      	nop
 800cea0:	20000cb0 	.word	0x20000cb0

0800cea4 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800cea4:	1e83      	subs	r3, r0, #2
 800cea6:	2b11      	cmp	r3, #17
 800cea8:	d80a      	bhi.n	800cec0 <LoRaMacCommandsGetCmdSize+0x1c>
 800ceaa:	e8df f003 	tbb	[pc, r3]
 800ceae:	0b23      	.short	0x0b23
 800ceb0:	110f240d 	.word	0x110f240d
 800ceb4:	09171513 	.word	0x09171513
 800ceb8:	09091909 	.word	0x09091909
 800cebc:	211f1d1b 	.word	0x211f1d1b
 800cec0:	2000      	movs	r0, #0
 800cec2:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800cec4:	2005      	movs	r0, #5
            break;
 800cec6:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800cec8:	2002      	movs	r0, #2
            break;
 800ceca:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800cecc:	2001      	movs	r0, #1
            break;
 800cece:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800ced0:	2006      	movs	r0, #6
            break;
 800ced2:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800ced4:	2002      	movs	r0, #2
            break;
 800ced6:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800ced8:	2002      	movs	r0, #2
            break;
 800ceda:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800cedc:	2005      	movs	r0, #5
            break;
 800cede:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800cee0:	2006      	movs	r0, #6
            break;
 800cee2:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800cee4:	2001      	movs	r0, #1
            break;
 800cee6:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800cee8:	2005      	movs	r0, #5
            break;
 800ceea:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800ceec:	2004      	movs	r0, #4
            break;
 800ceee:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800cef0:	2004      	movs	r0, #4
            break;
 800cef2:	4770      	bx	lr
            cidSize = 3;
 800cef4:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800cef6:	4770      	bx	lr

0800cef8 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800cef8:	4b03      	ldr	r3, [pc, #12]	; (800cf08 <IncreaseBufferPointer+0x10>)
 800cefa:	4298      	cmp	r0, r3
 800cefc:	d001      	beq.n	800cf02 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800cefe:	3004      	adds	r0, #4
 800cf00:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cf02:	4802      	ldr	r0, [pc, #8]	; (800cf0c <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	20000ed8 	.word	0x20000ed8
 800cf0c:	20000ec8 	.word	0x20000ec8

0800cf10 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800cf10:	b108      	cbz	r0, 800cf16 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800cf12:	2000      	movs	r0, #0
 800cf14:	4770      	bx	lr
        return true;
 800cf16:	2001      	movs	r0, #1
}
 800cf18:	4770      	bx	lr

0800cf1a <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800cf1a:	2804      	cmp	r0, #4
 800cf1c:	d801      	bhi.n	800cf22 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800cf1e:	2000      	movs	r0, #0
 800cf20:	4770      	bx	lr
        return true;
 800cf22:	2001      	movs	r0, #1
}
 800cf24:	4770      	bx	lr
	...

0800cf28 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2a:	4606      	mov	r6, r0
 800cf2c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800cf2e:	4b0d      	ldr	r3, [pc, #52]	; (800cf64 <GetElement+0x3c>)
 800cf30:	f893 7020 	ldrb.w	r7, [r3, #32]
 800cf34:	4638      	mov	r0, r7
 800cf36:	f7ff ffeb 	bl	800cf10 <IsListEmpty>
 800cf3a:	b970      	cbnz	r0, 800cf5a <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800cf3c:	2500      	movs	r5, #0
 800cf3e:	42af      	cmp	r7, r5
 800cf40:	d909      	bls.n	800cf56 <GetElement+0x2e>
    {
        if( element->Request == request )
 800cf42:	7823      	ldrb	r3, [r4, #0]
 800cf44:	42b3      	cmp	r3, r6
 800cf46:	d00a      	beq.n	800cf5e <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f7ff ffd5 	bl	800cef8 <IncreaseBufferPointer>
 800cf4e:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800cf50:	3501      	adds	r5, #1
 800cf52:	b2ed      	uxtb	r5, r5
 800cf54:	e7f3      	b.n	800cf3e <GetElement+0x16>
    }

    return NULL;
 800cf56:	2000      	movs	r0, #0
}
 800cf58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	e7fc      	b.n	800cf58 <GetElement+0x30>
            return element;
 800cf5e:	4620      	mov	r0, r4
 800cf60:	e7fa      	b.n	800cf58 <GetElement+0x30>
 800cf62:	bf00      	nop
 800cf64:	20000ebc 	.word	0x20000ebc

0800cf68 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800cf68:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800cf6a:	4c08      	ldr	r4, [pc, #32]	; (800cf8c <LoRaMacConfirmQueueInit+0x24>)
 800cf6c:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cf74:	f104 000c 	add.w	r0, r4, #12
 800cf78:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cf7a:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800cf7c:	2214      	movs	r2, #20
 800cf7e:	21ff      	movs	r1, #255	; 0xff
 800cf80:	f003 fef1 	bl	8010d66 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cf84:	2301      	movs	r3, #1
 800cf86:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800cf8a:	bd10      	pop	{r4, pc}
 800cf8c:	20000ebc 	.word	0x20000ebc

0800cf90 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800cf94:	4b0f      	ldr	r3, [pc, #60]	; (800cfd4 <LoRaMacConfirmQueueAdd+0x44>)
 800cf96:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cf9a:	f7ff ffbe 	bl	800cf1a <IsListFull>
 800cf9e:	b9b8      	cbnz	r0, 800cfd0 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800cfa0:	4c0c      	ldr	r4, [pc, #48]	; (800cfd4 <LoRaMacConfirmQueueAdd+0x44>)
 800cfa2:	68a3      	ldr	r3, [r4, #8]
 800cfa4:	782a      	ldrb	r2, [r5, #0]
 800cfa6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800cfa8:	68a3      	ldr	r3, [r4, #8]
 800cfaa:	786a      	ldrb	r2, [r5, #1]
 800cfac:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800cfae:	68a3      	ldr	r3, [r4, #8]
 800cfb0:	78ea      	ldrb	r2, [r5, #3]
 800cfb2:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800cfb4:	68a3      	ldr	r3, [r4, #8]
 800cfb6:	78aa      	ldrb	r2, [r5, #2]
 800cfb8:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800cfba:	f894 3020 	ldrb.w	r3, [r4, #32]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800cfc4:	68a0      	ldr	r0, [r4, #8]
 800cfc6:	f7ff ff97 	bl	800cef8 <IncreaseBufferPointer>
 800cfca:	60a0      	str	r0, [r4, #8]

    return true;
 800cfcc:	2001      	movs	r0, #1
}
 800cfce:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	e7fc      	b.n	800cfce <LoRaMacConfirmQueueAdd+0x3e>
 800cfd4:	20000ebc 	.word	0x20000ebc

0800cfd8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800cfd8:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800cfda:	4b09      	ldr	r3, [pc, #36]	; (800d000 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800cfdc:	f893 4020 	ldrb.w	r4, [r3, #32]
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f7ff ff95 	bl	800cf10 <IsListEmpty>
 800cfe6:	b948      	cbnz	r0, 800cffc <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800cfe8:	4d05      	ldr	r5, [pc, #20]	; (800d000 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800cfea:	3c01      	subs	r4, #1
 800cfec:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800cff0:	6868      	ldr	r0, [r5, #4]
 800cff2:	f7ff ff81 	bl	800cef8 <IncreaseBufferPointer>
 800cff6:	6068      	str	r0, [r5, #4]

    return true;
 800cff8:	2001      	movs	r0, #1
}
 800cffa:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800cffc:	2000      	movs	r0, #0
 800cffe:	e7fc      	b.n	800cffa <LoRaMacConfirmQueueRemoveFirst+0x22>
 800d000:	20000ebc 	.word	0x20000ebc

0800d004 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	4605      	mov	r5, r0
 800d008:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d00a:	4b08      	ldr	r3, [pc, #32]	; (800d02c <LoRaMacConfirmQueueSetStatus+0x28>)
 800d00c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d010:	f7ff ff7e 	bl	800cf10 <IsListEmpty>
 800d014:	b948      	cbnz	r0, 800d02a <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d016:	4b05      	ldr	r3, [pc, #20]	; (800d02c <LoRaMacConfirmQueueSetStatus+0x28>)
 800d018:	689a      	ldr	r2, [r3, #8]
 800d01a:	6859      	ldr	r1, [r3, #4]
 800d01c:	4620      	mov	r0, r4
 800d01e:	f7ff ff83 	bl	800cf28 <GetElement>
        if( element != NULL )
 800d022:	b110      	cbz	r0, 800d02a <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800d024:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800d026:	2201      	movs	r2, #1
 800d028:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20000ebc 	.word	0x20000ebc

0800d030 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800d030:	b510      	push	{r4, lr}
 800d032:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d034:	4b09      	ldr	r3, [pc, #36]	; (800d05c <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d036:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d03a:	f7ff ff69 	bl	800cf10 <IsListEmpty>
 800d03e:	b940      	cbnz	r0, 800d052 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d040:	4b06      	ldr	r3, [pc, #24]	; (800d05c <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d042:	689a      	ldr	r2, [r3, #8]
 800d044:	6859      	ldr	r1, [r3, #4]
 800d046:	4620      	mov	r0, r4
 800d048:	f7ff ff6e 	bl	800cf28 <GetElement>
        if( element != NULL )
 800d04c:	b118      	cbz	r0, 800d056 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800d04e:	7840      	ldrb	r0, [r0, #1]
 800d050:	e000      	b.n	800d054 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d052:	2001      	movs	r0, #1
}
 800d054:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d056:	2001      	movs	r0, #1
 800d058:	e7fc      	b.n	800d054 <LoRaMacConfirmQueueGetStatus+0x24>
 800d05a:	bf00      	nop
 800d05c:	20000ebc 	.word	0x20000ebc

0800d060 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800d060:	b538      	push	{r3, r4, r5, lr}
 800d062:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800d064:	4b0c      	ldr	r3, [pc, #48]	; (800d098 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d066:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800d068:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d06c:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d070:	f7ff ff4e 	bl	800cf10 <IsListEmpty>
 800d074:	b150      	cbz	r0, 800d08c <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800d076:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800d078:	2301      	movs	r3, #1
 800d07a:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800d07c:	4620      	mov	r0, r4
 800d07e:	f7ff ff3b 	bl	800cef8 <IncreaseBufferPointer>
 800d082:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800d084:	4b04      	ldr	r3, [pc, #16]	; (800d098 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	4283      	cmp	r3, r0
 800d08a:	d0f4      	beq.n	800d076 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800d08c:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800d08e:	78e3      	ldrb	r3, [r4, #3]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1f3      	bne.n	800d07c <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800d094:	e7f0      	b.n	800d078 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800d096:	bf00      	nop
 800d098:	20000ebc 	.word	0x20000ebc

0800d09c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800d09c:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800d09e:	4b04      	ldr	r3, [pc, #16]	; (800d0b0 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800d0a0:	689a      	ldr	r2, [r3, #8]
 800d0a2:	6859      	ldr	r1, [r3, #4]
 800d0a4:	f7ff ff40 	bl	800cf28 <GetElement>
 800d0a8:	b100      	cbz	r0, 800d0ac <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800d0aa:	2001      	movs	r0, #1
    }
    return false;
}
 800d0ac:	bd08      	pop	{r3, pc}
 800d0ae:	bf00      	nop
 800d0b0:	20000ebc 	.word	0x20000ebc

0800d0b4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800d0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800d0ba:	4b19      	ldr	r3, [pc, #100]	; (800d120 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800d0bc:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800d0c0:	2204      	movs	r2, #4
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	eb0d 0002 	add.w	r0, sp, r2
 800d0c8:	f003 fe4d 	bl	8010d66 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800d0cc:	2400      	movs	r4, #0
 800d0ce:	e00d      	b.n	800d0ec <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800d0d0:	781a      	ldrb	r2, [r3, #0]
 800d0d2:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800d0d6:	785a      	ldrb	r2, [r3, #1]
 800d0d8:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800d0dc:	78db      	ldrb	r3, [r3, #3]
 800d0de:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800d0e2:	f7ff ff79 	bl	800cfd8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800d0e6:	b1a5      	cbz	r5, 800d112 <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800d0e8:	3401      	adds	r4, #1
 800d0ea:	b2e4      	uxtb	r4, r4
 800d0ec:	42bc      	cmp	r4, r7
 800d0ee:	d214      	bcs.n	800d11a <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800d0f0:	4b0b      	ldr	r3, [pc, #44]	; (800d120 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800d0f2:	685a      	ldr	r2, [r3, #4]
 800d0f4:	7812      	ldrb	r2, [r2, #0]
 800d0f6:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	7852      	ldrb	r2, [r2, #1]
 800d0fc:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800d102:	2d00      	cmp	r5, #0
 800d104:	d0e4      	beq.n	800d0d0 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800d106:	4b06      	ldr	r3, [pc, #24]	; (800d120 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	689b      	ldr	r3, [r3, #8]
 800d10c:	4630      	mov	r0, r6
 800d10e:	4798      	blx	r3
 800d110:	e7e7      	b.n	800d0e2 <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800d112:	a801      	add	r0, sp, #4
 800d114:	f7ff ff3c 	bl	800cf90 <LoRaMacConfirmQueueAdd>
 800d118:	e7e6      	b.n	800d0e8 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800d11a:	b003      	add	sp, #12
 800d11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d11e:	bf00      	nop
 800d120:	20000ebc 	.word	0x20000ebc

0800d124 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800d124:	4b01      	ldr	r3, [pc, #4]	; (800d12c <LoRaMacConfirmQueueGetCnt+0x8>)
 800d126:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d12a:	4770      	bx	lr
 800d12c:	20000ebc 	.word	0x20000ebc

0800d130 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800d130:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d132:	4b03      	ldr	r3, [pc, #12]	; (800d140 <LoRaMacConfirmQueueIsFull+0x10>)
 800d134:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d138:	f7ff feef 	bl	800cf1a <IsListFull>
    }
    else
    {
        return false;
    }
}
 800d13c:	bd08      	pop	{r3, pc}
 800d13e:	bf00      	nop
 800d140:	20000ebc 	.word	0x20000ebc

0800d144 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800d144:	b410      	push	{r4}
 800d146:	9c01      	ldr	r4, [sp, #4]
 800d148:	9902      	ldr	r1, [sp, #8]
 800d14a:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800d14c:	b1da      	cbz	r2, 800d186 <PrepareB0+0x42>
 800d14e:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800d150:	2049      	movs	r0, #73	; 0x49
 800d152:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800d154:	2000      	movs	r0, #0
 800d156:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800d158:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800d15a:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800d15c:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800d15e:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800d160:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800d162:	0a23      	lsrs	r3, r4, #8
 800d164:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d166:	0c23      	lsrs	r3, r4, #16
 800d168:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d16a:	0e24      	lsrs	r4, r4, #24
 800d16c:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800d16e:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800d170:	0a0b      	lsrs	r3, r1, #8
 800d172:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800d174:	0c0b      	lsrs	r3, r1, #16
 800d176:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d178:	0e09      	lsrs	r1, r1, #24
 800d17a:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800d17c:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800d17e:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d182:	bc10      	pop	{r4}
 800d184:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d186:	2009      	movs	r0, #9
 800d188:	e7fb      	b.n	800d182 <PrepareB0+0x3e>
	...

0800d18c <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d18c:	2300      	movs	r3, #0
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d80e      	bhi.n	800d1b0 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800d192:	469c      	mov	ip, r3
 800d194:	4a07      	ldr	r2, [pc, #28]	; (800d1b4 <GetKeyAddrItem+0x28>)
 800d196:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800d19a:	4282      	cmp	r2, r0
 800d19c:	d002      	beq.n	800d1a4 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d19e:	3301      	adds	r3, #1
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	e7f4      	b.n	800d18e <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800d1a4:	4b03      	ldr	r3, [pc, #12]	; (800d1b4 <GetKeyAddrItem+0x28>)
 800d1a6:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800d1aa:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800d1b0:	200b      	movs	r0, #11
}
 800d1b2:	4770      	bx	lr
 800d1b4:	200000f0 	.word	0x200000f0

0800d1b8 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800d1b8:	b1f1      	cbz	r1, 800d1f8 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800d1ba:	3801      	subs	r0, #1
 800d1bc:	2803      	cmp	r0, #3
 800d1be:	d81d      	bhi.n	800d1fc <GetLastFcntDown+0x44>
 800d1c0:	e8df f000 	tbb	[pc, r0]
 800d1c4:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800d1c8:	4a0d      	ldr	r2, [pc, #52]	; (800d200 <GetLastFcntDown+0x48>)
 800d1ca:	6812      	ldr	r2, [r2, #0]
 800d1cc:	6912      	ldr	r2, [r2, #16]
 800d1ce:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800d1d0:	2000      	movs	r0, #0
            break;
 800d1d2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800d1d4:	4a0a      	ldr	r2, [pc, #40]	; (800d200 <GetLastFcntDown+0x48>)
 800d1d6:	6812      	ldr	r2, [r2, #0]
 800d1d8:	6952      	ldr	r2, [r2, #20]
 800d1da:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d1dc:	2000      	movs	r0, #0
            break;
 800d1de:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800d1e0:	4a07      	ldr	r2, [pc, #28]	; (800d200 <GetLastFcntDown+0x48>)
 800d1e2:	6812      	ldr	r2, [r2, #0]
 800d1e4:	6992      	ldr	r2, [r2, #24]
 800d1e6:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d1e8:	2000      	movs	r0, #0
            break;
 800d1ea:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800d1ec:	4a04      	ldr	r2, [pc, #16]	; (800d200 <GetLastFcntDown+0x48>)
 800d1ee:	6812      	ldr	r2, [r2, #0]
 800d1f0:	69d2      	ldr	r2, [r2, #28]
 800d1f2:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d1f4:	2000      	movs	r0, #0
            break;
 800d1f6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d1f8:	2009      	movs	r0, #9
 800d1fa:	4770      	bx	lr
    switch( fCntID )
 800d1fc:	2005      	movs	r0, #5
}
 800d1fe:	4770      	bx	lr
 800d200:	20000ee0 	.word	0x20000ee0

0800d204 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d204:	b510      	push	{r4, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800d20a:	2300      	movs	r3, #0
 800d20c:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800d20e:	a901      	add	r1, sp, #4
 800d210:	f7ff ffd2 	bl	800d1b8 <GetLastFcntDown>
 800d214:	b948      	cbnz	r0, 800d22a <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800d216:	9b01      	ldr	r3, [sp, #4]
 800d218:	42a3      	cmp	r3, r4
 800d21a:	d309      	bcc.n	800d230 <CheckFCntDown+0x2c>
 800d21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d220:	d001      	beq.n	800d226 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800d222:	2000      	movs	r0, #0
 800d224:	e002      	b.n	800d22c <CheckFCntDown+0x28>
        return true;
 800d226:	2001      	movs	r0, #1
 800d228:	e000      	b.n	800d22c <CheckFCntDown+0x28>
        return false;
 800d22a:	2000      	movs	r0, #0
    }
}
 800d22c:	b002      	add	sp, #8
 800d22e:	bd10      	pop	{r4, pc}
        return true;
 800d230:	2001      	movs	r0, #1
 800d232:	e7fb      	b.n	800d22c <CheckFCntDown+0x28>

0800d234 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800d234:	3801      	subs	r0, #1
 800d236:	2803      	cmp	r0, #3
 800d238:	d815      	bhi.n	800d266 <UpdateFCntDown+0x32>
 800d23a:	e8df f000 	tbb	[pc, r0]
 800d23e:	0702      	.short	0x0702
 800d240:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800d242:	4b09      	ldr	r3, [pc, #36]	; (800d268 <UpdateFCntDown+0x34>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800d248:	6219      	str	r1, [r3, #32]
            break;
 800d24a:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800d24c:	4b06      	ldr	r3, [pc, #24]	; (800d268 <UpdateFCntDown+0x34>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800d252:	6219      	str	r1, [r3, #32]
            break;
 800d254:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800d256:	4b04      	ldr	r3, [pc, #16]	; (800d268 <UpdateFCntDown+0x34>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800d25c:	6219      	str	r1, [r3, #32]
            break;
 800d25e:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800d260:	4b01      	ldr	r3, [pc, #4]	; (800d268 <UpdateFCntDown+0x34>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800d266:	4770      	bx	lr
 800d268:	20000ee0 	.word	0x20000ee0

0800d26c <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800d26c:	4b0a      	ldr	r3, [pc, #40]	; (800d298 <ResetFCnts+0x2c>)
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	2300      	movs	r3, #0
 800d272:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d274:	f04f 31ff 	mov.w	r1, #4294967295
 800d278:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d27a:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d27c:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d27e:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d280:	2b00      	cmp	r3, #0
 800d282:	dd00      	ble.n	800d286 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800d284:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800d286:	1d99      	adds	r1, r3, #6
 800d288:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d28c:	f04f 30ff 	mov.w	r0, #4294967295
 800d290:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d292:	3301      	adds	r3, #1
 800d294:	e7f4      	b.n	800d280 <ResetFCnts+0x14>
 800d296:	bf00      	nop
 800d298:	20000ee0 	.word	0x20000ee0

0800d29c <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800d29c:	4b03      	ldr	r3, [pc, #12]	; (800d2ac <IsJoinNonce10xOk+0x10>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800d2a2:	4283      	cmp	r3, r0
 800d2a4:	bf2c      	ite	cs
 800d2a6:	2000      	movcs	r0, #0
 800d2a8:	2001      	movcc	r0, #1
 800d2aa:	4770      	bx	lr
 800d2ac:	20000ee0 	.word	0x20000ee0

0800d2b0 <ComputeCmacB0>:
{
 800d2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b4:	b088      	sub	sp, #32
 800d2b6:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800d2b8:	b1f0      	cbz	r0, 800d2f8 <ComputeCmacB0+0x48>
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	4615      	mov	r5, r2
 800d2be:	461a      	mov	r2, r3
 800d2c0:	4680      	mov	r8, r0
 800d2c2:	b1de      	cbz	r6, 800d2fc <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d2c4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d2c8:	d81a      	bhi.n	800d300 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d2ca:	af04      	add	r7, sp, #16
 800d2cc:	9702      	str	r7, [sp, #8]
 800d2ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2d0:	9301      	str	r3, [sp, #4]
 800d2d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d2da:	4629      	mov	r1, r5
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f7ff ff31 	bl	800d144 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800d2e2:	9600      	str	r6, [sp, #0]
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	4622      	mov	r2, r4
 800d2e8:	4641      	mov	r1, r8
 800d2ea:	4638      	mov	r0, r7
 800d2ec:	f003 fade 	bl	80108ac <SecureElementComputeAesCmac>
 800d2f0:	b940      	cbnz	r0, 800d304 <ComputeCmacB0+0x54>
}
 800d2f2:	b008      	add	sp, #32
 800d2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d2f8:	2009      	movs	r0, #9
 800d2fa:	e7fa      	b.n	800d2f2 <ComputeCmacB0+0x42>
 800d2fc:	2009      	movs	r0, #9
 800d2fe:	e7f8      	b.n	800d2f2 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d300:	200d      	movs	r0, #13
 800d302:	e7f6      	b.n	800d2f2 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d304:	200e      	movs	r0, #14
 800d306:	e7f4      	b.n	800d2f2 <ComputeCmacB0+0x42>

0800d308 <DeriveSessionKey10x>:
{
 800d308:	b510      	push	{r4, lr}
 800d30a:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800d30c:	2400      	movs	r4, #0
 800d30e:	9400      	str	r4, [sp, #0]
 800d310:	9401      	str	r4, [sp, #4]
 800d312:	9402      	str	r4, [sp, #8]
 800d314:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800d316:	2808      	cmp	r0, #8
 800d318:	d003      	beq.n	800d322 <DeriveSessionKey10x+0x1a>
 800d31a:	2809      	cmp	r0, #9
 800d31c:	d025      	beq.n	800d36a <DeriveSessionKey10x+0x62>
 800d31e:	200a      	movs	r0, #10
 800d320:	e021      	b.n	800d366 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800d322:	2401      	movs	r4, #1
 800d324:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800d328:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800d32c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d330:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800d334:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800d338:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800d33c:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800d340:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d344:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800d348:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800d34c:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800d350:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800d354:	0a1b      	lsrs	r3, r3, #8
 800d356:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d35a:	4602      	mov	r2, r0
 800d35c:	2101      	movs	r1, #1
 800d35e:	4668      	mov	r0, sp
 800d360:	f003 fb42 	bl	80109e8 <SecureElementDeriveAndStoreKey>
 800d364:	b928      	cbnz	r0, 800d372 <DeriveSessionKey10x+0x6a>
}
 800d366:	b004      	add	sp, #16
 800d368:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800d36a:	2402      	movs	r4, #2
 800d36c:	f88d 4000 	strb.w	r4, [sp]
            break;
 800d370:	e7da      	b.n	800d328 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d372:	200e      	movs	r0, #14
 800d374:	e7f7      	b.n	800d366 <DeriveSessionKey10x+0x5e>

0800d376 <PayloadEncrypt>:
{
 800d376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	4690      	mov	r8, r2
 800d37e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800d380:	2800      	cmp	r0, #0
 800d382:	d052      	beq.n	800d42a <PayloadEncrypt+0xb4>
 800d384:	460d      	mov	r5, r1
 800d386:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800d388:	2600      	movs	r6, #0
 800d38a:	9604      	str	r6, [sp, #16]
 800d38c:	9605      	str	r6, [sp, #20]
 800d38e:	9606      	str	r6, [sp, #24]
 800d390:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800d392:	9600      	str	r6, [sp, #0]
 800d394:	9601      	str	r6, [sp, #4]
 800d396:	9602      	str	r6, [sp, #8]
 800d398:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800d39a:	2701      	movs	r7, #1
 800d39c:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800d3a0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800d3a4:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800d3a8:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800d3ac:	0a19      	lsrs	r1, r3, #8
 800d3ae:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800d3b2:	0c19      	lsrs	r1, r3, #16
 800d3b4:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800d3b8:	0e1b      	lsrs	r3, r3, #24
 800d3ba:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800d3be:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800d3c2:	0a13      	lsrs	r3, r2, #8
 800d3c4:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800d3c8:	0c13      	lsrs	r3, r2, #16
 800d3ca:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d3ce:	0e12      	lsrs	r2, r2, #24
 800d3d0:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800d3d4:	e014      	b.n	800d400 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d3d6:	18f2      	adds	r2, r6, r3
 800d3d8:	5ca0      	ldrb	r0, [r4, r2]
 800d3da:	f103 0120 	add.w	r1, r3, #32
 800d3de:	4469      	add	r1, sp
 800d3e0:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800d3e4:	4048      	eors	r0, r1
 800d3e6:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	462a      	mov	r2, r5
 800d3ee:	2d10      	cmp	r5, #16
 800d3f0:	bfa8      	it	ge
 800d3f2:	2210      	movge	r2, #16
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	dbee      	blt.n	800d3d6 <PayloadEncrypt+0x60>
        size -= 16;
 800d3f8:	3d10      	subs	r5, #16
 800d3fa:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800d3fc:	3610      	adds	r6, #16
 800d3fe:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800d400:	2d00      	cmp	r5, #0
 800d402:	dd0e      	ble.n	800d422 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800d404:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800d408:	3701      	adds	r7, #1
 800d40a:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d40c:	ab04      	add	r3, sp, #16
 800d40e:	4642      	mov	r2, r8
 800d410:	2110      	movs	r1, #16
 800d412:	4668      	mov	r0, sp
 800d414:	f003 fa6f 	bl	80108f6 <SecureElementAesEncrypt>
 800d418:	4603      	mov	r3, r0
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d0e6      	beq.n	800d3ec <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d41e:	200e      	movs	r0, #14
 800d420:	e000      	b.n	800d424 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800d422:	2000      	movs	r0, #0
}
 800d424:	b008      	add	sp, #32
 800d426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d42a:	2009      	movs	r0, #9
 800d42c:	e7fa      	b.n	800d424 <PayloadEncrypt+0xae>

0800d42e <VerifyCmacB0>:
    if( msg == 0 )
 800d42e:	b368      	cbz	r0, 800d48c <VerifyCmacB0+0x5e>
{
 800d430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d434:	b0c8      	sub	sp, #288	; 0x120
 800d436:	460c      	mov	r4, r1
 800d438:	4615      	mov	r5, r2
 800d43a:	461e      	mov	r6, r3
 800d43c:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d43e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d442:	d825      	bhi.n	800d490 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800d444:	af04      	add	r7, sp, #16
 800d446:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d44a:	2100      	movs	r1, #0
 800d44c:	4638      	mov	r0, r7
 800d44e:	f003 fc8a 	bl	8010d66 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d452:	9702      	str	r7, [sp, #8]
 800d454:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800d456:	9301      	str	r3, [sp, #4]
 800d458:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800d460:	4632      	mov	r2, r6
 800d462:	4629      	mov	r1, r5
 800d464:	4620      	mov	r0, r4
 800d466:	f7ff fe6d 	bl	800d144 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800d46a:	4622      	mov	r2, r4
 800d46c:	4641      	mov	r1, r8
 800d46e:	a808      	add	r0, sp, #32
 800d470:	f003 fc61 	bl	8010d36 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800d474:	462b      	mov	r3, r5
 800d476:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800d478:	f104 0110 	add.w	r1, r4, #16
 800d47c:	4638      	mov	r0, r7
 800d47e:	f003 fa24 	bl	80108ca <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800d482:	b130      	cbz	r0, 800d492 <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800d484:	2801      	cmp	r0, #1
 800d486:	d004      	beq.n	800d492 <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d488:	200e      	movs	r0, #14
 800d48a:	e002      	b.n	800d492 <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d48c:	2009      	movs	r0, #9
}
 800d48e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d490:	200d      	movs	r0, #13
}
 800d492:	b048      	add	sp, #288	; 0x120
 800d494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d498 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800d498:	b188      	cbz	r0, 800d4be <LoRaMacCryptoInit+0x26>
{
 800d49a:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800d49c:	4c09      	ldr	r4, [pc, #36]	; (800d4c4 <LoRaMacCryptoInit+0x2c>)
 800d49e:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800d4a0:	2228      	movs	r2, #40	; 0x28
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	f003 fc5f 	bl	8010d66 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800d4ae:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800d4b0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800d4b2:	2400      	movs	r4, #0
 800d4b4:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800d4b6:	f7ff fed9 	bl	800d26c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800d4ba:	4620      	mov	r0, r4
}
 800d4bc:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800d4be:	2008      	movs	r0, #8
}
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	20000ee0 	.word	0x20000ee0

0800d4c8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800d4c8:	4b02      	ldr	r3, [pc, #8]	; (800d4d4 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800d4ce:	2000      	movs	r0, #0
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	20000ee0 	.word	0x20000ee0

0800d4d8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800d4d8:	b130      	cbz	r0, 800d4e8 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800d4da:	4b04      	ldr	r3, [pc, #16]	; (800d4ec <LoRaMacCryptoGetFCntUp+0x14>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d4e8:	2009      	movs	r0, #9
}
 800d4ea:	4770      	bx	lr
 800d4ec:	20000ee0 	.word	0x20000ee0

0800d4f0 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800d4f0:	b530      	push	{r4, r5, lr}
 800d4f2:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800d4f8:	b1f2      	cbz	r2, 800d538 <LoRaMacCryptoGetFCntDown+0x48>
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800d4fe:	a901      	add	r1, sp, #4
 800d500:	f7ff fe5a 	bl	800d1b8 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d504:	b948      	cbnz	r0, 800d51a <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800d506:	9b01      	ldr	r3, [sp, #4]
 800d508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d50c:	d007      	beq.n	800d51e <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800d50e:	b29a      	uxth	r2, r3
 800d510:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800d512:	2a00      	cmp	r2, #0
 800d514:	dd05      	ble.n	800d522 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800d516:	4413      	add	r3, r2
 800d518:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d51a:	b003      	add	sp, #12
 800d51c:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800d51e:	602c      	str	r4, [r5, #0]
 800d520:	e7fb      	b.n	800d51a <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800d522:	b132      	cbz	r2, 800d532 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800d524:	0c1b      	lsrs	r3, r3, #16
 800d526:	041b      	lsls	r3, r3, #16
 800d528:	4423      	add	r3, r4
 800d52a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d52e:	602b      	str	r3, [r5, #0]
 800d530:	e7f3      	b.n	800d51a <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800d532:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800d534:	2007      	movs	r0, #7
 800d536:	e7f0      	b.n	800d51a <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d538:	2009      	movs	r0, #9
 800d53a:	e7ee      	b.n	800d51a <LoRaMacCryptoGetFCntDown+0x2a>

0800d53c <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800d53c:	4601      	mov	r1, r0
 800d53e:	b908      	cbnz	r0, 800d544 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d540:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d542:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d544:	2300      	movs	r3, #0
 800d546:	2b00      	cmp	r3, #0
 800d548:	dd01      	ble.n	800d54e <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800d54a:	2000      	movs	r0, #0
 800d54c:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800d54e:	4a07      	ldr	r2, [pc, #28]	; (800d56c <LoRaMacCryptoSetMulticastReference+0x30>)
 800d550:	6812      	ldr	r2, [r2, #0]
 800d552:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800d556:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800d55a:	f103 0c06 	add.w	ip, r3, #6
 800d55e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d562:	3204      	adds	r2, #4
 800d564:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d566:	3301      	adds	r3, #1
 800d568:	e7ed      	b.n	800d546 <LoRaMacCryptoSetMulticastReference+0xa>
 800d56a:	bf00      	nop
 800d56c:	20000ee0 	.word	0x20000ee0

0800d570 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800d570:	b1d8      	cbz	r0, 800d5aa <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800d572:	b510      	push	{r4, lr}
 800d574:	b082      	sub	sp, #8
 800d576:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800d578:	4b0f      	ldr	r3, [pc, #60]	; (800d5b8 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	8893      	ldrh	r3, [r2, #4]
 800d57e:	3301      	adds	r3, #1
 800d580:	b29b      	uxth	r3, r3
 800d582:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800d584:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d586:	f000 fa32 	bl	800d9ee <LoRaMacSerializerJoinRequest>
 800d58a:	b980      	cbnz	r0, 800d5ae <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800d58c:	4623      	mov	r3, r4
 800d58e:	f853 1b18 	ldr.w	r1, [r3], #24
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	2301      	movs	r3, #1
 800d596:	2213      	movs	r2, #19
 800d598:	f003 f988 	bl	80108ac <SecureElementComputeAesCmac>
 800d59c:	b950      	cbnz	r0, 800d5b4 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d59e:	4620      	mov	r0, r4
 800d5a0:	f000 fa25 	bl	800d9ee <LoRaMacSerializerJoinRequest>
 800d5a4:	b120      	cbz	r0, 800d5b0 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d5a6:	2010      	movs	r0, #16
 800d5a8:	e002      	b.n	800d5b0 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d5aa:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d5ac:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d5ae:	2010      	movs	r0, #16
}
 800d5b0:	b002      	add	sp, #8
 800d5b2:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d5b4:	200e      	movs	r0, #14
 800d5b6:	e7fb      	b.n	800d5b0 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800d5b8:	20000ee0 	.word	0x20000ee0

0800d5bc <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d036      	beq.n	800d62e <LoRaMacCryptoSecureMessage+0x72>
{
 800d5c0:	b530      	push	{r4, r5, lr}
 800d5c2:	b085      	sub	sp, #20
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800d5c8:	4b1d      	ldr	r3, [pc, #116]	; (800d640 <LoRaMacCryptoSecureMessage+0x84>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	4283      	cmp	r3, r0
 800d5d0:	d82f      	bhi.n	800d632 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800d5d2:	f895 2020 	ldrb.w	r2, [r5, #32]
 800d5d6:	b342      	cbz	r2, 800d62a <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800d5d8:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800d5da:	42a3      	cmp	r3, r4
 800d5dc:	d209      	bcs.n	800d5f2 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800d5de:	9401      	str	r4, [sp, #4]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	9300      	str	r3, [sp, #0]
 800d5e4:	68ab      	ldr	r3, [r5, #8]
 800d5e6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800d5ea:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d5ec:	f7ff fec3 	bl	800d376 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d5f0:	bb10      	cbnz	r0, 800d638 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	f000 fa31 	bl	800da5a <LoRaMacSerializerData>
 800d5f8:	b9e8      	cbnz	r0, 800d636 <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800d5fa:	7929      	ldrb	r1, [r5, #4]
 800d5fc:	3904      	subs	r1, #4
 800d5fe:	462b      	mov	r3, r5
 800d600:	f853 0b2c 	ldr.w	r0, [r3], #44
 800d604:	9303      	str	r3, [sp, #12]
 800d606:	9402      	str	r4, [sp, #8]
 800d608:	68ab      	ldr	r3, [r5, #8]
 800d60a:	9301      	str	r3, [sp, #4]
 800d60c:	2300      	movs	r3, #0
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	2208      	movs	r2, #8
 800d612:	b289      	uxth	r1, r1
 800d614:	f7ff fe4c 	bl	800d2b0 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d618:	b970      	cbnz	r0, 800d638 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d61a:	4628      	mov	r0, r5
 800d61c:	f000 fa1d 	bl	800da5a <LoRaMacSerializerData>
 800d620:	b960      	cbnz	r0, 800d63c <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800d622:	4b07      	ldr	r3, [pc, #28]	; (800d640 <LoRaMacCryptoSecureMessage+0x84>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800d628:	e006      	b.n	800d638 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800d62a:	2208      	movs	r2, #8
 800d62c:	e7d5      	b.n	800d5da <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d62e:	2009      	movs	r0, #9
}
 800d630:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d632:	2006      	movs	r0, #6
 800d634:	e000      	b.n	800d638 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d636:	2010      	movs	r0, #16
}
 800d638:	b005      	add	sp, #20
 800d63a:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d63c:	2010      	movs	r0, #16
 800d63e:	e7fb      	b.n	800d638 <LoRaMacCryptoSecureMessage+0x7c>
 800d640:	20000ee0 	.word	0x20000ee0

0800d644 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800d644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d648:	b087      	sub	sp, #28
 800d64a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800d64c:	2e00      	cmp	r6, #0
 800d64e:	d049      	beq.n	800d6e4 <LoRaMacCryptoUnsecureMessage+0xa0>
 800d650:	4605      	mov	r5, r0
 800d652:	4688      	mov	r8, r1
 800d654:	4617      	mov	r7, r2
 800d656:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800d658:	4619      	mov	r1, r3
 800d65a:	4610      	mov	r0, r2
 800d65c:	f7ff fdd2 	bl	800d204 <CheckFCntDown>
 800d660:	2800      	cmp	r0, #0
 800d662:	d041      	beq.n	800d6e8 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d664:	4630      	mov	r0, r6
 800d666:	f000 f963 	bl	800d930 <LoRaMacParserData>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d141      	bne.n	800d6f2 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800d66e:	a905      	add	r1, sp, #20
 800d670:	4628      	mov	r0, r5
 800d672:	f7ff fd8b 	bl	800d18c <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d676:	4605      	mov	r5, r0
 800d678:	2800      	cmp	r0, #0
 800d67a:	d136      	bne.n	800d6ea <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800d67c:	9b05      	ldr	r3, [sp, #20]
 800d67e:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800d682:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800d684:	68b3      	ldr	r3, [r6, #8]
 800d686:	4543      	cmp	r3, r8
 800d688:	d135      	bne.n	800d6f6 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800d68a:	7b33      	ldrb	r3, [r6, #12]
 800d68c:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800d690:	491a      	ldr	r1, [pc, #104]	; (800d6fc <LoRaMacCryptoUnsecureMessage+0xb8>)
 800d692:	6809      	ldr	r1, [r1, #0]
 800d694:	7889      	ldrb	r1, [r1, #2]
 800d696:	b901      	cbnz	r1, 800d69a <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800d698:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800d69a:	7931      	ldrb	r1, [r6, #4]
 800d69c:	3904      	subs	r1, #4
 800d69e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800d6a0:	9003      	str	r0, [sp, #12]
 800d6a2:	9402      	str	r4, [sp, #8]
 800d6a4:	f8cd 8004 	str.w	r8, [sp, #4]
 800d6a8:	2001      	movs	r0, #1
 800d6aa:	9000      	str	r0, [sp, #0]
 800d6ac:	b289      	uxth	r1, r1
 800d6ae:	6830      	ldr	r0, [r6, #0]
 800d6b0:	f7ff febd 	bl	800d42e <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d6b4:	4605      	mov	r5, r0
 800d6b6:	b9c0      	cbnz	r0, 800d6ea <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800d6b8:	f896 3020 	ldrb.w	r3, [r6, #32]
 800d6bc:	b90b      	cbnz	r3, 800d6c2 <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800d6be:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800d6c2:	9401      	str	r4, [sp, #4]
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	4643      	mov	r3, r8
 800d6ca:	464a      	mov	r2, r9
 800d6cc:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800d6d0:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800d6d2:	f7ff fe50 	bl	800d376 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d6d6:	4605      	mov	r5, r0
 800d6d8:	b938      	cbnz	r0, 800d6ea <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800d6da:	4621      	mov	r1, r4
 800d6dc:	4638      	mov	r0, r7
 800d6de:	f7ff fda9 	bl	800d234 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800d6e2:	e002      	b.n	800d6ea <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d6e4:	2509      	movs	r5, #9
 800d6e6:	e000      	b.n	800d6ea <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d6e8:	2506      	movs	r5, #6
}
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	b007      	add	sp, #28
 800d6ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d6f2:	250f      	movs	r5, #15
 800d6f4:	e7f9      	b.n	800d6ea <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800d6f6:	2502      	movs	r5, #2
 800d6f8:	e7f7      	b.n	800d6ea <LoRaMacCryptoUnsecureMessage+0xa6>
 800d6fa:	bf00      	nop
 800d6fc:	20000ee0 	.word	0x20000ee0

0800d700 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800d700:	b500      	push	{lr}
 800d702:	b085      	sub	sp, #20
 800d704:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800d706:	2300      	movs	r3, #0
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	9301      	str	r3, [sp, #4]
 800d70c:	9302      	str	r3, [sp, #8]
 800d70e:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800d710:	290b      	cmp	r1, #11
 800d712:	d007      	beq.n	800d724 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 800d714:	290c      	cmp	r1, #12
 800d716:	d013      	beq.n	800d740 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 800d718:	290a      	cmp	r1, #10
 800d71a:	d00c      	beq.n	800d736 <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 800d71c:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d71e:	b005      	add	sp, #20
 800d720:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 800d724:	2801      	cmp	r0, #1
 800d726:	d001      	beq.n	800d72c <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800d728:	2100      	movs	r1, #0
 800d72a:	e00a      	b.n	800d742 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 800d72c:	2320      	movs	r3, #32
 800d72e:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800d732:	2100      	movs	r1, #0
 800d734:	e005      	b.n	800d742 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 800d736:	2330      	movs	r3, #48	; 0x30
 800d738:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800d73c:	2100      	movs	r1, #0
            break;
 800d73e:	e000      	b.n	800d742 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 800d740:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d742:	4668      	mov	r0, sp
 800d744:	f003 f950 	bl	80109e8 <SecureElementDeriveAndStoreKey>
 800d748:	2800      	cmp	r0, #0
 800d74a:	d0e8      	beq.n	800d71e <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d74c:	200e      	movs	r0, #14
 800d74e:	e7e6      	b.n	800d71e <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0800d750 <LoRaMacCryptoSetKey>:
{
 800d750:	b510      	push	{r4, lr}
 800d752:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800d754:	f003 f906 	bl	8010964 <SecureElementSetKey>
 800d758:	b998      	cbnz	r0, 800d782 <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800d75a:	b104      	cbz	r4, 800d75e <LoRaMacCryptoSetKey+0xe>
}
 800d75c:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d75e:	4b0c      	ldr	r3, [pc, #48]	; (800d790 <LoRaMacCryptoSetKey+0x40>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	210b      	movs	r1, #11
 800d764:	7898      	ldrb	r0, [r3, #2]
 800d766:	f7ff ffcb 	bl	800d700 <LoRaMacCryptoDeriveLifeTimeKey>
 800d76a:	b960      	cbnz	r0, 800d786 <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d76c:	210c      	movs	r1, #12
 800d76e:	f7ff ffc7 	bl	800d700 <LoRaMacCryptoDeriveLifeTimeKey>
 800d772:	b950      	cbnz	r0, 800d78a <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d774:	210a      	movs	r1, #10
 800d776:	f7ff ffc3 	bl	800d700 <LoRaMacCryptoDeriveLifeTimeKey>
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d0ee      	beq.n	800d75c <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d77e:	200e      	movs	r0, #14
 800d780:	e7ec      	b.n	800d75c <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d782:	200e      	movs	r0, #14
 800d784:	e7ea      	b.n	800d75c <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d786:	200e      	movs	r0, #14
 800d788:	e7e8      	b.n	800d75c <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d78a:	200e      	movs	r0, #14
 800d78c:	e7e6      	b.n	800d75c <LoRaMacCryptoSetKey+0xc>
 800d78e:	bf00      	nop
 800d790:	20000ee0 	.word	0x20000ee0

0800d794 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d794:	2a00      	cmp	r2, #0
 800d796:	d06c      	beq.n	800d872 <LoRaMacCryptoHandleJoinAccept+0xde>
{
 800d798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d79a:	b08f      	sub	sp, #60	; 0x3c
 800d79c:	4607      	mov	r7, r0
 800d79e:	460d      	mov	r5, r1
 800d7a0:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d7a2:	2900      	cmp	r1, #0
 800d7a4:	d067      	beq.n	800d876 <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800d7a6:	2600      	movs	r6, #0
 800d7a8:	9605      	str	r6, [sp, #20]
 800d7aa:	221d      	movs	r2, #29
 800d7ac:	4631      	mov	r1, r6
 800d7ae:	a806      	add	r0, sp, #24
 800d7b0:	f005 ff52 	bl	8013658 <memset>
    uint8_t versionMinor         = 0;
 800d7b4:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800d7b8:	4b33      	ldr	r3, [pc, #204]	; (800d888 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800d7be:	f10d 0313 	add.w	r3, sp, #19
 800d7c2:	9302      	str	r3, [sp, #8]
 800d7c4:	ab05      	add	r3, sp, #20
 800d7c6:	9301      	str	r3, [sp, #4]
 800d7c8:	7923      	ldrb	r3, [r4, #4]
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	6823      	ldr	r3, [r4, #0]
 800d7ce:	4632      	mov	r2, r6
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	4638      	mov	r0, r7
 800d7d4:	f003 f928 	bl	8010a28 <SecureElementProcessJoinAccept>
 800d7d8:	2800      	cmp	r0, #0
 800d7da:	d14e      	bne.n	800d87a <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800d7dc:	7922      	ldrb	r2, [r4, #4]
 800d7de:	a905      	add	r1, sp, #20
 800d7e0:	6820      	ldr	r0, [r4, #0]
 800d7e2:	f003 faa8 	bl	8010d36 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f000 f850 	bl	800d88c <LoRaMacParserJoinAccept>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d147      	bne.n	800d880 <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800d7f0:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800d7f2:	79e3      	ldrb	r3, [r4, #7]
 800d7f4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800d7f8:	7a23      	ldrb	r3, [r4, #8]
 800d7fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800d7fe:	4628      	mov	r0, r5
 800d800:	f7ff fd4c 	bl	800d29c <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800d804:	2800      	cmp	r0, #0
 800d806:	d03d      	beq.n	800d884 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800d808:	4b1f      	ldr	r3, [pc, #124]	; (800d888 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800d80e:	210b      	movs	r1, #11
 800d810:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800d814:	f7ff ff74 	bl	800d700 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d818:	bb80      	cbnz	r0, 800d87c <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800d81a:	210c      	movs	r1, #12
 800d81c:	2000      	movs	r0, #0
 800d81e:	f7ff ff6f 	bl	800d700 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d822:	bb58      	cbnz	r0, 800d87c <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800d824:	210a      	movs	r1, #10
 800d826:	2000      	movs	r0, #0
 800d828:	f7ff ff6a 	bl	800d700 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d82c:	bb30      	cbnz	r0, 800d87c <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 800d82e:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800d830:	7aa2      	ldrb	r2, [r4, #10]
 800d832:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800d836:	7ae2      	ldrb	r2, [r4, #11]
 800d838:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800d83c:	4633      	mov	r3, r6
 800d83e:	4622      	mov	r2, r4
 800d840:	4629      	mov	r1, r5
 800d842:	2009      	movs	r0, #9
 800d844:	f7ff fd60 	bl	800d308 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d848:	b9c0      	cbnz	r0, 800d87c <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800d84a:	4633      	mov	r3, r6
 800d84c:	4622      	mov	r2, r4
 800d84e:	4629      	mov	r1, r5
 800d850:	2008      	movs	r0, #8
 800d852:	f7ff fd59 	bl	800d308 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d856:	b988      	cbnz	r0, 800d87c <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800d858:	4b0b      	ldr	r3, [pc, #44]	; (800d888 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800d860:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800d862:	2200      	movs	r2, #0
 800d864:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d866:	f04f 32ff 	mov.w	r2, #4294967295
 800d86a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d86c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d86e:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800d870:	e004      	b.n	800d87c <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d872:	2009      	movs	r0, #9
}
 800d874:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d876:	2009      	movs	r0, #9
 800d878:	e000      	b.n	800d87c <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d87a:	200e      	movs	r0, #14
}
 800d87c:	b00f      	add	sp, #60	; 0x3c
 800d87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d880:	200f      	movs	r0, #15
 800d882:	e7fb      	b.n	800d87c <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800d884:	2003      	movs	r0, #3
 800d886:	e7f9      	b.n	800d87c <LoRaMacCryptoHandleJoinAccept+0xe8>
 800d888:	20000ee0 	.word	0x20000ee0

0800d88c <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d049      	beq.n	800d924 <LoRaMacParserJoinAccept+0x98>
{
 800d890:	b510      	push	{r4, lr}
 800d892:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d894:	6801      	ldr	r1, [r0, #0]
 800d896:	2900      	cmp	r1, #0
 800d898:	d046      	beq.n	800d928 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d89a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d89e:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800d8a0:	2203      	movs	r2, #3
 800d8a2:	3006      	adds	r0, #6
 800d8a4:	f003 fa47 	bl	8010d36 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f850 1b09 	ldr.w	r1, [r0], #9
 800d8ae:	2203      	movs	r2, #3
 800d8b0:	3104      	adds	r1, #4
 800d8b2:	f003 fa40 	bl	8010d36 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d8b6:	6821      	ldr	r1, [r4, #0]
 800d8b8:	79cb      	ldrb	r3, [r1, #7]
 800d8ba:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d8bc:	7a0a      	ldrb	r2, [r1, #8]
 800d8be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8c2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d8c4:	7a4a      	ldrb	r2, [r1, #9]
 800d8c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8ca:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d8cc:	7a8a      	ldrb	r2, [r1, #10]
 800d8ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d8d2:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800d8d4:	7acb      	ldrb	r3, [r1, #11]
 800d8d6:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d8d8:	7b0b      	ldrb	r3, [r1, #12]
 800d8da:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800d8dc:	7923      	ldrb	r3, [r4, #4]
 800d8de:	2b21      	cmp	r3, #33	; 0x21
 800d8e0:	d018      	beq.n	800d914 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800d8e2:	2b11      	cmp	r3, #17
 800d8e4:	dc22      	bgt.n	800d92c <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d8e6:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d8e8:	6821      	ldr	r1, [r4, #0]
 800d8ea:	f102 0c01 	add.w	ip, r2, #1
 800d8ee:	5c8b      	ldrb	r3, [r1, r2]
 800d8f0:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d8f2:	1c90      	adds	r0, r2, #2
 800d8f4:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800d8f8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800d8fc:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d8fe:	3203      	adds	r2, #3
 800d900:	5c08      	ldrb	r0, [r1, r0]
 800d902:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d906:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d908:	5c8a      	ldrb	r2, [r1, r2]
 800d90a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d90e:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800d910:	2000      	movs	r0, #0
}
 800d912:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800d914:	2210      	movs	r2, #16
 800d916:	310d      	adds	r1, #13
 800d918:	f104 0012 	add.w	r0, r4, #18
 800d91c:	f003 fa0b 	bl	8010d36 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800d920:	221d      	movs	r2, #29
 800d922:	e7e1      	b.n	800d8e8 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800d924:	2002      	movs	r0, #2
}
 800d926:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d928:	2002      	movs	r0, #2
 800d92a:	e7f2      	b.n	800d912 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800d92c:	2001      	movs	r0, #1
 800d92e:	e7f0      	b.n	800d912 <LoRaMacParserJoinAccept+0x86>

0800d930 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d930:	2800      	cmp	r0, #0
 800d932:	d058      	beq.n	800d9e6 <LoRaMacParserData+0xb6>
{
 800d934:	b510      	push	{r4, lr}
 800d936:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d938:	6801      	ldr	r1, [r0, #0]
 800d93a:	2900      	cmp	r1, #0
 800d93c:	d055      	beq.n	800d9ea <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d93e:	780b      	ldrb	r3, [r1, #0]
 800d940:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800d942:	784b      	ldrb	r3, [r1, #1]
 800d944:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d946:	788a      	ldrb	r2, [r1, #2]
 800d948:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d94c:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d94e:	78ca      	ldrb	r2, [r1, #3]
 800d950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d954:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d956:	790a      	ldrb	r2, [r1, #4]
 800d958:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d95c:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800d95e:	794b      	ldrb	r3, [r1, #5]
 800d960:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800d962:	798b      	ldrb	r3, [r1, #6]
 800d964:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800d966:	79ca      	ldrb	r2, [r1, #7]
 800d968:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d96c:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d96e:	7b02      	ldrb	r2, [r0, #12]
 800d970:	f002 020f 	and.w	r2, r2, #15
 800d974:	3108      	adds	r1, #8
 800d976:	3010      	adds	r0, #16
 800d978:	f003 f9dd 	bl	8010d36 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d97c:	7b23      	ldrb	r3, [r4, #12]
 800d97e:	f003 030f 	and.w	r3, r3, #15
 800d982:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800d986:	2200      	movs	r2, #0
 800d988:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800d98c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800d990:	7922      	ldrb	r2, [r4, #4]
 800d992:	1a11      	subs	r1, r2, r0
 800d994:	2904      	cmp	r1, #4
 800d996:	dc16      	bgt.n	800d9c6 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800d998:	6822      	ldr	r2, [r4, #0]
 800d99a:	7923      	ldrb	r3, [r4, #4]
 800d99c:	441a      	add	r2, r3
 800d99e:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800d9a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800d9a4:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800d9a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d9ac:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800d9ae:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800d9b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d9b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800d9b8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800d9bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d9c0:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800d9c2:	2000      	movs	r0, #0
}
 800d9c4:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800d9c6:	6821      	ldr	r1, [r4, #0]
 800d9c8:	3309      	adds	r3, #9
 800d9ca:	5c08      	ldrb	r0, [r1, r0]
 800d9cc:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800d9d0:	1ad2      	subs	r2, r2, r3
 800d9d2:	b2d2      	uxtb	r2, r2
 800d9d4:	3a04      	subs	r2, #4
 800d9d6:	b2d2      	uxtb	r2, r2
 800d9d8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800d9dc:	4419      	add	r1, r3
 800d9de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d9e0:	f003 f9a9 	bl	8010d36 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800d9e4:	e7d8      	b.n	800d998 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800d9e6:	2002      	movs	r0, #2
}
 800d9e8:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d9ea:	2002      	movs	r0, #2
 800d9ec:	e7ea      	b.n	800d9c4 <LoRaMacParserData+0x94>

0800d9ee <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d9ee:	b370      	cbz	r0, 800da4e <LoRaMacSerializerJoinRequest+0x60>
{
 800d9f0:	b510      	push	{r4, lr}
 800d9f2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d9f4:	6803      	ldr	r3, [r0, #0]
 800d9f6:	b363      	cbz	r3, 800da52 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800d9f8:	7902      	ldrb	r2, [r0, #4]
 800d9fa:	2a16      	cmp	r2, #22
 800d9fc:	d92b      	bls.n	800da56 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d9fe:	7942      	ldrb	r2, [r0, #5]
 800da00:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800da02:	4601      	mov	r1, r0
 800da04:	f851 0b06 	ldr.w	r0, [r1], #6
 800da08:	2208      	movs	r2, #8
 800da0a:	3001      	adds	r0, #1
 800da0c:	f003 f99e 	bl	8010d4c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800da10:	4621      	mov	r1, r4
 800da12:	f851 0b0e 	ldr.w	r0, [r1], #14
 800da16:	2208      	movs	r2, #8
 800da18:	3009      	adds	r0, #9
 800da1a:	f003 f997 	bl	8010d4c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800da1e:	8ae2      	ldrh	r2, [r4, #22]
 800da20:	6823      	ldr	r3, [r4, #0]
 800da22:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800da24:	8ae3      	ldrh	r3, [r4, #22]
 800da26:	6822      	ldr	r2, [r4, #0]
 800da28:	0a1b      	lsrs	r3, r3, #8
 800da2a:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800da2c:	69a2      	ldr	r2, [r4, #24]
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800da32:	69a3      	ldr	r3, [r4, #24]
 800da34:	0a1b      	lsrs	r3, r3, #8
 800da36:	6822      	ldr	r2, [r4, #0]
 800da38:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800da3a:	8b62      	ldrh	r2, [r4, #26]
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800da40:	7ee2      	ldrb	r2, [r4, #27]
 800da42:	6823      	ldr	r3, [r4, #0]
 800da44:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800da46:	2317      	movs	r3, #23
 800da48:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800da4a:	2000      	movs	r0, #0
}
 800da4c:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800da4e:	2001      	movs	r0, #1
}
 800da50:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800da52:	2001      	movs	r0, #1
 800da54:	e7fa      	b.n	800da4c <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800da56:	2002      	movs	r0, #2
 800da58:	e7f8      	b.n	800da4c <LoRaMacSerializerJoinRequest+0x5e>

0800da5a <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800da5a:	2800      	cmp	r0, #0
 800da5c:	d066      	beq.n	800db2c <LoRaMacSerializerData+0xd2>
{
 800da5e:	b538      	push	{r3, r4, r5, lr}
 800da60:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800da62:	6801      	ldr	r1, [r0, #0]
 800da64:	2900      	cmp	r1, #0
 800da66:	d063      	beq.n	800db30 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800da68:	7b02      	ldrb	r2, [r0, #12]
 800da6a:	f002 020f 	and.w	r2, r2, #15
 800da6e:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800da72:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800da76:	b10b      	cbz	r3, 800da7c <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800da78:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800da7c:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800da7e:	3304      	adds	r3, #4
 800da80:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800da82:	7922      	ldrb	r2, [r4, #4]
 800da84:	429a      	cmp	r2, r3
 800da86:	d355      	bcc.n	800db34 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800da88:	7963      	ldrb	r3, [r4, #5]
 800da8a:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800da8c:	68a2      	ldr	r2, [r4, #8]
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800da92:	68a3      	ldr	r3, [r4, #8]
 800da94:	0a1b      	lsrs	r3, r3, #8
 800da96:	6822      	ldr	r2, [r4, #0]
 800da98:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800da9a:	8962      	ldrh	r2, [r4, #10]
 800da9c:	6823      	ldr	r3, [r4, #0]
 800da9e:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800daa0:	7ae2      	ldrb	r2, [r4, #11]
 800daa2:	6823      	ldr	r3, [r4, #0]
 800daa4:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	7b22      	ldrb	r2, [r4, #12]
 800daaa:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800daac:	89e2      	ldrh	r2, [r4, #14]
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800dab2:	89e3      	ldrh	r3, [r4, #14]
 800dab4:	6822      	ldr	r2, [r4, #0]
 800dab6:	0a1b      	lsrs	r3, r3, #8
 800dab8:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800daba:	4621      	mov	r1, r4
 800dabc:	f851 0b10 	ldr.w	r0, [r1], #16
 800dac0:	7b22      	ldrb	r2, [r4, #12]
 800dac2:	f002 020f 	and.w	r2, r2, #15
 800dac6:	3008      	adds	r0, #8
 800dac8:	f003 f935 	bl	8010d36 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800dacc:	7b23      	ldrb	r3, [r4, #12]
 800dace:	f003 030f 	and.w	r3, r3, #15
 800dad2:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800dad6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800dada:	b12a      	cbz	r2, 800dae8 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800dadc:	6822      	ldr	r2, [r4, #0]
 800dade:	f894 1020 	ldrb.w	r1, [r4, #32]
 800dae2:	5551      	strb	r1, [r2, r5]
 800dae4:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800dae8:	6820      	ldr	r0, [r4, #0]
 800daea:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800daee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800daf0:	4428      	add	r0, r5
 800daf2:	f003 f920 	bl	8010d36 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800daf6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dafa:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800dafc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800dafe:	6821      	ldr	r1, [r4, #0]
 800db00:	1c5a      	adds	r2, r3, #1
 800db02:	b292      	uxth	r2, r2
 800db04:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800db06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800db08:	0a08      	lsrs	r0, r1, #8
 800db0a:	6825      	ldr	r5, [r4, #0]
 800db0c:	1c99      	adds	r1, r3, #2
 800db0e:	b289      	uxth	r1, r1
 800db10:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800db12:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800db14:	6820      	ldr	r0, [r4, #0]
 800db16:	1cda      	adds	r2, r3, #3
 800db18:	b292      	uxth	r2, r2
 800db1a:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800db1c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800db20:	6821      	ldr	r1, [r4, #0]
 800db22:	3304      	adds	r3, #4
 800db24:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800db26:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800db28:	2000      	movs	r0, #0
}
 800db2a:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800db2c:	2001      	movs	r0, #1
}
 800db2e:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800db30:	2001      	movs	r0, #1
 800db32:	e7fa      	b.n	800db2a <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800db34:	2002      	movs	r0, #2
 800db36:	e7f8      	b.n	800db2a <LoRaMacSerializerData+0xd0>

0800db38 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800db38:	4b02      	ldr	r3, [pc, #8]	; (800db44 <NvmDataMgmtEvent+0xc>)
 800db3a:	881a      	ldrh	r2, [r3, #0]
 800db3c:	4310      	orrs	r0, r2
 800db3e:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	20000ee4 	.word	0x20000ee4

0800db48 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800db48:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800db4a:	4b06      	ldr	r3, [pc, #24]	; (800db64 <NvmDataMgmtStoreBegin+0x1c>)
 800db4c:	881b      	ldrh	r3, [r3, #0]
 800db4e:	b11b      	cbz	r3, 800db58 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800db50:	f7fe f890 	bl	800bc74 <LoRaMacStop>
 800db54:	b918      	cbnz	r0, 800db5e <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800db56:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800db58:	f06f 0001 	mvn.w	r0, #1
 800db5c:	e7fb      	b.n	800db56 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800db5e:	f06f 0002 	mvn.w	r0, #2
 800db62:	e7f8      	b.n	800db56 <NvmDataMgmtStoreBegin+0xe>
 800db64:	20000ee4 	.word	0x20000ee4

0800db68 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800db68:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800db6a:	2400      	movs	r4, #0
 800db6c:	4b02      	ldr	r3, [pc, #8]	; (800db78 <NvmDataMgmtStoreEnd+0x10>)
 800db6e:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800db70:	f7fe f874 	bl	800bc5c <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800db74:	4620      	mov	r0, r4
 800db76:	bd10      	pop	{r4, pc}
 800db78:	20000ee4 	.word	0x20000ee4

0800db7c <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800db7c:	2805      	cmp	r0, #5
 800db7e:	d005      	beq.n	800db8c <RegionIsActive+0x10>
 800db80:	2808      	cmp	r0, #8
 800db82:	d001      	beq.n	800db88 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800db84:	2000      	movs	r0, #0
        }
    }
}
 800db86:	4770      	bx	lr
    switch( region )
 800db88:	2001      	movs	r0, #1
 800db8a:	4770      	bx	lr
 800db8c:	2001      	movs	r0, #1
 800db8e:	4770      	bx	lr

0800db90 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800db90:	b500      	push	{lr}
 800db92:	b083      	sub	sp, #12
 800db94:	4603      	mov	r3, r0
 800db96:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800db98:	2200      	movs	r2, #0
 800db9a:	9200      	str	r2, [sp, #0]
    switch( region )
 800db9c:	2b05      	cmp	r3, #5
 800db9e:	d004      	beq.n	800dbaa <RegionGetPhyParam+0x1a>
 800dba0:	2b08      	cmp	r3, #8
 800dba2:	d009      	beq.n	800dbb8 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800dba4:	9b00      	ldr	r3, [sp, #0]
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	e002      	b.n	800dbb0 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800dbaa:	f000 fded 	bl	800e788 <RegionEU868GetPhyParam>
 800dbae:	9001      	str	r0, [sp, #4]
        }
    }
}
 800dbb0:	9801      	ldr	r0, [sp, #4]
 800dbb2:	b003      	add	sp, #12
 800dbb4:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800dbb8:	f001 fbdc 	bl	800f374 <RegionUS915GetPhyParam>
 800dbbc:	9001      	str	r0, [sp, #4]
 800dbbe:	e7f7      	b.n	800dbb0 <RegionGetPhyParam+0x20>

0800dbc0 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800dbc0:	b508      	push	{r3, lr}
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	4608      	mov	r0, r1
    switch( region )
 800dbc6:	2b05      	cmp	r3, #5
 800dbc8:	d002      	beq.n	800dbd0 <RegionSetBandTxDone+0x10>
 800dbca:	2b08      	cmp	r3, #8
 800dbcc:	d003      	beq.n	800dbd6 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800dbce:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800dbd0:	f000 fe96 	bl	800e900 <RegionEU868SetBandTxDone>
 800dbd4:	e7fb      	b.n	800dbce <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800dbd6:	f001 fca3 	bl	800f520 <RegionUS915SetBandTxDone>
 800dbda:	e7f8      	b.n	800dbce <RegionSetBandTxDone+0xe>

0800dbdc <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800dbdc:	b508      	push	{r3, lr}
 800dbde:	4603      	mov	r3, r0
 800dbe0:	4608      	mov	r0, r1
    switch( region )
 800dbe2:	2b05      	cmp	r3, #5
 800dbe4:	d002      	beq.n	800dbec <RegionInitDefaults+0x10>
 800dbe6:	2b08      	cmp	r3, #8
 800dbe8:	d003      	beq.n	800dbf2 <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800dbea:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800dbec:	f000 fea6 	bl	800e93c <RegionEU868InitDefaults>
 800dbf0:	e7fb      	b.n	800dbea <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800dbf2:	f001 fcb3 	bl	800f55c <RegionUS915InitDefaults>
}
 800dbf6:	e7f8      	b.n	800dbea <RegionInitDefaults+0xe>

0800dbf8 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800dbf8:	b508      	push	{r3, lr}
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	4608      	mov	r0, r1
 800dbfe:	4611      	mov	r1, r2
    switch( region )
 800dc00:	2b05      	cmp	r3, #5
 800dc02:	d003      	beq.n	800dc0c <RegionVerify+0x14>
 800dc04:	2b08      	cmp	r3, #8
 800dc06:	d004      	beq.n	800dc12 <RegionVerify+0x1a>
 800dc08:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dc0a:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800dc0c:	f000 ff02 	bl	800ea14 <RegionEU868Verify>
 800dc10:	e7fb      	b.n	800dc0a <RegionVerify+0x12>
        US915_VERIFY( );
 800dc12:	f001 fd47 	bl	800f6a4 <RegionUS915Verify>
 800dc16:	e7f8      	b.n	800dc0a <RegionVerify+0x12>

0800dc18 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800dc18:	b508      	push	{r3, lr}
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	4608      	mov	r0, r1
    switch( region )
 800dc1e:	2b05      	cmp	r3, #5
 800dc20:	d002      	beq.n	800dc28 <RegionApplyCFList+0x10>
 800dc22:	2b08      	cmp	r3, #8
 800dc24:	d003      	beq.n	800dc2e <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800dc26:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800dc28:	f001 fac6 	bl	800f1b8 <RegionEU868ApplyCFList>
 800dc2c:	e7fb      	b.n	800dc26 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800dc2e:	f001 fd73 	bl	800f718 <RegionUS915ApplyCFList>
}
 800dc32:	e7f8      	b.n	800dc26 <RegionApplyCFList+0xe>

0800dc34 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800dc34:	b508      	push	{r3, lr}
 800dc36:	4603      	mov	r3, r0
 800dc38:	4608      	mov	r0, r1
    switch( region )
 800dc3a:	2b05      	cmp	r3, #5
 800dc3c:	d003      	beq.n	800dc46 <RegionChanMaskSet+0x12>
 800dc3e:	2b08      	cmp	r3, #8
 800dc40:	d004      	beq.n	800dc4c <RegionChanMaskSet+0x18>
 800dc42:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dc44:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800dc46:	f000 ff2b 	bl	800eaa0 <RegionEU868ChanMaskSet>
 800dc4a:	e7fb      	b.n	800dc44 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800dc4c:	f001 fda2 	bl	800f794 <RegionUS915ChanMaskSet>
 800dc50:	e7f8      	b.n	800dc44 <RegionChanMaskSet+0x10>

0800dc52 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800dc52:	b508      	push	{r3, lr}
 800dc54:	4684      	mov	ip, r0
 800dc56:	4608      	mov	r0, r1
 800dc58:	4611      	mov	r1, r2
 800dc5a:	461a      	mov	r2, r3
    switch( region )
 800dc5c:	f1bc 0f05 	cmp.w	ip, #5
 800dc60:	d003      	beq.n	800dc6a <RegionComputeRxWindowParameters+0x18>
 800dc62:	f1bc 0f08 	cmp.w	ip, #8
 800dc66:	d004      	beq.n	800dc72 <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800dc68:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800dc6a:	9b02      	ldr	r3, [sp, #8]
 800dc6c:	f000 ff36 	bl	800eadc <RegionEU868ComputeRxWindowParameters>
 800dc70:	e7fa      	b.n	800dc68 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800dc72:	9b02      	ldr	r3, [sp, #8]
 800dc74:	f001 fdd0 	bl	800f818 <RegionUS915ComputeRxWindowParameters>
}
 800dc78:	e7f6      	b.n	800dc68 <RegionComputeRxWindowParameters+0x16>

0800dc7a <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800dc7a:	b508      	push	{r3, lr}
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	4608      	mov	r0, r1
 800dc80:	4611      	mov	r1, r2
    switch( region )
 800dc82:	2b05      	cmp	r3, #5
 800dc84:	d003      	beq.n	800dc8e <RegionRxConfig+0x14>
 800dc86:	2b08      	cmp	r3, #8
 800dc88:	d004      	beq.n	800dc94 <RegionRxConfig+0x1a>
 800dc8a:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dc8c:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800dc8e:	f000 ff5b 	bl	800eb48 <RegionEU868RxConfig>
 800dc92:	e7fb      	b.n	800dc8c <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800dc94:	f001 fdee 	bl	800f874 <RegionUS915RxConfig>
 800dc98:	e7f8      	b.n	800dc8c <RegionRxConfig+0x12>

0800dc9a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800dc9a:	b508      	push	{r3, lr}
 800dc9c:	4684      	mov	ip, r0
 800dc9e:	4608      	mov	r0, r1
 800dca0:	4611      	mov	r1, r2
 800dca2:	461a      	mov	r2, r3
    switch( region )
 800dca4:	f1bc 0f05 	cmp.w	ip, #5
 800dca8:	d004      	beq.n	800dcb4 <RegionTxConfig+0x1a>
 800dcaa:	f1bc 0f08 	cmp.w	ip, #8
 800dcae:	d004      	beq.n	800dcba <RegionTxConfig+0x20>
 800dcb0:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800dcb2:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800dcb4:	f000 ffcc 	bl	800ec50 <RegionEU868TxConfig>
 800dcb8:	e7fb      	b.n	800dcb2 <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800dcba:	f001 fe35 	bl	800f928 <RegionUS915TxConfig>
 800dcbe:	e7f8      	b.n	800dcb2 <RegionTxConfig+0x18>

0800dcc0 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800dcc0:	b500      	push	{lr}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	4684      	mov	ip, r0
 800dcc6:	4608      	mov	r0, r1
 800dcc8:	4611      	mov	r1, r2
 800dcca:	461a      	mov	r2, r3
    switch( region )
 800dccc:	f1bc 0f05 	cmp.w	ip, #5
 800dcd0:	d006      	beq.n	800dce0 <RegionLinkAdrReq+0x20>
 800dcd2:	f1bc 0f08 	cmp.w	ip, #8
 800dcd6:	d009      	beq.n	800dcec <RegionLinkAdrReq+0x2c>
 800dcd8:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dcda:	b003      	add	sp, #12
 800dcdc:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800dce0:	9b05      	ldr	r3, [sp, #20]
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	9b04      	ldr	r3, [sp, #16]
 800dce6:	f001 f84b 	bl	800ed80 <RegionEU868LinkAdrReq>
 800dcea:	e7f6      	b.n	800dcda <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800dcec:	9b05      	ldr	r3, [sp, #20]
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	9b04      	ldr	r3, [sp, #16]
 800dcf2:	f001 fe93 	bl	800fa1c <RegionUS915LinkAdrReq>
 800dcf6:	e7f0      	b.n	800dcda <RegionLinkAdrReq+0x1a>

0800dcf8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800dcf8:	b508      	push	{r3, lr}
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	4608      	mov	r0, r1
    switch( region )
 800dcfe:	2b05      	cmp	r3, #5
 800dd00:	d003      	beq.n	800dd0a <RegionRxParamSetupReq+0x12>
 800dd02:	2b08      	cmp	r3, #8
 800dd04:	d004      	beq.n	800dd10 <RegionRxParamSetupReq+0x18>
 800dd06:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dd08:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800dd0a:	f001 f8ff 	bl	800ef0c <RegionEU868RxParamSetupReq>
 800dd0e:	e7fb      	b.n	800dd08 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800dd10:	f001 ffd0 	bl	800fcb4 <RegionUS915RxParamSetupReq>
 800dd14:	e7f8      	b.n	800dd08 <RegionRxParamSetupReq+0x10>

0800dd16 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800dd16:	b508      	push	{r3, lr}
 800dd18:	4603      	mov	r3, r0
 800dd1a:	4608      	mov	r0, r1
    switch( region )
 800dd1c:	2b05      	cmp	r3, #5
 800dd1e:	d003      	beq.n	800dd28 <RegionNewChannelReq+0x12>
 800dd20:	2b08      	cmp	r3, #8
 800dd22:	d004      	beq.n	800dd2e <RegionNewChannelReq+0x18>
 800dd24:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dd26:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800dd28:	f001 fa87 	bl	800f23a <RegionEU868NewChannelReq>
 800dd2c:	e7fb      	b.n	800dd26 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800dd2e:	f001 ffec 	bl	800fd0a <RegionUS915NewChannelReq>
 800dd32:	e7f8      	b.n	800dd26 <RegionNewChannelReq+0x10>

0800dd34 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800dd34:	b508      	push	{r3, lr}
 800dd36:	4603      	mov	r3, r0
 800dd38:	4608      	mov	r0, r1
    switch( region )
 800dd3a:	2b05      	cmp	r3, #5
 800dd3c:	d003      	beq.n	800dd46 <RegionTxParamSetupReq+0x12>
 800dd3e:	2b08      	cmp	r3, #8
 800dd40:	d004      	beq.n	800dd4c <RegionTxParamSetupReq+0x18>
 800dd42:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dd44:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800dd46:	f001 f905 	bl	800ef54 <RegionEU868TxParamSetupReq>
 800dd4a:	e7fb      	b.n	800dd44 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800dd4c:	f001 ffe0 	bl	800fd10 <RegionUS915TxParamSetupReq>
 800dd50:	e7f8      	b.n	800dd44 <RegionTxParamSetupReq+0x10>

0800dd52 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800dd52:	b508      	push	{r3, lr}
 800dd54:	4603      	mov	r3, r0
 800dd56:	4608      	mov	r0, r1
    switch( region )
 800dd58:	2b05      	cmp	r3, #5
 800dd5a:	d003      	beq.n	800dd64 <RegionDlChannelReq+0x12>
 800dd5c:	2b08      	cmp	r3, #8
 800dd5e:	d004      	beq.n	800dd6a <RegionDlChannelReq+0x18>
 800dd60:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dd62:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800dd64:	f001 f8fa 	bl	800ef5c <RegionEU868DlChannelReq>
 800dd68:	e7fb      	b.n	800dd62 <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800dd6a:	f001 ffd4 	bl	800fd16 <RegionUS915DlChannelReq>
 800dd6e:	e7f8      	b.n	800dd62 <RegionDlChannelReq+0x10>

0800dd70 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800dd70:	b508      	push	{r3, lr}
 800dd72:	4603      	mov	r3, r0
 800dd74:	4608      	mov	r0, r1
 800dd76:	4611      	mov	r1, r2
    switch( region )
 800dd78:	2b05      	cmp	r3, #5
 800dd7a:	d003      	beq.n	800dd84 <RegionAlternateDr+0x14>
 800dd7c:	2b08      	cmp	r3, #8
 800dd7e:	d004      	beq.n	800dd8a <RegionAlternateDr+0x1a>
 800dd80:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800dd82:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800dd84:	f001 f916 	bl	800efb4 <RegionEU868AlternateDr>
 800dd88:	e7fb      	b.n	800dd82 <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800dd8a:	f001 ffc7 	bl	800fd1c <RegionUS915AlternateDr>
 800dd8e:	e7f8      	b.n	800dd82 <RegionAlternateDr+0x12>

0800dd90 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800dd90:	b508      	push	{r3, lr}
 800dd92:	4684      	mov	ip, r0
 800dd94:	4608      	mov	r0, r1
 800dd96:	4611      	mov	r1, r2
 800dd98:	461a      	mov	r2, r3
    switch( region )
 800dd9a:	f1bc 0f05 	cmp.w	ip, #5
 800dd9e:	d004      	beq.n	800ddaa <RegionNextChannel+0x1a>
 800dda0:	f1bc 0f08 	cmp.w	ip, #8
 800dda4:	d005      	beq.n	800ddb2 <RegionNextChannel+0x22>
 800dda6:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800dda8:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800ddaa:	9b02      	ldr	r3, [sp, #8]
 800ddac:	f001 f904 	bl	800efb8 <RegionEU868NextChannel>
 800ddb0:	e7fa      	b.n	800dda8 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800ddb2:	9b02      	ldr	r3, [sp, #8]
 800ddb4:	f001 ffd4 	bl	800fd60 <RegionUS915NextChannel>
 800ddb8:	e7f6      	b.n	800dda8 <RegionNextChannel+0x18>

0800ddba <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800ddba:	b508      	push	{r3, lr}
 800ddbc:	4684      	mov	ip, r0
 800ddbe:	4608      	mov	r0, r1
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	461a      	mov	r2, r3
    switch( region )
 800ddc4:	f1bc 0f05 	cmp.w	ip, #5
 800ddc8:	d004      	beq.n	800ddd4 <RegionApplyDrOffset+0x1a>
 800ddca:	f1bc 0f08 	cmp.w	ip, #8
 800ddce:	d004      	beq.n	800ddda <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800ddd0:	b2c8      	uxtb	r0, r1
 800ddd2:	e001      	b.n	800ddd8 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800ddd4:	f001 fa5c 	bl	800f290 <RegionEU868ApplyDrOffset>
        }
    }
}
 800ddd8:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800ddda:	f002 f86f 	bl	800febc <RegionUS915ApplyDrOffset>
 800ddde:	e7fb      	b.n	800ddd8 <RegionApplyDrOffset+0x1e>

0800dde0 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800dde0:	4800      	ldr	r0, [pc, #0]	; (800dde4 <RegionGetVersion+0x4>)
 800dde2:	4770      	bx	lr
 800dde4:	02010001 	.word	0x02010001

0800dde8 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800dde8:	468c      	mov	ip, r1
 800ddea:	b1a9      	cbz	r1, 800de18 <FindAvailable125kHzChannels+0x30>
 800ddec:	b1b2      	cbz	r2, 800de1c <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800ddf2:	e001      	b.n	800ddf8 <FindAvailable125kHzChannels+0x10>
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	2b07      	cmp	r3, #7
 800ddfa:	d80b      	bhi.n	800de14 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800ddfc:	fa40 f103 	asr.w	r1, r0, r3
 800de00:	f011 0f01 	tst.w	r1, #1
 800de04:	d0f6      	beq.n	800ddf4 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800de06:	7811      	ldrb	r1, [r2, #0]
 800de08:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800de0c:	7811      	ldrb	r1, [r2, #0]
 800de0e:	3101      	adds	r1, #1
 800de10:	7011      	strb	r1, [r2, #0]
 800de12:	e7ef      	b.n	800ddf4 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800de14:	2000      	movs	r0, #0
 800de16:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800de18:	2003      	movs	r0, #3
 800de1a:	4770      	bx	lr
 800de1c:	2003      	movs	r0, #3
}
 800de1e:	4770      	bx	lr

0800de20 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800de20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de22:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800de24:	2300      	movs	r3, #0
 800de26:	9302      	str	r3, [sp, #8]
 800de28:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800de2a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800de2e:	2800      	cmp	r0, #0
 800de30:	d03e      	beq.n	800deb0 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800de32:	460d      	mov	r5, r1
 800de34:	4617      	mov	r7, r2
 800de36:	4606      	mov	r6, r0
 800de38:	2900      	cmp	r1, #0
 800de3a:	d03b      	beq.n	800deb4 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800de3c:	2a00      	cmp	r2, #0
 800de3e:	d03b      	beq.n	800deb8 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800de40:	780c      	ldrb	r4, [r1, #0]
 800de42:	e017      	b.n	800de74 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800de44:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800de48:	0a00      	lsrs	r0, r0, #8
 800de4a:	e019      	b.n	800de80 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800de4c:	3901      	subs	r1, #1
 800de4e:	2000      	movs	r0, #0
 800de50:	f002 ff64 	bl	8010d1c <randr>
 800de54:	f100 0310 	add.w	r3, r0, #16
 800de58:	eb0d 0003 	add.w	r0, sp, r3
 800de5c:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800de60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de64:	703b      	strb	r3, [r7, #0]
 800de66:	e016      	b.n	800de96 <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800de68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de6c:	b9cb      	cbnz	r3, 800dea2 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800de6e:	782a      	ldrb	r2, [r5, #0]
 800de70:	42a2      	cmp	r2, r4
 800de72:	d016      	beq.n	800dea2 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800de74:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800de76:	f014 0f01 	tst.w	r4, #1
 800de7a:	d1e3      	bne.n	800de44 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800de7c:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800de80:	f10d 0207 	add.w	r2, sp, #7
 800de84:	a902      	add	r1, sp, #8
 800de86:	f7ff ffaf 	bl	800dde8 <FindAvailable125kHzChannels>
 800de8a:	2803      	cmp	r0, #3
 800de8c:	d00b      	beq.n	800dea6 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800de8e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800de92:	2900      	cmp	r1, #0
 800de94:	d1da      	bne.n	800de4c <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800de96:	3401      	adds	r4, #1
 800de98:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800de9a:	2c07      	cmp	r4, #7
 800de9c:	d9e4      	bls.n	800de68 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800de9e:	2400      	movs	r4, #0
 800dea0:	e7e2      	b.n	800de68 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800dea2:	b913      	cbnz	r3, 800deaa <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800dea4:	2003      	movs	r0, #3
}
 800dea6:	b005      	add	sp, #20
 800dea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800deaa:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800deac:	2000      	movs	r0, #0
 800deae:	e7fa      	b.n	800dea6 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800deb0:	2003      	movs	r0, #3
 800deb2:	e7f8      	b.n	800dea6 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800deb4:	2003      	movs	r0, #3
 800deb6:	e7f6      	b.n	800dea6 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800deb8:	2003      	movs	r0, #3
 800deba:	e7f4      	b.n	800dea6 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800debc <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800debc:	fb02 1000 	mla	r0, r2, r0, r1
 800dec0:	4770      	bx	lr

0800dec2 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800dec2:	b082      	sub	sp, #8
 800dec4:	f10d 0c08 	add.w	ip, sp, #8
 800dec8:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800decc:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800dece:	b971      	cbnz	r1, 800deee <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800ded0:	4613      	mov	r3, r2
 800ded2:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800ded6:	d306      	bcc.n	800dee6 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800ded8:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800dedc:	4293      	cmp	r3, r2
 800dede:	d80a      	bhi.n	800def6 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800dee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dee4:	e000      	b.n	800dee8 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800dee6:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800dee8:	4298      	cmp	r0, r3
 800deea:	bf38      	it	cc
 800deec:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800deee:	b900      	cbnz	r0, 800def2 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800def0:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800def2:	b002      	add	sp, #8
 800def4:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800def6:	f242 7310 	movw	r3, #10000	; 0x2710
 800defa:	e7f5      	b.n	800dee8 <GetDutyCycle+0x26>

0800defc <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800defc:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800defe:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800df00:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800df02:	e001      	b.n	800df08 <CountChannels+0xc>
 800df04:	3301      	adds	r3, #1
 800df06:	b2db      	uxtb	r3, r3
 800df08:	428b      	cmp	r3, r1
 800df0a:	d207      	bcs.n	800df1c <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800df0c:	2201      	movs	r2, #1
 800df0e:	409a      	lsls	r2, r3
 800df10:	ea32 020c 	bics.w	r2, r2, ip
 800df14:	d1f6      	bne.n	800df04 <CountChannels+0x8>
        {
            nbActiveBits++;
 800df16:	3001      	adds	r0, #1
 800df18:	b2c0      	uxtb	r0, r0
 800df1a:	e7f3      	b.n	800df04 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800df1c:	4770      	bx	lr
	...

0800df20 <SetMaxTimeCredits>:
{
 800df20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df24:	b089      	sub	sp, #36	; 0x24
 800df26:	4604      	mov	r4, r0
 800df28:	460e      	mov	r6, r1
 800df2a:	ad02      	add	r5, sp, #8
 800df2c:	e885 000c 	stmia.w	r5, {r2, r3}
 800df30:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800df34:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800df38:	e895 0003 	ldmia.w	r5, {r0, r1}
 800df3c:	f005 f874 	bl	8013028 <SysTimeToMs>
 800df40:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800df42:	2300      	movs	r3, #0
 800df44:	9304      	str	r3, [sp, #16]
 800df46:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800df48:	e895 000c 	ldmia.w	r5, {r2, r3}
 800df4c:	4631      	mov	r1, r6
 800df4e:	4620      	mov	r0, r4
 800df50:	f7ff ffb7 	bl	800dec2 <GetDutyCycle>
 800df54:	4605      	mov	r5, r0
    if( joined == false )
 800df56:	2e00      	cmp	r6, #0
 800df58:	d14c      	bne.n	800dff4 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800df5a:	2864      	cmp	r0, #100	; 0x64
 800df5c:	d025      	beq.n	800dfaa <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800df5e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800df62:	d025      	beq.n	800dfb0 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800df64:	4e27      	ldr	r6, [pc, #156]	; (800e004 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800df66:	68a1      	ldr	r1, [r4, #8]
 800df68:	a806      	add	r0, sp, #24
 800df6a:	f005 f87d 	bl	8013068 <SysTimeFromMs>
 800df6e:	9b07      	ldr	r3, [sp, #28]
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	9b06      	ldr	r3, [sp, #24]
 800df74:	aa02      	add	r2, sp, #8
 800df76:	ca06      	ldmia	r2, {r1, r2}
 800df78:	a804      	add	r0, sp, #16
 800df7a:	f004 ffdc 	bl	8012f36 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800df7e:	f1b8 0f00 	cmp.w	r8, #0
 800df82:	d102      	bne.n	800df8a <SetMaxTimeCredits+0x6a>
 800df84:	f1b9 0f00 	cmp.w	r9, #0
 800df88:	d002      	beq.n	800df90 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800df8a:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800df8c:	42b3      	cmp	r3, r6
 800df8e:	d012      	beq.n	800dfb6 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800df90:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800df92:	9b02      	ldr	r3, [sp, #8]
 800df94:	4a1c      	ldr	r2, [pc, #112]	; (800e008 <SetMaxTimeCredits+0xe8>)
 800df96:	4293      	cmp	r3, r2
 800df98:	d812      	bhi.n	800dfc0 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800df9a:	6863      	ldr	r3, [r4, #4]
 800df9c:	b903      	cbnz	r3, 800dfa0 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800df9e:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800dfa0:	6126      	str	r6, [r4, #16]
}
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	b009      	add	sp, #36	; 0x24
 800dfa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800dfaa:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800dfac:	4e17      	ldr	r6, [pc, #92]	; (800e00c <SetMaxTimeCredits+0xec>)
 800dfae:	e7da      	b.n	800df66 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800dfb0:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800dfb2:	4e17      	ldr	r6, [pc, #92]	; (800e010 <SetMaxTimeCredits+0xf0>)
 800dfb4:	e7d7      	b.n	800df66 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800dfb6:	9a04      	ldr	r2, [sp, #16]
 800dfb8:	4b16      	ldr	r3, [pc, #88]	; (800e014 <SetMaxTimeCredits+0xf4>)
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d9ed      	bls.n	800df9a <SetMaxTimeCredits+0x7a>
 800dfbe:	e7e7      	b.n	800df90 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800dfc0:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800dfc4:	3b30      	subs	r3, #48	; 0x30
 800dfc6:	4a14      	ldr	r2, [pc, #80]	; (800e018 <SetMaxTimeCredits+0xf8>)
 800dfc8:	fba2 2303 	umull	r2, r3, r2, r3
 800dfcc:	0c1b      	lsrs	r3, r3, #16
 800dfce:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800dfd0:	4a12      	ldr	r2, [pc, #72]	; (800e01c <SetMaxTimeCredits+0xfc>)
 800dfd2:	fb02 f303 	mul.w	r3, r2, r3
 800dfd6:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800dfd8:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800dfdc:	3330      	adds	r3, #48	; 0x30
 800dfde:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800dfe6:	ab04      	add	r3, sp, #16
 800dfe8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dfec:	f005 f81c 	bl	8013028 <SysTimeToMs>
 800dff0:	60a0      	str	r0, [r4, #8]
 800dff2:	e7d2      	b.n	800df9a <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800dff4:	f1b8 0f00 	cmp.w	r8, #0
 800dff8:	d102      	bne.n	800e000 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800dffa:	4e04      	ldr	r6, [pc, #16]	; (800e00c <SetMaxTimeCredits+0xec>)
 800dffc:	60e6      	str	r6, [r4, #12]
 800dffe:	e7cc      	b.n	800df9a <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e000:	4e02      	ldr	r6, [pc, #8]	; (800e00c <SetMaxTimeCredits+0xec>)
 800e002:	e7ca      	b.n	800df9a <SetMaxTimeCredits+0x7a>
 800e004:	02932e00 	.word	0x02932e00
 800e008:	0001ec2f 	.word	0x0001ec2f
 800e00c:	001b7740 	.word	0x001b7740
 800e010:	0112a880 	.word	0x0112a880
 800e014:	0001517f 	.word	0x0001517f
 800e018:	c22e4507 	.word	0xc22e4507
 800e01c:	00015180 	.word	0x00015180

0800e020 <UpdateTimeCredits>:
{
 800e020:	b570      	push	{r4, r5, r6, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	4604      	mov	r4, r0
 800e026:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	9200      	str	r2, [sp, #0]
 800e02c:	ab06      	add	r3, sp, #24
 800e02e:	cb0c      	ldmia	r3, {r2, r3}
 800e030:	f7ff ff76 	bl	800df20 <SetMaxTimeCredits>
 800e034:	4605      	mov	r5, r0
    if( joined == true )
 800e036:	b94e      	cbnz	r6, 800e04c <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800e038:	68e2      	ldr	r2, [r4, #12]
 800e03a:	6923      	ldr	r3, [r4, #16]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d900      	bls.n	800e042 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800e040:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800e042:	9b08      	ldr	r3, [sp, #32]
 800e044:	6063      	str	r3, [r4, #4]
}
 800e046:	4628      	mov	r0, r5
 800e048:	b002      	add	sp, #8
 800e04a:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800e04c:	6860      	ldr	r0, [r4, #4]
 800e04e:	f005 f86b 	bl	8013128 <UTIL_TIMER_GetElapsedTime>
 800e052:	68e3      	ldr	r3, [r4, #12]
 800e054:	4403      	add	r3, r0
 800e056:	60e3      	str	r3, [r4, #12]
 800e058:	e7ee      	b.n	800e038 <UpdateTimeCredits+0x18>

0800e05a <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800e05a:	4288      	cmp	r0, r1
 800e05c:	db03      	blt.n	800e066 <RegionCommonValueInRange+0xc>
 800e05e:	4290      	cmp	r0, r2
 800e060:	dd03      	ble.n	800e06a <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800e062:	2000      	movs	r0, #0
 800e064:	4770      	bx	lr
 800e066:	2000      	movs	r0, #0
 800e068:	4770      	bx	lr
        return 1;
 800e06a:	2001      	movs	r0, #1
}
 800e06c:	4770      	bx	lr

0800e06e <RegionCommonChanVerifyDr>:
{
 800e06e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e072:	4682      	mov	sl, r0
 800e074:	460e      	mov	r6, r1
 800e076:	4690      	mov	r8, r2
 800e078:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800e07c:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800e080:	4619      	mov	r1, r3
 800e082:	4640      	mov	r0, r8
 800e084:	f7ff ffe9 	bl	800e05a <RegionCommonValueInRange>
 800e088:	b338      	cbz	r0, 800e0da <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e08a:	2500      	movs	r5, #0
 800e08c:	462f      	mov	r7, r5
 800e08e:	e01e      	b.n	800e0ce <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800e090:	3401      	adds	r4, #1
 800e092:	b2e4      	uxtb	r4, r4
 800e094:	2c0f      	cmp	r4, #15
 800e096:	d816      	bhi.n	800e0c6 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800e098:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800e09c:	4123      	asrs	r3, r4
 800e09e:	f013 0f01 	tst.w	r3, #1
 800e0a2:	d0f5      	beq.n	800e090 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800e0a4:	193b      	adds	r3, r7, r4
 800e0a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e0aa:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800e0ae:	7a19      	ldrb	r1, [r3, #8]
 800e0b0:	090a      	lsrs	r2, r1, #4
 800e0b2:	f001 010f 	and.w	r1, r1, #15
 800e0b6:	4640      	mov	r0, r8
 800e0b8:	f7ff ffcf 	bl	800e05a <RegionCommonValueInRange>
 800e0bc:	2801      	cmp	r0, #1
 800e0be:	d1e7      	bne.n	800e090 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800e0c0:	2001      	movs	r0, #1
}
 800e0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e0c6:	3710      	adds	r7, #16
 800e0c8:	b2ff      	uxtb	r7, r7
 800e0ca:	3501      	adds	r5, #1
 800e0cc:	b2ed      	uxtb	r5, r5
 800e0ce:	4557      	cmp	r7, sl
 800e0d0:	d201      	bcs.n	800e0d6 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800e0d2:	2400      	movs	r4, #0
 800e0d4:	e7de      	b.n	800e094 <RegionCommonChanVerifyDr+0x26>
    return false;
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	e7f3      	b.n	800e0c2 <RegionCommonChanVerifyDr+0x54>
        return false;
 800e0da:	2000      	movs	r0, #0
 800e0dc:	e7f1      	b.n	800e0c2 <RegionCommonChanVerifyDr+0x54>

0800e0de <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800e0de:	0913      	lsrs	r3, r2, #4
 800e0e0:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800e0e4:	d313      	bcc.n	800e10e <RegionCommonChanDisable+0x30>
{
 800e0e6:	b500      	push	{lr}
 800e0e8:	4684      	mov	ip, r0
 800e0ea:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800e0ee:	4291      	cmp	r1, r2
 800e0f0:	d20f      	bcs.n	800e112 <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800e0f2:	f001 030f 	and.w	r3, r1, #15
 800e0f6:	2001      	movs	r0, #1
 800e0f8:	fa00 f303 	lsl.w	r3, r0, r3
 800e0fc:	43db      	mvns	r3, r3
 800e0fe:	b21b      	sxth	r3, r3
 800e100:	f83c 201e 	ldrh.w	r2, [ip, lr, lsl #1]
 800e104:	4013      	ands	r3, r2
 800e106:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 800e10a:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 800e10e:	2000      	movs	r0, #0
}
 800e110:	4770      	bx	lr
        return false;
 800e112:	2000      	movs	r0, #0
 800e114:	e7f9      	b.n	800e10a <RegionCommonChanDisable+0x2c>

0800e116 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800e116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800e118:	b188      	cbz	r0, 800e13e <RegionCommonCountChannels+0x28>
 800e11a:	460c      	mov	r4, r1
 800e11c:	4616      	mov	r6, r2
 800e11e:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800e120:	2500      	movs	r5, #0
 800e122:	e008      	b.n	800e136 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800e124:	2110      	movs	r1, #16
 800e126:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800e12a:	f7ff fee7 	bl	800defc <CountChannels>
 800e12e:	4405      	add	r5, r0
 800e130:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800e132:	3401      	adds	r4, #1
 800e134:	b2e4      	uxtb	r4, r4
 800e136:	42b4      	cmp	r4, r6
 800e138:	d3f4      	bcc.n	800e124 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800e13a:	4628      	mov	r0, r5
 800e13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800e13e:	2500      	movs	r5, #0
 800e140:	e7fb      	b.n	800e13a <RegionCommonCountChannels+0x24>

0800e142 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800e142:	4684      	mov	ip, r0
 800e144:	b158      	cbz	r0, 800e15e <RegionCommonChanMaskCopy+0x1c>
 800e146:	b109      	cbz	r1, 800e14c <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800e148:	2300      	movs	r3, #0
 800e14a:	e006      	b.n	800e15a <RegionCommonChanMaskCopy+0x18>
 800e14c:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800e14e:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e152:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800e156:	3301      	adds	r3, #1
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d3f7      	bcc.n	800e14e <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800e15e:	4770      	bx	lr

0800e160 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800e160:	b082      	sub	sp, #8
 800e162:	b538      	push	{r3, r4, r5, lr}
 800e164:	4604      	mov	r4, r0
 800e166:	460d      	mov	r5, r1
 800e168:	4611      	mov	r1, r2
 800e16a:	aa04      	add	r2, sp, #16
 800e16c:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e170:	ca0c      	ldmia	r2, {r2, r3}
 800e172:	f7ff fea6 	bl	800dec2 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800e176:	68e3      	ldr	r3, [r4, #12]
 800e178:	fb05 f100 	mul.w	r1, r5, r0
 800e17c:	428b      	cmp	r3, r1
 800e17e:	d905      	bls.n	800e18c <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800e180:	1a5b      	subs	r3, r3, r1
 800e182:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800e184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e188:	b002      	add	sp, #8
 800e18a:	4770      	bx	lr
        band->TimeCredits = 0;
 800e18c:	2300      	movs	r3, #0
 800e18e:	60e3      	str	r3, [r4, #12]
}
 800e190:	e7f8      	b.n	800e184 <RegionCommonSetBandTxDone+0x24>
	...

0800e194 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800e194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e198:	b089      	sub	sp, #36	; 0x24
 800e19a:	4607      	mov	r7, r0
 800e19c:	468b      	mov	fp, r1
 800e19e:	4691      	mov	r9, r2
 800e1a0:	4698      	mov	r8, r3
 800e1a2:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800e1a6:	f004 ffb5 	bl	8013114 <UTIL_TIMER_GetCurrentTime>
 800e1aa:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800e1ac:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800e1ae:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800e1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b4:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800e1b6:	e005      	b.n	800e1c4 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800e1bc:	441e      	add	r6, r3
 800e1be:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800e1c0:	3401      	adds	r4, #1
 800e1c2:	b2e4      	uxtb	r4, r4
 800e1c4:	454c      	cmp	r4, r9
 800e1c6:	d25d      	bcs.n	800e284 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800e1c8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e1cc:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800e1d0:	9b04      	ldr	r3, [sp, #16]
 800e1d2:	9302      	str	r3, [sp, #8]
 800e1d4:	ab13      	add	r3, sp, #76	; 0x4c
 800e1d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e1da:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e1de:	4653      	mov	r3, sl
 800e1e0:	4642      	mov	r2, r8
 800e1e2:	4639      	mov	r1, r7
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f7ff ff1b 	bl	800e020 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800e1ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1ec:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800e1f0:	68ea      	ldr	r2, [r5, #12]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d2e0      	bcs.n	800e1b8 <RegionCommonUpdateBandTimeOff+0x24>
 800e1f6:	f1b8 0f00 	cmp.w	r8, #0
 800e1fa:	d101      	bne.n	800e200 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800e1fc:	2f00      	cmp	r7, #0
 800e1fe:	d1db      	bne.n	800e1b8 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800e200:	2100      	movs	r1, #0
 800e202:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800e204:	6929      	ldr	r1, [r5, #16]
 800e206:	4299      	cmp	r1, r3
 800e208:	d307      	bcc.n	800e21a <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800e20a:	1a9b      	subs	r3, r3, r2
 800e20c:	9a05      	ldr	r2, [sp, #20]
 800e20e:	429a      	cmp	r2, r3
 800e210:	bf28      	it	cs
 800e212:	461a      	movcs	r2, r3
 800e214:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800e216:	3601      	adds	r6, #1
 800e218:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800e21a:	2f00      	cmp	r7, #0
 800e21c:	d1d0      	bne.n	800e1c0 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800e21e:	2300      	movs	r3, #0
 800e220:	9306      	str	r3, [sp, #24]
 800e222:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e226:	2864      	cmp	r0, #100	; 0x64
 800e228:	d024      	beq.n	800e274 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e22a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e22e:	d025      	beq.n	800e27c <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e230:	4b19      	ldr	r3, [pc, #100]	; (800e298 <RegionCommonUpdateBandTimeOff+0x104>)
 800e232:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e236:	4a18      	ldr	r2, [pc, #96]	; (800e298 <RegionCommonUpdateBandTimeOff+0x104>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d90c      	bls.n	800e256 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800e23c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e240:	3b30      	subs	r3, #48	; 0x30
 800e242:	4a16      	ldr	r2, [pc, #88]	; (800e29c <RegionCommonUpdateBandTimeOff+0x108>)
 800e244:	fba2 2303 	umull	r2, r3, r2, r3
 800e248:	0c1b      	lsrs	r3, r3, #16
 800e24a:	4a15      	ldr	r2, [pc, #84]	; (800e2a0 <RegionCommonUpdateBandTimeOff+0x10c>)
 800e24c:	fb03 2202 	mla	r2, r3, r2, r2
 800e250:	9b06      	ldr	r3, [sp, #24]
 800e252:	4413      	add	r3, r2
 800e254:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800e256:	ad06      	add	r5, sp, #24
 800e258:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e25e:	e895 0006 	ldmia.w	r5, {r1, r2}
 800e262:	4628      	mov	r0, r5
 800e264:	f004 fe67 	bl	8012f36 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800e268:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e26c:	f004 fedc 	bl	8013028 <SysTimeToMs>
 800e270:	9005      	str	r0, [sp, #20]
 800e272:	e7a5      	b.n	800e1c0 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800e274:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e278:	9306      	str	r3, [sp, #24]
 800e27a:	e7db      	b.n	800e234 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800e27c:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800e280:	9306      	str	r3, [sp, #24]
 800e282:	e7d7      	b.n	800e234 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800e284:	b11e      	cbz	r6, 800e28e <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800e286:	9805      	ldr	r0, [sp, #20]
 800e288:	b009      	add	sp, #36	; 0x24
 800e28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800e28e:	f04f 33ff 	mov.w	r3, #4294967295
 800e292:	9305      	str	r3, [sp, #20]
 800e294:	e7f7      	b.n	800e286 <RegionCommonUpdateBandTimeOff+0xf2>
 800e296:	bf00      	nop
 800e298:	0001ec30 	.word	0x0001ec30
 800e29c:	c22e4507 	.word	0xc22e4507
 800e2a0:	00015180 	.word	0x00015180

0800e2a4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800e2a4:	7803      	ldrb	r3, [r0, #0]
 800e2a6:	2b03      	cmp	r3, #3
 800e2a8:	d001      	beq.n	800e2ae <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800e2aa:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800e2ac:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800e2ae:	7842      	ldrb	r2, [r0, #1]
 800e2b0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e2b4:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800e2b6:	f003 030f 	and.w	r3, r3, #15
 800e2ba:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800e2bc:	0913      	lsrs	r3, r2, #4
 800e2be:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800e2c0:	7883      	ldrb	r3, [r0, #2]
 800e2c2:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800e2c4:	78c2      	ldrb	r2, [r0, #3]
 800e2c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e2ca:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800e2cc:	7903      	ldrb	r3, [r0, #4]
 800e2ce:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800e2d0:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800e2d4:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800e2d6:	f003 030f 	and.w	r3, r3, #15
 800e2da:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800e2dc:	2005      	movs	r0, #5
 800e2de:	4770      	bx	lr

0800e2e0 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	b085      	sub	sp, #20
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	4688      	mov	r8, r1
 800e2ea:	4617      	mov	r7, r2
 800e2ec:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800e2ee:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800e2f0:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800e2f4:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800e2f8:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800e2fc:	7943      	ldrb	r3, [r0, #5]
 800e2fe:	b92b      	cbnz	r3, 800e30c <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800e300:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800e304:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800e308:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800e30c:	b355      	cbz	r5, 800e364 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800e30e:	f1ba 0f0f 	cmp.w	sl, #15
 800e312:	d114      	bne.n	800e33e <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800e314:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800e318:	f1b9 0f0f 	cmp.w	r9, #15
 800e31c:	d020      	beq.n	800e360 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800e31e:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800e322:	9303      	str	r3, [sp, #12]
 800e324:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800e328:	461c      	mov	r4, r3
 800e32a:	4619      	mov	r1, r3
 800e32c:	4648      	mov	r0, r9
 800e32e:	f7ff fe94 	bl	800e05a <RegionCommonValueInRange>
 800e332:	b9b8      	cbnz	r0, 800e364 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800e334:	454c      	cmp	r4, r9
 800e336:	dc21      	bgt.n	800e37c <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800e338:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800e33c:	e012      	b.n	800e364 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800e33e:	69a3      	ldr	r3, [r4, #24]
 800e340:	9301      	str	r3, [sp, #4]
 800e342:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800e34c:	4652      	mov	r2, sl
 800e34e:	6921      	ldr	r1, [r4, #16]
 800e350:	7b20      	ldrb	r0, [r4, #12]
 800e352:	f7ff fe8c 	bl	800e06e <RegionCommonChanVerifyDr>
 800e356:	2800      	cmp	r0, #0
 800e358:	d1de      	bne.n	800e318 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800e35a:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800e35e:	e7db      	b.n	800e318 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800e360:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800e364:	2d07      	cmp	r5, #7
 800e366:	d00c      	beq.n	800e382 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800e368:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800e36c:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800e370:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800e374:	4628      	mov	r0, r5
 800e376:	b005      	add	sp, #20
 800e378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800e37c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e380:	e7f0      	b.n	800e364 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800e382:	f1bb 0f00 	cmp.w	fp, #0
 800e386:	d1ef      	bne.n	800e368 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800e388:	f04f 0b01 	mov.w	fp, #1
 800e38c:	e7ec      	b.n	800e368 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800e390 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800e390:	4b02      	ldr	r3, [pc, #8]	; (800e39c <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800e392:	fa03 f000 	lsl.w	r0, r3, r0
}
 800e396:	fbb0 f0f1 	udiv	r0, r0, r1
 800e39a:	4770      	bx	lr
 800e39c:	000f4240 	.word	0x000f4240

0800e3a0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800e3a0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800e3a4:	fbb3 f0f0 	udiv	r0, r3, r0
 800e3a8:	4770      	bx	lr
	...

0800e3ac <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800e3ac:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e3ae:	f1a1 0c04 	sub.w	ip, r1, #4
 800e3b2:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800e3b6:	fb0e f202 	mul.w	r2, lr, r2
 800e3ba:	fb00 220c 	mla	r2, r0, ip, r2
 800e3be:	0052      	lsls	r2, r2, #1
 800e3c0:	d021      	beq.n	800e406 <RegionCommonComputeRxWindowParameters+0x5a>
 800e3c2:	4402      	add	r2, r0
 800e3c4:	3a01      	subs	r2, #1
 800e3c6:	fbb2 f2f0 	udiv	r2, r2, r0
 800e3ca:	4291      	cmp	r1, r2
 800e3cc:	bf38      	it	cc
 800e3ce:	4611      	movcc	r1, r2
 800e3d0:	9a01      	ldr	r2, [sp, #4]
 800e3d2:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e3d4:	0082      	lsls	r2, r0, #2
 800e3d6:	fb01 f000 	mul.w	r0, r1, r0
 800e3da:	b1b8      	cbz	r0, 800e40c <RegionCommonComputeRxWindowParameters+0x60>
 800e3dc:	3001      	adds	r0, #1
 800e3de:	0840      	lsrs	r0, r0, #1
 800e3e0:	1a12      	subs	r2, r2, r0
 800e3e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e3e6:	fb01 2313 	mls	r3, r1, r3, r2
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	dd10      	ble.n	800e410 <RegionCommonComputeRxWindowParameters+0x64>
 800e3ee:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800e3f2:	4a0b      	ldr	r2, [pc, #44]	; (800e420 <RegionCommonComputeRxWindowParameters+0x74>)
 800e3f4:	fb82 1203 	smull	r1, r2, r2, r3
 800e3f8:	17db      	asrs	r3, r3, #31
 800e3fa:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e3fe:	9a02      	ldr	r2, [sp, #8]
 800e400:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800e402:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e406:	fbb2 f2f0 	udiv	r2, r2, r0
 800e40a:	e7de      	b.n	800e3ca <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e40c:	0840      	lsrs	r0, r0, #1
 800e40e:	e7e7      	b.n	800e3e0 <RegionCommonComputeRxWindowParameters+0x34>
 800e410:	4a03      	ldr	r2, [pc, #12]	; (800e420 <RegionCommonComputeRxWindowParameters+0x74>)
 800e412:	fb82 1203 	smull	r1, r2, r2, r3
 800e416:	17db      	asrs	r3, r3, #31
 800e418:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e41c:	e7ef      	b.n	800e3fe <RegionCommonComputeRxWindowParameters+0x52>
 800e41e:	bf00      	nop
 800e420:	10624dd3 	.word	0x10624dd3

0800e424 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800e424:	b538      	push	{r3, r4, r5, lr}
 800e426:	460d      	mov	r5, r1
 800e428:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800e42a:	0040      	lsls	r0, r0, #1
 800e42c:	f7f2 f9ce 	bl	80007cc <__aeabi_ui2f>
 800e430:	4601      	mov	r1, r0
 800e432:	4628      	mov	r0, r5
 800e434:	f7f2 f918 	bl	8000668 <__aeabi_fsub>
 800e438:	4621      	mov	r1, r4
 800e43a:	f7f2 f915 	bl	8000668 <__aeabi_fsub>
 800e43e:	f7f2 f807 	bl	8000450 <__aeabi_f2d>
 800e442:	f005 f945 	bl	80136d0 <floor>
 800e446:	f7f2 f8e3 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800e44a:	b240      	sxtb	r0, r0
 800e44c:	bd38      	pop	{r3, r4, r5, pc}

0800e44e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800e44e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e452:	b083      	sub	sp, #12
 800e454:	4605      	mov	r5, r0
 800e456:	468b      	mov	fp, r1
 800e458:	9200      	str	r2, [sp, #0]
 800e45a:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e45c:	2600      	movs	r6, #0
 800e45e:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800e460:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800e462:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e464:	e049      	b.n	800e4fa <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800e466:	7a3a      	ldrb	r2, [r7, #8]
 800e468:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800e46c:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800e470:	b252      	sxtb	r2, r2
 800e472:	b249      	sxtb	r1, r1
 800e474:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800e478:	f7ff fdef 	bl	800e05a <RegionCommonValueInRange>
 800e47c:	b178      	cbz	r0, 800e49e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800e47e:	68ea      	ldr	r2, [r5, #12]
 800e480:	7a7b      	ldrb	r3, [r7, #9]
 800e482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e486:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e48a:	7d13      	ldrb	r3, [r2, #20]
 800e48c:	b353      	cbz	r3, 800e4e4 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800e48e:	f109 0301 	add.w	r3, r9, #1
 800e492:	eb08 0204 	add.w	r2, r8, r4
 800e496:	f80b 2009 	strb.w	r2, [fp, r9]
 800e49a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800e49e:	3401      	adds	r4, #1
 800e4a0:	b2e4      	uxtb	r4, r4
 800e4a2:	2c0f      	cmp	r4, #15
 800e4a4:	d823      	bhi.n	800e4ee <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800e4a6:	686b      	ldr	r3, [r5, #4]
 800e4a8:	0072      	lsls	r2, r6, #1
 800e4aa:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800e4ae:	4123      	asrs	r3, r4
 800e4b0:	f013 0f01 	tst.w	r3, #1
 800e4b4:	d0f3      	beq.n	800e49e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800e4b6:	68a8      	ldr	r0, [r5, #8]
 800e4b8:	eb08 0304 	add.w	r3, r8, r4
 800e4bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e4c0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800e4c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d0e8      	beq.n	800e49e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e4cc:	782b      	ldrb	r3, [r5, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1c9      	bne.n	800e466 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800e4d2:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d0c6      	beq.n	800e466 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800e4d8:	5a9b      	ldrh	r3, [r3, r2]
 800e4da:	4123      	asrs	r3, r4
 800e4dc:	f013 0f01 	tst.w	r3, #1
 800e4e0:	d1c1      	bne.n	800e466 <RegionCommonCountNbOfEnabledChannels+0x18>
 800e4e2:	e7dc      	b.n	800e49e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800e4e4:	f10a 0a01 	add.w	sl, sl, #1
 800e4e8:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800e4ec:	e7d7      	b.n	800e49e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e4ee:	f108 0810 	add.w	r8, r8, #16
 800e4f2:	fa5f f888 	uxtb.w	r8, r8
 800e4f6:	3601      	adds	r6, #1
 800e4f8:	b2f6      	uxtb	r6, r6
 800e4fa:	8a2b      	ldrh	r3, [r5, #16]
 800e4fc:	fa1f f288 	uxth.w	r2, r8
 800e500:	429a      	cmp	r2, r3
 800e502:	d201      	bcs.n	800e508 <RegionCommonCountNbOfEnabledChannels+0xba>
        for( uint8_t j = 0; j < 16; j++ )
 800e504:	2400      	movs	r4, #0
 800e506:	e7cc      	b.n	800e4a2 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800e508:	9b00      	ldr	r3, [sp, #0]
 800e50a:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800e50e:	9b01      	ldr	r3, [sp, #4]
 800e510:	f883 a000 	strb.w	sl, [r3]
}
 800e514:	b003      	add	sp, #12
 800e516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e51a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800e51a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e51e:	b085      	sub	sp, #20
 800e520:	4604      	mov	r4, r0
 800e522:	460f      	mov	r7, r1
 800e524:	4616      	mov	r6, r2
 800e526:	461d      	mov	r5, r3
 800e528:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e52c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800e530:	6840      	ldr	r0, [r0, #4]
 800e532:	f004 fdf9 	bl	8013128 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800e536:	6823      	ldr	r3, [r4, #0]
 800e538:	1a1b      	subs	r3, r3, r0
 800e53a:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800e53e:	2301      	movs	r3, #1
 800e540:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800e544:	2300      	movs	r3, #0
 800e546:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e548:	6863      	ldr	r3, [r4, #4]
 800e54a:	b113      	cbz	r3, 800e552 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800e54c:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e54e:	4283      	cmp	r3, r0
 800e550:	d81e      	bhi.n	800e590 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800e556:	69e3      	ldr	r3, [r4, #28]
 800e558:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e55c:	781f      	ldrb	r7, [r3, #0]
 800e55e:	69a3      	ldr	r3, [r4, #24]
 800e560:	9303      	str	r3, [sp, #12]
 800e562:	ab01      	add	r3, sp, #4
 800e564:	f104 020c 	add.w	r2, r4, #12
 800e568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e56c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e570:	7d23      	ldrb	r3, [r4, #20]
 800e572:	9300      	str	r3, [sp, #0]
 800e574:	7a23      	ldrb	r3, [r4, #8]
 800e576:	7a62      	ldrb	r2, [r4, #9]
 800e578:	4661      	mov	r1, ip
 800e57a:	4638      	mov	r0, r7
 800e57c:	f7ff fe0a 	bl	800e194 <RegionCommonUpdateBandTimeOff>
 800e580:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800e584:	4643      	mov	r3, r8
 800e586:	462a      	mov	r2, r5
 800e588:	4631      	mov	r1, r6
 800e58a:	69e0      	ldr	r0, [r4, #28]
 800e58c:	f7ff ff5f 	bl	800e44e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800e590:	782b      	ldrb	r3, [r5, #0]
 800e592:	b923      	cbnz	r3, 800e59e <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800e594:	f898 3000 	ldrb.w	r3, [r8]
 800e598:	b13b      	cbz	r3, 800e5aa <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800e59a:	200b      	movs	r0, #11
 800e59c:	e002      	b.n	800e5a4 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800e59e:	2000      	movs	r0, #0
 800e5a0:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800e5a4:	b005      	add	sp, #20
 800e5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800e5aa:	200c      	movs	r0, #12
 800e5ac:	e7fa      	b.n	800e5a4 <RegionCommonIdentifyChannels+0x8a>

0800e5ae <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800e5ae:	b570      	push	{r4, r5, r6, lr}
 800e5b0:	b082      	sub	sp, #8
 800e5b2:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800e5b4:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800e5b8:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800e5bc:	42a6      	cmp	r6, r4
 800e5be:	d011      	beq.n	800e5e4 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800e5c0:	3c01      	subs	r4, #1
 800e5c2:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800e5c4:	42a6      	cmp	r6, r4
 800e5c6:	d00e      	beq.n	800e5e6 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800e5c8:	68ab      	ldr	r3, [r5, #8]
 800e5ca:	9301      	str	r3, [sp, #4]
 800e5cc:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	4633      	mov	r3, r6
 800e5d4:	4622      	mov	r2, r4
 800e5d6:	6869      	ldr	r1, [r5, #4]
 800e5d8:	78e8      	ldrb	r0, [r5, #3]
 800e5da:	f7ff fd48 	bl	800e06e <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d0ee      	beq.n	800e5c0 <RegionCommonGetNextLowerTxDr+0x12>
 800e5e2:	e000      	b.n	800e5e6 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800e5e4:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	b002      	add	sp, #8
 800e5ea:	bd70      	pop	{r4, r5, r6, pc}

0800e5ec <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800e5ec:	4288      	cmp	r0, r1
 800e5ee:	bfb8      	it	lt
 800e5f0:	4608      	movlt	r0, r1
 800e5f2:	4770      	bx	lr

0800e5f4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800e5f4:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800e5f8:	4a05      	ldr	r2, [pc, #20]	; (800e610 <RegionCommonGetBandwidth+0x1c>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d004      	beq.n	800e608 <RegionCommonGetBandwidth+0x14>
 800e5fe:	4a05      	ldr	r2, [pc, #20]	; (800e614 <RegionCommonGetBandwidth+0x20>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d103      	bne.n	800e60c <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800e604:	2002      	movs	r0, #2
 800e606:	4770      	bx	lr
            return 1;
 800e608:	2001      	movs	r0, #1
 800e60a:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800e60c:	2000      	movs	r0, #0
    }
}
 800e60e:	4770      	bx	lr
 800e610:	0003d090 	.word	0x0003d090
 800e614:	0007a120 	.word	0x0007a120

0800e618 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800e618:	b500      	push	{lr}
 800e61a:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800e61c:	2805      	cmp	r0, #5
 800e61e:	d80e      	bhi.n	800e63e <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800e620:	9202      	str	r2, [sp, #8]
 800e622:	9101      	str	r1, [sp, #4]
 800e624:	4b0a      	ldr	r3, [pc, #40]	; (800e650 <RegionCommonRxConfigPrint+0x38>)
 800e626:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e62a:	9300      	str	r3, [sp, #0]
 800e62c:	4b09      	ldr	r3, [pc, #36]	; (800e654 <RegionCommonRxConfigPrint+0x3c>)
 800e62e:	2201      	movs	r2, #1
 800e630:	2100      	movs	r1, #0
 800e632:	2002      	movs	r0, #2
 800e634:	f004 fa5c 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800e638:	b005      	add	sp, #20
 800e63a:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e63e:	9201      	str	r2, [sp, #4]
 800e640:	9100      	str	r1, [sp, #0]
 800e642:	4b05      	ldr	r3, [pc, #20]	; (800e658 <RegionCommonRxConfigPrint+0x40>)
 800e644:	2201      	movs	r2, #1
 800e646:	2100      	movs	r1, #0
 800e648:	2002      	movs	r0, #2
 800e64a:	f004 fa51 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e64e:	e7f3      	b.n	800e638 <RegionCommonRxConfigPrint+0x20>
 800e650:	08013f2c 	.word	0x08013f2c
 800e654:	08013ec4 	.word	0x08013ec4
 800e658:	08013ee4 	.word	0x08013ee4

0800e65c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800e65c:	b500      	push	{lr}
 800e65e:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e660:	9101      	str	r1, [sp, #4]
 800e662:	9000      	str	r0, [sp, #0]
 800e664:	4b04      	ldr	r3, [pc, #16]	; (800e678 <RegionCommonTxConfigPrint+0x1c>)
 800e666:	2201      	movs	r2, #1
 800e668:	2100      	movs	r1, #0
 800e66a:	2002      	movs	r0, #2
 800e66c:	f004 fa40 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e670:	b003      	add	sp, #12
 800e672:	f85d fb04 	ldr.w	pc, [sp], #4
 800e676:	bf00      	nop
 800e678:	08013f00 	.word	0x08013f00

0800e67c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800e67c:	b538      	push	{r3, r4, r5, lr}
 800e67e:	4604      	mov	r4, r0
 800e680:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800e682:	4b1b      	ldr	r3, [pc, #108]	; (800e6f0 <VerifyRfFreq+0x74>)
 800e684:	6a1b      	ldr	r3, [r3, #32]
 800e686:	4798      	blx	r3
 800e688:	b130      	cbz	r0, 800e698 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800e68a:	4b1a      	ldr	r3, [pc, #104]	; (800e6f4 <VerifyRfFreq+0x78>)
 800e68c:	4423      	add	r3, r4
 800e68e:	4a1a      	ldr	r2, [pc, #104]	; (800e6f8 <VerifyRfFreq+0x7c>)
 800e690:	4293      	cmp	r3, r2
 800e692:	d802      	bhi.n	800e69a <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800e694:	2302      	movs	r3, #2
 800e696:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800e698:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800e69a:	4b18      	ldr	r3, [pc, #96]	; (800e6fc <VerifyRfFreq+0x80>)
 800e69c:	4423      	add	r3, r4
 800e69e:	4a18      	ldr	r2, [pc, #96]	; (800e700 <VerifyRfFreq+0x84>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d802      	bhi.n	800e6aa <VerifyRfFreq+0x2e>
        *band = 0;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	702b      	strb	r3, [r5, #0]
 800e6a8:	e7f6      	b.n	800e698 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800e6aa:	4b16      	ldr	r3, [pc, #88]	; (800e704 <VerifyRfFreq+0x88>)
 800e6ac:	4423      	add	r3, r4
 800e6ae:	4a16      	ldr	r2, [pc, #88]	; (800e708 <VerifyRfFreq+0x8c>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d802      	bhi.n	800e6ba <VerifyRfFreq+0x3e>
        *band = 1;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	702b      	strb	r3, [r5, #0]
 800e6b8:	e7ee      	b.n	800e698 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800e6ba:	4b14      	ldr	r3, [pc, #80]	; (800e70c <VerifyRfFreq+0x90>)
 800e6bc:	4423      	add	r3, r4
 800e6be:	4a14      	ldr	r2, [pc, #80]	; (800e710 <VerifyRfFreq+0x94>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d802      	bhi.n	800e6ca <VerifyRfFreq+0x4e>
        *band = 5;
 800e6c4:	2305      	movs	r3, #5
 800e6c6:	702b      	strb	r3, [r5, #0]
 800e6c8:	e7e6      	b.n	800e698 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800e6ca:	4b12      	ldr	r3, [pc, #72]	; (800e714 <VerifyRfFreq+0x98>)
 800e6cc:	4423      	add	r3, r4
 800e6ce:	4a12      	ldr	r2, [pc, #72]	; (800e718 <VerifyRfFreq+0x9c>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d802      	bhi.n	800e6da <VerifyRfFreq+0x5e>
        *band = 3;
 800e6d4:	2303      	movs	r3, #3
 800e6d6:	702b      	strb	r3, [r5, #0]
 800e6d8:	e7de      	b.n	800e698 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800e6da:	4b10      	ldr	r3, [pc, #64]	; (800e71c <VerifyRfFreq+0xa0>)
 800e6dc:	4423      	add	r3, r4
 800e6de:	4a10      	ldr	r2, [pc, #64]	; (800e720 <VerifyRfFreq+0xa4>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d802      	bhi.n	800e6ea <VerifyRfFreq+0x6e>
        *band = 4;
 800e6e4:	2304      	movs	r3, #4
 800e6e6:	702b      	strb	r3, [r5, #0]
 800e6e8:	e7d6      	b.n	800e698 <VerifyRfFreq+0x1c>
        return false;
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	e7d4      	b.n	800e698 <VerifyRfFreq+0x1c>
 800e6ee:	bf00      	nop
 800e6f0:	0801458c 	.word	0x0801458c
 800e6f4:	cc8faa40 	.word	0xcc8faa40
 800e6f8:	001e847f 	.word	0x001e847f
 800e6fc:	cc7125c0 	.word	0xcc7125c0
 800e700:	002dc6c0 	.word	0x002dc6c0
 800e704:	cc435eff 	.word	0xcc435eff
 800e708:	000927bf 	.word	0x000927bf
 800e70c:	cc38b0a0 	.word	0xcc38b0a0
 800e710:	0007a120 	.word	0x0007a120
 800e714:	cc2e0240 	.word	0xcc2e0240
 800e718:	0003d090 	.word	0x0003d090
 800e71c:	cc296e60 	.word	0xcc296e60
 800e720:	000493e0 	.word	0x000493e0

0800e724 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e724:	b570      	push	{r4, r5, r6, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	4605      	mov	r5, r0
 800e72a:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800e72c:	4b13      	ldr	r3, [pc, #76]	; (800e77c <GetTimeOnAir+0x58>)
 800e72e:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800e730:	4913      	ldr	r1, [pc, #76]	; (800e780 <GetTimeOnAir+0x5c>)
 800e732:	f7ff ff5f 	bl	800e5f4 <RegionCommonGetBandwidth>
 800e736:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800e738:	2d07      	cmp	r5, #7
 800e73a:	d00e      	beq.n	800e75a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e73c:	4b11      	ldr	r3, [pc, #68]	; (800e784 <GetTimeOnAir+0x60>)
 800e73e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e740:	2001      	movs	r0, #1
 800e742:	9003      	str	r0, [sp, #12]
 800e744:	b2e4      	uxtb	r4, r4
 800e746:	9402      	str	r4, [sp, #8]
 800e748:	2300      	movs	r3, #0
 800e74a:	9301      	str	r3, [sp, #4]
 800e74c:	2308      	movs	r3, #8
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	4603      	mov	r3, r0
 800e752:	4632      	mov	r2, r6
 800e754:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800e756:	b004      	add	sp, #16
 800e758:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800e75a:	4b0a      	ldr	r3, [pc, #40]	; (800e784 <GetTimeOnAir+0x60>)
 800e75c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e75e:	2301      	movs	r3, #1
 800e760:	9303      	str	r3, [sp, #12]
 800e762:	b2e4      	uxtb	r4, r4
 800e764:	9402      	str	r4, [sp, #8]
 800e766:	2000      	movs	r0, #0
 800e768:	9001      	str	r0, [sp, #4]
 800e76a:	2305      	movs	r3, #5
 800e76c:	9300      	str	r3, [sp, #0]
 800e76e:	4603      	mov	r3, r0
 800e770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e774:	fb06 f202 	mul.w	r2, r6, r2
 800e778:	47a8      	blx	r5
 800e77a:	e7ec      	b.n	800e756 <GetTimeOnAir+0x32>
 800e77c:	08013f64 	.word	0x08013f64
 800e780:	08013f44 	.word	0x08013f44
 800e784:	0801458c 	.word	0x0801458c

0800e788 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800e788:	b500      	push	{lr}
 800e78a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800e78c:	2300      	movs	r3, #0
 800e78e:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800e790:	7803      	ldrb	r3, [r0, #0]
 800e792:	3b0b      	subs	r3, #11
 800e794:	2b2d      	cmp	r3, #45	; 0x2d
 800e796:	d82f      	bhi.n	800e7f8 <RegionEU868GetPhyParam+0x70>
 800e798:	e8df f003 	tbb	[pc, r3]
 800e79c:	3f393633 	.word	0x3f393633
 800e7a0:	504c4845 	.word	0x504c4845
 800e7a4:	2e5c5854 	.word	0x2e5c5854
 800e7a8:	6e682e65 	.word	0x6e682e65
 800e7ac:	2e2e7774 	.word	0x2e2e7774
 800e7b0:	2e177f7b 	.word	0x2e177f7b
 800e7b4:	2e2e2e2e 	.word	0x2e2e2e2e
 800e7b8:	2e2e2e2e 	.word	0x2e2e2e2e
 800e7bc:	2e2e2e2e 	.word	0x2e2e2e2e
 800e7c0:	2e8c8582 	.word	0x2e8c8582
 800e7c4:	2e928f2e 	.word	0x2e928f2e
 800e7c8:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800e7ca:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e7ce:	f88d 3004 	strb.w	r3, [sp, #4]
 800e7d2:	2307      	movs	r3, #7
 800e7d4:	f88d 3005 	strb.w	r3, [sp, #5]
 800e7d8:	2300      	movs	r3, #0
 800e7da:	f88d 3006 	strb.w	r3, [sp, #6]
 800e7de:	2310      	movs	r3, #16
 800e7e0:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e7e4:	4b3e      	ldr	r3, [pc, #248]	; (800e8e0 <RegionEU868GetPhyParam+0x158>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e7ec:	9202      	str	r2, [sp, #8]
 800e7ee:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e7f0:	a801      	add	r0, sp, #4
 800e7f2:	f7ff fedc 	bl	800e5ae <RegionCommonGetNextLowerTxDr>
 800e7f6:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800e7f8:	9804      	ldr	r0, [sp, #16]
 800e7fa:	9005      	str	r0, [sp, #20]
}
 800e7fc:	b007      	add	sp, #28
 800e7fe:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e802:	2340      	movs	r3, #64	; 0x40
 800e804:	9304      	str	r3, [sp, #16]
            break;
 800e806:	e7f7      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800e808:	2320      	movs	r3, #32
 800e80a:	9304      	str	r3, [sp, #16]
            break;
 800e80c:	e7f4      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800e80e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e812:	4a34      	ldr	r2, [pc, #208]	; (800e8e4 <RegionEU868GetPhyParam+0x15c>)
 800e814:	5cd3      	ldrb	r3, [r2, r3]
 800e816:	9304      	str	r3, [sp, #16]
            break;
 800e818:	e7ee      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800e81a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e81e:	4a32      	ldr	r2, [pc, #200]	; (800e8e8 <RegionEU868GetPhyParam+0x160>)
 800e820:	5cd3      	ldrb	r3, [r2, r3]
 800e822:	9304      	str	r3, [sp, #16]
            break;
 800e824:	e7e8      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800e826:	2301      	movs	r3, #1
 800e828:	9304      	str	r3, [sp, #16]
            break;
 800e82a:	e7e5      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800e82c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e830:	9304      	str	r3, [sp, #16]
            break;
 800e832:	e7e1      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800e834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e838:	9304      	str	r3, [sp, #16]
            break;
 800e83a:	e7dd      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800e83c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e840:	9304      	str	r3, [sp, #16]
            break;
 800e842:	e7d9      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800e844:	f241 3388 	movw	r3, #5000	; 0x1388
 800e848:	9304      	str	r3, [sp, #16]
            break;
 800e84a:	e7d5      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800e84c:	f241 7370 	movw	r3, #6000	; 0x1770
 800e850:	9304      	str	r3, [sp, #16]
            break;
 800e852:	e7d1      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800e854:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e858:	4824      	ldr	r0, [pc, #144]	; (800e8ec <RegionEU868GetPhyParam+0x164>)
 800e85a:	f002 fa5f 	bl	8010d1c <randr>
 800e85e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800e862:	9004      	str	r0, [sp, #16]
            break;
 800e864:	e7c8      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800e866:	4b22      	ldr	r3, [pc, #136]	; (800e8f0 <RegionEU868GetPhyParam+0x168>)
 800e868:	9304      	str	r3, [sp, #16]
            break;
 800e86a:	e7c5      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e86c:	4b1c      	ldr	r3, [pc, #112]	; (800e8e0 <RegionEU868GetPhyParam+0x158>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e874:	9304      	str	r3, [sp, #16]
            break;
 800e876:	e7bf      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800e878:	4b19      	ldr	r3, [pc, #100]	; (800e8e0 <RegionEU868GetPhyParam+0x158>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800e880:	9304      	str	r3, [sp, #16]
            break;
 800e882:	e7b9      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800e884:	2310      	movs	r3, #16
 800e886:	9304      	str	r3, [sp, #16]
            break;
 800e888:	e7b6      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800e88a:	4b15      	ldr	r3, [pc, #84]	; (800e8e0 <RegionEU868GetPhyParam+0x158>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	9304      	str	r3, [sp, #16]
            break;
 800e890:	e7b2      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800e892:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800e896:	9304      	str	r3, [sp, #16]
            break;
 800e898:	e7ae      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800e89a:	4b16      	ldr	r3, [pc, #88]	; (800e8f4 <RegionEU868GetPhyParam+0x16c>)
 800e89c:	9304      	str	r3, [sp, #16]
            break;
 800e89e:	e7ab      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800e8a0:	4b13      	ldr	r3, [pc, #76]	; (800e8f0 <RegionEU868GetPhyParam+0x168>)
 800e8a2:	9304      	str	r3, [sp, #16]
            break;
 800e8a4:	e7a8      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800e8a6:	2311      	movs	r3, #17
 800e8a8:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800e8b2:	e7a1      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	9304      	str	r3, [sp, #16]
            break;
 800e8b8:	e79e      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800e8ba:	4b0d      	ldr	r3, [pc, #52]	; (800e8f0 <RegionEU868GetPhyParam+0x168>)
 800e8bc:	9304      	str	r3, [sp, #16]
            break;
 800e8be:	e79b      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800e8c0:	2303      	movs	r3, #3
 800e8c2:	9304      	str	r3, [sp, #16]
            break;
 800e8c4:	e798      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800e8c6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e8ca:	4a0b      	ldr	r2, [pc, #44]	; (800e8f8 <RegionEU868GetPhyParam+0x170>)
 800e8cc:	5cd3      	ldrb	r3, [r2, r3]
 800e8ce:	9304      	str	r3, [sp, #16]
            break;
 800e8d0:	e792      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800e8d2:	490a      	ldr	r1, [pc, #40]	; (800e8fc <RegionEU868GetPhyParam+0x174>)
 800e8d4:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800e8d8:	f7ff fe8c 	bl	800e5f4 <RegionCommonGetBandwidth>
 800e8dc:	9004      	str	r0, [sp, #16]
            break;
 800e8de:	e78b      	b.n	800e7f8 <RegionEU868GetPhyParam+0x70>
 800e8e0:	20000eec 	.word	0x20000eec
 800e8e4:	08013f6c 	.word	0x08013f6c
 800e8e8:	08013f74 	.word	0x08013f74
 800e8ec:	fffffc18 	.word	0xfffffc18
 800e8f0:	33d3e608 	.word	0x33d3e608
 800e8f4:	4009999a 	.word	0x4009999a
 800e8f8:	08013f64 	.word	0x08013f64
 800e8fc:	08013f44 	.word	0x08013f44

0800e900 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800e900:	b510      	push	{r4, lr}
 800e902:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800e904:	4b0b      	ldr	r3, [pc, #44]	; (800e934 <RegionEU868SetBandTxDone+0x34>)
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	7803      	ldrb	r3, [r0, #0]
 800e90a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e90e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e912:	7a5b      	ldrb	r3, [r3, #9]
 800e914:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800e918:	4b07      	ldr	r3, [pc, #28]	; (800e938 <RegionEU868SetBandTxDone+0x38>)
 800e91a:	681c      	ldr	r4, [r3, #0]
 800e91c:	6903      	ldr	r3, [r0, #16]
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	68c3      	ldr	r3, [r0, #12]
 800e922:	7842      	ldrb	r2, [r0, #1]
 800e924:	6881      	ldr	r1, [r0, #8]
 800e926:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800e92a:	f7ff fc19 	bl	800e160 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800e92e:	b002      	add	sp, #8
 800e930:	bd10      	pop	{r4, pc}
 800e932:	bf00      	nop
 800e934:	20000eec 	.word	0x20000eec
 800e938:	20000ee8 	.word	0x20000ee8

0800e93c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800e93c:	b530      	push	{r4, r5, lr}
 800e93e:	b0a5      	sub	sp, #148	; 0x94
 800e940:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800e942:	2290      	movs	r2, #144	; 0x90
 800e944:	2100      	movs	r1, #0
 800e946:	4668      	mov	r0, sp
 800e948:	f004 fe86 	bl	8013658 <memset>
 800e94c:	2364      	movs	r3, #100	; 0x64
 800e94e:	f8ad 3000 	strh.w	r3, [sp]
 800e952:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e95a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800e95e:	210a      	movs	r1, #10
 800e960:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800e964:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800e968:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800e96c:	7b23      	ldrb	r3, [r4, #12]
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d032      	beq.n	800e9d8 <RegionEU868InitDefaults+0x9c>
 800e972:	2b02      	cmp	r3, #2
 800e974:	d03e      	beq.n	800e9f4 <RegionEU868InitDefaults+0xb8>
 800e976:	b10b      	cbz	r3, 800e97c <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800e978:	b025      	add	sp, #148	; 0x94
 800e97a:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800e97c:	6823      	ldr	r3, [r4, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d0fa      	beq.n	800e978 <RegionEU868InitDefaults+0x3c>
 800e982:	6863      	ldr	r3, [r4, #4]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d0f7      	beq.n	800e978 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800e988:	4d1f      	ldr	r5, [pc, #124]	; (800ea08 <RegionEU868InitDefaults+0xcc>)
 800e98a:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800e98c:	68a0      	ldr	r0, [r4, #8]
 800e98e:	4b1f      	ldr	r3, [pc, #124]	; (800ea0c <RegionEU868InitDefaults+0xd0>)
 800e990:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800e992:	2290      	movs	r2, #144	; 0x90
 800e994:	4669      	mov	r1, sp
 800e996:	f002 f9ce 	bl	8010d36 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800e99a:	682c      	ldr	r4, [r5, #0]
 800e99c:	4b1c      	ldr	r3, [pc, #112]	; (800ea10 <RegionEU868InitDefaults+0xd4>)
 800e99e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e9a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800e9a6:	f104 0c0c 	add.w	ip, r4, #12
 800e9aa:	f103 020c 	add.w	r2, r3, #12
 800e9ae:	ca07      	ldmia	r2, {r0, r1, r2}
 800e9b0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800e9b4:	f104 0c18 	add.w	ip, r4, #24
 800e9b8:	3318      	adds	r3, #24
 800e9ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e9be:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800e9c2:	2307      	movs	r3, #7
 800e9c4:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e9c8:	2201      	movs	r2, #1
 800e9ca:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800e9ce:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800e9d2:	f7ff fbb6 	bl	800e142 <RegionCommonChanMaskCopy>
            break;
 800e9d6:	e7cf      	b.n	800e978 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800e9d8:	4b0b      	ldr	r3, [pc, #44]	; (800ea08 <RegionEU868InitDefaults+0xcc>)
 800e9da:	6818      	ldr	r0, [r3, #0]
 800e9dc:	2300      	movs	r3, #0
 800e9de:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800e9e0:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800e9e2:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800e9ea:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e9ee:	f7ff fba8 	bl	800e142 <RegionCommonChanMaskCopy>
            break;
 800e9f2:	e7c1      	b.n	800e978 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800e9f4:	4b04      	ldr	r3, [pc, #16]	; (800ea08 <RegionEU868InitDefaults+0xcc>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800e9fc:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800ea00:	430a      	orrs	r2, r1
 800ea02:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800ea06:	e7b7      	b.n	800e978 <RegionEU868InitDefaults+0x3c>
 800ea08:	20000eec 	.word	0x20000eec
 800ea0c:	20000ee8 	.word	0x20000ee8
 800ea10:	08013830 	.word	0x08013830

0800ea14 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ea14:	b500      	push	{lr}
 800ea16:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800ea18:	290f      	cmp	r1, #15
 800ea1a:	d83c      	bhi.n	800ea96 <RegionEU868Verify+0x82>
 800ea1c:	e8df f001 	tbb	[pc, r1]
 800ea20:	3b3b3b0a 	.word	0x3b3b3b0a
 800ea24:	271d133b 	.word	0x271d133b
 800ea28:	3b31313b 	.word	0x3b31313b
 800ea2c:	083b3b3b 	.word	0x083b3b3b
 800ea30:	2001      	movs	r0, #1
 800ea32:	e031      	b.n	800ea98 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800ea34:	2300      	movs	r3, #0
 800ea36:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800ea3a:	f10d 0107 	add.w	r1, sp, #7
 800ea3e:	6800      	ldr	r0, [r0, #0]
 800ea40:	f7ff fe1c 	bl	800e67c <VerifyRfFreq>
 800ea44:	e028      	b.n	800ea98 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800ea46:	2207      	movs	r2, #7
 800ea48:	2100      	movs	r1, #0
 800ea4a:	f990 0000 	ldrsb.w	r0, [r0]
 800ea4e:	f7ff fb04 	bl	800e05a <RegionCommonValueInRange>
 800ea52:	3800      	subs	r0, #0
 800ea54:	bf18      	it	ne
 800ea56:	2001      	movne	r0, #1
 800ea58:	e01e      	b.n	800ea98 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800ea5a:	2205      	movs	r2, #5
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	f990 0000 	ldrsb.w	r0, [r0]
 800ea62:	f7ff fafa 	bl	800e05a <RegionCommonValueInRange>
 800ea66:	3800      	subs	r0, #0
 800ea68:	bf18      	it	ne
 800ea6a:	2001      	movne	r0, #1
 800ea6c:	e014      	b.n	800ea98 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800ea6e:	2207      	movs	r2, #7
 800ea70:	2100      	movs	r1, #0
 800ea72:	f990 0000 	ldrsb.w	r0, [r0]
 800ea76:	f7ff faf0 	bl	800e05a <RegionCommonValueInRange>
 800ea7a:	3800      	subs	r0, #0
 800ea7c:	bf18      	it	ne
 800ea7e:	2001      	movne	r0, #1
 800ea80:	e00a      	b.n	800ea98 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800ea82:	2207      	movs	r2, #7
 800ea84:	2100      	movs	r1, #0
 800ea86:	f990 0000 	ldrsb.w	r0, [r0]
 800ea8a:	f7ff fae6 	bl	800e05a <RegionCommonValueInRange>
 800ea8e:	3800      	subs	r0, #0
 800ea90:	bf18      	it	ne
 800ea92:	2001      	movne	r0, #1
 800ea94:	e000      	b.n	800ea98 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800ea96:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800ea98:	b003      	add	sp, #12
 800ea9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800eaa0 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800eaa0:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800eaa2:	7903      	ldrb	r3, [r0, #4]
 800eaa4:	b11b      	cbz	r3, 800eaae <RegionEU868ChanMaskSet+0xe>
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d00b      	beq.n	800eac2 <RegionEU868ChanMaskSet+0x22>
 800eaaa:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800eaac:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800eaae:	4b0a      	ldr	r3, [pc, #40]	; (800ead8 <RegionEU868ChanMaskSet+0x38>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2201      	movs	r2, #1
 800eab4:	6801      	ldr	r1, [r0, #0]
 800eab6:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800eaba:	f7ff fb42 	bl	800e142 <RegionCommonChanMaskCopy>
    return true;
 800eabe:	2001      	movs	r0, #1
            break;
 800eac0:	e7f4      	b.n	800eaac <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800eac2:	4b05      	ldr	r3, [pc, #20]	; (800ead8 <RegionEU868ChanMaskSet+0x38>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2201      	movs	r2, #1
 800eac8:	6801      	ldr	r1, [r0, #0]
 800eaca:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800eace:	f7ff fb38 	bl	800e142 <RegionCommonChanMaskCopy>
    return true;
 800ead2:	2001      	movs	r0, #1
            break;
 800ead4:	e7ea      	b.n	800eaac <RegionEU868ChanMaskSet+0xc>
 800ead6:	bf00      	nop
 800ead8:	20000eec 	.word	0x20000eec

0800eadc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800eadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eade:	b083      	sub	sp, #12
 800eae0:	460e      	mov	r6, r1
 800eae2:	4617      	mov	r7, r2
 800eae4:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800eae6:	2807      	cmp	r0, #7
 800eae8:	bfa8      	it	ge
 800eaea:	2007      	movge	r0, #7
 800eaec:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800eaee:	4913      	ldr	r1, [pc, #76]	; (800eb3c <RegionEU868ComputeRxWindowParameters+0x60>)
 800eaf0:	f7ff fd80 	bl	800e5f4 <RegionCommonGetBandwidth>
 800eaf4:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800eaf6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800eafa:	2b07      	cmp	r3, #7
 800eafc:	d017      	beq.n	800eb2e <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800eafe:	4a0f      	ldr	r2, [pc, #60]	; (800eb3c <RegionEU868ComputeRxWindowParameters+0x60>)
 800eb00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800eb04:	4a0e      	ldr	r2, [pc, #56]	; (800eb40 <RegionEU868ComputeRxWindowParameters+0x64>)
 800eb06:	5cd0      	ldrb	r0, [r2, r3]
 800eb08:	f7ff fc42 	bl	800e390 <RegionCommonComputeSymbolTimeLoRa>
 800eb0c:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800eb0e:	4b0d      	ldr	r3, [pc, #52]	; (800eb44 <RegionEU868ComputeRxWindowParameters+0x68>)
 800eb10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb12:	4798      	blx	r3
 800eb14:	4603      	mov	r3, r0
 800eb16:	f104 020c 	add.w	r2, r4, #12
 800eb1a:	9201      	str	r2, [sp, #4]
 800eb1c:	3408      	adds	r4, #8
 800eb1e:	9400      	str	r4, [sp, #0]
 800eb20:	463a      	mov	r2, r7
 800eb22:	4631      	mov	r1, r6
 800eb24:	4628      	mov	r0, r5
 800eb26:	f7ff fc41 	bl	800e3ac <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800eb2a:	b003      	add	sp, #12
 800eb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800eb2e:	4a04      	ldr	r2, [pc, #16]	; (800eb40 <RegionEU868ComputeRxWindowParameters+0x64>)
 800eb30:	5cd0      	ldrb	r0, [r2, r3]
 800eb32:	f7ff fc35 	bl	800e3a0 <RegionCommonComputeSymbolTimeFsk>
 800eb36:	4605      	mov	r5, r0
 800eb38:	e7e9      	b.n	800eb0e <RegionEU868ComputeRxWindowParameters+0x32>
 800eb3a:	bf00      	nop
 800eb3c:	08013f44 	.word	0x08013f44
 800eb40:	08013f64 	.word	0x08013f64
 800eb44:	0801458c 	.word	0x0801458c

0800eb48 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800eb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb4c:	b08a      	sub	sp, #40	; 0x28
 800eb4e:	4604      	mov	r4, r0
 800eb50:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800eb52:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800eb56:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800eb5a:	4b37      	ldr	r3, [pc, #220]	; (800ec38 <RegionEU868RxConfig+0xf0>)
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	4798      	blx	r3
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d167      	bne.n	800ec34 <RegionEU868RxConfig+0xec>
 800eb64:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800eb66:	7ce3      	ldrb	r3, [r4, #19]
 800eb68:	b983      	cbnz	r3, 800eb8c <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800eb6a:	4b34      	ldr	r3, [pc, #208]	; (800ec3c <RegionEU868RxConfig+0xf4>)
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	7823      	ldrb	r3, [r4, #0]
 800eb70:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800eb74:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800eb78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eb7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eb80:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800eb84:	f1b8 0f00 	cmp.w	r8, #0
 800eb88:	d100      	bne.n	800eb8c <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800eb8a:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800eb8c:	4b2c      	ldr	r3, [pc, #176]	; (800ec40 <RegionEU868RxConfig+0xf8>)
 800eb8e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800eb92:	4b29      	ldr	r3, [pc, #164]	; (800ec38 <RegionEU868RxConfig+0xf0>)
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	4640      	mov	r0, r8
 800eb98:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800eb9a:	2d07      	cmp	r5, #7
 800eb9c:	d02b      	beq.n	800ebf6 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800eb9e:	4b26      	ldr	r3, [pc, #152]	; (800ec38 <RegionEU868RxConfig+0xf0>)
 800eba0:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800eba4:	7ca3      	ldrb	r3, [r4, #18]
 800eba6:	9309      	str	r3, [sp, #36]	; 0x24
 800eba8:	2601      	movs	r6, #1
 800ebaa:	9608      	str	r6, [sp, #32]
 800ebac:	2300      	movs	r3, #0
 800ebae:	9307      	str	r3, [sp, #28]
 800ebb0:	9306      	str	r3, [sp, #24]
 800ebb2:	9305      	str	r3, [sp, #20]
 800ebb4:	9304      	str	r3, [sp, #16]
 800ebb6:	9303      	str	r3, [sp, #12]
 800ebb8:	8922      	ldrh	r2, [r4, #8]
 800ebba:	9202      	str	r2, [sp, #8]
 800ebbc:	2208      	movs	r2, #8
 800ebbe:	9201      	str	r2, [sp, #4]
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	4633      	mov	r3, r6
 800ebc4:	464a      	mov	r2, r9
 800ebc6:	78a1      	ldrb	r1, [r4, #2]
 800ebc8:	4630      	mov	r0, r6
 800ebca:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800ebcc:	7c63      	ldrb	r3, [r4, #17]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d02d      	beq.n	800ec2e <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800ebd2:	4b1c      	ldr	r3, [pc, #112]	; (800ec44 <RegionEU868RxConfig+0xfc>)
 800ebd4:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ebd6:	4b18      	ldr	r3, [pc, #96]	; (800ec38 <RegionEU868RxConfig+0xf0>)
 800ebd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebda:	310d      	adds	r1, #13
 800ebdc:	b2c9      	uxtb	r1, r1
 800ebde:	4630      	mov	r0, r6
 800ebe0:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ebe2:	462a      	mov	r2, r5
 800ebe4:	4641      	mov	r1, r8
 800ebe6:	7ce0      	ldrb	r0, [r4, #19]
 800ebe8:	f7ff fd16 	bl	800e618 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800ebec:	703d      	strb	r5, [r7, #0]
    return true;
 800ebee:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800ebf0:	b00a      	add	sp, #40	; 0x28
 800ebf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800ebf6:	4b10      	ldr	r3, [pc, #64]	; (800ec38 <RegionEU868RxConfig+0xf0>)
 800ebf8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ebfc:	7ca3      	ldrb	r3, [r4, #18]
 800ebfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ec00:	2000      	movs	r0, #0
 800ec02:	9008      	str	r0, [sp, #32]
 800ec04:	9007      	str	r0, [sp, #28]
 800ec06:	9006      	str	r0, [sp, #24]
 800ec08:	2301      	movs	r3, #1
 800ec0a:	9305      	str	r3, [sp, #20]
 800ec0c:	9004      	str	r0, [sp, #16]
 800ec0e:	9003      	str	r0, [sp, #12]
 800ec10:	8923      	ldrh	r3, [r4, #8]
 800ec12:	9302      	str	r3, [sp, #8]
 800ec14:	2305      	movs	r3, #5
 800ec16:	9301      	str	r3, [sp, #4]
 800ec18:	4b0b      	ldr	r3, [pc, #44]	; (800ec48 <RegionEU868RxConfig+0x100>)
 800ec1a:	9300      	str	r3, [sp, #0]
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec22:	fb02 f209 	mul.w	r2, r2, r9
 800ec26:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ec2a:	47d0      	blx	sl
 800ec2c:	e7ce      	b.n	800ebcc <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800ec2e:	4b07      	ldr	r3, [pc, #28]	; (800ec4c <RegionEU868RxConfig+0x104>)
 800ec30:	5d59      	ldrb	r1, [r3, r5]
 800ec32:	e7d0      	b.n	800ebd6 <RegionEU868RxConfig+0x8e>
        return false;
 800ec34:	2000      	movs	r0, #0
 800ec36:	e7db      	b.n	800ebf0 <RegionEU868RxConfig+0xa8>
 800ec38:	0801458c 	.word	0x0801458c
 800ec3c:	20000eec 	.word	0x20000eec
 800ec40:	08013f64 	.word	0x08013f64
 800ec44:	08013f74 	.word	0x08013f74
 800ec48:	00014585 	.word	0x00014585
 800ec4c:	08013f6c 	.word	0x08013f6c

0800ec50 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ec50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec54:	b08d      	sub	sp, #52	; 0x34
 800ec56:	4604      	mov	r4, r0
 800ec58:	460f      	mov	r7, r1
 800ec5a:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800ec5c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ec60:	4a42      	ldr	r2, [pc, #264]	; (800ed6c <RegionEU868TxConfig+0x11c>)
 800ec62:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800ec66:	4d42      	ldr	r5, [pc, #264]	; (800ed70 <RegionEU868TxConfig+0x120>)
 800ec68:	682a      	ldr	r2, [r5, #0]
 800ec6a:	7803      	ldrb	r3, [r0, #0]
 800ec6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ec70:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ec74:	7a53      	ldrb	r3, [r2, #9]
 800ec76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ec7a:	4a3e      	ldr	r2, [pc, #248]	; (800ed74 <RegionEU868TxConfig+0x124>)
 800ec7c:	6812      	ldr	r2, [r2, #0]
 800ec7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ec82:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800ec86:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800ec8a:	f7ff fcaf 	bl	800e5ec <RegionCommonLimitTxPower>
 800ec8e:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800ec90:	4939      	ldr	r1, [pc, #228]	; (800ed78 <RegionEU868TxConfig+0x128>)
 800ec92:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ec96:	f7ff fcad 	bl	800e5f4 <RegionCommonGetBandwidth>
 800ec9a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800ec9c:	68a2      	ldr	r2, [r4, #8]
 800ec9e:	6861      	ldr	r1, [r4, #4]
 800eca0:	4630      	mov	r0, r6
 800eca2:	f7ff fbbf 	bl	800e424 <RegionCommonComputeTxPower>
 800eca6:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800eca8:	4b34      	ldr	r3, [pc, #208]	; (800ed7c <RegionEU868TxConfig+0x12c>)
 800ecaa:	68da      	ldr	r2, [r3, #12]
 800ecac:	6829      	ldr	r1, [r5, #0]
 800ecae:	7823      	ldrb	r3, [r4, #0]
 800ecb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ecb4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ecb8:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800ecba:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ecbe:	2b07      	cmp	r3, #7
 800ecc0:	d031      	beq.n	800ed26 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ecc2:	4b2e      	ldr	r3, [pc, #184]	; (800ed7c <RegionEU868TxConfig+0x12c>)
 800ecc4:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800ecc8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800eccc:	9308      	str	r3, [sp, #32]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	9207      	str	r2, [sp, #28]
 800ecd2:	9206      	str	r2, [sp, #24]
 800ecd4:	9205      	str	r2, [sp, #20]
 800ecd6:	2501      	movs	r5, #1
 800ecd8:	9504      	str	r5, [sp, #16]
 800ecda:	9203      	str	r2, [sp, #12]
 800ecdc:	2308      	movs	r3, #8
 800ecde:	9302      	str	r3, [sp, #8]
 800ece0:	9501      	str	r5, [sp, #4]
 800ece2:	f8cd a000 	str.w	sl, [sp]
 800ece6:	464b      	mov	r3, r9
 800ece8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ecea:	4628      	mov	r0, r5
 800ecec:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ecee:	4b20      	ldr	r3, [pc, #128]	; (800ed70 <RegionEU868TxConfig+0x120>)
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	7823      	ldrb	r3, [r4, #0]
 800ecf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ecf8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800ecfc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ed00:	f7ff fcac 	bl	800e65c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ed04:	89a1      	ldrh	r1, [r4, #12]
 800ed06:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ed0a:	f7ff fd0b 	bl	800e724 <GetTimeOnAir>
 800ed0e:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800ed12:	4b1a      	ldr	r3, [pc, #104]	; (800ed7c <RegionEU868TxConfig+0x12c>)
 800ed14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed16:	7b21      	ldrb	r1, [r4, #12]
 800ed18:	4628      	mov	r0, r5
 800ed1a:	4798      	blx	r3

    *txPower = txPowerLimited;
 800ed1c:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800ed1e:	2001      	movs	r0, #1
 800ed20:	b00d      	add	sp, #52	; 0x34
 800ed22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800ed26:	4b15      	ldr	r3, [pc, #84]	; (800ed7c <RegionEU868TxConfig+0x12c>)
 800ed28:	69dd      	ldr	r5, [r3, #28]
 800ed2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed2e:	fb03 f30a 	mul.w	r3, r3, sl
 800ed32:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800ed36:	9208      	str	r2, [sp, #32]
 800ed38:	f04f 0a00 	mov.w	sl, #0
 800ed3c:	f8cd a01c 	str.w	sl, [sp, #28]
 800ed40:	f8cd a018 	str.w	sl, [sp, #24]
 800ed44:	f8cd a014 	str.w	sl, [sp, #20]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	9204      	str	r2, [sp, #16]
 800ed4c:	f8cd a00c 	str.w	sl, [sp, #12]
 800ed50:	2205      	movs	r2, #5
 800ed52:	9202      	str	r2, [sp, #8]
 800ed54:	f8cd a004 	str.w	sl, [sp, #4]
 800ed58:	9300      	str	r3, [sp, #0]
 800ed5a:	464b      	mov	r3, r9
 800ed5c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800ed60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed62:	4650      	mov	r0, sl
 800ed64:	47a8      	blx	r5
        modem = MODEM_FSK;
 800ed66:	4655      	mov	r5, sl
 800ed68:	e7c1      	b.n	800ecee <RegionEU868TxConfig+0x9e>
 800ed6a:	bf00      	nop
 800ed6c:	08013f64 	.word	0x08013f64
 800ed70:	20000eec 	.word	0x20000eec
 800ed74:	20000ee8 	.word	0x20000ee8
 800ed78:	08013f44 	.word	0x08013f44
 800ed7c:	0801458c 	.word	0x0801458c

0800ed80 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ed80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed84:	b08f      	sub	sp, #60	; 0x3c
 800ed86:	4605      	mov	r5, r0
 800ed88:	4689      	mov	r9, r1
 800ed8a:	4690      	mov	r8, r2
 800ed8c:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800ed8e:	2400      	movs	r4, #0
 800ed90:	940c      	str	r4, [sp, #48]	; 0x30
 800ed92:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800ed96:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800ed9a:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ed9c:	e030      	b.n	800ee00 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800ed9e:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800eda2:	2607      	movs	r6, #7
 800eda4:	e012      	b.n	800edcc <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800eda6:	4a58      	ldr	r2, [pc, #352]	; (800ef08 <RegionEU868LinkAdrReq+0x188>)
 800eda8:	6812      	ldr	r2, [r2, #0]
 800edaa:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800edae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800edb2:	b13a      	cbz	r2, 800edc4 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800edb4:	2201      	movs	r2, #1
 800edb6:	fa02 f20c 	lsl.w	r2, r2, ip
 800edba:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800edbe:	430a      	orrs	r2, r1
 800edc0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800edc4:	f10c 0c01 	add.w	ip, ip, #1
 800edc8:	fa5f fc8c 	uxtb.w	ip, ip
 800edcc:	f1bc 0f0f 	cmp.w	ip, #15
 800edd0:	d816      	bhi.n	800ee00 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800edd2:	2b06      	cmp	r3, #6
 800edd4:	d0e7      	beq.n	800eda6 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800edd6:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800edda:	fa4e fe0c 	asr.w	lr, lr, ip
 800edde:	f01e 0f01 	tst.w	lr, #1
 800ede2:	d0ef      	beq.n	800edc4 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800ede4:	4a48      	ldr	r2, [pc, #288]	; (800ef08 <RegionEU868LinkAdrReq+0x188>)
 800ede6:	6812      	ldr	r2, [r2, #0]
 800ede8:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800edec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800edf0:	2a00      	cmp	r2, #0
 800edf2:	d1e7      	bne.n	800edc4 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800edf4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800edf8:	e7e4      	b.n	800edc4 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800edfa:	2606      	movs	r6, #6
 800edfc:	e000      	b.n	800ee00 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800edfe:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ee00:	7a2b      	ldrb	r3, [r5, #8]
 800ee02:	42a3      	cmp	r3, r4
 800ee04:	d919      	bls.n	800ee3a <RegionEU868LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800ee06:	6868      	ldr	r0, [r5, #4]
 800ee08:	a90c      	add	r1, sp, #48	; 0x30
 800ee0a:	4420      	add	r0, r4
 800ee0c:	f7ff fa4a 	bl	800e2a4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800ee10:	4603      	mov	r3, r0
 800ee12:	b190      	cbz	r0, 800ee3a <RegionEU868LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 800ee14:	4423      	add	r3, r4
 800ee16:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 800ee18:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800ee1c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800ee20:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ee24:	b90b      	cbnz	r3, 800ee2a <RegionEU868LinkAdrReq+0xaa>
 800ee26:	2a00      	cmp	r2, #0
 800ee28:	d0e7      	beq.n	800edfa <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800ee2a:	1e5a      	subs	r2, r3, #1
 800ee2c:	b2d2      	uxtb	r2, r2
 800ee2e:	2a04      	cmp	r2, #4
 800ee30:	d9e5      	bls.n	800edfe <RegionEU868LinkAdrReq+0x7e>
 800ee32:	2b06      	cmp	r3, #6
 800ee34:	d9b3      	bls.n	800ed9e <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800ee36:	2606      	movs	r6, #6
 800ee38:	e7e2      	b.n	800ee00 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ee3a:	2302      	movs	r3, #2
 800ee3c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800ee40:	7a6b      	ldrb	r3, [r5, #9]
 800ee42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800ee46:	a80a      	add	r0, sp, #40	; 0x28
 800ee48:	f7ff fc9e 	bl	800e788 <RegionEU868GetPhyParam>
 800ee4c:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800ee4e:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ee52:	7aab      	ldrb	r3, [r5, #10]
 800ee54:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ee58:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800ee5c:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800ee60:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800ee64:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800ee68:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ee6c:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800ee70:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800ee74:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800ee78:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800ee7c:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800ee80:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800ee84:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800ee88:	2310      	movs	r3, #16
 800ee8a:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800ee8e:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800ee92:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800ee94:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800ee98:	2307      	movs	r3, #7
 800ee9a:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800ee9e:	4a1a      	ldr	r2, [pc, #104]	; (800ef08 <RegionEU868LinkAdrReq+0x188>)
 800eea0:	6812      	ldr	r2, [r2, #0]
 800eea2:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800eea4:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800eeae:	682b      	ldr	r3, [r5, #0]
 800eeb0:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800eeb2:	ab0c      	add	r3, sp, #48	; 0x30
 800eeb4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800eeb8:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800eebc:	a801      	add	r0, sp, #4
 800eebe:	f7ff fa0f 	bl	800e2e0 <RegionCommonLinkAdrReqVerifyParams>
 800eec2:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800eec4:	2807      	cmp	r0, #7
 800eec6:	d010      	beq.n	800eeea <RegionEU868LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800eec8:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800eecc:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800eed0:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800eed4:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800eed8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800eedc:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800eede:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eee0:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800eee2:	4628      	mov	r0, r5
 800eee4:	b00f      	add	sp, #60	; 0x3c
 800eee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800eeea:	4e07      	ldr	r6, [pc, #28]	; (800ef08 <RegionEU868LinkAdrReq+0x188>)
 800eeec:	6830      	ldr	r0, [r6, #0]
 800eeee:	220c      	movs	r2, #12
 800eef0:	2100      	movs	r1, #0
 800eef2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800eef6:	f001 ff36 	bl	8010d66 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800eefa:	6833      	ldr	r3, [r6, #0]
 800eefc:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800ef00:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800ef04:	e7e0      	b.n	800eec8 <RegionEU868LinkAdrReq+0x148>
 800ef06:	bf00      	nop
 800ef08:	20000eec 	.word	0x20000eec

0800ef0c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ef0c:	b530      	push	{r4, r5, lr}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800ef18:	f10d 0107 	add.w	r1, sp, #7
 800ef1c:	6840      	ldr	r0, [r0, #4]
 800ef1e:	f7ff fbad 	bl	800e67c <VerifyRfFreq>
 800ef22:	b1a8      	cbz	r0, 800ef50 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800ef24:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800ef26:	2207      	movs	r2, #7
 800ef28:	2100      	movs	r1, #0
 800ef2a:	f994 0000 	ldrsb.w	r0, [r4]
 800ef2e:	f7ff f894 	bl	800e05a <RegionCommonValueInRange>
 800ef32:	b908      	cbnz	r0, 800ef38 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800ef34:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800ef38:	2205      	movs	r2, #5
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ef40:	f7ff f88b 	bl	800e05a <RegionCommonValueInRange>
 800ef44:	b908      	cbnz	r0, 800ef4a <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800ef46:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800ef4a:	4628      	mov	r0, r5
 800ef4c:	b003      	add	sp, #12
 800ef4e:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800ef50:	2506      	movs	r5, #6
 800ef52:	e7e8      	b.n	800ef26 <RegionEU868RxParamSetupReq+0x1a>

0800ef54 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	4770      	bx	lr
	...

0800ef5c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800ef5c:	b510      	push	{r4, lr}
 800ef5e:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 800ef60:	2300      	movs	r3, #0
 800ef62:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800ef66:	7803      	ldrb	r3, [r0, #0]
 800ef68:	2b0f      	cmp	r3, #15
 800ef6a:	d902      	bls.n	800ef72 <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 800ef6c:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800ef6e:	b002      	add	sp, #8
 800ef70:	bd10      	pop	{r4, pc}
 800ef72:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800ef74:	f10d 0107 	add.w	r1, sp, #7
 800ef78:	6840      	ldr	r0, [r0, #4]
 800ef7a:	f7ff fb7f 	bl	800e67c <VerifyRfFreq>
 800ef7e:	b170      	cbz	r0, 800ef9e <RegionEU868DlChannelReq+0x42>
    uint8_t status = 0x03;
 800ef80:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800ef82:	4b0b      	ldr	r3, [pc, #44]	; (800efb0 <RegionEU868DlChannelReq+0x54>)
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	7823      	ldrb	r3, [r4, #0]
 800ef88:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800ef8c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800ef90:	b909      	cbnz	r1, 800ef96 <RegionEU868DlChannelReq+0x3a>
        status &= 0xFD;
 800ef92:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 800ef96:	2803      	cmp	r0, #3
 800ef98:	d003      	beq.n	800efa2 <RegionEU868DlChannelReq+0x46>
    return status;
 800ef9a:	b240      	sxtb	r0, r0
 800ef9c:	e7e7      	b.n	800ef6e <RegionEU868DlChannelReq+0x12>
        status &= 0xFE;
 800ef9e:	2002      	movs	r0, #2
 800efa0:	e7ef      	b.n	800ef82 <RegionEU868DlChannelReq+0x26>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800efa2:	6861      	ldr	r1, [r4, #4]
 800efa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800efa8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800efac:	6051      	str	r1, [r2, #4]
 800efae:	e7f4      	b.n	800ef9a <RegionEU868DlChannelReq+0x3e>
 800efb0:	20000eec 	.word	0x20000eec

0800efb4 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800efb4:	4770      	bx	lr
	...

0800efb8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800efb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efba:	b097      	sub	sp, #92	; 0x5c
 800efbc:	4604      	mov	r4, r0
 800efbe:	460f      	mov	r7, r1
 800efc0:	4616      	mov	r6, r2
 800efc2:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800efc4:	2100      	movs	r1, #0
 800efc6:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800efca:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800efce:	9111      	str	r1, [sp, #68]	; 0x44
 800efd0:	9112      	str	r1, [sp, #72]	; 0x48
 800efd2:	9113      	str	r1, [sp, #76]	; 0x4c
 800efd4:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800efd6:	2307      	movs	r3, #7
 800efd8:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800efdc:	4b34      	ldr	r3, [pc, #208]	; (800f0b0 <RegionEU868NextChannel+0xf8>)
 800efde:	6818      	ldr	r0, [r3, #0]
 800efe0:	2201      	movs	r2, #1
 800efe2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800efe6:	f7ff f896 	bl	800e116 <RegionCommonCountChannels>
 800efea:	b938      	cbnz	r0, 800effc <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800efec:	4b30      	ldr	r3, [pc, #192]	; (800f0b0 <RegionEU868NextChannel+0xf8>)
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800eff4:	f043 0307 	orr.w	r3, r3, #7
 800eff8:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800effc:	7a63      	ldrb	r3, [r4, #9]
 800effe:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f002:	7a23      	ldrb	r3, [r4, #8]
 800f004:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f008:	4b29      	ldr	r3, [pc, #164]	; (800f0b0 <RegionEU868NextChannel+0xf8>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800f010:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f012:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800f014:	4b27      	ldr	r3, [pc, #156]	; (800f0b4 <RegionEU868NextChannel+0xfc>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800f01a:	2310      	movs	r3, #16
 800f01c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800f020:	f10d 030a 	add.w	r3, sp, #10
 800f024:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f026:	6823      	ldr	r3, [r4, #0]
 800f028:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f02a:	6863      	ldr	r3, [r4, #4]
 800f02c:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f02e:	7aa3      	ldrb	r3, [r4, #10]
 800f030:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800f034:	2306      	movs	r3, #6
 800f036:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f03a:	ab0c      	add	r3, sp, #48	; 0x30
 800f03c:	f104 020c 	add.w	r2, r4, #12
 800f040:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f044:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f048:	7d23      	ldrb	r3, [r4, #20]
 800f04a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f04e:	8ae1      	ldrh	r1, [r4, #22]
 800f050:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f054:	f7ff fb66 	bl	800e724 <GetTimeOnAir>
 800f058:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f05a:	ab03      	add	r3, sp, #12
 800f05c:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f05e:	9601      	str	r6, [sp, #4]
 800f060:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800f064:	9300      	str	r3, [sp, #0]
 800f066:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800f06a:	aa11      	add	r2, sp, #68	; 0x44
 800f06c:	4629      	mov	r1, r5
 800f06e:	a809      	add	r0, sp, #36	; 0x24
 800f070:	f7ff fa53 	bl	800e51a <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f074:	4604      	mov	r4, r0
 800f076:	b120      	cbz	r0, 800f082 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800f078:	280c      	cmp	r0, #12
 800f07a:	d00f      	beq.n	800f09c <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f07c:	4620      	mov	r0, r4
 800f07e:	b017      	add	sp, #92	; 0x5c
 800f080:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f082:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800f086:	3901      	subs	r1, #1
 800f088:	f001 fe48 	bl	8010d1c <randr>
 800f08c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800f090:	eb0d 0003 	add.w	r0, sp, r3
 800f094:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800f098:	703b      	strb	r3, [r7, #0]
 800f09a:	e7ef      	b.n	800f07c <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f09c:	4b04      	ldr	r3, [pc, #16]	; (800f0b0 <RegionEU868NextChannel+0xf8>)
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f0a4:	f043 0307 	orr.w	r3, r3, #7
 800f0a8:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800f0ac:	e7e6      	b.n	800f07c <RegionEU868NextChannel+0xc4>
 800f0ae:	bf00      	nop
 800f0b0:	20000eec 	.word	0x20000eec
 800f0b4:	20000ee8 	.word	0x20000ee8

0800f0b8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800f0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0ba:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800f0c2:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f0c4:	2d02      	cmp	r5, #2
 800f0c6:	d94e      	bls.n	800f166 <RegionEU868ChannelAdd+0xae>
 800f0c8:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800f0ca:	2d0f      	cmp	r5, #15
 800f0cc:	d84d      	bhi.n	800f16a <RegionEU868ChannelAdd+0xb2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f0ce:	6803      	ldr	r3, [r0, #0]
 800f0d0:	7a18      	ldrb	r0, [r3, #8]
 800f0d2:	f340 0003 	sbfx	r0, r0, #0, #4
 800f0d6:	2207      	movs	r2, #7
 800f0d8:	2100      	movs	r1, #0
 800f0da:	b240      	sxtb	r0, r0
 800f0dc:	f7fe ffbd 	bl	800e05a <RegionCommonValueInRange>
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	d03c      	beq.n	800f15e <RegionEU868ChannelAdd+0xa6>
    bool drInvalid = false;
 800f0e4:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f0e6:	6823      	ldr	r3, [r4, #0]
 800f0e8:	7a18      	ldrb	r0, [r3, #8]
 800f0ea:	f340 1003 	sbfx	r0, r0, #4, #4
 800f0ee:	2207      	movs	r2, #7
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	b240      	sxtb	r0, r0
 800f0f4:	f7fe ffb1 	bl	800e05a <RegionCommonValueInRange>
 800f0f8:	b900      	cbnz	r0, 800f0fc <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800f0fa:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800f0fc:	6820      	ldr	r0, [r4, #0]
 800f0fe:	7a03      	ldrb	r3, [r0, #8]
 800f100:	f343 0203 	sbfx	r2, r3, #0, #4
 800f104:	b252      	sxtb	r2, r2
 800f106:	f343 1303 	sbfx	r3, r3, #4, #4
 800f10a:	b25b      	sxtb	r3, r3
 800f10c:	429a      	cmp	r2, r3
 800f10e:	dd00      	ble.n	800f112 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800f110:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800f112:	f10d 0107 	add.w	r1, sp, #7
 800f116:	6800      	ldr	r0, [r0, #0]
 800f118:	f7ff fab0 	bl	800e67c <VerifyRfFreq>
 800f11c:	b308      	cbz	r0, 800f162 <RegionEU868ChannelAdd+0xaa>
    bool freqInvalid = false;
 800f11e:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800f120:	b106      	cbz	r6, 800f124 <RegionEU868ChannelAdd+0x6c>
 800f122:	bb2b      	cbnz	r3, 800f170 <RegionEU868ChannelAdd+0xb8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800f124:	bb36      	cbnz	r6, 800f174 <RegionEU868ChannelAdd+0xbc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800f126:	bb3b      	cbnz	r3, 800f178 <RegionEU868ChannelAdd+0xc0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800f128:	4f14      	ldr	r7, [pc, #80]	; (800f17c <RegionEU868ChannelAdd+0xc4>)
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	006e      	lsls	r6, r5, #1
 800f12e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800f132:	220c      	movs	r2, #12
 800f134:	6821      	ldr	r1, [r4, #0]
 800f136:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f13a:	f001 fdfc 	bl	8010d36 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	442e      	add	r6, r5
 800f142:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f146:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f14a:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800f14c:	2301      	movs	r3, #1
 800f14e:	40ab      	lsls	r3, r5
 800f150:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800f154:	430b      	orrs	r3, r1
 800f156:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800f15a:	2000      	movs	r0, #0
 800f15c:	e006      	b.n	800f16c <RegionEU868ChannelAdd+0xb4>
        drInvalid = true;
 800f15e:	2601      	movs	r6, #1
 800f160:	e7c1      	b.n	800f0e6 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800f162:	2301      	movs	r3, #1
 800f164:	e7dc      	b.n	800f120 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f166:	2006      	movs	r0, #6
 800f168:	e000      	b.n	800f16c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f16a:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f16c:	b003      	add	sp, #12
 800f16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f170:	2006      	movs	r0, #6
 800f172:	e7fb      	b.n	800f16c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800f174:	2005      	movs	r0, #5
 800f176:	e7f9      	b.n	800f16c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800f178:	2004      	movs	r0, #4
 800f17a:	e7f7      	b.n	800f16c <RegionEU868ChannelAdd+0xb4>
 800f17c:	20000eec 	.word	0x20000eec

0800f180 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800f180:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f182:	2902      	cmp	r1, #2
 800f184:	d801      	bhi.n	800f18a <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800f186:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800f188:	4770      	bx	lr
{
 800f18a:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800f18c:	4b09      	ldr	r3, [pc, #36]	; (800f1b4 <RegionEU868ChannelsRemove+0x34>)
 800f18e:	6818      	ldr	r0, [r3, #0]
 800f190:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800f194:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f198:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f19c:	2200      	movs	r2, #0
 800f19e:	f840 200c 	str.w	r2, [r0, ip]
 800f1a2:	605a      	str	r2, [r3, #4]
 800f1a4:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800f1a6:	2210      	movs	r2, #16
 800f1a8:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f1ac:	f7fe ff97 	bl	800e0de <RegionCommonChanDisable>
}
 800f1b0:	bd08      	pop	{r3, pc}
 800f1b2:	bf00      	nop
 800f1b4:	20000eec 	.word	0x20000eec

0800f1b8 <RegionEU868ApplyCFList>:
{
 800f1b8:	b570      	push	{r4, r5, r6, lr}
 800f1ba:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800f1bc:	2350      	movs	r3, #80	; 0x50
 800f1be:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800f1c2:	7a03      	ldrb	r3, [r0, #8]
 800f1c4:	2b10      	cmp	r3, #16
 800f1c6:	d136      	bne.n	800f236 <RegionEU868ApplyCFList+0x7e>
 800f1c8:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800f1ca:	6843      	ldr	r3, [r0, #4]
 800f1cc:	7bdd      	ldrb	r5, [r3, #15]
 800f1ce:	2d00      	cmp	r5, #0
 800f1d0:	d131      	bne.n	800f236 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f1d2:	2403      	movs	r4, #3
 800f1d4:	e01b      	b.n	800f20e <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800f1d6:	6872      	ldr	r2, [r6, #4]
 800f1d8:	5d53      	ldrb	r3, [r2, r5]
 800f1da:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800f1dc:	442a      	add	r2, r5
 800f1de:	7851      	ldrb	r1, [r2, #1]
 800f1e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f1e4:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800f1e6:	7892      	ldrb	r2, [r2, #2]
 800f1e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1ec:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800f1ee:	2264      	movs	r2, #100	; 0x64
 800f1f0:	fb02 f303 	mul.w	r3, r2, r3
 800f1f4:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	9304      	str	r3, [sp, #16]
 800f1fa:	e011      	b.n	800f220 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800f1fc:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800f200:	4668      	mov	r0, sp
 800f202:	f7ff ffbd 	bl	800f180 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f206:	3503      	adds	r5, #3
 800f208:	b2ed      	uxtb	r5, r5
 800f20a:	3401      	adds	r4, #1
 800f20c:	b2e4      	uxtb	r4, r4
 800f20e:	2c0f      	cmp	r4, #15
 800f210:	d811      	bhi.n	800f236 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800f212:	2c07      	cmp	r4, #7
 800f214:	d9df      	bls.n	800f1d6 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800f216:	2300      	movs	r3, #0
 800f218:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800f21a:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800f21e:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800f220:	9b03      	ldr	r3, [sp, #12]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d0ea      	beq.n	800f1fc <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800f226:	ab03      	add	r3, sp, #12
 800f228:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800f22a:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800f22e:	a801      	add	r0, sp, #4
 800f230:	f7ff ff42 	bl	800f0b8 <RegionEU868ChannelAdd>
 800f234:	e7e7      	b.n	800f206 <RegionEU868ApplyCFList+0x4e>
}
 800f236:	b006      	add	sp, #24
 800f238:	bd70      	pop	{r4, r5, r6, pc}

0800f23a <RegionEU868NewChannelReq>:
{
 800f23a:	b500      	push	{lr}
 800f23c:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800f23e:	6803      	ldr	r3, [r0, #0]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	b952      	cbnz	r2, 800f25a <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800f244:	7903      	ldrb	r3, [r0, #4]
 800f246:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800f24a:	a801      	add	r0, sp, #4
 800f24c:	f7ff ff98 	bl	800f180 <RegionEU868ChannelsRemove>
 800f250:	b1d0      	cbz	r0, 800f288 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800f252:	2003      	movs	r0, #3
}
 800f254:	b005      	add	sp, #20
 800f256:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800f25a:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800f25c:	7903      	ldrb	r3, [r0, #4]
 800f25e:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800f262:	a802      	add	r0, sp, #8
 800f264:	f7ff ff28 	bl	800f0b8 <RegionEU868ChannelAdd>
 800f268:	2806      	cmp	r0, #6
 800f26a:	d80b      	bhi.n	800f284 <RegionEU868NewChannelReq+0x4a>
 800f26c:	e8df f000 	tbb	[pc, r0]
 800f270:	0a0a0a04 	.word	0x0a0a0a04
 800f274:	060e      	.short	0x060e
 800f276:	08          	.byte	0x08
 800f277:	00          	.byte	0x00
 800f278:	2003      	movs	r0, #3
 800f27a:	e7eb      	b.n	800f254 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800f27c:	2001      	movs	r0, #1
                break;
 800f27e:	e7e9      	b.n	800f254 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f280:	2000      	movs	r0, #0
                break;
 800f282:	e7e7      	b.n	800f254 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f284:	2000      	movs	r0, #0
                break;
 800f286:	e7e5      	b.n	800f254 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800f288:	2000      	movs	r0, #0
 800f28a:	e7e3      	b.n	800f254 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800f28c:	2002      	movs	r0, #2
 800f28e:	e7e1      	b.n	800f254 <RegionEU868NewChannelReq+0x1a>

0800f290 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800f290:	1a88      	subs	r0, r1, r2
 800f292:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800f294:	2800      	cmp	r0, #0
 800f296:	db01      	blt.n	800f29c <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800f298:	b2c0      	uxtb	r0, r0
 800f29a:	4770      	bx	lr
        datarate = DR_0;
 800f29c:	2000      	movs	r0, #0
 800f29e:	e7fb      	b.n	800f298 <RegionEU868ApplyDrOffset+0x8>

0800f2a0 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800f2a0:	b510      	push	{r4, lr}
 800f2a2:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800f2a4:	4b10      	ldr	r3, [pc, #64]	; (800f2e8 <VerifyRfFreq+0x48>)
 800f2a6:	6a1b      	ldr	r3, [r3, #32]
 800f2a8:	4798      	blx	r3
 800f2aa:	b1c8      	cbz	r0, 800f2e0 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800f2ac:	4b0f      	ldr	r3, [pc, #60]	; (800f2ec <VerifyRfFreq+0x4c>)
 800f2ae:	4423      	add	r3, r4
 800f2b0:	4a0f      	ldr	r2, [pc, #60]	; (800f2f0 <VerifyRfFreq+0x50>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d813      	bhi.n	800f2de <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800f2b6:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800f2ba:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800f2be:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800f2c2:	fba2 1203 	umull	r1, r2, r2, r3
 800f2c6:	0c92      	lsrs	r2, r2, #18
 800f2c8:	490a      	ldr	r1, [pc, #40]	; (800f2f4 <VerifyRfFreq+0x54>)
 800f2ca:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800f2ce:	b942      	cbnz	r2, 800f2e2 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800f2d0:	4b09      	ldr	r3, [pc, #36]	; (800f2f8 <VerifyRfFreq+0x58>)
 800f2d2:	4423      	add	r3, r4
 800f2d4:	4a09      	ldr	r2, [pc, #36]	; (800f2fc <VerifyRfFreq+0x5c>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d902      	bls.n	800f2e0 <VerifyRfFreq+0x40>
    {
        return false;
 800f2da:	2000      	movs	r0, #0
 800f2dc:	e000      	b.n	800f2e0 <VerifyRfFreq+0x40>
        return false;
 800f2de:	2000      	movs	r0, #0
    }
    return true;
}
 800f2e0:	bd10      	pop	{r4, pc}
        return false;
 800f2e2:	2000      	movs	r0, #0
 800f2e4:	e7fc      	b.n	800f2e0 <VerifyRfFreq+0x40>
 800f2e6:	bf00      	nop
 800f2e8:	0801458c 	.word	0x0801458c
 800f2ec:	c8f78f60 	.word	0xc8f78f60
 800f2f0:	00401640 	.word	0x00401640
 800f2f4:	000927c0 	.word	0x000927c0
 800f2f8:	ca37fea0 	.word	0xca37fea0
 800f2fc:	01808580 	.word	0x01808580

0800f300 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800f300:	b570      	push	{r4, r5, r6, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800f306:	4b0a      	ldr	r3, [pc, #40]	; (800f330 <GetTimeOnAir+0x30>)
 800f308:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800f30a:	490a      	ldr	r1, [pc, #40]	; (800f334 <GetTimeOnAir+0x34>)
 800f30c:	f7ff f972 	bl	800e5f4 <RegionCommonGetBandwidth>
 800f310:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800f312:	4b09      	ldr	r3, [pc, #36]	; (800f338 <GetTimeOnAir+0x38>)
 800f314:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800f316:	2001      	movs	r0, #1
 800f318:	9003      	str	r0, [sp, #12]
 800f31a:	b2e4      	uxtb	r4, r4
 800f31c:	9402      	str	r4, [sp, #8]
 800f31e:	2200      	movs	r2, #0
 800f320:	9201      	str	r2, [sp, #4]
 800f322:	2208      	movs	r2, #8
 800f324:	9200      	str	r2, [sp, #0]
 800f326:	4603      	mov	r3, r0
 800f328:	4632      	mov	r2, r6
 800f32a:	47a8      	blx	r5
}
 800f32c:	b004      	add	sp, #16
 800f32e:	bd70      	pop	{r4, r5, r6, pc}
 800f330:	08013fd0 	.word	0x08013fd0
 800f334:	08013f7c 	.word	0x08013f7c
 800f338:	0801458c 	.word	0x0801458c

0800f33c <LimitTxPower>:
{
 800f33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f33e:	4606      	mov	r6, r0
 800f340:	4615      	mov	r5, r2
 800f342:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800f344:	f7ff f952 	bl	800e5ec <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800f348:	2d04      	cmp	r5, #4
 800f34a:	d105      	bne.n	800f358 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800f34c:	4634      	mov	r4, r6
 800f34e:	2e02      	cmp	r6, #2
 800f350:	bfb8      	it	lt
 800f352:	2402      	movlt	r4, #2
}
 800f354:	4620      	mov	r0, r4
 800f356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f358:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800f35a:	2204      	movs	r2, #4
 800f35c:	2100      	movs	r1, #0
 800f35e:	4638      	mov	r0, r7
 800f360:	f7fe fed9 	bl	800e116 <RegionCommonCountChannels>
 800f364:	2831      	cmp	r0, #49	; 0x31
 800f366:	d8f5      	bhi.n	800f354 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800f368:	4634      	mov	r4, r6
 800f36a:	2e05      	cmp	r6, #5
 800f36c:	bfb8      	it	lt
 800f36e:	2405      	movlt	r4, #5
 800f370:	e7f0      	b.n	800f354 <LimitTxPower+0x18>
	...

0800f374 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800f374:	b500      	push	{lr}
 800f376:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800f378:	2300      	movs	r3, #0
 800f37a:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800f37c:	7803      	ldrb	r3, [r0, #0]
 800f37e:	3b01      	subs	r3, #1
 800f380:	2b37      	cmp	r3, #55	; 0x37
 800f382:	d81f      	bhi.n	800f3c4 <RegionUS915GetPhyParam+0x50>
 800f384:	e8df f003 	tbb	[pc, r3]
 800f388:	1e1e1e1c 	.word	0x1e1e1e1c
 800f38c:	1e1e1e1e 	.word	0x1e1e1e1e
 800f390:	3e3b1e1e 	.word	0x3e3b1e1e
 800f394:	4d1e4741 	.word	0x4d1e4741
 800f398:	5d595551 	.word	0x5d595551
 800f39c:	6d6a1e61 	.word	0x6d6a1e61
 800f3a0:	7f7c7670 	.word	0x7f7c7670
 800f3a4:	86831e1e 	.word	0x86831e1e
 800f3a8:	1e1e1e23 	.word	0x1e1e1e23
 800f3ac:	1e1e1e1e 	.word	0x1e1e1e1e
 800f3b0:	1e1e1e1e 	.word	0x1e1e1e1e
 800f3b4:	90891e1e 	.word	0x90891e1e
 800f3b8:	a01e9d9a 	.word	0xa01e9d9a
 800f3bc:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800f3c0:	2308      	movs	r3, #8
 800f3c2:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800f3c4:	9804      	ldr	r0, [sp, #16]
 800f3c6:	9005      	str	r0, [sp, #20]
}
 800f3c8:	b007      	add	sp, #28
 800f3ca:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800f3ce:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f3d2:	f88d 3004 	strb.w	r3, [sp, #4]
 800f3d6:	2304      	movs	r3, #4
 800f3d8:	f88d 3005 	strb.w	r3, [sp, #5]
 800f3dc:	2300      	movs	r3, #0
 800f3de:	f88d 3006 	strb.w	r3, [sp, #6]
 800f3e2:	2348      	movs	r3, #72	; 0x48
 800f3e4:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800f3e8:	4b44      	ldr	r3, [pc, #272]	; (800f4fc <RegionUS915GetPhyParam+0x188>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800f3f0:	9202      	str	r2, [sp, #8]
 800f3f2:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800f3f4:	a801      	add	r0, sp, #4
 800f3f6:	f7ff f8da 	bl	800e5ae <RegionCommonGetNextLowerTxDr>
 800f3fa:	9004      	str	r0, [sp, #16]
            break;
 800f3fc:	e7e2      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800f3fe:	2340      	movs	r3, #64	; 0x40
 800f400:	9304      	str	r3, [sp, #16]
            break;
 800f402:	e7df      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800f404:	2320      	movs	r3, #32
 800f406:	9304      	str	r3, [sp, #16]
            break;
 800f408:	e7dc      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800f40a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f40e:	4a3c      	ldr	r2, [pc, #240]	; (800f500 <RegionUS915GetPhyParam+0x18c>)
 800f410:	5cd3      	ldrb	r3, [r2, r3]
 800f412:	9304      	str	r3, [sp, #16]
            break;
 800f414:	e7d6      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800f416:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f41a:	4a3a      	ldr	r2, [pc, #232]	; (800f504 <RegionUS915GetPhyParam+0x190>)
 800f41c:	5cd3      	ldrb	r3, [r2, r3]
 800f41e:	9304      	str	r3, [sp, #16]
            break;
 800f420:	e7d0      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800f422:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f426:	9304      	str	r3, [sp, #16]
            break;
 800f428:	e7cc      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800f42a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f42e:	9304      	str	r3, [sp, #16]
            break;
 800f430:	e7c8      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800f432:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f436:	9304      	str	r3, [sp, #16]
            break;
 800f438:	e7c4      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800f43a:	f241 3388 	movw	r3, #5000	; 0x1388
 800f43e:	9304      	str	r3, [sp, #16]
            break;
 800f440:	e7c0      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800f442:	f241 7370 	movw	r3, #6000	; 0x1770
 800f446:	9304      	str	r3, [sp, #16]
            break;
 800f448:	e7bc      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800f44a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f44e:	482e      	ldr	r0, [pc, #184]	; (800f508 <RegionUS915GetPhyParam+0x194>)
 800f450:	f001 fc64 	bl	8010d1c <randr>
 800f454:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800f458:	9004      	str	r0, [sp, #16]
            break;
 800f45a:	e7b3      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800f45c:	4b2b      	ldr	r3, [pc, #172]	; (800f50c <RegionUS915GetPhyParam+0x198>)
 800f45e:	9304      	str	r3, [sp, #16]
            break;
 800f460:	e7b0      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800f462:	2308      	movs	r3, #8
 800f464:	9304      	str	r3, [sp, #16]
            break;
 800f466:	e7ad      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f468:	4b24      	ldr	r3, [pc, #144]	; (800f4fc <RegionUS915GetPhyParam+0x188>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f470:	9304      	str	r3, [sp, #16]
            break;
 800f472:	e7a7      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800f474:	4b21      	ldr	r3, [pc, #132]	; (800f4fc <RegionUS915GetPhyParam+0x188>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800f47c:	9304      	str	r3, [sp, #16]
            break;
 800f47e:	e7a1      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800f480:	2348      	movs	r3, #72	; 0x48
 800f482:	9304      	str	r3, [sp, #16]
            break;
 800f484:	e79e      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800f486:	4b1d      	ldr	r3, [pc, #116]	; (800f4fc <RegionUS915GetPhyParam+0x188>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	9304      	str	r3, [sp, #16]
            break;
 800f48c:	e79a      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800f48e:	4b20      	ldr	r3, [pc, #128]	; (800f510 <RegionUS915GetPhyParam+0x19c>)
 800f490:	9304      	str	r3, [sp, #16]
            break;
 800f492:	e797      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800f494:	2300      	movs	r3, #0
 800f496:	9304      	str	r3, [sp, #16]
            break;
 800f498:	e794      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f49a:	4a1e      	ldr	r2, [pc, #120]	; (800f514 <RegionUS915GetPhyParam+0x1a0>)
 800f49c:	491b      	ldr	r1, [pc, #108]	; (800f50c <RegionUS915GetPhyParam+0x198>)
 800f49e:	7900      	ldrb	r0, [r0, #4]
 800f4a0:	f7fe fd0c 	bl	800debc <RegionBaseUSCalcDownlinkFrequency>
 800f4a4:	9004      	str	r0, [sp, #16]
            break;
 800f4a6:	e78d      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800f4a8:	2317      	movs	r3, #23
 800f4aa:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800f4ae:	2304      	movs	r3, #4
 800f4b0:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800f4b4:	2303      	movs	r3, #3
 800f4b6:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800f4ba:	e783      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800f4bc:	2308      	movs	r3, #8
 800f4be:	9304      	str	r3, [sp, #16]
            break;
 800f4c0:	e780      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f4c2:	2308      	movs	r3, #8
 800f4c4:	9304      	str	r3, [sp, #16]
            break;
 800f4c6:	e77d      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800f4c8:	4a12      	ldr	r2, [pc, #72]	; (800f514 <RegionUS915GetPhyParam+0x1a0>)
 800f4ca:	4910      	ldr	r1, [pc, #64]	; (800f50c <RegionUS915GetPhyParam+0x198>)
 800f4cc:	7900      	ldrb	r0, [r0, #4]
 800f4ce:	f7fe fcf5 	bl	800debc <RegionBaseUSCalcDownlinkFrequency>
 800f4d2:	9004      	str	r0, [sp, #16]
            break;
 800f4d4:	e776      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800f4d6:	2308      	movs	r3, #8
 800f4d8:	9304      	str	r3, [sp, #16]
            break;
 800f4da:	e773      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800f4dc:	2308      	movs	r3, #8
 800f4de:	9304      	str	r3, [sp, #16]
            break;
 800f4e0:	e770      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800f4e2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f4e6:	4a0c      	ldr	r2, [pc, #48]	; (800f518 <RegionUS915GetPhyParam+0x1a4>)
 800f4e8:	5cd3      	ldrb	r3, [r2, r3]
 800f4ea:	9304      	str	r3, [sp, #16]
            break;
 800f4ec:	e76a      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800f4ee:	490b      	ldr	r1, [pc, #44]	; (800f51c <RegionUS915GetPhyParam+0x1a8>)
 800f4f0:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800f4f4:	f7ff f87e 	bl	800e5f4 <RegionCommonGetBandwidth>
 800f4f8:	9004      	str	r0, [sp, #16]
            break;
 800f4fa:	e763      	b.n	800f3c4 <RegionUS915GetPhyParam+0x50>
 800f4fc:	20000ef8 	.word	0x20000ef8
 800f500:	08013ff0 	.word	0x08013ff0
 800f504:	08013fe0 	.word	0x08013fe0
 800f508:	fffffc18 	.word	0xfffffc18
 800f50c:	370870a0 	.word	0x370870a0
 800f510:	4200999a 	.word	0x4200999a
 800f514:	000927c0 	.word	0x000927c0
 800f518:	08013fd0 	.word	0x08013fd0
 800f51c:	08013f7c 	.word	0x08013f7c

0800f520 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f520:	b510      	push	{r4, lr}
 800f522:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800f524:	4b0b      	ldr	r3, [pc, #44]	; (800f554 <RegionUS915SetBandTxDone+0x34>)
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	7803      	ldrb	r3, [r0, #0]
 800f52a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f52e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f532:	7a5b      	ldrb	r3, [r3, #9]
 800f534:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800f538:	4b07      	ldr	r3, [pc, #28]	; (800f558 <RegionUS915SetBandTxDone+0x38>)
 800f53a:	681c      	ldr	r4, [r3, #0]
 800f53c:	6903      	ldr	r3, [r0, #16]
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	68c3      	ldr	r3, [r0, #12]
 800f542:	7842      	ldrb	r2, [r0, #1]
 800f544:	6881      	ldr	r1, [r0, #8]
 800f546:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800f54a:	f7fe fe09 	bl	800e160 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800f54e:	b002      	add	sp, #8
 800f550:	bd10      	pop	{r4, pc}
 800f552:	bf00      	nop
 800f554:	20000ef8 	.word	0x20000ef8
 800f558:	20000ef0 	.word	0x20000ef0

0800f55c <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800f55c:	b510      	push	{r4, lr}
 800f55e:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800f560:	2301      	movs	r3, #1
 800f562:	f8ad 3000 	strh.w	r3, [sp]
 800f566:	2300      	movs	r3, #0
 800f568:	f88d 3002 	strb.w	r3, [sp, #2]
 800f56c:	9301      	str	r3, [sp, #4]
 800f56e:	9302      	str	r3, [sp, #8]
 800f570:	9303      	str	r3, [sp, #12]
 800f572:	9304      	str	r3, [sp, #16]
 800f574:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800f578:	7b04      	ldrb	r4, [r0, #12]
 800f57a:	b174      	cbz	r4, 800f59a <RegionUS915InitDefaults+0x3e>
 800f57c:	3c01      	subs	r4, #1
 800f57e:	b2e4      	uxtb	r4, r4
 800f580:	2c01      	cmp	r4, #1
 800f582:	d87e      	bhi.n	800f682 <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f584:	4b40      	ldr	r3, [pc, #256]	; (800f688 <RegionUS915InitDefaults+0x12c>)
 800f586:	6818      	ldr	r0, [r3, #0]
 800f588:	2206      	movs	r2, #6
 800f58a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800f58e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f592:	f7fe fdd6 	bl	800e142 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 800f596:	2300      	movs	r3, #0
 800f598:	e071      	b.n	800f67e <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800f59a:	6803      	ldr	r3, [r0, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d070      	beq.n	800f682 <RegionUS915InitDefaults+0x126>
 800f5a0:	6842      	ldr	r2, [r0, #4]
 800f5a2:	2a00      	cmp	r2, #0
 800f5a4:	d06d      	beq.n	800f682 <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800f5a6:	4939      	ldr	r1, [pc, #228]	; (800f68c <RegionUS915InitDefaults+0x130>)
 800f5a8:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800f5aa:	4937      	ldr	r1, [pc, #220]	; (800f688 <RegionUS915InitDefaults+0x12c>)
 800f5ac:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800f5ae:	6880      	ldr	r0, [r0, #8]
 800f5b0:	4a37      	ldr	r2, [pc, #220]	; (800f690 <RegionUS915InitDefaults+0x134>)
 800f5b2:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800f5b8:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800f5ba:	2218      	movs	r2, #24
 800f5bc:	4669      	mov	r1, sp
 800f5be:	f001 fbba 	bl	8010d36 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f5c2:	e011      	b.n	800f5e8 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800f5c4:	4b30      	ldr	r3, [pc, #192]	; (800f688 <RegionUS915InitDefaults+0x12c>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	4932      	ldr	r1, [pc, #200]	; (800f694 <RegionUS915InitDefaults+0x138>)
 800f5ca:	4a33      	ldr	r2, [pc, #204]	; (800f698 <RegionUS915InitDefaults+0x13c>)
 800f5cc:	fb01 2204 	mla	r2, r1, r4, r2
 800f5d0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800f5d4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800f5d8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800f5dc:	2230      	movs	r2, #48	; 0x30
 800f5de:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800f5e4:	3401      	adds	r4, #1
 800f5e6:	b2e4      	uxtb	r4, r4
 800f5e8:	2c3f      	cmp	r4, #63	; 0x3f
 800f5ea:	d9eb      	bls.n	800f5c4 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f5ec:	2340      	movs	r3, #64	; 0x40
 800f5ee:	2b47      	cmp	r3, #71	; 0x47
 800f5f0:	d814      	bhi.n	800f61c <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800f5f2:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800f5f6:	4a24      	ldr	r2, [pc, #144]	; (800f688 <RegionUS915InitDefaults+0x12c>)
 800f5f8:	6812      	ldr	r2, [r2, #0]
 800f5fa:	4c28      	ldr	r4, [pc, #160]	; (800f69c <RegionUS915InitDefaults+0x140>)
 800f5fc:	4928      	ldr	r1, [pc, #160]	; (800f6a0 <RegionUS915InitDefaults+0x144>)
 800f5fe:	fb04 1100 	mla	r1, r4, r0, r1
 800f602:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800f606:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800f60a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800f60e:	2144      	movs	r1, #68	; 0x44
 800f610:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800f612:	2100      	movs	r1, #0
 800f614:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800f616:	3301      	adds	r3, #1
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	e7e8      	b.n	800f5ee <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800f61c:	4c1a      	ldr	r4, [pc, #104]	; (800f688 <RegionUS915InitDefaults+0x12c>)
 800f61e:	6820      	ldr	r0, [r4, #0]
 800f620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f624:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800f628:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800f62c:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800f630:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800f634:	23ff      	movs	r3, #255	; 0xff
 800f636:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800f63a:	2300      	movs	r3, #0
 800f63c:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f640:	2206      	movs	r2, #6
 800f642:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800f646:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f64a:	f7fe fd7a 	bl	800e142 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800f64e:	6821      	ldr	r1, [r4, #0]
 800f650:	2206      	movs	r2, #6
 800f652:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800f656:	4b0d      	ldr	r3, [pc, #52]	; (800f68c <RegionUS915InitDefaults+0x130>)
 800f658:	6818      	ldr	r0, [r3, #0]
 800f65a:	f7fe fd72 	bl	800e142 <RegionCommonChanMaskCopy>
            break;
 800f65e:	e010      	b.n	800f682 <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800f660:	4a0a      	ldr	r2, [pc, #40]	; (800f68c <RegionUS915InitDefaults+0x130>)
 800f662:	6811      	ldr	r1, [r2, #0]
 800f664:	4a08      	ldr	r2, [pc, #32]	; (800f688 <RegionUS915InitDefaults+0x12c>)
 800f666:	6812      	ldr	r2, [r2, #0]
 800f668:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800f66c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800f670:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f674:	4002      	ands	r2, r0
 800f676:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800f67a:	3301      	adds	r3, #1
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	2b05      	cmp	r3, #5
 800f680:	d9ee      	bls.n	800f660 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800f682:	b006      	add	sp, #24
 800f684:	bd10      	pop	{r4, pc}
 800f686:	bf00      	nop
 800f688:	20000ef8 	.word	0x20000ef8
 800f68c:	20000ef4 	.word	0x20000ef4
 800f690:	20000ef0 	.word	0x20000ef0
 800f694:	00030d40 	.word	0x00030d40
 800f698:	35c80160 	.word	0x35c80160
 800f69c:	00186a00 	.word	0x00186a00
 800f6a0:	35d2afc0 	.word	0x35d2afc0

0800f6a4 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800f6a4:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800f6a6:	290a      	cmp	r1, #10
 800f6a8:	d833      	bhi.n	800f712 <RegionUS915Verify+0x6e>
 800f6aa:	e8df f001 	tbb	[pc, r1]
 800f6ae:	3206      	.short	0x3206
 800f6b0:	0a323232 	.word	0x0a323232
 800f6b4:	28321e14 	.word	0x28321e14
 800f6b8:	28          	.byte	0x28
 800f6b9:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800f6ba:	6800      	ldr	r0, [r0, #0]
 800f6bc:	f7ff fdf0 	bl	800f2a0 <VerifyRfFreq>
 800f6c0:	e028      	b.n	800f714 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800f6c2:	2204      	movs	r2, #4
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	f990 0000 	ldrsb.w	r0, [r0]
 800f6ca:	f7fe fcc6 	bl	800e05a <RegionCommonValueInRange>
 800f6ce:	3800      	subs	r0, #0
 800f6d0:	bf18      	it	ne
 800f6d2:	2001      	movne	r0, #1
 800f6d4:	e01e      	b.n	800f714 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800f6d6:	2205      	movs	r2, #5
 800f6d8:	2100      	movs	r1, #0
 800f6da:	f990 0000 	ldrsb.w	r0, [r0]
 800f6de:	f7fe fcbc 	bl	800e05a <RegionCommonValueInRange>
 800f6e2:	3800      	subs	r0, #0
 800f6e4:	bf18      	it	ne
 800f6e6:	2001      	movne	r0, #1
 800f6e8:	e014      	b.n	800f714 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800f6ea:	220d      	movs	r2, #13
 800f6ec:	2108      	movs	r1, #8
 800f6ee:	f990 0000 	ldrsb.w	r0, [r0]
 800f6f2:	f7fe fcb2 	bl	800e05a <RegionCommonValueInRange>
 800f6f6:	3800      	subs	r0, #0
 800f6f8:	bf18      	it	ne
 800f6fa:	2001      	movne	r0, #1
 800f6fc:	e00a      	b.n	800f714 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800f6fe:	220e      	movs	r2, #14
 800f700:	2100      	movs	r1, #0
 800f702:	f990 0000 	ldrsb.w	r0, [r0]
 800f706:	f7fe fca8 	bl	800e05a <RegionCommonValueInRange>
 800f70a:	3800      	subs	r0, #0
 800f70c:	bf18      	it	ne
 800f70e:	2001      	movne	r0, #1
 800f710:	e000      	b.n	800f714 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800f712:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800f714:	bd08      	pop	{r3, pc}
	...

0800f718 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800f718:	7a03      	ldrb	r3, [r0, #8]
 800f71a:	2b10      	cmp	r3, #16
 800f71c:	d134      	bne.n	800f788 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800f71e:	6843      	ldr	r3, [r0, #4]
 800f720:	7bdb      	ldrb	r3, [r3, #15]
 800f722:	2b01      	cmp	r3, #1
 800f724:	d130      	bne.n	800f788 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800f726:	2200      	movs	r2, #0
 800f728:	4613      	mov	r3, r2
 800f72a:	2a04      	cmp	r2, #4
 800f72c:	d82b      	bhi.n	800f786 <RegionUS915ApplyCFList+0x6e>
{
 800f72e:	b530      	push	{r4, r5, lr}
 800f730:	e010      	b.n	800f754 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800f732:	4916      	ldr	r1, [pc, #88]	; (800f78c <RegionUS915ApplyCFList+0x74>)
 800f734:	680d      	ldr	r5, [r1, #0]
 800f736:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 800f73a:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 800f73e:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 800f742:	4021      	ands	r1, r4
 800f744:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800f748:	3301      	adds	r3, #1
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	3202      	adds	r2, #2
 800f74e:	b2d2      	uxtb	r2, r2
 800f750:	2b04      	cmp	r3, #4
 800f752:	d817      	bhi.n	800f784 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800f754:	6841      	ldr	r1, [r0, #4]
 800f756:	4c0e      	ldr	r4, [pc, #56]	; (800f790 <RegionUS915ApplyCFList+0x78>)
 800f758:	6824      	ldr	r4, [r4, #0]
 800f75a:	469c      	mov	ip, r3
 800f75c:	5c89      	ldrb	r1, [r1, r2]
 800f75e:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800f762:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800f766:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800f76a:	4496      	add	lr, r2
 800f76c:	f89e e001 	ldrb.w	lr, [lr, #1]
 800f770:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800f774:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800f778:	2b04      	cmp	r3, #4
 800f77a:	d1da      	bne.n	800f732 <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800f77c:	b2c9      	uxtb	r1, r1
 800f77e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800f782:	e7d6      	b.n	800f732 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800f784:	bd30      	pop	{r4, r5, pc}
 800f786:	4770      	bx	lr
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	20000ef4 	.word	0x20000ef4
 800f790:	20000ef8 	.word	0x20000ef8

0800f794 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800f794:	b570      	push	{r4, r5, r6, lr}
 800f796:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800f798:	2204      	movs	r2, #4
 800f79a:	2100      	movs	r1, #0
 800f79c:	6800      	ldr	r0, [r0, #0]
 800f79e:	f7fe fcba 	bl	800e116 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800f7a2:	2801      	cmp	r0, #1
 800f7a4:	d031      	beq.n	800f80a <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800f7a6:	792c      	ldrb	r4, [r5, #4]
 800f7a8:	b11c      	cbz	r4, 800f7b2 <RegionUS915ChanMaskSet+0x1e>
 800f7aa:	2c01      	cmp	r4, #1
 800f7ac:	d023      	beq.n	800f7f6 <RegionUS915ChanMaskSet+0x62>
 800f7ae:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800f7b0:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f7b2:	4e17      	ldr	r6, [pc, #92]	; (800f810 <RegionUS915ChanMaskSet+0x7c>)
 800f7b4:	6830      	ldr	r0, [r6, #0]
 800f7b6:	2206      	movs	r2, #6
 800f7b8:	6829      	ldr	r1, [r5, #0]
 800f7ba:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f7be:	f7fe fcc0 	bl	800e142 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800f7c2:	6830      	ldr	r0, [r6, #0]
 800f7c4:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 800f7c8:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f7d2:	e00c      	b.n	800f7ee <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800f7d4:	4b0f      	ldr	r3, [pc, #60]	; (800f814 <RegionUS915ChanMaskSet+0x80>)
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800f7dc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800f7e0:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 800f7e4:	400b      	ands	r3, r1
 800f7e6:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800f7ea:	3401      	adds	r4, #1
 800f7ec:	b2e4      	uxtb	r4, r4
 800f7ee:	2c05      	cmp	r4, #5
 800f7f0:	d9f0      	bls.n	800f7d4 <RegionUS915ChanMaskSet+0x40>
    return true;
 800f7f2:	2001      	movs	r0, #1
 800f7f4:	e7dc      	b.n	800f7b0 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f7f6:	4b06      	ldr	r3, [pc, #24]	; (800f810 <RegionUS915ChanMaskSet+0x7c>)
 800f7f8:	6818      	ldr	r0, [r3, #0]
 800f7fa:	2206      	movs	r2, #6
 800f7fc:	6829      	ldr	r1, [r5, #0]
 800f7fe:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800f802:	f7fe fc9e 	bl	800e142 <RegionCommonChanMaskCopy>
    return true;
 800f806:	2001      	movs	r0, #1
            break;
 800f808:	e7d2      	b.n	800f7b0 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800f80a:	2000      	movs	r0, #0
 800f80c:	e7d0      	b.n	800f7b0 <RegionUS915ChanMaskSet+0x1c>
 800f80e:	bf00      	nop
 800f810:	20000ef8 	.word	0x20000ef8
 800f814:	20000ef4 	.word	0x20000ef4

0800f818 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800f818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f81a:	b083      	sub	sp, #12
 800f81c:	460e      	mov	r6, r1
 800f81e:	4617      	mov	r7, r2
 800f820:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800f822:	280d      	cmp	r0, #13
 800f824:	bfa8      	it	ge
 800f826:	200d      	movge	r0, #13
 800f828:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800f82a:	4d0f      	ldr	r5, [pc, #60]	; (800f868 <RegionUS915ComputeRxWindowParameters+0x50>)
 800f82c:	4629      	mov	r1, r5
 800f82e:	f7fe fee1 	bl	800e5f4 <RegionCommonGetBandwidth>
 800f832:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800f834:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f838:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800f83c:	4a0b      	ldr	r2, [pc, #44]	; (800f86c <RegionUS915ComputeRxWindowParameters+0x54>)
 800f83e:	5cd0      	ldrb	r0, [r2, r3]
 800f840:	f7fe fda6 	bl	800e390 <RegionCommonComputeSymbolTimeLoRa>
 800f844:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800f846:	4b0a      	ldr	r3, [pc, #40]	; (800f870 <RegionUS915ComputeRxWindowParameters+0x58>)
 800f848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f84a:	4798      	blx	r3
 800f84c:	4603      	mov	r3, r0
 800f84e:	f104 020c 	add.w	r2, r4, #12
 800f852:	9201      	str	r2, [sp, #4]
 800f854:	3408      	adds	r4, #8
 800f856:	9400      	str	r4, [sp, #0]
 800f858:	463a      	mov	r2, r7
 800f85a:	4631      	mov	r1, r6
 800f85c:	4628      	mov	r0, r5
 800f85e:	f7fe fda5 	bl	800e3ac <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800f862:	b003      	add	sp, #12
 800f864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f866:	bf00      	nop
 800f868:	08013f7c 	.word	0x08013f7c
 800f86c:	08013fd0 	.word	0x08013fd0
 800f870:	0801458c 	.word	0x0801458c

0800f874 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f878:	b08b      	sub	sp, #44	; 0x2c
 800f87a:	4604      	mov	r4, r0
 800f87c:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800f87e:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800f882:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800f884:	4b22      	ldr	r3, [pc, #136]	; (800f910 <RegionUS915RxConfig+0x9c>)
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	4798      	blx	r3
 800f88a:	2800      	cmp	r0, #0
 800f88c:	d13d      	bne.n	800f90a <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800f88e:	7ce3      	ldrb	r3, [r4, #19]
 800f890:	b933      	cbnz	r3, 800f8a0 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800f892:	7823      	ldrb	r3, [r4, #0]
 800f894:	f003 0307 	and.w	r3, r3, #7
 800f898:	4a1e      	ldr	r2, [pc, #120]	; (800f914 <RegionUS915RxConfig+0xa0>)
 800f89a:	4f1f      	ldr	r7, [pc, #124]	; (800f918 <RegionUS915RxConfig+0xa4>)
 800f89c:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800f8a0:	4b1e      	ldr	r3, [pc, #120]	; (800f91c <RegionUS915RxConfig+0xa8>)
 800f8a2:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800f8a6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800f910 <RegionUS915RxConfig+0x9c>
 800f8aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f8ae:	4638      	mov	r0, r7
 800f8b0:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800f8b2:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800f8b6:	7ca3      	ldrb	r3, [r4, #18]
 800f8b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f8ba:	2001      	movs	r0, #1
 800f8bc:	9008      	str	r0, [sp, #32]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	9207      	str	r2, [sp, #28]
 800f8c2:	9206      	str	r2, [sp, #24]
 800f8c4:	9205      	str	r2, [sp, #20]
 800f8c6:	9204      	str	r2, [sp, #16]
 800f8c8:	9203      	str	r2, [sp, #12]
 800f8ca:	8923      	ldrh	r3, [r4, #8]
 800f8cc:	9302      	str	r3, [sp, #8]
 800f8ce:	2308      	movs	r3, #8
 800f8d0:	9301      	str	r3, [sp, #4]
 800f8d2:	9200      	str	r2, [sp, #0]
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	464a      	mov	r2, r9
 800f8d8:	78a1      	ldrb	r1, [r4, #2]
 800f8da:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 800f8dc:	7c63      	ldrb	r3, [r4, #17]
 800f8de:	b18b      	cbz	r3, 800f904 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800f8e0:	4b0f      	ldr	r3, [pc, #60]	; (800f920 <RegionUS915RxConfig+0xac>)
 800f8e2:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800f8e4:	4b0a      	ldr	r3, [pc, #40]	; (800f910 <RegionUS915RxConfig+0x9c>)
 800f8e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8e8:	310d      	adds	r1, #13
 800f8ea:	b2c9      	uxtb	r1, r1
 800f8ec:	2001      	movs	r0, #1
 800f8ee:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800f8f0:	4632      	mov	r2, r6
 800f8f2:	4639      	mov	r1, r7
 800f8f4:	7ce0      	ldrb	r0, [r4, #19]
 800f8f6:	f7fe fe8f 	bl	800e618 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800f8fa:	702e      	strb	r6, [r5, #0]
    return true;
 800f8fc:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800f8fe:	b00b      	add	sp, #44	; 0x2c
 800f900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800f904:	4b07      	ldr	r3, [pc, #28]	; (800f924 <RegionUS915RxConfig+0xb0>)
 800f906:	5d99      	ldrb	r1, [r3, r6]
 800f908:	e7ec      	b.n	800f8e4 <RegionUS915RxConfig+0x70>
        return false;
 800f90a:	2000      	movs	r0, #0
 800f90c:	e7f7      	b.n	800f8fe <RegionUS915RxConfig+0x8a>
 800f90e:	bf00      	nop
 800f910:	0801458c 	.word	0x0801458c
 800f914:	000927c0 	.word	0x000927c0
 800f918:	370870a0 	.word	0x370870a0
 800f91c:	08013fd0 	.word	0x08013fd0
 800f920:	08013fe0 	.word	0x08013fe0
 800f924:	08013ff0 	.word	0x08013ff0

0800f928 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f92c:	b08d      	sub	sp, #52	; 0x34
 800f92e:	4604      	mov	r4, r0
 800f930:	468b      	mov	fp, r1
 800f932:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800f934:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800f938:	4b32      	ldr	r3, [pc, #200]	; (800fa04 <RegionUS915TxConfig+0xdc>)
 800f93a:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800f93e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800fa08 <RegionUS915TxConfig+0xe0>
 800f942:	f8d9 3000 	ldr.w	r3, [r9]
 800f946:	7801      	ldrb	r1, [r0, #0]
 800f948:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f94c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f950:	7a49      	ldrb	r1, [r1, #9]
 800f952:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f956:	482d      	ldr	r0, [pc, #180]	; (800fa0c <RegionUS915TxConfig+0xe4>)
 800f958:	6800      	ldr	r0, [r0, #0]
 800f95a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f95e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f962:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800f966:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800f96a:	f7ff fce7 	bl	800f33c <LimitTxPower>
 800f96e:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800f970:	4927      	ldr	r1, [pc, #156]	; (800fa10 <RegionUS915TxConfig+0xe8>)
 800f972:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f976:	f7fe fe3d 	bl	800e5f4 <RegionCommonGetBandwidth>
 800f97a:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800f97c:	2200      	movs	r2, #0
 800f97e:	4925      	ldr	r1, [pc, #148]	; (800fa14 <RegionUS915TxConfig+0xec>)
 800f980:	4630      	mov	r0, r6
 800f982:	f7fe fd4f 	bl	800e424 <RegionCommonComputeTxPower>
 800f986:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800f988:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800fa18 <RegionUS915TxConfig+0xf0>
 800f98c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800f990:	f8d9 1000 	ldr.w	r1, [r9]
 800f994:	7823      	ldrb	r3, [r4, #0]
 800f996:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f99a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800f99e:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800f9a0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800f9a4:	9308      	str	r3, [sp, #32]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	9207      	str	r2, [sp, #28]
 800f9aa:	9206      	str	r2, [sp, #24]
 800f9ac:	9205      	str	r2, [sp, #20]
 800f9ae:	2501      	movs	r5, #1
 800f9b0:	9504      	str	r5, [sp, #16]
 800f9b2:	9203      	str	r2, [sp, #12]
 800f9b4:	2308      	movs	r3, #8
 800f9b6:	9302      	str	r3, [sp, #8]
 800f9b8:	9501      	str	r5, [sp, #4]
 800f9ba:	f8cd a000 	str.w	sl, [sp]
 800f9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800f9c8:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800f9ca:	f8d9 2000 	ldr.w	r2, [r9]
 800f9ce:	7823      	ldrb	r3, [r4, #0]
 800f9d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f9d4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800f9d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f9dc:	f7fe fe3e 	bl	800e65c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800f9e0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800f9e4:	7b21      	ldrb	r1, [r4, #12]
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800f9ea:	89a1      	ldrh	r1, [r4, #12]
 800f9ec:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f9f0:	f7ff fc86 	bl	800f300 <GetTimeOnAir>
 800f9f4:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800f9f6:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	b00d      	add	sp, #52	; 0x34
 800f9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa02:	bf00      	nop
 800fa04:	08013fd0 	.word	0x08013fd0
 800fa08:	20000ef8 	.word	0x20000ef8
 800fa0c:	20000ef0 	.word	0x20000ef0
 800fa10:	08013f7c 	.word	0x08013f7c
 800fa14:	41f00000 	.word	0x41f00000
 800fa18:	0801458c 	.word	0x0801458c

0800fa1c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800fa1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa20:	b091      	sub	sp, #68	; 0x44
 800fa22:	4605      	mov	r5, r0
 800fa24:	4688      	mov	r8, r1
 800fa26:	4617      	mov	r7, r2
 800fa28:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800fa2a:	2400      	movs	r4, #0
 800fa2c:	940e      	str	r4, [sp, #56]	; 0x38
 800fa2e:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800fa32:	940b      	str	r4, [sp, #44]	; 0x2c
 800fa34:	940c      	str	r4, [sp, #48]	; 0x30
 800fa36:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800fa38:	4b9c      	ldr	r3, [pc, #624]	; (800fcac <RegionUS915LinkAdrReq+0x290>)
 800fa3a:	6819      	ldr	r1, [r3, #0]
 800fa3c:	2206      	movs	r2, #6
 800fa3e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800fa42:	a80b      	add	r0, sp, #44	; 0x2c
 800fa44:	f7fe fb7d 	bl	800e142 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800fa48:	e00d      	b.n	800fa66 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800fa4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa4e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800fa52:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800fa56:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800fa5a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800fa5e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800fa62:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800fa66:	7a2b      	ldrb	r3, [r5, #8]
 800fa68:	42a3      	cmp	r3, r4
 800fa6a:	f240 808b 	bls.w	800fb84 <RegionUS915LinkAdrReq+0x168>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800fa6e:	6868      	ldr	r0, [r5, #4]
 800fa70:	a90e      	add	r1, sp, #56	; 0x38
 800fa72:	4420      	add	r0, r4
 800fa74:	f7fe fc16 	bl	800e2a4 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2800      	cmp	r0, #0
 800fa7c:	f000 8082 	beq.w	800fb84 <RegionUS915LinkAdrReq+0x168>
        bytesProcessed += nextIndex;
 800fa80:	4423      	add	r3, r4
 800fa82:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 800fa84:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800fa88:	f1bc 0f06 	cmp.w	ip, #6
 800fa8c:	d0dd      	beq.n	800fa4a <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800fa8e:	f1bc 0f07 	cmp.w	ip, #7
 800fa92:	d00a      	beq.n	800faaa <RegionUS915LinkAdrReq+0x8e>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800fa94:	f1bc 0f05 	cmp.w	ip, #5
 800fa98:	d071      	beq.n	800fb7e <RegionUS915LinkAdrReq+0x162>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800fa9a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800fa9e:	aa10      	add	r2, sp, #64	; 0x40
 800faa0:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800faa4:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800faa8:	e7dd      	b.n	800fa66 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800faaa:	2300      	movs	r3, #0
 800faac:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800fab0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800fab4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800fab8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800fabc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800fac0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800fac4:	e7cf      	b.n	800fa66 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800fac6:	aa10      	add	r2, sp, #64	; 0x40
 800fac8:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800facc:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fad0:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800fad4:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800fad8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fadc:	ea4c 0202 	orr.w	r2, ip, r2
 800fae0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                        cntChannelMask++;
 800fae4:	3101      	adds	r1, #1
 800fae6:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800fae8:	3301      	adds	r3, #1
 800faea:	b2db      	uxtb	r3, r3
 800faec:	2b07      	cmp	r3, #7
 800faee:	d8ba      	bhi.n	800fa66 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800faf0:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800faf4:	f04f 0c01 	mov.w	ip, #1
 800faf8:	fa0c fc03 	lsl.w	ip, ip, r3
 800fafc:	ea12 0f0c 	tst.w	r2, ip
 800fb00:	d012      	beq.n	800fb28 <RegionUS915LinkAdrReq+0x10c>
                    if( ( i % 2 ) == 0 )
 800fb02:	f013 0f01 	tst.w	r3, #1
 800fb06:	d1de      	bne.n	800fac6 <RegionUS915LinkAdrReq+0xaa>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800fb08:	aa10      	add	r2, sp, #64	; 0x40
 800fb0a:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fb0e:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fb12:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800fb16:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800fb1a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fb1e:	ea4c 0202 	orr.w	r2, ip, r2
 800fb22:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800fb26:	e7df      	b.n	800fae8 <RegionUS915LinkAdrReq+0xcc>
                    if( ( i % 2 ) == 0 )
 800fb28:	f013 0f01 	tst.w	r3, #1
 800fb2c:	d113      	bne.n	800fb56 <RegionUS915LinkAdrReq+0x13a>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800fb2e:	aa10      	add	r2, sp, #64	; 0x40
 800fb30:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800fb34:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800fb38:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800fb3c:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800fb40:	ea6f 0c0c 	mvn.w	ip, ip
 800fb44:	fa0f fc8c 	sxth.w	ip, ip
 800fb48:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fb4c:	ea0c 0c02 	and.w	ip, ip, r2
 800fb50:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
 800fb54:	e7c8      	b.n	800fae8 <RegionUS915LinkAdrReq+0xcc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800fb56:	aa10      	add	r2, sp, #64	; 0x40
 800fb58:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800fb5c:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800fb60:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800fb64:	ea6f 0c0c 	mvn.w	ip, ip
 800fb68:	fa0f fc8c 	sxth.w	ip, ip
 800fb6c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800fb70:	ea0c 0c02 	and.w	ip, ip, r2
 800fb74:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
                        cntChannelMask++;
 800fb78:	3101      	adds	r1, #1
 800fb7a:	b2c9      	uxtb	r1, r1
 800fb7c:	e7b4      	b.n	800fae8 <RegionUS915LinkAdrReq+0xcc>
            for( uint8_t i = 0; i <= 7; i++ )
 800fb7e:	2300      	movs	r3, #0
            uint8_t cntChannelMask = 0;
 800fb80:	4619      	mov	r1, r3
 800fb82:	e7b3      	b.n	800faec <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800fb84:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fb88:	2b03      	cmp	r3, #3
 800fb8a:	dd58      	ble.n	800fc3e <RegionUS915LinkAdrReq+0x222>
 800fb8c:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800fb90:	2302      	movs	r3, #2
 800fb92:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800fb96:	7a6b      	ldrb	r3, [r5, #9]
 800fb98:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800fb9c:	a809      	add	r0, sp, #36	; 0x24
 800fb9e:	f7ff fbe9 	bl	800f374 <RegionUS915GetPhyParam>
 800fba2:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800fba4:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800fba8:	7aab      	ldrb	r3, [r5, #10]
 800fbaa:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800fbae:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fbb2:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800fbb6:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800fbba:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800fbbe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800fbc2:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800fbc6:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800fbca:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800fbce:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800fbd2:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800fbd6:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800fbda:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800fbde:	2348      	movs	r3, #72	; 0x48
 800fbe0:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800fbe4:	ab0b      	add	r3, sp, #44	; 0x2c
 800fbe6:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800fbe8:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800fbec:	2304      	movs	r3, #4
 800fbee:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800fbf2:	4b2e      	ldr	r3, [pc, #184]	; (800fcac <RegionUS915LinkAdrReq+0x290>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800fbf8:	230e      	movs	r3, #14
 800fbfa:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800fc04:	682b      	ldr	r3, [r5, #0]
 800fc06:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800fc08:	ab0e      	add	r3, sp, #56	; 0x38
 800fc0a:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800fc0e:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800fc12:	4668      	mov	r0, sp
 800fc14:	f7fe fb64 	bl	800e2e0 <RegionCommonLinkAdrReqVerifyParams>
 800fc18:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800fc1a:	2807      	cmp	r0, #7
 800fc1c:	d01c      	beq.n	800fc58 <RegionUS915LinkAdrReq+0x23c>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800fc1e:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800fc22:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800fc26:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800fc2a:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800fc2c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800fc30:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800fc32:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fc34:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800fc36:	4628      	mov	r0, r5
 800fc38:	b011      	add	sp, #68	; 0x44
 800fc3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800fc3e:	2204      	movs	r2, #4
 800fc40:	2100      	movs	r1, #0
 800fc42:	a80b      	add	r0, sp, #44	; 0x2c
 800fc44:	f7fe fa67 	bl	800e116 <RegionCommonCountChannels>
 800fc48:	2801      	cmp	r0, #1
 800fc4a:	d902      	bls.n	800fc52 <RegionUS915LinkAdrReq+0x236>
 800fc4c:	f04f 0907 	mov.w	r9, #7
 800fc50:	e79e      	b.n	800fb90 <RegionUS915LinkAdrReq+0x174>
        status &= 0xFE; // Channel mask KO
 800fc52:	f04f 0906 	mov.w	r9, #6
 800fc56:	e79b      	b.n	800fb90 <RegionUS915LinkAdrReq+0x174>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800fc58:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800fcac <RegionUS915LinkAdrReq+0x290>
 800fc5c:	f8d9 0000 	ldr.w	r0, [r9]
 800fc60:	2206      	movs	r2, #6
 800fc62:	a90b      	add	r1, sp, #44	; 0x2c
 800fc64:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800fc68:	f7fe fa6b 	bl	800e142 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800fc6c:	4b10      	ldr	r3, [pc, #64]	; (800fcb0 <RegionUS915LinkAdrReq+0x294>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	f8d9 2000 	ldr.w	r2, [r9]
 800fc74:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800fc78:	8818      	ldrh	r0, [r3, #0]
 800fc7a:	4001      	ands	r1, r0
 800fc7c:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800fc7e:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 800fc82:	8858      	ldrh	r0, [r3, #2]
 800fc84:	4001      	ands	r1, r0
 800fc86:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800fc88:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 800fc8c:	8898      	ldrh	r0, [r3, #4]
 800fc8e:	4001      	ands	r1, r0
 800fc90:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800fc92:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 800fc96:	88d8      	ldrh	r0, [r3, #6]
 800fc98:	4001      	ands	r1, r0
 800fc9a:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800fc9c:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 800fca0:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800fca2:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 800fca6:	815a      	strh	r2, [r3, #10]
 800fca8:	e7b9      	b.n	800fc1e <RegionUS915LinkAdrReq+0x202>
 800fcaa:	bf00      	nop
 800fcac:	20000ef8 	.word	0x20000ef8
 800fcb0:	20000ef4 	.word	0x20000ef4

0800fcb4 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800fcb8:	6840      	ldr	r0, [r0, #4]
 800fcba:	f7ff faf1 	bl	800f2a0 <VerifyRfFreq>
 800fcbe:	b310      	cbz	r0, 800fd06 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800fcc0:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800fcc2:	220d      	movs	r2, #13
 800fcc4:	2108      	movs	r1, #8
 800fcc6:	f994 0000 	ldrsb.w	r0, [r4]
 800fcca:	f7fe f9c6 	bl	800e05a <RegionCommonValueInRange>
 800fcce:	b908      	cbnz	r0, 800fcd4 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800fcd0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800fcd4:	2207      	movs	r2, #7
 800fcd6:	2105      	movs	r1, #5
 800fcd8:	f994 0000 	ldrsb.w	r0, [r4]
 800fcdc:	f7fe f9bd 	bl	800e05a <RegionCommonValueInRange>
 800fce0:	2801      	cmp	r0, #1
 800fce2:	d003      	beq.n	800fcec <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800fce4:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800fce8:	2b0d      	cmp	r3, #13
 800fcea:	dd01      	ble.n	800fcf0 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800fcec:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800fcf0:	2203      	movs	r2, #3
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800fcf8:	f7fe f9af 	bl	800e05a <RegionCommonValueInRange>
 800fcfc:	b908      	cbnz	r0, 800fd02 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800fcfe:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800fd02:	4628      	mov	r0, r5
 800fd04:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800fd06:	2506      	movs	r5, #6
 800fd08:	e7db      	b.n	800fcc2 <RegionUS915RxParamSetupReq+0xe>

0800fd0a <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800fd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd0e:	4770      	bx	lr

0800fd10 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800fd10:	f04f 30ff 	mov.w	r0, #4294967295
 800fd14:	4770      	bx	lr

0800fd16 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800fd16:	f04f 30ff 	mov.w	r0, #4294967295
 800fd1a:	4770      	bx	lr

0800fd1c <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800fd1c:	b999      	cbnz	r1, 800fd46 <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800fd1e:	4b0e      	ldr	r3, [pc, #56]	; (800fd58 <RegionUS915AlternateDr+0x3c>)
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	7b53      	ldrb	r3, [r2, #13]
 800fd24:	3301      	adds	r3, #1
 800fd26:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800fd28:	4b0b      	ldr	r3, [pc, #44]	; (800fd58 <RegionUS915AlternateDr+0x3c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	7b5a      	ldrb	r2, [r3, #13]
 800fd2e:	4b0b      	ldr	r3, [pc, #44]	; (800fd5c <RegionUS915AlternateDr+0x40>)
 800fd30:	fba3 1302 	umull	r1, r3, r3, r2
 800fd34:	085b      	lsrs	r3, r3, #1
 800fd36:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800fd3a:	1ad2      	subs	r2, r2, r3
 800fd3c:	f012 0fff 	tst.w	r2, #255	; 0xff
 800fd40:	d007      	beq.n	800fd52 <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800fd42:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800fd44:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800fd46:	4b04      	ldr	r3, [pc, #16]	; (800fd58 <RegionUS915AlternateDr+0x3c>)
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	7b53      	ldrb	r3, [r2, #13]
 800fd4c:	3b01      	subs	r3, #1
 800fd4e:	7353      	strb	r3, [r2, #13]
 800fd50:	e7ea      	b.n	800fd28 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 800fd52:	2004      	movs	r0, #4
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop
 800fd58:	20000ef4 	.word	0x20000ef4
 800fd5c:	38e38e39 	.word	0x38e38e39

0800fd60 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800fd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd64:	b0a4      	sub	sp, #144	; 0x90
 800fd66:	4604      	mov	r4, r0
 800fd68:	460e      	mov	r6, r1
 800fd6a:	4690      	mov	r8, r2
 800fd6c:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800fd6e:	2500      	movs	r5, #0
 800fd70:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800fd74:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800fd78:	9511      	str	r5, [sp, #68]	; 0x44
 800fd7a:	2244      	movs	r2, #68	; 0x44
 800fd7c:	4629      	mov	r1, r5
 800fd7e:	a812      	add	r0, sp, #72	; 0x48
 800fd80:	f003 fc6a 	bl	8013658 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800fd84:	2204      	movs	r2, #4
 800fd86:	4629      	mov	r1, r5
 800fd88:	4b49      	ldr	r3, [pc, #292]	; (800feb0 <RegionUS915NextChannel+0x150>)
 800fd8a:	6818      	ldr	r0, [r3, #0]
 800fd8c:	f7fe f9c3 	bl	800e116 <RegionCommonCountChannels>
 800fd90:	2800      	cmp	r0, #0
 800fd92:	d052      	beq.n	800fe3a <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800fd94:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fd98:	2b03      	cmp	r3, #3
 800fd9a:	dd08      	ble.n	800fdae <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800fd9c:	4b44      	ldr	r3, [pc, #272]	; (800feb0 <RegionUS915NextChannel+0x150>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	7a1a      	ldrb	r2, [r3, #8]
 800fda2:	b922      	cbnz	r2, 800fdae <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800fda4:	4a43      	ldr	r2, [pc, #268]	; (800feb4 <RegionUS915NextChannel+0x154>)
 800fda6:	6812      	ldr	r2, [r2, #0]
 800fda8:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 800fdac:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800fdae:	7a63      	ldrb	r3, [r4, #9]
 800fdb0:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800fdb4:	7a23      	ldrb	r3, [r4, #8]
 800fdb6:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800fdba:	4b3d      	ldr	r3, [pc, #244]	; (800feb0 <RegionUS915NextChannel+0x150>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800fdc0:	4b3c      	ldr	r3, [pc, #240]	; (800feb4 <RegionUS915NextChannel+0x154>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800fdc6:	4b3c      	ldr	r3, [pc, #240]	; (800feb8 <RegionUS915NextChannel+0x158>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800fdcc:	2348      	movs	r3, #72	; 0x48
 800fdce:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800fdd6:	6823      	ldr	r3, [r4, #0]
 800fdd8:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800fdda:	6863      	ldr	r3, [r4, #4]
 800fddc:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800fdde:	7aa3      	ldrb	r3, [r4, #10]
 800fde0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800fde4:	2301      	movs	r3, #1
 800fde6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800fdea:	ab03      	add	r3, sp, #12
 800fdec:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800fdee:	ab0c      	add	r3, sp, #48	; 0x30
 800fdf0:	f104 020c 	add.w	r2, r4, #12
 800fdf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdf8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800fdfc:	7d23      	ldrb	r3, [r4, #20]
 800fdfe:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800fe02:	8ae1      	ldrh	r1, [r4, #22]
 800fe04:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800fe08:	f7ff fa7a 	bl	800f300 <GetTimeOnAir>
 800fe0c:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800fe0e:	f8cd 8004 	str.w	r8, [sp, #4]
 800fe12:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800fe16:	9300      	str	r3, [sp, #0]
 800fe18:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800fe1c:	aa11      	add	r2, sp, #68	; 0x44
 800fe1e:	4639      	mov	r1, r7
 800fe20:	a809      	add	r0, sp, #36	; 0x24
 800fe22:	f7fe fb7a 	bl	800e51a <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800fe26:	4605      	mov	r5, r0
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	d13c      	bne.n	800fea6 <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 800fe2c:	7a63      	ldrb	r3, [r4, #9]
 800fe2e:	b98b      	cbnz	r3, 800fe54 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800fe30:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800fe34:	b1db      	cbz	r3, 800fe6e <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800fe36:	4603      	mov	r3, r0
 800fe38:	e026      	b.n	800fe88 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800fe3a:	4d1d      	ldr	r5, [pc, #116]	; (800feb0 <RegionUS915NextChannel+0x150>)
 800fe3c:	4b1d      	ldr	r3, [pc, #116]	; (800feb4 <RegionUS915NextChannel+0x154>)
 800fe3e:	6819      	ldr	r1, [r3, #0]
 800fe40:	2204      	movs	r2, #4
 800fe42:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800fe46:	6828      	ldr	r0, [r5, #0]
 800fe48:	f7fe f97b 	bl	800e142 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800fe4c:	682b      	ldr	r3, [r5, #0]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	731a      	strb	r2, [r3, #12]
 800fe52:	e79f      	b.n	800fd94 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800fe54:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800fe58:	3901      	subs	r1, #1
 800fe5a:	f000 ff5f 	bl	8010d1c <randr>
 800fe5e:	f100 0390 	add.w	r3, r0, #144	; 0x90
 800fe62:	eb0d 0003 	add.w	r0, sp, r3
 800fe66:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800fe6a:	7033      	strb	r3, [r6, #0]
 800fe6c:	e015      	b.n	800fe9a <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800fe6e:	4b10      	ldr	r3, [pc, #64]	; (800feb0 <RegionUS915NextChannel+0x150>)
 800fe70:	6818      	ldr	r0, [r3, #0]
 800fe72:	4632      	mov	r2, r6
 800fe74:	f100 010c 	add.w	r1, r0, #12
 800fe78:	f7fd ffd2 	bl	800de20 <RegionBaseUSComputeNext125kHzJoinChannel>
 800fe7c:	2803      	cmp	r0, #3
 800fe7e:	d10c      	bne.n	800fe9a <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800fe80:	4605      	mov	r5, r0
 800fe82:	e010      	b.n	800fea6 <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800fe84:	3301      	adds	r3, #1
 800fe86:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800fe88:	4a09      	ldr	r2, [pc, #36]	; (800feb0 <RegionUS915NextChannel+0x150>)
 800fe8a:	6812      	ldr	r2, [r2, #0]
 800fe8c:	7a10      	ldrb	r0, [r2, #8]
 800fe8e:	4118      	asrs	r0, r3
 800fe90:	f010 0f01 	tst.w	r0, #1
 800fe94:	d0f6      	beq.n	800fe84 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 800fe96:	3340      	adds	r3, #64	; 0x40
 800fe98:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800fe9a:	2248      	movs	r2, #72	; 0x48
 800fe9c:	7831      	ldrb	r1, [r6, #0]
 800fe9e:	4b04      	ldr	r3, [pc, #16]	; (800feb0 <RegionUS915NextChannel+0x150>)
 800fea0:	6818      	ldr	r0, [r3, #0]
 800fea2:	f7fe f91c 	bl	800e0de <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800fea6:	4628      	mov	r0, r5
 800fea8:	b024      	add	sp, #144	; 0x90
 800feaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feae:	bf00      	nop
 800feb0:	20000ef4 	.word	0x20000ef4
 800feb4:	20000ef8 	.word	0x20000ef8
 800feb8:	20000ef0 	.word	0x20000ef0

0800febc <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800febc:	4b04      	ldr	r3, [pc, #16]	; (800fed0 <RegionUS915ApplyDrOffset+0x14>)
 800febe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800fec2:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800fec4:	2800      	cmp	r0, #0
 800fec6:	db01      	blt.n	800fecc <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800fec8:	b2c0      	uxtb	r0, r0
 800feca:	4770      	bx	lr
        datarate = DR_0;
 800fecc:	2000      	movs	r0, #0
 800fece:	e7fb      	b.n	800fec8 <RegionUS915ApplyDrOffset+0xc>
 800fed0:	08013fbc 	.word	0x08013fbc

0800fed4 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800fed4:	b510      	push	{r4, lr}
 800fed6:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800fed8:	2210      	movs	r2, #16
 800feda:	2100      	movs	r1, #0
 800fedc:	30f1      	adds	r0, #241	; 0xf1
 800fede:	f000 ff42 	bl	8010d66 <memset1>
    ctx->M_n = 0;
 800fee2:	2100      	movs	r1, #0
 800fee4:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800fee8:	22f0      	movs	r2, #240	; 0xf0
 800feea:	4620      	mov	r0, r4
 800feec:	f000 ff3b 	bl	8010d66 <memset1>
}
 800fef0:	bd10      	pop	{r4, pc}

0800fef2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800fef2:	b508      	push	{r3, lr}
 800fef4:	4602      	mov	r2, r0
 800fef6:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800fef8:	2110      	movs	r1, #16
 800fefa:	f000 fb3b 	bl	8010574 <lorawan_aes_set_key>
}
 800fefe:	bd08      	pop	{r3, pc}

0800ff00 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ff00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff04:	b084      	sub	sp, #16
 800ff06:	4604      	mov	r4, r0
 800ff08:	460d      	mov	r5, r1
 800ff0a:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ff0c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d054      	beq.n	800ffbe <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ff14:	f1c3 0810 	rsb	r8, r3, #16
 800ff18:	4647      	mov	r7, r8
 800ff1a:	4590      	cmp	r8, r2
 800ff1c:	bf28      	it	cs
 800ff1e:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ff20:	f200 1001 	addw	r0, r0, #257	; 0x101
 800ff24:	b2ba      	uxth	r2, r7
 800ff26:	4418      	add	r0, r3
 800ff28:	f000 ff05 	bl	8010d36 <memcpy1>
        ctx->M_n += mlen;
 800ff2c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800ff30:	443b      	add	r3, r7
 800ff32:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ff36:	2b0f      	cmp	r3, #15
 800ff38:	d94d      	bls.n	800ffd6 <AES_CMAC_Update+0xd6>
 800ff3a:	45b0      	cmp	r8, r6
 800ff3c:	d24b      	bcs.n	800ffd6 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800ff3e:	2300      	movs	r3, #0
 800ff40:	e008      	b.n	800ff54 <AES_CMAC_Update+0x54>
 800ff42:	18e2      	adds	r2, r4, r3
 800ff44:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800ff48:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800ff4c:	4041      	eors	r1, r0
 800ff4e:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800ff52:	3301      	adds	r3, #1
 800ff54:	2b0f      	cmp	r3, #15
 800ff56:	ddf4      	ble.n	800ff42 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ff58:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800ff5c:	2210      	movs	r2, #16
 800ff5e:	4641      	mov	r1, r8
 800ff60:	4668      	mov	r0, sp
 800ff62:	f000 fee8 	bl	8010d36 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ff66:	4622      	mov	r2, r4
 800ff68:	4669      	mov	r1, sp
 800ff6a:	4668      	mov	r0, sp
 800ff6c:	f000 fb86 	bl	801067c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ff70:	2210      	movs	r2, #16
 800ff72:	4669      	mov	r1, sp
 800ff74:	4640      	mov	r0, r8
 800ff76:	f000 fede 	bl	8010d36 <memcpy1>

        data += mlen;
 800ff7a:	443d      	add	r5, r7
        len -= mlen;
 800ff7c:	1bf6      	subs	r6, r6, r7
 800ff7e:	e01e      	b.n	800ffbe <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800ff80:	eb04 0e03 	add.w	lr, r4, r3
 800ff84:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800ff88:	5cea      	ldrb	r2, [r5, r3]
 800ff8a:	ea8c 0c02 	eor.w	ip, ip, r2
 800ff8e:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800ff92:	3301      	adds	r3, #1
 800ff94:	2b0f      	cmp	r3, #15
 800ff96:	ddf3      	ble.n	800ff80 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ff98:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800ff9c:	2210      	movs	r2, #16
 800ff9e:	4639      	mov	r1, r7
 800ffa0:	4668      	mov	r0, sp
 800ffa2:	f000 fec8 	bl	8010d36 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ffa6:	4622      	mov	r2, r4
 800ffa8:	4669      	mov	r1, sp
 800ffaa:	4668      	mov	r0, sp
 800ffac:	f000 fb66 	bl	801067c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ffb0:	2210      	movs	r2, #16
 800ffb2:	4669      	mov	r1, sp
 800ffb4:	4638      	mov	r0, r7
 800ffb6:	f000 febe 	bl	8010d36 <memcpy1>

        data += 16;
 800ffba:	3510      	adds	r5, #16
        len -= 16;
 800ffbc:	3e10      	subs	r6, #16
    while( len > 16 )
 800ffbe:	2e10      	cmp	r6, #16
 800ffc0:	d901      	bls.n	800ffc6 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	e7e6      	b.n	800ff94 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ffc6:	b2b2      	uxth	r2, r6
 800ffc8:	4629      	mov	r1, r5
 800ffca:	f204 1001 	addw	r0, r4, #257	; 0x101
 800ffce:	f000 feb2 	bl	8010d36 <memcpy1>
    ctx->M_n = len;
 800ffd2:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800ffd6:	b004      	add	sp, #16
 800ffd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ffdc <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ffdc:	b530      	push	{r4, r5, lr}
 800ffde:	b089      	sub	sp, #36	; 0x24
 800ffe0:	4605      	mov	r5, r0
 800ffe2:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ffe4:	2210      	movs	r2, #16
 800ffe6:	2100      	movs	r1, #0
 800ffe8:	eb0d 0002 	add.w	r0, sp, r2
 800ffec:	f000 febb 	bl	8010d66 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800fff0:	4622      	mov	r2, r4
 800fff2:	a904      	add	r1, sp, #16
 800fff4:	4608      	mov	r0, r1
 800fff6:	f000 fb41 	bl	801067c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800fffa:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	db01      	blt.n	8010006 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8010002:	2300      	movs	r3, #0
 8010004:	e030      	b.n	8010068 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 8010006:	2300      	movs	r3, #0
 8010008:	2b0e      	cmp	r3, #14
 801000a:	dc11      	bgt.n	8010030 <AES_CMAC_Final+0x54>
 801000c:	f103 0220 	add.w	r2, r3, #32
 8010010:	eb0d 0102 	add.w	r1, sp, r2
 8010014:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8010018:	3301      	adds	r3, #1
 801001a:	f103 0220 	add.w	r2, r3, #32
 801001e:	446a      	add	r2, sp
 8010020:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010024:	09d2      	lsrs	r2, r2, #7
 8010026:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 801002a:	f801 2c10 	strb.w	r2, [r1, #-16]
 801002e:	e7eb      	b.n	8010008 <AES_CMAC_Final+0x2c>
 8010030:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010034:	005b      	lsls	r3, r3, #1
 8010036:	b2db      	uxtb	r3, r3
 8010038:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 801003c:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8010040:	f88d 301f 	strb.w	r3, [sp, #31]
 8010044:	e017      	b.n	8010076 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 8010046:	f103 0220 	add.w	r2, r3, #32
 801004a:	eb0d 0102 	add.w	r1, sp, r2
 801004e:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8010052:	3301      	adds	r3, #1
 8010054:	f103 0220 	add.w	r2, r3, #32
 8010058:	446a      	add	r2, sp
 801005a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801005e:	09d2      	lsrs	r2, r2, #7
 8010060:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8010064:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010068:	2b0e      	cmp	r3, #14
 801006a:	ddec      	ble.n	8010046 <AES_CMAC_Final+0x6a>
 801006c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010070:	005b      	lsls	r3, r3, #1
 8010072:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8010076:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 801007a:	2810      	cmp	r0, #16
 801007c:	d014      	beq.n	80100a8 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 801007e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8010082:	2b00      	cmp	r3, #0
 8010084:	db30      	blt.n	80100e8 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8010086:	2300      	movs	r3, #0
 8010088:	e041      	b.n	801010e <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 801008a:	18e1      	adds	r1, r4, r3
 801008c:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8010090:	f103 0020 	add.w	r0, r3, #32
 8010094:	4468      	add	r0, sp
 8010096:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 801009a:	4042      	eors	r2, r0
 801009c:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 80100a0:	3301      	adds	r3, #1
 80100a2:	2b0f      	cmp	r3, #15
 80100a4:	ddf1      	ble.n	801008a <AES_CMAC_Final+0xae>
 80100a6:	e059      	b.n	801015c <AES_CMAC_Final+0x180>
 80100a8:	2300      	movs	r3, #0
 80100aa:	e7fa      	b.n	80100a2 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 80100ac:	f103 0220 	add.w	r2, r3, #32
 80100b0:	eb0d 0102 	add.w	r1, sp, r2
 80100b4:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80100b8:	3301      	adds	r3, #1
 80100ba:	f103 0220 	add.w	r2, r3, #32
 80100be:	446a      	add	r2, sp
 80100c0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80100c4:	09d2      	lsrs	r2, r2, #7
 80100c6:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80100ca:	f801 2c10 	strb.w	r2, [r1, #-16]
 80100ce:	2b0e      	cmp	r3, #14
 80100d0:	ddec      	ble.n	80100ac <AES_CMAC_Final+0xd0>
 80100d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80100d6:	005b      	lsls	r3, r3, #1
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 80100de:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80100e2:	f88d 301f 	strb.w	r3, [sp, #31]
 80100e6:	e019      	b.n	801011c <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 80100e8:	2300      	movs	r3, #0
 80100ea:	e7f0      	b.n	80100ce <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 80100ec:	f103 0220 	add.w	r2, r3, #32
 80100f0:	eb0d 0102 	add.w	r1, sp, r2
 80100f4:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80100f8:	3301      	adds	r3, #1
 80100fa:	f103 0220 	add.w	r2, r3, #32
 80100fe:	446a      	add	r2, sp
 8010100:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010104:	09d2      	lsrs	r2, r2, #7
 8010106:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 801010a:	f801 2c10 	strb.w	r2, [r1, #-16]
 801010e:	2b0e      	cmp	r3, #14
 8010110:	ddec      	ble.n	80100ec <AES_CMAC_Final+0x110>
 8010112:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010116:	005b      	lsls	r3, r3, #1
 8010118:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 801011c:	4420      	add	r0, r4
 801011e:	2380      	movs	r3, #128	; 0x80
 8010120:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8010124:	e003      	b.n	801012e <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 8010126:	4423      	add	r3, r4
 8010128:	2200      	movs	r2, #0
 801012a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 801012e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8010132:	3301      	adds	r3, #1
 8010134:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8010138:	2b0f      	cmp	r3, #15
 801013a:	d9f4      	bls.n	8010126 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 801013c:	2300      	movs	r3, #0
 801013e:	e00b      	b.n	8010158 <AES_CMAC_Final+0x17c>
 8010140:	18e1      	adds	r1, r4, r3
 8010142:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8010146:	f103 0020 	add.w	r0, r3, #32
 801014a:	4468      	add	r0, sp
 801014c:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8010150:	4042      	eors	r2, r0
 8010152:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8010156:	3301      	adds	r3, #1
 8010158:	2b0f      	cmp	r3, #15
 801015a:	ddf1      	ble.n	8010140 <AES_CMAC_Final+0x164>
 801015c:	2300      	movs	r3, #0
 801015e:	e009      	b.n	8010174 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8010160:	18e2      	adds	r2, r4, r3
 8010162:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 8010166:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 801016a:	ea8c 0c01 	eor.w	ip, ip, r1
 801016e:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 8010172:	3301      	adds	r3, #1
 8010174:	2b0f      	cmp	r3, #15
 8010176:	ddf3      	ble.n	8010160 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8010178:	2210      	movs	r2, #16
 801017a:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 801017e:	4668      	mov	r0, sp
 8010180:	f000 fdd9 	bl	8010d36 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8010184:	4622      	mov	r2, r4
 8010186:	4629      	mov	r1, r5
 8010188:	4668      	mov	r0, sp
 801018a:	f000 fa77 	bl	801067c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 801018e:	2210      	movs	r2, #16
 8010190:	2100      	movs	r1, #0
 8010192:	eb0d 0002 	add.w	r0, sp, r2
 8010196:	f000 fde6 	bl	8010d66 <memset1>
}
 801019a:	b009      	add	sp, #36	; 0x24
 801019c:	bd30      	pop	{r4, r5, pc}

0801019e <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 801019e:	780b      	ldrb	r3, [r1, #0]
 80101a0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80101a2:	784b      	ldrb	r3, [r1, #1]
 80101a4:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80101a6:	788b      	ldrb	r3, [r1, #2]
 80101a8:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80101aa:	78cb      	ldrb	r3, [r1, #3]
 80101ac:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80101ae:	790b      	ldrb	r3, [r1, #4]
 80101b0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 80101b2:	794b      	ldrb	r3, [r1, #5]
 80101b4:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80101b6:	798b      	ldrb	r3, [r1, #6]
 80101b8:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80101ba:	79cb      	ldrb	r3, [r1, #7]
 80101bc:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80101be:	7a0b      	ldrb	r3, [r1, #8]
 80101c0:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80101c2:	7a4b      	ldrb	r3, [r1, #9]
 80101c4:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80101c6:	7a8b      	ldrb	r3, [r1, #10]
 80101c8:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80101ca:	7acb      	ldrb	r3, [r1, #11]
 80101cc:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80101ce:	7b0b      	ldrb	r3, [r1, #12]
 80101d0:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80101d2:	7b4b      	ldrb	r3, [r1, #13]
 80101d4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80101d6:	7b8b      	ldrb	r3, [r1, #14]
 80101d8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80101da:	7bcb      	ldrb	r3, [r1, #15]
 80101dc:	73c3      	strb	r3, [r0, #15]
#endif
}
 80101de:	4770      	bx	lr

080101e0 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 80101e0:	e004      	b.n	80101ec <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 80101e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101e6:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 80101ea:	461a      	mov	r2, r3
 80101ec:	1e53      	subs	r3, r2, #1
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	2a00      	cmp	r2, #0
 80101f2:	d1f6      	bne.n	80101e2 <copy_block_nn+0x2>
}
 80101f4:	4770      	bx	lr

080101f6 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80101f6:	780b      	ldrb	r3, [r1, #0]
 80101f8:	7802      	ldrb	r2, [r0, #0]
 80101fa:	4053      	eors	r3, r2
 80101fc:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80101fe:	784b      	ldrb	r3, [r1, #1]
 8010200:	7842      	ldrb	r2, [r0, #1]
 8010202:	4053      	eors	r3, r2
 8010204:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8010206:	788b      	ldrb	r3, [r1, #2]
 8010208:	7882      	ldrb	r2, [r0, #2]
 801020a:	4053      	eors	r3, r2
 801020c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 801020e:	78cb      	ldrb	r3, [r1, #3]
 8010210:	78c2      	ldrb	r2, [r0, #3]
 8010212:	4053      	eors	r3, r2
 8010214:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8010216:	790b      	ldrb	r3, [r1, #4]
 8010218:	7902      	ldrb	r2, [r0, #4]
 801021a:	4053      	eors	r3, r2
 801021c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 801021e:	794b      	ldrb	r3, [r1, #5]
 8010220:	7942      	ldrb	r2, [r0, #5]
 8010222:	4053      	eors	r3, r2
 8010224:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8010226:	798b      	ldrb	r3, [r1, #6]
 8010228:	7982      	ldrb	r2, [r0, #6]
 801022a:	4053      	eors	r3, r2
 801022c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 801022e:	79cb      	ldrb	r3, [r1, #7]
 8010230:	79c2      	ldrb	r2, [r0, #7]
 8010232:	4053      	eors	r3, r2
 8010234:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8010236:	7a0b      	ldrb	r3, [r1, #8]
 8010238:	7a02      	ldrb	r2, [r0, #8]
 801023a:	4053      	eors	r3, r2
 801023c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 801023e:	7a4b      	ldrb	r3, [r1, #9]
 8010240:	7a42      	ldrb	r2, [r0, #9]
 8010242:	4053      	eors	r3, r2
 8010244:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8010246:	7a8b      	ldrb	r3, [r1, #10]
 8010248:	7a82      	ldrb	r2, [r0, #10]
 801024a:	4053      	eors	r3, r2
 801024c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 801024e:	7acb      	ldrb	r3, [r1, #11]
 8010250:	7ac2      	ldrb	r2, [r0, #11]
 8010252:	4053      	eors	r3, r2
 8010254:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8010256:	7b0b      	ldrb	r3, [r1, #12]
 8010258:	7b02      	ldrb	r2, [r0, #12]
 801025a:	4053      	eors	r3, r2
 801025c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 801025e:	7b4b      	ldrb	r3, [r1, #13]
 8010260:	7b42      	ldrb	r2, [r0, #13]
 8010262:	4053      	eors	r3, r2
 8010264:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8010266:	7b8b      	ldrb	r3, [r1, #14]
 8010268:	7b82      	ldrb	r2, [r0, #14]
 801026a:	4053      	eors	r3, r2
 801026c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 801026e:	7bcb      	ldrb	r3, [r1, #15]
 8010270:	7bc2      	ldrb	r2, [r0, #15]
 8010272:	4053      	eors	r3, r2
 8010274:	73c3      	strb	r3, [r0, #15]
#endif
}
 8010276:	4770      	bx	lr

08010278 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8010278:	780b      	ldrb	r3, [r1, #0]
 801027a:	f892 c000 	ldrb.w	ip, [r2]
 801027e:	ea83 030c 	eor.w	r3, r3, ip
 8010282:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8010284:	784b      	ldrb	r3, [r1, #1]
 8010286:	f892 c001 	ldrb.w	ip, [r2, #1]
 801028a:	ea83 030c 	eor.w	r3, r3, ip
 801028e:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8010290:	788b      	ldrb	r3, [r1, #2]
 8010292:	f892 c002 	ldrb.w	ip, [r2, #2]
 8010296:	ea83 030c 	eor.w	r3, r3, ip
 801029a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 801029c:	78cb      	ldrb	r3, [r1, #3]
 801029e:	f892 c003 	ldrb.w	ip, [r2, #3]
 80102a2:	ea83 030c 	eor.w	r3, r3, ip
 80102a6:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80102a8:	790b      	ldrb	r3, [r1, #4]
 80102aa:	f892 c004 	ldrb.w	ip, [r2, #4]
 80102ae:	ea83 030c 	eor.w	r3, r3, ip
 80102b2:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80102b4:	794b      	ldrb	r3, [r1, #5]
 80102b6:	f892 c005 	ldrb.w	ip, [r2, #5]
 80102ba:	ea83 030c 	eor.w	r3, r3, ip
 80102be:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80102c0:	798b      	ldrb	r3, [r1, #6]
 80102c2:	f892 c006 	ldrb.w	ip, [r2, #6]
 80102c6:	ea83 030c 	eor.w	r3, r3, ip
 80102ca:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80102cc:	79cb      	ldrb	r3, [r1, #7]
 80102ce:	f892 c007 	ldrb.w	ip, [r2, #7]
 80102d2:	ea83 030c 	eor.w	r3, r3, ip
 80102d6:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80102d8:	7a0b      	ldrb	r3, [r1, #8]
 80102da:	f892 c008 	ldrb.w	ip, [r2, #8]
 80102de:	ea83 030c 	eor.w	r3, r3, ip
 80102e2:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80102e4:	7a4b      	ldrb	r3, [r1, #9]
 80102e6:	f892 c009 	ldrb.w	ip, [r2, #9]
 80102ea:	ea83 030c 	eor.w	r3, r3, ip
 80102ee:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80102f0:	7a8b      	ldrb	r3, [r1, #10]
 80102f2:	f892 c00a 	ldrb.w	ip, [r2, #10]
 80102f6:	ea83 030c 	eor.w	r3, r3, ip
 80102fa:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80102fc:	7acb      	ldrb	r3, [r1, #11]
 80102fe:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8010302:	ea83 030c 	eor.w	r3, r3, ip
 8010306:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8010308:	7b0b      	ldrb	r3, [r1, #12]
 801030a:	f892 c00c 	ldrb.w	ip, [r2, #12]
 801030e:	ea83 030c 	eor.w	r3, r3, ip
 8010312:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8010314:	7b4b      	ldrb	r3, [r1, #13]
 8010316:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801031a:	ea83 030c 	eor.w	r3, r3, ip
 801031e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8010320:	7b8b      	ldrb	r3, [r1, #14]
 8010322:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8010326:	ea83 030c 	eor.w	r3, r3, ip
 801032a:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 801032c:	7bcb      	ldrb	r3, [r1, #15]
 801032e:	7bd2      	ldrb	r2, [r2, #15]
 8010330:	4053      	eors	r3, r2
 8010332:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8010334:	4770      	bx	lr

08010336 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8010336:	b508      	push	{r3, lr}
    xor_block(d, k);
 8010338:	f7ff ff5d 	bl	80101f6 <xor_block>
}
 801033c:	bd08      	pop	{r3, pc}
	...

08010340 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8010340:	7802      	ldrb	r2, [r0, #0]
 8010342:	4b18      	ldr	r3, [pc, #96]	; (80103a4 <shift_sub_rows+0x64>)
 8010344:	5c9a      	ldrb	r2, [r3, r2]
 8010346:	7002      	strb	r2, [r0, #0]
 8010348:	7902      	ldrb	r2, [r0, #4]
 801034a:	5c9a      	ldrb	r2, [r3, r2]
 801034c:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 801034e:	7a02      	ldrb	r2, [r0, #8]
 8010350:	5c9a      	ldrb	r2, [r3, r2]
 8010352:	7202      	strb	r2, [r0, #8]
 8010354:	7b02      	ldrb	r2, [r0, #12]
 8010356:	5c9a      	ldrb	r2, [r3, r2]
 8010358:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 801035a:	7842      	ldrb	r2, [r0, #1]
 801035c:	7941      	ldrb	r1, [r0, #5]
 801035e:	5c59      	ldrb	r1, [r3, r1]
 8010360:	7041      	strb	r1, [r0, #1]
 8010362:	7a41      	ldrb	r1, [r0, #9]
 8010364:	5c59      	ldrb	r1, [r3, r1]
 8010366:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8010368:	7b41      	ldrb	r1, [r0, #13]
 801036a:	5c59      	ldrb	r1, [r3, r1]
 801036c:	7241      	strb	r1, [r0, #9]
 801036e:	5c9a      	ldrb	r2, [r3, r2]
 8010370:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8010372:	7882      	ldrb	r2, [r0, #2]
 8010374:	7a81      	ldrb	r1, [r0, #10]
 8010376:	5c59      	ldrb	r1, [r3, r1]
 8010378:	7081      	strb	r1, [r0, #2]
 801037a:	5c9a      	ldrb	r2, [r3, r2]
 801037c:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 801037e:	7982      	ldrb	r2, [r0, #6]
 8010380:	7b81      	ldrb	r1, [r0, #14]
 8010382:	5c59      	ldrb	r1, [r3, r1]
 8010384:	7181      	strb	r1, [r0, #6]
 8010386:	5c9a      	ldrb	r2, [r3, r2]
 8010388:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 801038a:	7bc2      	ldrb	r2, [r0, #15]
 801038c:	7ac1      	ldrb	r1, [r0, #11]
 801038e:	5c59      	ldrb	r1, [r3, r1]
 8010390:	73c1      	strb	r1, [r0, #15]
 8010392:	79c1      	ldrb	r1, [r0, #7]
 8010394:	5c59      	ldrb	r1, [r3, r1]
 8010396:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8010398:	78c1      	ldrb	r1, [r0, #3]
 801039a:	5c59      	ldrb	r1, [r3, r1]
 801039c:	71c1      	strb	r1, [r0, #7]
 801039e:	5c9b      	ldrb	r3, [r3, r2]
 80103a0:	70c3      	strb	r3, [r0, #3]
}
 80103a2:	4770      	bx	lr
 80103a4:	08014200 	.word	0x08014200

080103a8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 80103a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103ac:	b084      	sub	sp, #16
 80103ae:	4604      	mov	r4, r0
    block_copy(st, dt);
 80103b0:	4601      	mov	r1, r0
 80103b2:	4668      	mov	r0, sp
 80103b4:	f7ff fef3 	bl	801019e <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80103b8:	f89d c000 	ldrb.w	ip, [sp]
 80103bc:	4b6a      	ldr	r3, [pc, #424]	; (8010568 <mix_sub_columns+0x1c0>)
 80103be:	f813 000c 	ldrb.w	r0, [r3, ip]
 80103c2:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80103c6:	4a69      	ldr	r2, [pc, #420]	; (801056c <mix_sub_columns+0x1c4>)
 80103c8:	f812 9008 	ldrb.w	r9, [r2, r8]
 80103cc:	f89d e00a 	ldrb.w	lr, [sp, #10]
 80103d0:	4967      	ldr	r1, [pc, #412]	; (8010570 <mix_sub_columns+0x1c8>)
 80103d2:	f811 500e 	ldrb.w	r5, [r1, lr]
 80103d6:	f89d 700f 	ldrb.w	r7, [sp, #15]
 80103da:	5dce      	ldrb	r6, [r1, r7]
 80103dc:	ea80 0009 	eor.w	r0, r0, r9
 80103e0:	4068      	eors	r0, r5
 80103e2:	4070      	eors	r0, r6
 80103e4:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80103e6:	f811 000c 	ldrb.w	r0, [r1, ip]
 80103ea:	f813 a008 	ldrb.w	sl, [r3, r8]
 80103ee:	f812 900e 	ldrb.w	r9, [r2, lr]
 80103f2:	ea80 0a0a 	eor.w	sl, r0, sl
 80103f6:	ea89 090a 	eor.w	r9, r9, sl
 80103fa:	ea86 0609 	eor.w	r6, r6, r9
 80103fe:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8010400:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010404:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010408:	5dd6      	ldrb	r6, [r2, r7]
 801040a:	ea80 0008 	eor.w	r0, r0, r8
 801040e:	ea8e 0000 	eor.w	r0, lr, r0
 8010412:	4070      	eors	r0, r6
 8010414:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8010416:	f812 600c 	ldrb.w	r6, [r2, ip]
 801041a:	5dd8      	ldrb	r0, [r3, r7]
 801041c:	ea86 0608 	eor.w	r6, r6, r8
 8010420:	4075      	eors	r5, r6
 8010422:	4068      	eors	r0, r5
 8010424:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8010426:	f89d c004 	ldrb.w	ip, [sp, #4]
 801042a:	f813 000c 	ldrb.w	r0, [r3, ip]
 801042e:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8010432:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010436:	f89d e00e 	ldrb.w	lr, [sp, #14]
 801043a:	f811 500e 	ldrb.w	r5, [r1, lr]
 801043e:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8010442:	5dce      	ldrb	r6, [r1, r7]
 8010444:	ea80 0009 	eor.w	r0, r0, r9
 8010448:	4068      	eors	r0, r5
 801044a:	4070      	eors	r0, r6
 801044c:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 801044e:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010452:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010456:	f812 900e 	ldrb.w	r9, [r2, lr]
 801045a:	ea80 0a0a 	eor.w	sl, r0, sl
 801045e:	ea89 090a 	eor.w	r9, r9, sl
 8010462:	ea86 0609 	eor.w	r6, r6, r9
 8010466:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8010468:	f811 8008 	ldrb.w	r8, [r1, r8]
 801046c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010470:	5dd6      	ldrb	r6, [r2, r7]
 8010472:	ea80 0008 	eor.w	r0, r0, r8
 8010476:	ea8e 0000 	eor.w	r0, lr, r0
 801047a:	4070      	eors	r0, r6
 801047c:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 801047e:	f812 600c 	ldrb.w	r6, [r2, ip]
 8010482:	5dd8      	ldrb	r0, [r3, r7]
 8010484:	ea86 0608 	eor.w	r6, r6, r8
 8010488:	4075      	eors	r5, r6
 801048a:	4068      	eors	r0, r5
 801048c:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 801048e:	f89d c008 	ldrb.w	ip, [sp, #8]
 8010492:	f813 000c 	ldrb.w	r0, [r3, ip]
 8010496:	f89d 800d 	ldrb.w	r8, [sp, #13]
 801049a:	f812 9008 	ldrb.w	r9, [r2, r8]
 801049e:	f89d e002 	ldrb.w	lr, [sp, #2]
 80104a2:	f811 500e 	ldrb.w	r5, [r1, lr]
 80104a6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80104aa:	5dce      	ldrb	r6, [r1, r7]
 80104ac:	ea80 0009 	eor.w	r0, r0, r9
 80104b0:	4068      	eors	r0, r5
 80104b2:	4070      	eors	r0, r6
 80104b4:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80104b6:	f811 000c 	ldrb.w	r0, [r1, ip]
 80104ba:	f813 a008 	ldrb.w	sl, [r3, r8]
 80104be:	f812 900e 	ldrb.w	r9, [r2, lr]
 80104c2:	ea80 0a0a 	eor.w	sl, r0, sl
 80104c6:	ea89 090a 	eor.w	r9, r9, sl
 80104ca:	ea86 0609 	eor.w	r6, r6, r9
 80104ce:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80104d0:	f811 8008 	ldrb.w	r8, [r1, r8]
 80104d4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80104d8:	5dd6      	ldrb	r6, [r2, r7]
 80104da:	ea80 0008 	eor.w	r0, r0, r8
 80104de:	ea8e 0000 	eor.w	r0, lr, r0
 80104e2:	4070      	eors	r0, r6
 80104e4:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80104e6:	f812 600c 	ldrb.w	r6, [r2, ip]
 80104ea:	5dd8      	ldrb	r0, [r3, r7]
 80104ec:	ea86 0608 	eor.w	r6, r6, r8
 80104f0:	4075      	eors	r5, r6
 80104f2:	4068      	eors	r0, r5
 80104f4:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80104f6:	f89d 600c 	ldrb.w	r6, [sp, #12]
 80104fa:	5d98      	ldrb	r0, [r3, r6]
 80104fc:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8010500:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010504:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8010508:	f811 c007 	ldrb.w	ip, [r1, r7]
 801050c:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8010510:	f811 e005 	ldrb.w	lr, [r1, r5]
 8010514:	ea80 0009 	eor.w	r0, r0, r9
 8010518:	ea8c 0000 	eor.w	r0, ip, r0
 801051c:	ea8e 0000 	eor.w	r0, lr, r0
 8010520:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8010522:	5d88      	ldrb	r0, [r1, r6]
 8010524:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010528:	f812 9007 	ldrb.w	r9, [r2, r7]
 801052c:	ea80 0a0a 	eor.w	sl, r0, sl
 8010530:	ea89 090a 	eor.w	r9, r9, sl
 8010534:	ea8e 0e09 	eor.w	lr, lr, r9
 8010538:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 801053c:	f811 1008 	ldrb.w	r1, [r1, r8]
 8010540:	f813 e007 	ldrb.w	lr, [r3, r7]
 8010544:	5d57      	ldrb	r7, [r2, r5]
 8010546:	4048      	eors	r0, r1
 8010548:	ea8e 0000 	eor.w	r0, lr, r0
 801054c:	4078      	eors	r0, r7
 801054e:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8010550:	5d92      	ldrb	r2, [r2, r6]
 8010552:	5d5b      	ldrb	r3, [r3, r5]
 8010554:	4051      	eors	r1, r2
 8010556:	ea8c 0c01 	eor.w	ip, ip, r1
 801055a:	ea83 030c 	eor.w	r3, r3, ip
 801055e:	73e3      	strb	r3, [r4, #15]
  }
 8010560:	b004      	add	sp, #16
 8010562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010566:	bf00      	nop
 8010568:	08014000 	.word	0x08014000
 801056c:	08014100 	.word	0x08014100
 8010570:	08014200 	.word	0x08014200

08010574 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8010574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010578:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 801057a:	f1a1 0310 	sub.w	r3, r1, #16
 801057e:	b2db      	uxtb	r3, r3
 8010580:	2b10      	cmp	r3, #16
 8010582:	d806      	bhi.n	8010592 <lorawan_aes_set_key+0x1e>
 8010584:	460d      	mov	r5, r1
 8010586:	4a3b      	ldr	r2, [pc, #236]	; (8010674 <lorawan_aes_set_key+0x100>)
 8010588:	fa22 f303 	lsr.w	r3, r2, r3
 801058c:	f013 0f01 	tst.w	r3, #1
 8010590:	d105      	bne.n	801059e <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8010592:	2300      	movs	r3, #0
 8010594:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8010598:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 801059a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 801059e:	460a      	mov	r2, r1
 80105a0:	4601      	mov	r1, r0
 80105a2:	4620      	mov	r0, r4
 80105a4:	f7ff fe1c 	bl	80101e0 <copy_block_nn>
    hi = (keylen + 28) << 2;
 80105a8:	f105 031c 	add.w	r3, r5, #28
 80105ac:	b2db      	uxtb	r3, r3
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 80105b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80105b8:	3b01      	subs	r3, #1
 80105ba:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80105be:	462b      	mov	r3, r5
 80105c0:	f04f 0c01 	mov.w	ip, #1
 80105c4:	e023      	b.n	801060e <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 80105c6:	2d18      	cmp	r5, #24
 80105c8:	d901      	bls.n	80105ce <lorawan_aes_set_key+0x5a>
 80105ca:	2a10      	cmp	r2, #16
 80105cc:	d048      	beq.n	8010660 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 80105ce:	1b5a      	subs	r2, r3, r5
 80105d0:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80105d2:	f814 9002 	ldrb.w	r9, [r4, r2]
 80105d6:	ea89 0808 	eor.w	r8, r9, r8
 80105da:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80105de:	f102 0801 	add.w	r8, r2, #1
 80105e2:	f814 8008 	ldrb.w	r8, [r4, r8]
 80105e6:	f100 0901 	add.w	r9, r0, #1
 80105ea:	ea88 0707 	eor.w	r7, r8, r7
 80105ee:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80105f2:	1c97      	adds	r7, r2, #2
 80105f4:	5de7      	ldrb	r7, [r4, r7]
 80105f6:	f100 0802 	add.w	r8, r0, #2
 80105fa:	407e      	eors	r6, r7
 80105fc:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8010600:	3203      	adds	r2, #3
 8010602:	5ca6      	ldrb	r6, [r4, r2]
 8010604:	1cc2      	adds	r2, r0, #3
 8010606:	4071      	eors	r1, r6
 8010608:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801060a:	3304      	adds	r3, #4
 801060c:	b2db      	uxtb	r3, r3
 801060e:	4573      	cmp	r3, lr
 8010610:	d22d      	bcs.n	801066e <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8010612:	4618      	mov	r0, r3
 8010614:	1f1a      	subs	r2, r3, #4
 8010616:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 801061a:	1eda      	subs	r2, r3, #3
 801061c:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 801061e:	1e9a      	subs	r2, r3, #2
 8010620:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8010622:	1e5a      	subs	r2, r3, #1
 8010624:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8010626:	fbb3 f2f5 	udiv	r2, r3, r5
 801062a:	fb05 3212 	mls	r2, r5, r2, r3
 801062e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8010632:	d1c8      	bne.n	80105c6 <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 8010634:	4a10      	ldr	r2, [pc, #64]	; (8010678 <lorawan_aes_set_key+0x104>)
 8010636:	f812 9007 	ldrb.w	r9, [r2, r7]
 801063a:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 801063e:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8010640:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8010642:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8010646:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 801064a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801064e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8010652:	b2d2      	uxtb	r2, r2
 8010654:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 8010658:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 801065c:	46c8      	mov	r8, r9
 801065e:	e7b6      	b.n	80105ce <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 8010660:	4a05      	ldr	r2, [pc, #20]	; (8010678 <lorawan_aes_set_key+0x104>)
 8010662:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8010666:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8010668:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 801066a:	5c51      	ldrb	r1, [r2, r1]
 801066c:	e7af      	b.n	80105ce <lorawan_aes_set_key+0x5a>
    return 0;
 801066e:	2000      	movs	r0, #0
 8010670:	e793      	b.n	801059a <lorawan_aes_set_key+0x26>
 8010672:	bf00      	nop
 8010674:	00010101 	.word	0x00010101
 8010678:	08014200 	.word	0x08014200

0801067c <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 801067c:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8010680:	b31b      	cbz	r3, 80106ca <lorawan_aes_encrypt+0x4e>
{
 8010682:	b570      	push	{r4, r5, r6, lr}
 8010684:	b084      	sub	sp, #16
 8010686:	460e      	mov	r6, r1
 8010688:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 801068a:	4601      	mov	r1, r0
 801068c:	4668      	mov	r0, sp
 801068e:	f7ff fdf3 	bl	8010278 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8010692:	2401      	movs	r4, #1
 8010694:	e009      	b.n	80106aa <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8010696:	4668      	mov	r0, sp
 8010698:	f7ff fe86 	bl	80103a8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 801069c:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 80106a0:	4668      	mov	r0, sp
 80106a2:	f7ff fe48 	bl	8010336 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80106a6:	3401      	adds	r4, #1
 80106a8:	b2e4      	uxtb	r4, r4
 80106aa:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 80106ae:	42a3      	cmp	r3, r4
 80106b0:	d8f1      	bhi.n	8010696 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80106b2:	4668      	mov	r0, sp
 80106b4:	f7ff fe44 	bl	8010340 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80106b8:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 80106bc:	4669      	mov	r1, sp
 80106be:	4630      	mov	r0, r6
 80106c0:	f7ff fdda 	bl	8010278 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 80106c4:	2000      	movs	r0, #0
}
 80106c6:	b004      	add	sp, #16
 80106c8:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 80106ca:	20ff      	movs	r0, #255	; 0xff
}
 80106cc:	4770      	bx	lr
	...

080106d0 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80106d0:	2300      	movs	r3, #0
 80106d2:	2b0a      	cmp	r3, #10
 80106d4:	d817      	bhi.n	8010706 <GetKeyByID+0x36>
{
 80106d6:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80106d8:	4a0c      	ldr	r2, [pc, #48]	; (801070c <GetKeyByID+0x3c>)
 80106da:	6814      	ldr	r4, [r2, #0]
 80106dc:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80106e0:	4422      	add	r2, r4
 80106e2:	7e12      	ldrb	r2, [r2, #24]
 80106e4:	4282      	cmp	r2, r0
 80106e6:	d006      	beq.n	80106f6 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80106e8:	3301      	adds	r3, #1
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	2b0a      	cmp	r3, #10
 80106ee:	d9f3      	bls.n	80106d8 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80106f0:	2003      	movs	r0, #3
}
 80106f2:	bc10      	pop	{r4}
 80106f4:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 80106f6:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 80106fa:	f10c 0c18 	add.w	ip, ip, #24
 80106fe:	4464      	add	r4, ip
 8010700:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010702:	2000      	movs	r0, #0
 8010704:	e7f5      	b.n	80106f2 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010706:	2003      	movs	r0, #3
}
 8010708:	4770      	bx	lr
 801070a:	bf00      	nop
 801070c:	20000efc 	.word	0x20000efc

08010710 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8010710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010714:	b0cc      	sub	sp, #304	; 0x130
 8010716:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8010718:	b3a9      	cbz	r1, 8010786 <ComputeCmac+0x76>
 801071a:	4607      	mov	r7, r0
 801071c:	4616      	mov	r6, r2
 801071e:	461c      	mov	r4, r3
 8010720:	4688      	mov	r8, r1
 8010722:	b395      	cbz	r5, 801078a <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8010724:	a802      	add	r0, sp, #8
 8010726:	f7ff fbd5 	bl	800fed4 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 801072a:	a901      	add	r1, sp, #4
 801072c:	4620      	mov	r0, r4
 801072e:	f7ff ffcf 	bl	80106d0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010732:	4604      	mov	r4, r0
 8010734:	b118      	cbz	r0, 801073e <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8010736:	4620      	mov	r0, r4
 8010738:	b04c      	add	sp, #304	; 0x130
 801073a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 801073e:	9901      	ldr	r1, [sp, #4]
 8010740:	3101      	adds	r1, #1
 8010742:	a802      	add	r0, sp, #8
 8010744:	f7ff fbd5 	bl	800fef2 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8010748:	b127      	cbz	r7, 8010754 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 801074a:	2210      	movs	r2, #16
 801074c:	4639      	mov	r1, r7
 801074e:	a802      	add	r0, sp, #8
 8010750:	f7ff fbd6 	bl	800ff00 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8010754:	4632      	mov	r2, r6
 8010756:	4641      	mov	r1, r8
 8010758:	a802      	add	r0, sp, #8
 801075a:	f7ff fbd1 	bl	800ff00 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 801075e:	a902      	add	r1, sp, #8
 8010760:	a848      	add	r0, sp, #288	; 0x120
 8010762:	f7ff fc3b 	bl	800ffdc <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8010766:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 801076a:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 801076e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010772:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 8010776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801077a:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 801077e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010782:	602b      	str	r3, [r5, #0]
 8010784:	e7d7      	b.n	8010736 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8010786:	2402      	movs	r4, #2
 8010788:	e7d5      	b.n	8010736 <ComputeCmac+0x26>
 801078a:	2402      	movs	r4, #2
 801078c:	e7d3      	b.n	8010736 <ComputeCmac+0x26>
	...

08010790 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 8010790:	b140      	cbz	r0, 80107a4 <SecureElementInit+0x14>
{
 8010792:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8010794:	4a04      	ldr	r2, [pc, #16]	; (80107a8 <SecureElementInit+0x18>)
 8010796:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8010798:	22d8      	movs	r2, #216	; 0xd8
 801079a:	4904      	ldr	r1, [pc, #16]	; (80107ac <SecureElementInit+0x1c>)
 801079c:	f000 facb 	bl	8010d36 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 80107a0:	2000      	movs	r0, #0
}
 80107a2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80107a4:	2002      	movs	r0, #2
}
 80107a6:	4770      	bx	lr
 80107a8:	20000efc 	.word	0x20000efc
 80107ac:	0803e500 	.word	0x0803e500

080107b0 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80107b0:	2300      	movs	r3, #0
 80107b2:	2b0a      	cmp	r3, #10
 80107b4:	d817      	bhi.n	80107e6 <SecureElementGetKeyByID+0x36>
{
 80107b6:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80107b8:	4a0c      	ldr	r2, [pc, #48]	; (80107ec <SecureElementGetKeyByID+0x3c>)
 80107ba:	6814      	ldr	r4, [r2, #0]
 80107bc:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80107c0:	4422      	add	r2, r4
 80107c2:	7e12      	ldrb	r2, [r2, #24]
 80107c4:	4282      	cmp	r2, r0
 80107c6:	d006      	beq.n	80107d6 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80107c8:	3301      	adds	r3, #1
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	2b0a      	cmp	r3, #10
 80107ce:	d9f3      	bls.n	80107b8 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80107d0:	2003      	movs	r0, #3
}
 80107d2:	bc10      	pop	{r4}
 80107d4:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 80107d6:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 80107da:	f10c 0c18 	add.w	ip, ip, #24
 80107de:	4464      	add	r4, ip
 80107e0:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 80107e2:	2000      	movs	r0, #0
 80107e4:	e7f5      	b.n	80107d2 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80107e6:	2003      	movs	r0, #3
}
 80107e8:	4770      	bx	lr
 80107ea:	bf00      	nop
 80107ec:	20000efc 	.word	0x20000efc

080107f0 <PrintKey>:
{
 80107f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f4:	b099      	sub	sp, #100	; 0x64
 80107f6:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 80107f8:	a917      	add	r1, sp, #92	; 0x5c
 80107fa:	f7ff ffd9 	bl	80107b0 <SecureElementGetKeyByID>
 80107fe:	4603      	mov	r3, r0
 8010800:	2800      	cmp	r0, #0
 8010802:	d042      	beq.n	801088a <PrintKey+0x9a>
}
 8010804:	b019      	add	sp, #100	; 0x64
 8010806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 801080a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 801080e:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 8010812:	689b      	ldr	r3, [r3, #8]
 8010814:	9313      	str	r3, [sp, #76]	; 0x4c
 8010816:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010818:	785a      	ldrb	r2, [r3, #1]
 801081a:	9214      	str	r2, [sp, #80]	; 0x50
 801081c:	7899      	ldrb	r1, [r3, #2]
 801081e:	9115      	str	r1, [sp, #84]	; 0x54
 8010820:	78da      	ldrb	r2, [r3, #3]
 8010822:	7919      	ldrb	r1, [r3, #4]
 8010824:	7958      	ldrb	r0, [r3, #5]
 8010826:	799c      	ldrb	r4, [r3, #6]
 8010828:	79dd      	ldrb	r5, [r3, #7]
 801082a:	7a1e      	ldrb	r6, [r3, #8]
 801082c:	7a5f      	ldrb	r7, [r3, #9]
 801082e:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8010832:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8010836:	f893 800c 	ldrb.w	r8, [r3, #12]
 801083a:	f893 900d 	ldrb.w	r9, [r3, #13]
 801083e:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8010842:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8010846:	7c1b      	ldrb	r3, [r3, #16]
 8010848:	9310      	str	r3, [sp, #64]	; 0x40
 801084a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 801084e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010852:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8010856:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801085a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 801085e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8010862:	9709      	str	r7, [sp, #36]	; 0x24
 8010864:	9608      	str	r6, [sp, #32]
 8010866:	9507      	str	r5, [sp, #28]
 8010868:	9406      	str	r4, [sp, #24]
 801086a:	9005      	str	r0, [sp, #20]
 801086c:	9104      	str	r1, [sp, #16]
 801086e:	9203      	str	r2, [sp, #12]
 8010870:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010872:	9102      	str	r1, [sp, #8]
 8010874:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010876:	9201      	str	r2, [sp, #4]
 8010878:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	4b09      	ldr	r3, [pc, #36]	; (80108a4 <PrintKey+0xb4>)
 801087e:	2200      	movs	r2, #0
 8010880:	4611      	mov	r1, r2
 8010882:	2002      	movs	r0, #2
 8010884:	f002 f934 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8010888:	e7bc      	b.n	8010804 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801088a:	2b0a      	cmp	r3, #10
 801088c:	d8ba      	bhi.n	8010804 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 801088e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8010892:	4905      	ldr	r1, [pc, #20]	; (80108a8 <PrintKey+0xb8>)
 8010894:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 8010898:	42a2      	cmp	r2, r4
 801089a:	d0b6      	beq.n	801080a <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801089c:	3301      	adds	r3, #1
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	e7f3      	b.n	801088a <PrintKey+0x9a>
 80108a2:	bf00      	nop
 80108a4:	08014300 	.word	0x08014300
 80108a8:	08014498 	.word	0x08014498

080108ac <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 80108ac:	2b0b      	cmp	r3, #11
 80108ae:	d80a      	bhi.n	80108c6 <SecureElementComputeAesCmac+0x1a>
{
 80108b0:	b500      	push	{lr}
 80108b2:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80108b4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80108b8:	f8cd c000 	str.w	ip, [sp]
 80108bc:	f7ff ff28 	bl	8010710 <ComputeCmac>
}
 80108c0:	b003      	add	sp, #12
 80108c2:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80108c6:	2003      	movs	r0, #3
}
 80108c8:	4770      	bx	lr

080108ca <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 80108ca:	b190      	cbz	r0, 80108f2 <SecureElementVerifyAesCmac+0x28>
{
 80108cc:	b510      	push	{r4, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	468c      	mov	ip, r1
 80108d2:	4614      	mov	r4, r2
 80108d4:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 80108d6:	2000      	movs	r0, #0
 80108d8:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80108da:	aa03      	add	r2, sp, #12
 80108dc:	9200      	str	r2, [sp, #0]
 80108de:	4662      	mov	r2, ip
 80108e0:	f7ff ff16 	bl	8010710 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80108e4:	b918      	cbnz	r0, 80108ee <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 80108e6:	9b03      	ldr	r3, [sp, #12]
 80108e8:	42a3      	cmp	r3, r4
 80108ea:	d000      	beq.n	80108ee <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 80108ec:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 80108ee:	b004      	add	sp, #16
 80108f0:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80108f2:	2002      	movs	r0, #2
}
 80108f4:	4770      	bx	lr

080108f6 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 80108f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108fa:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 80108fc:	b348      	cbz	r0, 8010952 <SecureElementAesEncrypt+0x5c>
 80108fe:	460d      	mov	r5, r1
 8010900:	4614      	mov	r4, r2
 8010902:	461e      	mov	r6, r3
 8010904:	4607      	mov	r7, r0
 8010906:	b33b      	cbz	r3, 8010958 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8010908:	f011 0f0f 	tst.w	r1, #15
 801090c:	d127      	bne.n	801095e <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 801090e:	22f0      	movs	r2, #240	; 0xf0
 8010910:	2100      	movs	r1, #0
 8010912:	a801      	add	r0, sp, #4
 8010914:	f000 fa27 	bl	8010d66 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8010918:	4669      	mov	r1, sp
 801091a:	4620      	mov	r0, r4
 801091c:	f7ff fed8 	bl	80106d0 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010920:	4680      	mov	r8, r0
 8010922:	b118      	cbz	r0, 801092c <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8010924:	4640      	mov	r0, r8
 8010926:	b03e      	add	sp, #248	; 0xf8
 8010928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 801092c:	aa01      	add	r2, sp, #4
 801092e:	2110      	movs	r1, #16
 8010930:	9800      	ldr	r0, [sp, #0]
 8010932:	3001      	adds	r0, #1
 8010934:	f7ff fe1e 	bl	8010574 <lorawan_aes_set_key>
        uint8_t block = 0;
 8010938:	4644      	mov	r4, r8
        while( size != 0 )
 801093a:	e007      	b.n	801094c <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 801093c:	aa01      	add	r2, sp, #4
 801093e:	1931      	adds	r1, r6, r4
 8010940:	1938      	adds	r0, r7, r4
 8010942:	f7ff fe9b 	bl	801067c <lorawan_aes_encrypt>
            block = block + 16;
 8010946:	3410      	adds	r4, #16
 8010948:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 801094a:	3d10      	subs	r5, #16
        while( size != 0 )
 801094c:	2d00      	cmp	r5, #0
 801094e:	d1f5      	bne.n	801093c <SecureElementAesEncrypt+0x46>
 8010950:	e7e8      	b.n	8010924 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8010952:	f04f 0802 	mov.w	r8, #2
 8010956:	e7e5      	b.n	8010924 <SecureElementAesEncrypt+0x2e>
 8010958:	f04f 0802 	mov.w	r8, #2
 801095c:	e7e2      	b.n	8010924 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801095e:	f04f 0805 	mov.w	r8, #5
 8010962:	e7df      	b.n	8010924 <SecureElementAesEncrypt+0x2e>

08010964 <SecureElementSetKey>:
{
 8010964:	b530      	push	{r4, r5, lr}
 8010966:	b085      	sub	sp, #20
    if( key == NULL )
 8010968:	2900      	cmp	r1, #0
 801096a:	d038      	beq.n	80109de <SecureElementSetKey+0x7a>
 801096c:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801096e:	2300      	movs	r3, #0
 8010970:	2b0a      	cmp	r3, #10
 8010972:	d830      	bhi.n	80109d6 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010974:	4a1b      	ldr	r2, [pc, #108]	; (80109e4 <SecureElementSetKey+0x80>)
 8010976:	6811      	ldr	r1, [r2, #0]
 8010978:	461c      	mov	r4, r3
 801097a:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801097e:	440a      	add	r2, r1
 8010980:	7e12      	ldrb	r2, [r2, #24]
 8010982:	4282      	cmp	r2, r0
 8010984:	d002      	beq.n	801098c <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010986:	3301      	adds	r3, #1
 8010988:	b2db      	uxtb	r3, r3
 801098a:	e7f1      	b.n	8010970 <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 801098c:	280d      	cmp	r0, #13
 801098e:	d00a      	beq.n	80109a6 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8010990:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8010994:	3418      	adds	r4, #24
 8010996:	1908      	adds	r0, r1, r4
 8010998:	2210      	movs	r2, #16
 801099a:	4661      	mov	r1, ip
 801099c:	3001      	adds	r0, #1
 801099e:	f000 f9ca 	bl	8010d36 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80109a2:	2500      	movs	r5, #0
 80109a4:	e018      	b.n	80109d8 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 80109a6:	2300      	movs	r3, #0
 80109a8:	9300      	str	r3, [sp, #0]
 80109aa:	9301      	str	r3, [sp, #4]
 80109ac:	9302      	str	r3, [sp, #8]
 80109ae:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 80109b0:	466b      	mov	r3, sp
 80109b2:	220c      	movs	r2, #12
 80109b4:	2110      	movs	r1, #16
 80109b6:	4660      	mov	r0, ip
 80109b8:	f7ff ff9d 	bl	80108f6 <SecureElementAesEncrypt>
 80109bc:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 80109be:	4b09      	ldr	r3, [pc, #36]	; (80109e4 <SecureElementSetKey+0x80>)
 80109c0:	6818      	ldr	r0, [r3, #0]
 80109c2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80109c6:	3418      	adds	r4, #24
 80109c8:	4420      	add	r0, r4
 80109ca:	2210      	movs	r2, #16
 80109cc:	4669      	mov	r1, sp
 80109ce:	3001      	adds	r0, #1
 80109d0:	f000 f9b1 	bl	8010d36 <memcpy1>
                return retval;
 80109d4:	e000      	b.n	80109d8 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80109d6:	2503      	movs	r5, #3
}
 80109d8:	4628      	mov	r0, r5
 80109da:	b005      	add	sp, #20
 80109dc:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80109de:	2502      	movs	r5, #2
 80109e0:	e7fa      	b.n	80109d8 <SecureElementSetKey+0x74>
 80109e2:	bf00      	nop
 80109e4:	20000efc 	.word	0x20000efc

080109e8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 80109e8:	b1d0      	cbz	r0, 8010a20 <SecureElementDeriveAndStoreKey+0x38>
{
 80109ea:	b510      	push	{r4, lr}
 80109ec:	b084      	sub	sp, #16
 80109ee:	4614      	mov	r4, r2
 80109f0:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 80109f2:	2a0c      	cmp	r2, #12
 80109f4:	d101      	bne.n	80109fa <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 80109f6:	290b      	cmp	r1, #11
 80109f8:	d114      	bne.n	8010a24 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 80109fa:	2300      	movs	r3, #0
 80109fc:	9300      	str	r3, [sp, #0]
 80109fe:	9301      	str	r3, [sp, #4]
 8010a00:	9302      	str	r3, [sp, #8]
 8010a02:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8010a04:	466b      	mov	r3, sp
 8010a06:	460a      	mov	r2, r1
 8010a08:	2110      	movs	r1, #16
 8010a0a:	4660      	mov	r0, ip
 8010a0c:	f7ff ff73 	bl	80108f6 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010a10:	b108      	cbz	r0, 8010a16 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8010a12:	b004      	add	sp, #16
 8010a14:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8010a16:	4669      	mov	r1, sp
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f7ff ffa3 	bl	8010964 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8010a1e:	e7f8      	b.n	8010a12 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8010a20:	2002      	movs	r0, #2
}
 8010a22:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010a24:	2003      	movs	r0, #3
 8010a26:	e7f4      	b.n	8010a12 <SecureElementDeriveAndStoreKey+0x2a>

08010a28 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8010a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a2a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8010a2e:	9c07      	ldr	r4, [sp, #28]
 8010a30:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8010a32:	b35b      	cbz	r3, 8010a8c <SecureElementProcessJoinAccept+0x64>
 8010a34:	461f      	mov	r7, r3
 8010a36:	b35c      	cbz	r4, 8010a90 <SecureElementProcessJoinAccept+0x68>
 8010a38:	b366      	cbz	r6, 8010a94 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8010a3a:	2d21      	cmp	r5, #33	; 0x21
 8010a3c:	d82c      	bhi.n	8010a98 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8010a3e:	462a      	mov	r2, r5
 8010a40:	4619      	mov	r1, r3
 8010a42:	4620      	mov	r0, r4
 8010a44:	f000 f977 	bl	8010d36 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8010a48:	1c63      	adds	r3, r4, #1
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	1e69      	subs	r1, r5, #1
 8010a4e:	18b8      	adds	r0, r7, r2
 8010a50:	f7ff ff51 	bl	80108f6 <SecureElementAesEncrypt>
 8010a54:	bb10      	cbnz	r0, 8010a9c <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8010a56:	7ae3      	ldrb	r3, [r4, #11]
 8010a58:	09db      	lsrs	r3, r3, #7
 8010a5a:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8010a5c:	1961      	adds	r1, r4, r5
 8010a5e:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8010a62:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8010a66:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8010a6a:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8010a6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8010a72:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8010a76:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8010a7a:	b98b      	cbnz	r3, 8010aa0 <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	1f29      	subs	r1, r5, #4
 8010a80:	4620      	mov	r0, r4
 8010a82:	f7ff ff22 	bl	80108ca <SecureElementVerifyAesCmac>
 8010a86:	b140      	cbz	r0, 8010a9a <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8010a88:	2001      	movs	r0, #1
 8010a8a:	e006      	b.n	8010a9a <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8010a8c:	2002      	movs	r0, #2
 8010a8e:	e004      	b.n	8010a9a <SecureElementProcessJoinAccept+0x72>
 8010a90:	2002      	movs	r0, #2
 8010a92:	e002      	b.n	8010a9a <SecureElementProcessJoinAccept+0x72>
 8010a94:	2002      	movs	r0, #2
 8010a96:	e000      	b.n	8010a9a <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010a98:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8010a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010a9c:	2007      	movs	r0, #7
 8010a9e:	e7fc      	b.n	8010a9a <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8010aa0:	2004      	movs	r0, #4
 8010aa2:	e7fa      	b.n	8010a9a <SecureElementProcessJoinAccept+0x72>

08010aa4 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8010aa4:	b140      	cbz	r0, 8010ab8 <SecureElementSetDevEui+0x14>
{
 8010aa6:	b508      	push	{r3, lr}
 8010aa8:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8010aaa:	2208      	movs	r2, #8
 8010aac:	4b03      	ldr	r3, [pc, #12]	; (8010abc <SecureElementSetDevEui+0x18>)
 8010aae:	6818      	ldr	r0, [r3, #0]
 8010ab0:	f000 f941 	bl	8010d36 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010ab4:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010ab6:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010ab8:	2002      	movs	r0, #2
}
 8010aba:	4770      	bx	lr
 8010abc:	20000efc 	.word	0x20000efc

08010ac0 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8010ac0:	b138      	cbz	r0, 8010ad2 <SecureElementGetDevEui+0x12>
{
 8010ac2:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8010ac4:	2208      	movs	r2, #8
 8010ac6:	4904      	ldr	r1, [pc, #16]	; (8010ad8 <SecureElementGetDevEui+0x18>)
 8010ac8:	6809      	ldr	r1, [r1, #0]
 8010aca:	f000 f934 	bl	8010d36 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010ace:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010ad0:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010ad2:	2002      	movs	r0, #2
}
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop
 8010ad8:	20000efc 	.word	0x20000efc

08010adc <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8010adc:	b148      	cbz	r0, 8010af2 <SecureElementSetJoinEui+0x16>
{
 8010ade:	b508      	push	{r3, lr}
 8010ae0:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8010ae2:	4b05      	ldr	r3, [pc, #20]	; (8010af8 <SecureElementSetJoinEui+0x1c>)
 8010ae4:	6818      	ldr	r0, [r3, #0]
 8010ae6:	2208      	movs	r2, #8
 8010ae8:	4410      	add	r0, r2
 8010aea:	f000 f924 	bl	8010d36 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010aee:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010af0:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010af2:	2002      	movs	r0, #2
}
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	20000efc 	.word	0x20000efc

08010afc <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8010afc:	b140      	cbz	r0, 8010b10 <SecureElementGetJoinEui+0x14>
{
 8010afe:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8010b00:	4a04      	ldr	r2, [pc, #16]	; (8010b14 <SecureElementGetJoinEui+0x18>)
 8010b02:	6811      	ldr	r1, [r2, #0]
 8010b04:	2208      	movs	r2, #8
 8010b06:	4411      	add	r1, r2
 8010b08:	f000 f915 	bl	8010d36 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010b0c:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8010b0e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010b10:	2002      	movs	r0, #2
}
 8010b12:	4770      	bx	lr
 8010b14:	20000efc 	.word	0x20000efc

08010b18 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8010b18:	2802      	cmp	r0, #2
 8010b1a:	d004      	beq.n	8010b26 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8010b1c:	4b04      	ldr	r3, [pc, #16]	; (8010b30 <SecureElementSetDevAddr+0x18>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8010b22:	2000      	movs	r0, #0
 8010b24:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8010b26:	4b02      	ldr	r3, [pc, #8]	; (8010b30 <SecureElementSetDevAddr+0x18>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	6119      	str	r1, [r3, #16]
 8010b2c:	e7f9      	b.n	8010b22 <SecureElementSetDevAddr+0xa>
 8010b2e:	bf00      	nop
 8010b30:	20000efc 	.word	0x20000efc

08010b34 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 8010b34:	b169      	cbz	r1, 8010b52 <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8010b36:	2802      	cmp	r0, #2
 8010b38:	d005      	beq.n	8010b46 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8010b3a:	4a07      	ldr	r2, [pc, #28]	; (8010b58 <SecureElementGetDevAddr+0x24>)
 8010b3c:	6812      	ldr	r2, [r2, #0]
 8010b3e:	6952      	ldr	r2, [r2, #20]
 8010b40:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8010b42:	2000      	movs	r0, #0
 8010b44:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8010b46:	4a04      	ldr	r2, [pc, #16]	; (8010b58 <SecureElementGetDevAddr+0x24>)
 8010b48:	6812      	ldr	r2, [r2, #0]
 8010b4a:	6912      	ldr	r2, [r2, #16]
 8010b4c:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 8010b4e:	2000      	movs	r0, #0
 8010b50:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8010b52:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	20000efc 	.word	0x20000efc

08010b5c <SecureElementInitMcuID>:
{
 8010b5c:	b530      	push	{r4, r5, lr}
 8010b5e:	b085      	sub	sp, #20
 8010b60:	4605      	mov	r5, r0
 8010b62:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 8010b64:	2300      	movs	r3, #0
 8010b66:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 8010b68:	a802      	add	r0, sp, #8
 8010b6a:	f7ff ffa9 	bl	8010ac0 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8010b6e:	a901      	add	r1, sp, #4
 8010b70:	2001      	movs	r0, #1
 8010b72:	f7ff ffdf 	bl	8010b34 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 8010b76:	b195      	cbz	r5, 8010b9e <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8010b78:	2300      	movs	r3, #0
 8010b7a:	2b07      	cmp	r3, #7
 8010b7c:	d808      	bhi.n	8010b90 <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 8010b7e:	f103 0210 	add.w	r2, r3, #16
 8010b82:	446a      	add	r2, sp
 8010b84:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8010b88:	b9aa      	cbnz	r2, 8010bb6 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8010b8a:	3301      	adds	r3, #1
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	e7f4      	b.n	8010b7a <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 8010b90:	2300      	movs	r3, #0
        if( id_init == false )
 8010b92:	b923      	cbnz	r3, 8010b9e <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 8010b94:	a802      	add	r0, sp, #8
 8010b96:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 8010b98:	a802      	add	r0, sp, #8
 8010b9a:	f7ff ff83 	bl	8010aa4 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8010b9e:	b13c      	cbz	r4, 8010bb0 <SecureElementInitMcuID+0x54>
 8010ba0:	9b01      	ldr	r3, [sp, #4]
 8010ba2:	b92b      	cbnz	r3, 8010bb0 <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 8010ba4:	a801      	add	r0, sp, #4
 8010ba6:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8010ba8:	9901      	ldr	r1, [sp, #4]
 8010baa:	2001      	movs	r0, #1
 8010bac:	f7ff ffb4 	bl	8010b18 <SecureElementSetDevAddr>
}
 8010bb0:	2000      	movs	r0, #0
 8010bb2:	b005      	add	sp, #20
 8010bb4:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e7eb      	b.n	8010b92 <SecureElementInitMcuID+0x36>
	...

08010bbc <PrintIds>:
{
 8010bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bbe:	b08f      	sub	sp, #60	; 0x3c
 8010bc0:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 8010bc2:	2400      	movs	r4, #0
 8010bc4:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 8010bc6:	a80a      	add	r0, sp, #40	; 0x28
 8010bc8:	f7ff ff7a 	bl	8010ac0 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8010bcc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8010bd0:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8010bd4:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 8010bd8:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8010bdc:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8010be0:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 8010be4:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 8010be8:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 8010bec:	f8cd e01c 	str.w	lr, [sp, #28]
 8010bf0:	f8cd c018 	str.w	ip, [sp, #24]
 8010bf4:	9705      	str	r7, [sp, #20]
 8010bf6:	9604      	str	r6, [sp, #16]
 8010bf8:	9003      	str	r0, [sp, #12]
 8010bfa:	9102      	str	r1, [sp, #8]
 8010bfc:	9201      	str	r2, [sp, #4]
 8010bfe:	9300      	str	r3, [sp, #0]
 8010c00:	4b20      	ldr	r3, [pc, #128]	; (8010c84 <PrintIds+0xc8>)
 8010c02:	4622      	mov	r2, r4
 8010c04:	4621      	mov	r1, r4
 8010c06:	2002      	movs	r0, #2
 8010c08:	f001 ff72 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 8010c0c:	a80c      	add	r0, sp, #48	; 0x30
 8010c0e:	f7ff ff75 	bl	8010afc <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8010c12:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010c16:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8010c1a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8010c1e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8010c22:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8010c26:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 8010c2a:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 8010c2e:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 8010c32:	f8cd e01c 	str.w	lr, [sp, #28]
 8010c36:	f8cd c018 	str.w	ip, [sp, #24]
 8010c3a:	9705      	str	r7, [sp, #20]
 8010c3c:	9604      	str	r6, [sp, #16]
 8010c3e:	9003      	str	r0, [sp, #12]
 8010c40:	9102      	str	r1, [sp, #8]
 8010c42:	9201      	str	r2, [sp, #4]
 8010c44:	9300      	str	r3, [sp, #0]
 8010c46:	4b10      	ldr	r3, [pc, #64]	; (8010c88 <PrintIds+0xcc>)
 8010c48:	4622      	mov	r2, r4
 8010c4a:	4621      	mov	r1, r4
 8010c4c:	2002      	movs	r0, #2
 8010c4e:	f001 ff4f 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 8010c52:	a909      	add	r1, sp, #36	; 0x24
 8010c54:	4628      	mov	r0, r5
 8010c56:	f7ff ff6d 	bl	8010b34 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8010c5a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8010c5e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8010c62:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8010c66:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8010c6a:	9003      	str	r0, [sp, #12]
 8010c6c:	9102      	str	r1, [sp, #8]
 8010c6e:	9201      	str	r2, [sp, #4]
 8010c70:	9300      	str	r3, [sp, #0]
 8010c72:	4b06      	ldr	r3, [pc, #24]	; (8010c8c <PrintIds+0xd0>)
 8010c74:	4622      	mov	r2, r4
 8010c76:	4621      	mov	r1, r4
 8010c78:	2002      	movs	r0, #2
 8010c7a:	f001 ff39 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 8010c7e:	b00f      	add	sp, #60	; 0x3c
 8010c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c82:	bf00      	nop
 8010c84:	0801435c 	.word	0x0801435c
 8010c88:	0801439c 	.word	0x0801439c
 8010c8c:	080143dc 	.word	0x080143dc

08010c90 <SecureElementPrintKeys>:
{
 8010c90:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 8010c92:	2000      	movs	r0, #0
 8010c94:	f7ff fdac 	bl	80107f0 <PrintKey>
    PrintKey( NWK_KEY );
 8010c98:	2001      	movs	r0, #1
 8010c9a:	f7ff fda9 	bl	80107f0 <PrintKey>
    PrintKey( APP_S_KEY );
 8010c9e:	2009      	movs	r0, #9
 8010ca0:	f7ff fda6 	bl	80107f0 <PrintKey>
    PrintKey( NWK_S_KEY );
 8010ca4:	2008      	movs	r0, #8
 8010ca6:	f7ff fda3 	bl	80107f0 <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 8010caa:	2000      	movs	r0, #0
 8010cac:	f7ff ff86 	bl	8010bbc <PrintIds>
}
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	bd08      	pop	{r3, pc}

08010cb4 <SecureElementPrintSessionKeys>:
{
 8010cb4:	b510      	push	{r4, lr}
 8010cb6:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 8010cb8:	200b      	movs	r0, #11
 8010cba:	f7ff fd99 	bl	80107f0 <PrintKey>
    PrintKey( MC_KE_KEY );
 8010cbe:	200c      	movs	r0, #12
 8010cc0:	f7ff fd96 	bl	80107f0 <PrintKey>
    PrintKey( APP_S_KEY );
 8010cc4:	2009      	movs	r0, #9
 8010cc6:	f7ff fd93 	bl	80107f0 <PrintKey>
    PrintKey( NWK_S_KEY );
 8010cca:	2008      	movs	r0, #8
 8010ccc:	f7ff fd90 	bl	80107f0 <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 8010cd0:	200a      	movs	r0, #10
 8010cd2:	f7ff fd8d 	bl	80107f0 <PrintKey>
    PrintIds( mode );
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f7ff ff70 	bl	8010bbc <PrintIds>
}
 8010cdc:	2000      	movs	r0, #0
 8010cde:	bd10      	pop	{r4, pc}

08010ce0 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8010ce0:	4b09      	ldr	r3, [pc, #36]	; (8010d08 <rand1+0x28>)
 8010ce2:	681a      	ldr	r2, [r3, #0]
 8010ce4:	4909      	ldr	r1, [pc, #36]	; (8010d0c <rand1+0x2c>)
 8010ce6:	f243 0039 	movw	r0, #12345	; 0x3039
 8010cea:	fb01 0002 	mla	r0, r1, r2, r0
 8010cee:	6018      	str	r0, [r3, #0]
 8010cf0:	2303      	movs	r3, #3
 8010cf2:	fba3 2300 	umull	r2, r3, r3, r0
 8010cf6:	1ac2      	subs	r2, r0, r3
 8010cf8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8010cfc:	0f9b      	lsrs	r3, r3, #30
 8010cfe:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8010d02:	1ac0      	subs	r0, r0, r3
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	200000f8 	.word	0x200000f8
 8010d0c:	41c64e6d 	.word	0x41c64e6d

08010d10 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8010d10:	4b01      	ldr	r3, [pc, #4]	; (8010d18 <srand1+0x8>)
 8010d12:	6018      	str	r0, [r3, #0]
}
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop
 8010d18:	200000f8 	.word	0x200000f8

08010d1c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8010d1c:	b538      	push	{r3, r4, r5, lr}
 8010d1e:	4605      	mov	r5, r0
 8010d20:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8010d22:	f7ff ffdd 	bl	8010ce0 <rand1>
 8010d26:	1b61      	subs	r1, r4, r5
 8010d28:	3101      	adds	r1, #1
 8010d2a:	fb90 f3f1 	sdiv	r3, r0, r1
 8010d2e:	fb01 0013 	mls	r0, r1, r3, r0
}
 8010d32:	4428      	add	r0, r5
 8010d34:	bd38      	pop	{r3, r4, r5, pc}

08010d36 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8010d36:	e004      	b.n	8010d42 <memcpy1+0xc>
    {
        *dst++ = *src++;
 8010d38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d3c:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8010d40:	461a      	mov	r2, r3
 8010d42:	1e53      	subs	r3, r2, #1
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	2a00      	cmp	r2, #0
 8010d48:	d1f6      	bne.n	8010d38 <memcpy1+0x2>
    }
}
 8010d4a:	4770      	bx	lr

08010d4c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8010d4c:	1e53      	subs	r3, r2, #1
 8010d4e:	4418      	add	r0, r3
    while( size-- )
 8010d50:	e004      	b.n	8010d5c <memcpyr+0x10>
    {
        *dst-- = *src++;
 8010d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d56:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	1e53      	subs	r3, r2, #1
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	2a00      	cmp	r2, #0
 8010d62:	d1f6      	bne.n	8010d52 <memcpyr+0x6>
    }
}
 8010d64:	4770      	bx	lr

08010d66 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8010d66:	e002      	b.n	8010d6e <memset1+0x8>
    {
        *dst++ = value;
 8010d68:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	1e53      	subs	r3, r2, #1
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	2a00      	cmp	r2, #0
 8010d74:	d1f8      	bne.n	8010d68 <memset1+0x2>
    }
}
 8010d76:	4770      	bx	lr

08010d78 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8010d78:	b1f0      	cbz	r0, 8010db8 <Crc32+0x40>
{
 8010d7a:	b510      	push	{r4, lr}
 8010d7c:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8010d7e:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 8010d82:	f04f 30ff 	mov.w	r0, #4294967295
 8010d86:	e00e      	b.n	8010da6 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8010d88:	f340 0c00 	sbfx	ip, r0, #0, #1
 8010d8c:	4a0b      	ldr	r2, [pc, #44]	; (8010dbc <Crc32+0x44>)
 8010d8e:	ea0c 0202 	and.w	r2, ip, r2
 8010d92:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8010d96:	3301      	adds	r3, #1
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	2b07      	cmp	r3, #7
 8010d9c:	d9f4      	bls.n	8010d88 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 8010d9e:	f10e 0e01 	add.w	lr, lr, #1
 8010da2:	fa1f fe8e 	uxth.w	lr, lr
 8010da6:	458e      	cmp	lr, r1
 8010da8:	d204      	bcs.n	8010db4 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8010daa:	f814 300e 	ldrb.w	r3, [r4, lr]
 8010dae:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8010db0:	2300      	movs	r3, #0
 8010db2:	e7f2      	b.n	8010d9a <Crc32+0x22>
        }
    }

    return ~crc;
 8010db4:	43c0      	mvns	r0, r0
}
 8010db6:	bd10      	pop	{r4, pc}
        return 0;
 8010db8:	2000      	movs	r0, #0
}
 8010dba:	4770      	bx	lr
 8010dbc:	edb88320 	.word	0xedb88320

08010dc0 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8010dc0:	2001      	movs	r0, #1
 8010dc2:	4770      	bx	lr

08010dc4 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8010dc4:	280a      	cmp	r0, #10
 8010dc6:	d807      	bhi.n	8010dd8 <RadioGetLoRaBandwidthInHz+0x14>
 8010dc8:	e8df f000 	tbb	[pc, r0]
 8010dcc:	17110b20 	.word	0x17110b20
 8010dd0:	061e1c1a 	.word	0x061e1c1a
 8010dd4:	0e08      	.short	0x0e08
 8010dd6:	14          	.byte	0x14
 8010dd7:	00          	.byte	0x00
 8010dd8:	2000      	movs	r0, #0
 8010dda:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8010ddc:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8010de0:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8010de2:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8010de6:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8010de8:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8010dec:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8010dee:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8010df2:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8010df4:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8010df8:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8010dfa:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8010dfe:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8010e00:	4804      	ldr	r0, [pc, #16]	; (8010e14 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8010e02:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8010e04:	4804      	ldr	r0, [pc, #16]	; (8010e18 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8010e06:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8010e08:	4804      	ldr	r0, [pc, #16]	; (8010e1c <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8010e0a:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8010e0c:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8010e10:	4770      	bx	lr
 8010e12:	bf00      	nop
 8010e14:	0001e848 	.word	0x0001e848
 8010e18:	0003d090 	.word	0x0003d090
 8010e1c:	0007a120 	.word	0x0007a120

08010e20 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010e20:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 8010e24:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010e26:	b953      	cbnz	r3, 8010e3e <RadioGetGfskTimeOnAirNumerator+0x1e>
 8010e28:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8010e2a:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010e2c:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8010e2e:	b141      	cbz	r1, 8010e42 <RadioGetGfskTimeOnAirNumerator+0x22>
 8010e30:	2302      	movs	r3, #2
 8010e32:	f89d 0000 	ldrb.w	r0, [sp]
 8010e36:	4418      	add	r0, r3
}
 8010e38:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8010e3c:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010e3e:	2300      	movs	r3, #0
 8010e40:	e7f3      	b.n	8010e2a <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8010e42:	2300      	movs	r3, #0
 8010e44:	e7f5      	b.n	8010e32 <RadioGetGfskTimeOnAirNumerator+0x12>

08010e46 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010e46:	b570      	push	{r4, r5, r6, lr}
 8010e48:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8010e4c:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8010e50:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8010e52:	f1a1 0c05 	sub.w	ip, r1, #5
 8010e56:	f1bc 0f01 	cmp.w	ip, #1
 8010e5a:	d931      	bls.n	8010ec0 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010e5c:	b918      	cbnz	r0, 8010e66 <RadioGetLoRaTimeOnAirNumerator+0x20>
 8010e5e:	f1a1 060b 	sub.w	r6, r1, #11
 8010e62:	2e01      	cmp	r6, #1
 8010e64:	d934      	bls.n	8010ed0 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8010e66:	2801      	cmp	r0, #1
 8010e68:	d02e      	beq.n	8010ec8 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8010e6a:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010e6c:	f89d c014 	ldrb.w	ip, [sp, #20]
 8010e70:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8010e74:	b385      	cbz	r5, 8010ed8 <RadioGetLoRaTimeOnAirNumerator+0x92>
 8010e76:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010e78:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8010e7a:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8010e7c:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8010e80:	b364      	cbz	r4, 8010edc <RadioGetLoRaTimeOnAirNumerator+0x96>
 8010e82:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8010e86:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8010e88:	2906      	cmp	r1, #6
 8010e8a:	d904      	bls.n	8010e96 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8010e8c:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8010e90:	b10e      	cbz	r6, 8010e96 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8010e92:	1e88      	subs	r0, r1, #2
 8010e94:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8010e96:	f1bc 0f00 	cmp.w	ip, #0
 8010e9a:	db22      	blt.n	8010ee2 <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8010e9c:	4484      	add	ip, r0
 8010e9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010ea2:	fb9c fcf0 	sdiv	ip, ip, r0
 8010ea6:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8010eaa:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8010eae:	2906      	cmp	r1, #6
 8010eb0:	d801      	bhi.n	8010eb6 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8010eb2:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8010eb6:	0080      	lsls	r0, r0, #2
 8010eb8:	3001      	adds	r0, #1
 8010eba:	3902      	subs	r1, #2
}
 8010ebc:	4088      	lsls	r0, r1
 8010ebe:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8010ec0:	2b0b      	cmp	r3, #11
 8010ec2:	d8cb      	bhi.n	8010e5c <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8010ec4:	230c      	movs	r3, #12
 8010ec6:	e7c9      	b.n	8010e5c <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010ec8:	290c      	cmp	r1, #12
 8010eca:	d003      	beq.n	8010ed4 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8010ecc:	2600      	movs	r6, #0
 8010ece:	e7cd      	b.n	8010e6c <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8010ed0:	2601      	movs	r6, #1
 8010ed2:	e7cb      	b.n	8010e6c <RadioGetLoRaTimeOnAirNumerator+0x26>
 8010ed4:	2601      	movs	r6, #1
 8010ed6:	e7c9      	b.n	8010e6c <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8010ed8:	2000      	movs	r0, #0
 8010eda:	e7cd      	b.n	8010e78 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8010edc:	f04f 0e14 	mov.w	lr, #20
 8010ee0:	e7d1      	b.n	8010e86 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 8010ee2:	f04f 0c00 	mov.w	ip, #0
 8010ee6:	e7d9      	b.n	8010e9c <RadioGetLoRaTimeOnAirNumerator+0x56>

08010ee8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8010ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eea:	b085      	sub	sp, #20
 8010eec:	460e      	mov	r6, r1
 8010eee:	4615      	mov	r5, r2
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8010ef6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010efa:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8010efe:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8010f02:	b148      	cbz	r0, 8010f18 <RadioTimeOnAir+0x30>
 8010f04:	2801      	cmp	r0, #1
 8010f06:	d012      	beq.n	8010f2e <RadioTimeOnAir+0x46>
 8010f08:	2501      	movs	r5, #1
 8010f0a:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8010f0c:	442c      	add	r4, r5
 8010f0e:	1e60      	subs	r0, r4, #1
}
 8010f10:	fbb0 f0f5 	udiv	r0, r0, r5
 8010f14:	b005      	add	sp, #20
 8010f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8010f18:	f8cd c004 	str.w	ip, [sp, #4]
 8010f1c:	9700      	str	r7, [sp, #0]
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f7ff ff7e 	bl	8010e20 <RadioGetGfskTimeOnAirNumerator>
 8010f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010f28:	fb03 f400 	mul.w	r4, r3, r0
        break;
 8010f2c:	e7ee      	b.n	8010f0c <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8010f2e:	f8cd c008 	str.w	ip, [sp, #8]
 8010f32:	9701      	str	r7, [sp, #4]
 8010f34:	9300      	str	r3, [sp, #0]
 8010f36:	4613      	mov	r3, r2
 8010f38:	460a      	mov	r2, r1
 8010f3a:	4629      	mov	r1, r5
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	f7ff ff82 	bl	8010e46 <RadioGetLoRaTimeOnAirNumerator>
 8010f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010f46:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8010f4a:	4b03      	ldr	r3, [pc, #12]	; (8010f58 <RadioTimeOnAir+0x70>)
 8010f4c:	5d98      	ldrb	r0, [r3, r6]
 8010f4e:	f7ff ff39 	bl	8010dc4 <RadioGetLoRaBandwidthInHz>
 8010f52:	4605      	mov	r5, r0
        break;
 8010f54:	e7da      	b.n	8010f0c <RadioTimeOnAir+0x24>
 8010f56:	bf00      	nop
 8010f58:	08014588 	.word	0x08014588

08010f5c <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8010f5c:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8010f5e:	4b05      	ldr	r3, [pc, #20]	; (8010f74 <RadioOnTxTimeoutProcess+0x18>)
 8010f60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010f64:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8010f66:	4b04      	ldr	r3, [pc, #16]	; (8010f78 <RadioOnTxTimeoutProcess+0x1c>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	b113      	cbz	r3, 8010f72 <RadioOnTxTimeoutProcess+0x16>
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	b103      	cbz	r3, 8010f72 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8010f70:	4798      	blx	r3
    }
}
 8010f72:	bd08      	pop	{r3, pc}
 8010f74:	48000400 	.word	0x48000400
 8010f78:	20001000 	.word	0x20001000

08010f7c <RadioOnTxTimeoutIrq>:
{
 8010f7c:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8010f7e:	f7ff ffed 	bl	8010f5c <RadioOnTxTimeoutProcess>
}
 8010f82:	bd08      	pop	{r3, pc}

08010f84 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8010f84:	b508      	push	{r3, lr}
 8010f86:	4b05      	ldr	r3, [pc, #20]	; (8010f9c <RadioOnRxTimeoutProcess+0x18>)
 8010f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010f8c:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8010f8e:	4b04      	ldr	r3, [pc, #16]	; (8010fa0 <RadioOnRxTimeoutProcess+0x1c>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	b113      	cbz	r3, 8010f9a <RadioOnRxTimeoutProcess+0x16>
 8010f94:	68db      	ldr	r3, [r3, #12]
 8010f96:	b103      	cbz	r3, 8010f9a <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8010f98:	4798      	blx	r3
    }
}
 8010f9a:	bd08      	pop	{r3, pc}
 8010f9c:	48000400 	.word	0x48000400
 8010fa0:	20001000 	.word	0x20001000

08010fa4 <RadioOnRxTimeoutIrq>:
{
 8010fa4:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8010fa6:	f7ff ffed 	bl	8010f84 <RadioOnRxTimeoutProcess>
}
 8010faa:	bd08      	pop	{r3, pc}

08010fac <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8010fac:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb0:	4770      	bx	lr

08010fb2 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8010fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb6:	4770      	bx	lr

08010fb8 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8010fb8:	2001      	movs	r0, #1
 8010fba:	4770      	bx	lr

08010fbc <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8010fbc:	2001      	movs	r0, #1
 8010fbe:	4770      	bx	lr

08010fc0 <RadioWrite>:
{
 8010fc0:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8010fc2:	f000 fe37 	bl	8011c34 <SUBGRF_WriteRegister>
}
 8010fc6:	bd08      	pop	{r3, pc}

08010fc8 <RadioTxCw>:
{
 8010fc8:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8010fca:	f001 fbcf 	bl	801276c <SUBGRF_SetRfTxPower>
 8010fce:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010fd0:	210e      	movs	r1, #14
 8010fd2:	f640 101f 	movw	r0, #2335	; 0x91f
 8010fd6:	f000 fe2d 	bl	8011c34 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8010fda:	2101      	movs	r1, #1
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f001 fbb1 	bl	8012744 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010fe2:	f000 fff7 	bl	8011fd4 <SUBGRF_SetTxContinuousWave>
}
 8010fe6:	bd10      	pop	{r4, pc}

08010fe8 <RadioTxPrbs>:
{
 8010fe8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8010fea:	2101      	movs	r1, #1
 8010fec:	4b07      	ldr	r3, [pc, #28]	; (801100c <RadioTxPrbs+0x24>)
 8010fee:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8010ff2:	f001 fba7 	bl	8012744 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8010ff6:	212d      	movs	r1, #45	; 0x2d
 8010ff8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010ffc:	f7ff ffe0 	bl	8010fc0 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8011000:	f000 ffef 	bl	8011fe2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8011004:	4802      	ldr	r0, [pc, #8]	; (8011010 <RadioTxPrbs+0x28>)
 8011006:	f000 ff25 	bl	8011e54 <SUBGRF_SetTx>
}
 801100a:	bd08      	pop	{r3, pc}
 801100c:	2000101c 	.word	0x2000101c
 8011010:	000fffff 	.word	0x000fffff

08011014 <RadioSetRxDutyCycle>:
{
 8011014:	b570      	push	{r4, r5, r6, lr}
 8011016:	4604      	mov	r4, r0
 8011018:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801101a:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 801101e:	4e09      	ldr	r6, [pc, #36]	; (8011044 <RadioSetRxDutyCycle+0x30>)
 8011020:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011022:	2300      	movs	r3, #0
 8011024:	461a      	mov	r2, r3
 8011026:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801102a:	4608      	mov	r0, r1
 801102c:	f001 f8a5 	bl	801217a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011030:	2100      	movs	r1, #0
 8011032:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8011036:	f001 fb85 	bl	8012744 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801103a:	4629      	mov	r1, r5
 801103c:	4620      	mov	r0, r4
 801103e:	f000 ff99 	bl	8011f74 <SUBGRF_SetRxDutyCycle>
}
 8011042:	bd70      	pop	{r4, r5, r6, pc}
 8011044:	2000101c 	.word	0x2000101c

08011048 <RadioRxBoosted>:
{
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 801104c:	f001 fc69 	bl	8012922 <RFW_Is_Init>
 8011050:	2801      	cmp	r0, #1
 8011052:	d019      	beq.n	8011088 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011054:	2300      	movs	r3, #0
 8011056:	461a      	mov	r2, r3
 8011058:	f240 2162 	movw	r1, #610	; 0x262
 801105c:	4608      	mov	r0, r1
 801105e:	f001 f88c 	bl	801217a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8011062:	b9a4      	cbnz	r4, 801108e <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011064:	4c11      	ldr	r4, [pc, #68]	; (80110ac <RadioRxBoosted+0x64>)
 8011066:	2100      	movs	r1, #0
 8011068:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 801106a:	4b11      	ldr	r3, [pc, #68]	; (80110b0 <RadioRxBoosted+0x68>)
 801106c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011070:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011072:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8011076:	f001 fb65 	bl	8012744 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 801107a:	7863      	ldrb	r3, [r4, #1]
 801107c:	b183      	cbz	r3, 80110a0 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801107e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011082:	f000 ff59 	bl	8011f38 <SUBGRF_SetRxBoosted>
}
 8011086:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8011088:	f001 fc53 	bl	8012932 <RFW_ReceiveInit>
 801108c:	e7e9      	b.n	8011062 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801108e:	4d09      	ldr	r5, [pc, #36]	; (80110b4 <RadioRxBoosted+0x6c>)
 8011090:	4621      	mov	r1, r4
 8011092:	4628      	mov	r0, r5
 8011094:	f002 f91e 	bl	80132d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8011098:	4628      	mov	r0, r5
 801109a:	f002 f8d5 	bl	8013248 <UTIL_TIMER_Start>
 801109e:	e7e1      	b.n	8011064 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80110a0:	4b02      	ldr	r3, [pc, #8]	; (80110ac <RadioRxBoosted+0x64>)
 80110a2:	6898      	ldr	r0, [r3, #8]
 80110a4:	0180      	lsls	r0, r0, #6
 80110a6:	f000 ff47 	bl	8011f38 <SUBGRF_SetRxBoosted>
}
 80110aa:	e7ec      	b.n	8011086 <RadioRxBoosted+0x3e>
 80110ac:	2000101c 	.word	0x2000101c
 80110b0:	48000400 	.word	0x48000400
 80110b4:	20001004 	.word	0x20001004

080110b8 <RadioStandby>:
{
 80110b8:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80110ba:	2000      	movs	r0, #0
 80110bc:	f000 feb0 	bl	8011e20 <SUBGRF_SetStandby>
}
 80110c0:	bd08      	pop	{r3, pc}

080110c2 <RadioRead>:
{
 80110c2:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 80110c4:	f000 fdc6 	bl	8011c54 <SUBGRF_ReadRegister>
}
 80110c8:	bd08      	pop	{r3, pc}

080110ca <RadioGetStatus>:
{
 80110ca:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80110cc:	f000 fda6 	bl	8011c1c <SUBGRF_GetOperatingMode>
 80110d0:	2805      	cmp	r0, #5
 80110d2:	d007      	beq.n	80110e4 <RadioGetStatus+0x1a>
 80110d4:	2807      	cmp	r0, #7
 80110d6:	d007      	beq.n	80110e8 <RadioGetStatus+0x1e>
 80110d8:	2804      	cmp	r0, #4
 80110da:	d001      	beq.n	80110e0 <RadioGetStatus+0x16>
            return RF_IDLE;
 80110dc:	2000      	movs	r0, #0
}
 80110de:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80110e0:	2002      	movs	r0, #2
 80110e2:	e7fc      	b.n	80110de <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80110e4:	2001      	movs	r0, #1
 80110e6:	e7fa      	b.n	80110de <RadioGetStatus+0x14>
            return RF_CAD;
 80110e8:	2003      	movs	r0, #3
 80110ea:	e7f8      	b.n	80110de <RadioGetStatus+0x14>

080110ec <RadioIrqProcess>:
{
 80110ec:	b530      	push	{r4, r5, lr}
 80110ee:	b083      	sub	sp, #12
    uint8_t size = 0;
 80110f0:	2300      	movs	r3, #0
 80110f2:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80110f6:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80110f8:	4ba5      	ldr	r3, [pc, #660]	; (8011390 <RadioIrqProcess+0x2a4>)
 80110fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80110fe:	2b20      	cmp	r3, #32
 8011100:	d829      	bhi.n	8011156 <RadioIrqProcess+0x6a>
 8011102:	b21a      	sxth	r2, r3
 8011104:	2a00      	cmp	r2, #0
 8011106:	f000 8140 	beq.w	801138a <RadioIrqProcess+0x29e>
 801110a:	3b01      	subs	r3, #1
 801110c:	2b1f      	cmp	r3, #31
 801110e:	f200 813c 	bhi.w	801138a <RadioIrqProcess+0x29e>
 8011112:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011116:	0063      	.short	0x0063
 8011118:	013a007f 	.word	0x013a007f
 801111c:	013a00f7 	.word	0x013a00f7
 8011120:	013a013a 	.word	0x013a013a
 8011124:	013a0127 	.word	0x013a0127
 8011128:	013a013a 	.word	0x013a013a
 801112c:	013a013a 	.word	0x013a013a
 8011130:	013a013a 	.word	0x013a013a
 8011134:	013a0134 	.word	0x013a0134
 8011138:	013a013a 	.word	0x013a013a
 801113c:	013a013a 	.word	0x013a013a
 8011140:	013a013a 	.word	0x013a013a
 8011144:	013a013a 	.word	0x013a013a
 8011148:	013a013a 	.word	0x013a013a
 801114c:	013a013a 	.word	0x013a013a
 8011150:	013a013a 	.word	0x013a013a
 8011154:	0155      	.short	0x0155
 8011156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801115a:	f000 80b3 	beq.w	80112c4 <RadioIrqProcess+0x1d8>
 801115e:	d928      	bls.n	80111b2 <RadioIrqProcess+0xc6>
 8011160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011164:	f040 8111 	bne.w	801138a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8011168:	4b8a      	ldr	r3, [pc, #552]	; (8011394 <RadioIrqProcess+0x2a8>)
 801116a:	2201      	movs	r2, #1
 801116c:	2100      	movs	r1, #0
 801116e:	2002      	movs	r0, #2
 8011170:	f001 fcbe 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8011174:	f000 fd52 	bl	8011c1c <SUBGRF_GetOperatingMode>
 8011178:	2804      	cmp	r0, #4
 801117a:	f000 80b0 	beq.w	80112de <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801117e:	f000 fd4d 	bl	8011c1c <SUBGRF_GetOperatingMode>
 8011182:	2805      	cmp	r0, #5
 8011184:	f040 8101 	bne.w	801138a <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8011188:	4b83      	ldr	r3, [pc, #524]	; (8011398 <RadioIrqProcess+0x2ac>)
 801118a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801118e:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8011190:	4882      	ldr	r0, [pc, #520]	; (801139c <RadioIrqProcess+0x2b0>)
 8011192:	f001 ffff 	bl	8013194 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8011196:	2000      	movs	r0, #0
 8011198:	f000 fe42 	bl	8011e20 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801119c:	4b80      	ldr	r3, [pc, #512]	; (80113a0 <RadioIrqProcess+0x2b4>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f000 80f2 	beq.w	801138a <RadioIrqProcess+0x29e>
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	f000 80ee 	beq.w	801138a <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 80111ae:	4798      	blx	r3
 80111b0:	e0eb      	b.n	801138a <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 80111b2:	2b40      	cmp	r3, #64	; 0x40
 80111b4:	f000 811d 	beq.w	80113f2 <RadioIrqProcess+0x306>
 80111b8:	2b80      	cmp	r3, #128	; 0x80
 80111ba:	f040 80e6 	bne.w	801138a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80111be:	2000      	movs	r0, #0
 80111c0:	f000 fe2e 	bl	8011e20 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80111c4:	4b76      	ldr	r3, [pc, #472]	; (80113a0 <RadioIrqProcess+0x2b4>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f000 80de 	beq.w	801138a <RadioIrqProcess+0x29e>
 80111ce:	699b      	ldr	r3, [r3, #24]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	f000 80da 	beq.w	801138a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 80111d6:	2000      	movs	r0, #0
 80111d8:	4798      	blx	r3
 80111da:	e0d6      	b.n	801138a <RadioIrqProcess+0x29e>
 80111dc:	4b6e      	ldr	r3, [pc, #440]	; (8011398 <RadioIrqProcess+0x2ac>)
 80111de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80111e2:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80111e4:	486f      	ldr	r0, [pc, #444]	; (80113a4 <RadioIrqProcess+0x2b8>)
 80111e6:	f001 ffd5 	bl	8013194 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80111ea:	2000      	movs	r0, #0
 80111ec:	f000 fe18 	bl	8011e20 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80111f0:	f001 fb99 	bl	8012926 <RFW_Is_LongPacketModeEnabled>
 80111f4:	2801      	cmp	r0, #1
 80111f6:	d00a      	beq.n	801120e <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80111f8:	4b69      	ldr	r3, [pc, #420]	; (80113a0 <RadioIrqProcess+0x2b4>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	f000 80c4 	beq.w	801138a <RadioIrqProcess+0x29e>
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	f000 80c0 	beq.w	801138a <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 801120a:	4798      	blx	r3
 801120c:	e0bd      	b.n	801138a <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 801120e:	f001 fb93 	bl	8012938 <RFW_DeInit_TxLongPacket>
 8011212:	e7f1      	b.n	80111f8 <RadioIrqProcess+0x10c>
 8011214:	4b60      	ldr	r3, [pc, #384]	; (8011398 <RadioIrqProcess+0x2ac>)
 8011216:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801121a:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 801121c:	485f      	ldr	r0, [pc, #380]	; (801139c <RadioIrqProcess+0x2b0>)
 801121e:	f001 ffb9 	bl	8013194 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8011222:	4b5b      	ldr	r3, [pc, #364]	; (8011390 <RadioIrqProcess+0x2a4>)
 8011224:	785b      	ldrb	r3, [r3, #1]
 8011226:	b303      	cbz	r3, 801126a <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8011228:	22ff      	movs	r2, #255	; 0xff
 801122a:	f10d 0107 	add.w	r1, sp, #7
 801122e:	485e      	ldr	r0, [pc, #376]	; (80113a8 <RadioIrqProcess+0x2bc>)
 8011230:	f001 fa32 	bl	8012698 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8011234:	485d      	ldr	r0, [pc, #372]	; (80113ac <RadioIrqProcess+0x2c0>)
 8011236:	f001 fa49 	bl	80126cc <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801123a:	4b59      	ldr	r3, [pc, #356]	; (80113a0 <RadioIrqProcess+0x2b4>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	f000 80a3 	beq.w	801138a <RadioIrqProcess+0x29e>
 8011244:	689c      	ldr	r4, [r3, #8]
 8011246:	2c00      	cmp	r4, #0
 8011248:	f000 809f 	beq.w	801138a <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 801124c:	4b50      	ldr	r3, [pc, #320]	; (8011390 <RadioIrqProcess+0x2a4>)
 801124e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011252:	2b01      	cmp	r3, #1
 8011254:	d11d      	bne.n	8011292 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8011256:	4a4e      	ldr	r2, [pc, #312]	; (8011390 <RadioIrqProcess+0x2a4>)
 8011258:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 801125c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8011260:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011264:	4850      	ldr	r0, [pc, #320]	; (80113a8 <RadioIrqProcess+0x2bc>)
 8011266:	47a0      	blx	r4
                break;
 8011268:	e08f      	b.n	801138a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801126a:	2000      	movs	r0, #0
 801126c:	f000 fdd8 	bl	8011e20 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8011270:	2100      	movs	r1, #0
 8011272:	f640 1002 	movw	r0, #2306	; 0x902
 8011276:	f000 fcdd 	bl	8011c34 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801127a:	f640 1044 	movw	r0, #2372	; 0x944
 801127e:	f000 fce9 	bl	8011c54 <SUBGRF_ReadRegister>
 8011282:	f040 0102 	orr.w	r1, r0, #2
 8011286:	b2c9      	uxtb	r1, r1
 8011288:	f640 1044 	movw	r0, #2372	; 0x944
 801128c:	f000 fcd2 	bl	8011c34 <SUBGRF_WriteRegister>
 8011290:	e7ca      	b.n	8011228 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8011292:	4c3f      	ldr	r4, [pc, #252]	; (8011390 <RadioIrqProcess+0x2a4>)
 8011294:	4669      	mov	r1, sp
 8011296:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011298:	f001 faf8 	bl	801288c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801129c:	4b40      	ldr	r3, [pc, #256]	; (80113a0 <RadioIrqProcess+0x2b4>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	689d      	ldr	r5, [r3, #8]
 80112a2:	9b00      	ldr	r3, [sp, #0]
 80112a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80112a8:	4a41      	ldr	r2, [pc, #260]	; (80113b0 <RadioIrqProcess+0x2c4>)
 80112aa:	fb82 1203 	smull	r1, r2, r2, r3
 80112ae:	17db      	asrs	r3, r3, #31
 80112b0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80112b4:	b25b      	sxtb	r3, r3
 80112b6:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 80112ba:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80112be:	483a      	ldr	r0, [pc, #232]	; (80113a8 <RadioIrqProcess+0x2bc>)
 80112c0:	47a8      	blx	r5
                break;
 80112c2:	e062      	b.n	801138a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80112c4:	2000      	movs	r0, #0
 80112c6:	f000 fdab 	bl	8011e20 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80112ca:	4b35      	ldr	r3, [pc, #212]	; (80113a0 <RadioIrqProcess+0x2b4>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d05b      	beq.n	801138a <RadioIrqProcess+0x29e>
 80112d2:	699b      	ldr	r3, [r3, #24]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d058      	beq.n	801138a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 80112d8:	2001      	movs	r0, #1
 80112da:	4798      	blx	r3
 80112dc:	e055      	b.n	801138a <RadioIrqProcess+0x29e>
 80112de:	4b2e      	ldr	r3, [pc, #184]	; (8011398 <RadioIrqProcess+0x2ac>)
 80112e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80112e4:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 80112e6:	482f      	ldr	r0, [pc, #188]	; (80113a4 <RadioIrqProcess+0x2b8>)
 80112e8:	f001 ff54 	bl	8013194 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80112ec:	2000      	movs	r0, #0
 80112ee:	f000 fd97 	bl	8011e20 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80112f2:	4b2b      	ldr	r3, [pc, #172]	; (80113a0 <RadioIrqProcess+0x2b4>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d047      	beq.n	801138a <RadioIrqProcess+0x29e>
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d044      	beq.n	801138a <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8011300:	4798      	blx	r3
 8011302:	e042      	b.n	801138a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8011304:	4b2b      	ldr	r3, [pc, #172]	; (80113b4 <RadioIrqProcess+0x2c8>)
 8011306:	2201      	movs	r2, #1
 8011308:	2100      	movs	r1, #0
 801130a:	2002      	movs	r0, #2
 801130c:	f001 fbf0 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8011310:	4b1f      	ldr	r3, [pc, #124]	; (8011390 <RadioIrqProcess+0x2a4>)
 8011312:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011314:	b3c9      	cbz	r1, 801138a <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8011316:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801131a:	f640 1003 	movw	r0, #2307	; 0x903
 801131e:	f7ff fe4f 	bl	8010fc0 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8011322:	4c1b      	ldr	r4, [pc, #108]	; (8011390 <RadioIrqProcess+0x2a4>)
 8011324:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8011328:	f640 1004 	movw	r0, #2308	; 0x904
 801132c:	f7ff fe48 	bl	8010fc0 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8011330:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8011334:	f640 1005 	movw	r0, #2309	; 0x905
 8011338:	f7ff fe42 	bl	8010fc0 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801133c:	f640 1002 	movw	r0, #2306	; 0x902
 8011340:	f7ff febf 	bl	80110c2 <RadioRead>
 8011344:	f040 0101 	orr.w	r1, r0, #1
 8011348:	b2c9      	uxtb	r1, r1
 801134a:	f640 1002 	movw	r0, #2306	; 0x902
 801134e:	f7ff fe37 	bl	8010fc0 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8011352:	2200      	movs	r2, #0
 8011354:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011356:	4613      	mov	r3, r2
 8011358:	f240 2162 	movw	r1, #610	; 0x262
 801135c:	4608      	mov	r0, r1
 801135e:	f000 ff0c 	bl	801217a <SUBGRF_SetDioIrqParams>
 8011362:	e012      	b.n	801138a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8011364:	4b14      	ldr	r3, [pc, #80]	; (80113b8 <RadioIrqProcess+0x2cc>)
 8011366:	2201      	movs	r2, #1
 8011368:	2100      	movs	r1, #0
 801136a:	2002      	movs	r0, #2
 801136c:	f001 fbc0 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8011370:	f001 fad7 	bl	8012922 <RFW_Is_Init>
 8011374:	2801      	cmp	r0, #1
 8011376:	d108      	bne.n	801138a <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8011378:	f001 fadf 	bl	801293a <RFW_ReceivePayload>
 801137c:	e005      	b.n	801138a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801137e:	4b0f      	ldr	r3, [pc, #60]	; (80113bc <RadioIrqProcess+0x2d0>)
 8011380:	2201      	movs	r2, #1
 8011382:	2100      	movs	r1, #0
 8011384:	2002      	movs	r0, #2
 8011386:	f001 fbb3 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
}
 801138a:	b003      	add	sp, #12
 801138c:	bd30      	pop	{r4, r5, pc}
 801138e:	bf00      	nop
 8011390:	2000101c 	.word	0x2000101c
 8011394:	0801451c 	.word	0x0801451c
 8011398:	48000400 	.word	0x48000400
 801139c:	20001004 	.word	0x20001004
 80113a0:	20001000 	.word	0x20001000
 80113a4:	20001078 	.word	0x20001078
 80113a8:	20000f00 	.word	0x20000f00
 80113ac:	20001040 	.word	0x20001040
 80113b0:	10624dd3 	.word	0x10624dd3
 80113b4:	08014530 	.word	0x08014530
 80113b8:	0801453c 	.word	0x0801453c
 80113bc:	08014548 	.word	0x08014548
        TimerStop( &RxTimeoutTimer );
 80113c0:	4817      	ldr	r0, [pc, #92]	; (8011420 <RadioIrqProcess+0x334>)
 80113c2:	f001 fee7 	bl	8013194 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80113c6:	4b17      	ldr	r3, [pc, #92]	; (8011424 <RadioIrqProcess+0x338>)
 80113c8:	785b      	ldrb	r3, [r3, #1]
 80113ca:	b173      	cbz	r3, 80113ea <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80113cc:	4b16      	ldr	r3, [pc, #88]	; (8011428 <RadioIrqProcess+0x33c>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d0da      	beq.n	801138a <RadioIrqProcess+0x29e>
 80113d4:	68db      	ldr	r3, [r3, #12]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d0d7      	beq.n	801138a <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 80113da:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80113dc:	4b13      	ldr	r3, [pc, #76]	; (801142c <RadioIrqProcess+0x340>)
 80113de:	2201      	movs	r2, #1
 80113e0:	2100      	movs	r1, #0
 80113e2:	2002      	movs	r0, #2
 80113e4:	f001 fb84 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
 80113e8:	e7cf      	b.n	801138a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80113ea:	2000      	movs	r0, #0
 80113ec:	f000 fd18 	bl	8011e20 <SUBGRF_SetStandby>
 80113f0:	e7ec      	b.n	80113cc <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80113f2:	4b0f      	ldr	r3, [pc, #60]	; (8011430 <RadioIrqProcess+0x344>)
 80113f4:	2201      	movs	r2, #1
 80113f6:	2100      	movs	r1, #0
 80113f8:	2002      	movs	r0, #2
 80113fa:	f001 fb79 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80113fe:	4b09      	ldr	r3, [pc, #36]	; (8011424 <RadioIrqProcess+0x338>)
 8011400:	785b      	ldrb	r3, [r3, #1]
 8011402:	b143      	cbz	r3, 8011416 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8011404:	4b08      	ldr	r3, [pc, #32]	; (8011428 <RadioIrqProcess+0x33c>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d0be      	beq.n	801138a <RadioIrqProcess+0x29e>
 801140c:	691b      	ldr	r3, [r3, #16]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d0bb      	beq.n	801138a <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8011412:	4798      	blx	r3
}
 8011414:	e7b9      	b.n	801138a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8011416:	2000      	movs	r0, #0
 8011418:	f000 fd02 	bl	8011e20 <SUBGRF_SetStandby>
 801141c:	e7f2      	b.n	8011404 <RadioIrqProcess+0x318>
 801141e:	bf00      	nop
 8011420:	20001004 	.word	0x20001004
 8011424:	2000101c 	.word	0x2000101c
 8011428:	20001000 	.word	0x20001000
 801142c:	08014554 	.word	0x08014554
 8011430:	08014560 	.word	0x08014560

08011434 <RadioOnDioIrq>:
{
 8011434:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8011436:	4b03      	ldr	r3, [pc, #12]	; (8011444 <RadioOnDioIrq+0x10>)
 8011438:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 801143c:	f7ff fe56 	bl	80110ec <RadioIrqProcess>
}
 8011440:	bd08      	pop	{r3, pc}
 8011442:	bf00      	nop
 8011444:	2000101c 	.word	0x2000101c

08011448 <RadioGetWakeupTime>:
{
 8011448:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801144a:	f001 f9a6 	bl	801279a <SUBGRF_GetRadioWakeUpTime>
}
 801144e:	3003      	adds	r0, #3
 8011450:	bd08      	pop	{r3, pc}
	...

08011454 <RadioSetMaxPayloadLength>:
{
 8011454:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8011456:	2801      	cmp	r0, #1
 8011458:	d004      	beq.n	8011464 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801145a:	4b0a      	ldr	r3, [pc, #40]	; (8011484 <RadioSetMaxPayloadLength+0x30>)
 801145c:	7d5b      	ldrb	r3, [r3, #21]
 801145e:	2b01      	cmp	r3, #1
 8011460:	d008      	beq.n	8011474 <RadioSetMaxPayloadLength+0x20>
}
 8011462:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8011464:	4b08      	ldr	r3, [pc, #32]	; (8011488 <RadioSetMaxPayloadLength+0x34>)
 8011466:	7019      	strb	r1, [r3, #0]
 8011468:	4806      	ldr	r0, [pc, #24]	; (8011484 <RadioSetMaxPayloadLength+0x30>)
 801146a:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801146c:	300e      	adds	r0, #14
 801146e:	f001 f853 	bl	8012518 <SUBGRF_SetPacketParams>
 8011472:	e7f6      	b.n	8011462 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8011474:	4b04      	ldr	r3, [pc, #16]	; (8011488 <RadioSetMaxPayloadLength+0x34>)
 8011476:	7019      	strb	r1, [r3, #0]
 8011478:	4802      	ldr	r0, [pc, #8]	; (8011484 <RadioSetMaxPayloadLength+0x30>)
 801147a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801147c:	300e      	adds	r0, #14
 801147e:	f001 f84b 	bl	8012518 <SUBGRF_SetPacketParams>
}
 8011482:	e7ee      	b.n	8011462 <RadioSetMaxPayloadLength+0xe>
 8011484:	2000101c 	.word	0x2000101c
 8011488:	200000fc 	.word	0x200000fc

0801148c <RadioReadRegisters>:
{
 801148c:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 801148e:	f000 fc5f 	bl	8011d50 <SUBGRF_ReadRegisters>
}
 8011492:	bd08      	pop	{r3, pc}

08011494 <RadioWriteRegisters>:
{
 8011494:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8011496:	f000 fc19 	bl	8011ccc <SUBGRF_WriteRegisters>
}
 801149a:	bd08      	pop	{r3, pc}

0801149c <RadioRssi>:
{
 801149c:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 801149e:	f001 f8cb 	bl	8012638 <SUBGRF_GetRssiInst>
}
 80114a2:	b200      	sxth	r0, r0
 80114a4:	bd08      	pop	{r3, pc}
	...

080114a8 <RadioSetTxContinuousWave>:
{
 80114a8:	b538      	push	{r3, r4, r5, lr}
 80114aa:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80114ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80114b0:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 80114b4:	f000 fed4 	bl	8012260 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80114b8:	4628      	mov	r0, r5
 80114ba:	f001 f957 	bl	801276c <SUBGRF_SetRfTxPower>
 80114be:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80114c0:	210e      	movs	r1, #14
 80114c2:	f640 101f 	movw	r0, #2335	; 0x91f
 80114c6:	f000 fbb5 	bl	8011c34 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80114ca:	2101      	movs	r1, #1
 80114cc:	4628      	mov	r0, r5
 80114ce:	f001 f939 	bl	8012744 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80114d2:	f000 fd7f 	bl	8011fd4 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80114d6:	4d04      	ldr	r5, [pc, #16]	; (80114e8 <RadioSetTxContinuousWave+0x40>)
 80114d8:	4621      	mov	r1, r4
 80114da:	4628      	mov	r0, r5
 80114dc:	f001 fefa 	bl	80132d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80114e0:	4628      	mov	r0, r5
 80114e2:	f001 feb1 	bl	8013248 <UTIL_TIMER_Start>
}
 80114e6:	bd38      	pop	{r3, r4, r5, pc}
 80114e8:	20001078 	.word	0x20001078

080114ec <RadioSetChannel>:
{
 80114ec:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 80114ee:	f000 feb7 	bl	8012260 <SUBGRF_SetRfFrequency>
}
 80114f2:	bd08      	pop	{r3, pc}

080114f4 <RadioStartCad>:
{
 80114f4:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80114f6:	2100      	movs	r1, #0
 80114f8:	4b07      	ldr	r3, [pc, #28]	; (8011518 <RadioStartCad+0x24>)
 80114fa:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80114fe:	f001 f921 	bl	8012744 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8011502:	2300      	movs	r3, #0
 8011504:	461a      	mov	r2, r3
 8011506:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801150a:	4608      	mov	r0, r1
 801150c:	f000 fe35 	bl	801217a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8011510:	f000 fd54 	bl	8011fbc <SUBGRF_SetCad>
}
 8011514:	bd08      	pop	{r3, pc}
 8011516:	bf00      	nop
 8011518:	2000101c 	.word	0x2000101c

0801151c <RadioRx>:
{
 801151c:	b538      	push	{r3, r4, r5, lr}
 801151e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8011520:	f001 f9ff 	bl	8012922 <RFW_Is_Init>
 8011524:	2801      	cmp	r0, #1
 8011526:	d019      	beq.n	801155c <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011528:	2300      	movs	r3, #0
 801152a:	461a      	mov	r2, r3
 801152c:	f240 2162 	movw	r1, #610	; 0x262
 8011530:	4608      	mov	r0, r1
 8011532:	f000 fe22 	bl	801217a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8011536:	b9a4      	cbnz	r4, 8011562 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011538:	4c11      	ldr	r4, [pc, #68]	; (8011580 <RadioRx+0x64>)
 801153a:	2100      	movs	r1, #0
 801153c:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 801153e:	4b11      	ldr	r3, [pc, #68]	; (8011584 <RadioRx+0x68>)
 8011540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011544:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011546:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801154a:	f001 f8fb 	bl	8012744 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 801154e:	7863      	ldrb	r3, [r4, #1]
 8011550:	b183      	cbz	r3, 8011574 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011552:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011556:	f000 fc9f 	bl	8011e98 <SUBGRF_SetRx>
}
 801155a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 801155c:	f001 f9e9 	bl	8012932 <RFW_ReceiveInit>
 8011560:	e7e9      	b.n	8011536 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8011562:	4d09      	ldr	r5, [pc, #36]	; (8011588 <RadioRx+0x6c>)
 8011564:	4621      	mov	r1, r4
 8011566:	4628      	mov	r0, r5
 8011568:	f001 feb4 	bl	80132d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801156c:	4628      	mov	r0, r5
 801156e:	f001 fe6b 	bl	8013248 <UTIL_TIMER_Start>
 8011572:	e7e1      	b.n	8011538 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8011574:	4b02      	ldr	r3, [pc, #8]	; (8011580 <RadioRx+0x64>)
 8011576:	6898      	ldr	r0, [r3, #8]
 8011578:	0180      	lsls	r0, r0, #6
 801157a:	f000 fc8d 	bl	8011e98 <SUBGRF_SetRx>
}
 801157e:	e7ec      	b.n	801155a <RadioRx+0x3e>
 8011580:	2000101c 	.word	0x2000101c
 8011584:	48000400 	.word	0x48000400
 8011588:	20001004 	.word	0x20001004

0801158c <RadioSleep>:
{
 801158c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 801158e:	f04f 0004 	mov.w	r0, #4
 8011592:	f000 fc25 	bl	8011de0 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8011596:	2002      	movs	r0, #2
 8011598:	f7f0 fb3c 	bl	8001c14 <HAL_Delay>
}
 801159c:	bd08      	pop	{r3, pc}
	...

080115a0 <RadioSend>:
{
 80115a0:	b570      	push	{r4, r5, r6, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	4605      	mov	r5, r0
 80115a6:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80115a8:	2300      	movs	r3, #0
 80115aa:	461a      	mov	r2, r3
 80115ac:	f240 2101 	movw	r1, #513	; 0x201
 80115b0:	4608      	mov	r0, r1
 80115b2:	f000 fde2 	bl	801217a <SUBGRF_SetDioIrqParams>
 80115b6:	4b3f      	ldr	r3, [pc, #252]	; (80116b4 <RadioSend+0x114>)
 80115b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80115bc:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80115be:	4e3e      	ldr	r6, [pc, #248]	; (80116b8 <RadioSend+0x118>)
 80115c0:	2101      	movs	r1, #1
 80115c2:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80115c6:	f001 f8bd 	bl	8012744 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80115ca:	7833      	ldrb	r3, [r6, #0]
 80115cc:	2b01      	cmp	r3, #1
 80115ce:	d103      	bne.n	80115d8 <RadioSend+0x38>
 80115d0:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 80115d4:	2b06      	cmp	r3, #6
 80115d6:	d012      	beq.n	80115fe <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80115d8:	f640 0089 	movw	r0, #2185	; 0x889
 80115dc:	f000 fb3a 	bl	8011c54 <SUBGRF_ReadRegister>
 80115e0:	f040 0104 	orr.w	r1, r0, #4
 80115e4:	b2c9      	uxtb	r1, r1
 80115e6:	f640 0089 	movw	r0, #2185	; 0x889
 80115ea:	f000 fb23 	bl	8011c34 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 80115ee:	4b32      	ldr	r3, [pc, #200]	; (80116b8 <RadioSend+0x118>)
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	2b03      	cmp	r3, #3
 80115f4:	d818      	bhi.n	8011628 <RadioSend+0x88>
 80115f6:	e8df f003 	tbb	[pc, r3]
 80115fa:	0d23      	.short	0x0d23
 80115fc:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80115fe:	f640 0089 	movw	r0, #2185	; 0x889
 8011602:	f000 fb27 	bl	8011c54 <SUBGRF_ReadRegister>
 8011606:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 801160a:	f640 0089 	movw	r0, #2185	; 0x889
 801160e:	f000 fb11 	bl	8011c34 <SUBGRF_WriteRegister>
 8011612:	e7ec      	b.n	80115ee <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8011614:	4828      	ldr	r0, [pc, #160]	; (80116b8 <RadioSend+0x118>)
 8011616:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011618:	300e      	adds	r0, #14
 801161a:	f000 ff7d 	bl	8012518 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801161e:	2200      	movs	r2, #0
 8011620:	4621      	mov	r1, r4
 8011622:	4628      	mov	r0, r5
 8011624:	f000 fc30 	bl	8011e88 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8011628:	4c24      	ldr	r4, [pc, #144]	; (80116bc <RadioSend+0x11c>)
 801162a:	4b23      	ldr	r3, [pc, #140]	; (80116b8 <RadioSend+0x118>)
 801162c:	6859      	ldr	r1, [r3, #4]
 801162e:	4620      	mov	r0, r4
 8011630:	f001 fe50 	bl	80132d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8011634:	4620      	mov	r0, r4
 8011636:	f001 fe07 	bl	8013248 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 801163a:	2000      	movs	r0, #0
}
 801163c:	b002      	add	sp, #8
 801163e:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8011640:	f001 f96f 	bl	8012922 <RFW_Is_Init>
 8011644:	2801      	cmp	r0, #1
 8011646:	d00a      	beq.n	801165e <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8011648:	481b      	ldr	r0, [pc, #108]	; (80116b8 <RadioSend+0x118>)
 801164a:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801164c:	300e      	adds	r0, #14
 801164e:	f000 ff63 	bl	8012518 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8011652:	2200      	movs	r2, #0
 8011654:	4621      	mov	r1, r4
 8011656:	4628      	mov	r0, r5
 8011658:	f000 fc16 	bl	8011e88 <SUBGRF_SendPayload>
 801165c:	e7e4      	b.n	8011628 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801165e:	f10d 0207 	add.w	r2, sp, #7
 8011662:	4621      	mov	r1, r4
 8011664:	4628      	mov	r0, r5
 8011666:	f001 f961 	bl	801292c <RFW_TransmitInit>
 801166a:	b968      	cbnz	r0, 8011688 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801166c:	4812      	ldr	r0, [pc, #72]	; (80116b8 <RadioSend+0x118>)
 801166e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011672:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011674:	300e      	adds	r0, #14
 8011676:	f000 ff4f 	bl	8012518 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801167a:	2200      	movs	r2, #0
 801167c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011680:	4628      	mov	r0, r5
 8011682:	f000 fc01 	bl	8011e88 <SUBGRF_SendPayload>
 8011686:	e7cf      	b.n	8011628 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8011688:	4b0d      	ldr	r3, [pc, #52]	; (80116c0 <RadioSend+0x120>)
 801168a:	2201      	movs	r2, #1
 801168c:	2100      	movs	r1, #0
 801168e:	2002      	movs	r0, #2
 8011690:	f001 fa2e 	bl	8012af0 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8011694:	2003      	movs	r0, #3
 8011696:	e7d1      	b.n	801163c <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8011698:	4807      	ldr	r0, [pc, #28]	; (80116b8 <RadioSend+0x118>)
 801169a:	2302      	movs	r3, #2
 801169c:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801169e:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80116a0:	300e      	adds	r0, #14
 80116a2:	f000 ff39 	bl	8012518 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80116a6:	2200      	movs	r2, #0
 80116a8:	4621      	mov	r1, r4
 80116aa:	4628      	mov	r0, r5
 80116ac:	f000 fbec 	bl	8011e88 <SUBGRF_SendPayload>
            break;
 80116b0:	e7ba      	b.n	8011628 <RadioSend+0x88>
 80116b2:	bf00      	nop
 80116b4:	48000400 	.word	0x48000400
 80116b8:	2000101c 	.word	0x2000101c
 80116bc:	20001078 	.word	0x20001078
 80116c0:	08014570 	.word	0x08014570

080116c4 <RadioRandom>:
{
 80116c4:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80116c6:	2300      	movs	r3, #0
 80116c8:	461a      	mov	r2, r3
 80116ca:	4619      	mov	r1, r3
 80116cc:	4618      	mov	r0, r3
 80116ce:	f000 fd54 	bl	801217a <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 80116d2:	f000 fbfb 	bl	8011ecc <SUBGRF_GetRandom>
}
 80116d6:	bd08      	pop	{r3, pc}

080116d8 <RadioSetModem>:
{
 80116d8:	b510      	push	{r4, lr}
 80116da:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 80116dc:	4b14      	ldr	r3, [pc, #80]	; (8011730 <RadioSetModem+0x58>)
 80116de:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 80116e0:	f001 f92c 	bl	801293c <RFW_SetRadioModem>
    switch( modem )
 80116e4:	2c01      	cmp	r4, #1
 80116e6:	d010      	beq.n	801170a <RadioSetModem+0x32>
 80116e8:	2c03      	cmp	r4, #3
 80116ea:	d01a      	beq.n	8011722 <RadioSetModem+0x4a>
 80116ec:	b134      	cbz	r4, 80116fc <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80116ee:	2003      	movs	r0, #3
 80116f0:	f000 fde2 	bl	80122b8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80116f4:	4b0e      	ldr	r3, [pc, #56]	; (8011730 <RadioSetModem+0x58>)
 80116f6:	2200      	movs	r2, #0
 80116f8:	735a      	strb	r2, [r3, #13]
}
 80116fa:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80116fc:	2000      	movs	r0, #0
 80116fe:	f000 fddb 	bl	80122b8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011702:	4b0b      	ldr	r3, [pc, #44]	; (8011730 <RadioSetModem+0x58>)
 8011704:	2200      	movs	r2, #0
 8011706:	735a      	strb	r2, [r3, #13]
        break;
 8011708:	e7f7      	b.n	80116fa <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801170a:	2001      	movs	r0, #1
 801170c:	f000 fdd4 	bl	80122b8 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8011710:	4b07      	ldr	r3, [pc, #28]	; (8011730 <RadioSetModem+0x58>)
 8011712:	7b5a      	ldrb	r2, [r3, #13]
 8011714:	7b18      	ldrb	r0, [r3, #12]
 8011716:	4282      	cmp	r2, r0
 8011718:	d0ef      	beq.n	80116fa <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801171a:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801171c:	f000 f80a 	bl	8011734 <RadioSetPublicNetwork>
 8011720:	e7eb      	b.n	80116fa <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8011722:	2002      	movs	r0, #2
 8011724:	f000 fdc8 	bl	80122b8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011728:	4b01      	ldr	r3, [pc, #4]	; (8011730 <RadioSetModem+0x58>)
 801172a:	2200      	movs	r2, #0
 801172c:	735a      	strb	r2, [r3, #13]
}
 801172e:	e7e4      	b.n	80116fa <RadioSetModem+0x22>
 8011730:	2000101c 	.word	0x2000101c

08011734 <RadioSetPublicNetwork>:
{
 8011734:	b510      	push	{r4, lr}
 8011736:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8011738:	4b0e      	ldr	r3, [pc, #56]	; (8011774 <RadioSetPublicNetwork+0x40>)
 801173a:	7318      	strb	r0, [r3, #12]
 801173c:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 801173e:	2001      	movs	r0, #1
 8011740:	f7ff ffca 	bl	80116d8 <RadioSetModem>
    if( enable == true )
 8011744:	b154      	cbz	r4, 801175c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8011746:	2134      	movs	r1, #52	; 0x34
 8011748:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801174c:	f000 fa72 	bl	8011c34 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8011750:	2144      	movs	r1, #68	; 0x44
 8011752:	f240 7041 	movw	r0, #1857	; 0x741
 8011756:	f000 fa6d 	bl	8011c34 <SUBGRF_WriteRegister>
}
 801175a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801175c:	2114      	movs	r1, #20
 801175e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011762:	f000 fa67 	bl	8011c34 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8011766:	2124      	movs	r1, #36	; 0x24
 8011768:	f240 7041 	movw	r0, #1857	; 0x741
 801176c:	f000 fa62 	bl	8011c34 <SUBGRF_WriteRegister>
}
 8011770:	e7f3      	b.n	801175a <RadioSetPublicNetwork+0x26>
 8011772:	bf00      	nop
 8011774:	2000101c 	.word	0x2000101c

08011778 <RadioSetTxConfig>:
{
 8011778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801177c:	b083      	sub	sp, #12
 801177e:	4604      	mov	r4, r0
 8011780:	460e      	mov	r6, r1
 8011782:	4617      	mov	r7, r2
 8011784:	461d      	mov	r5, r3
 8011786:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 801178a:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 801178e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 8011792:	f001 f8c5 	bl	8012920 <RFW_DeInit>
    switch( modem )
 8011796:	b1ac      	cbz	r4, 80117c4 <RadioSetTxConfig+0x4c>
 8011798:	2c01      	cmp	r4, #1
 801179a:	d05a      	beq.n	8011852 <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801179c:	4630      	mov	r0, r6
 801179e:	f000 ffe5 	bl	801276c <SUBGRF_SetRfTxPower>
 80117a2:	4c55      	ldr	r4, [pc, #340]	; (80118f8 <RadioSetTxConfig+0x180>)
 80117a4:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80117a8:	210e      	movs	r1, #14
 80117aa:	f640 101f 	movw	r0, #2335	; 0x91f
 80117ae:	f000 fa41 	bl	8011c34 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80117b2:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80117b6:	f001 f8b8 	bl	801292a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80117ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80117bc:	6063      	str	r3, [r4, #4]
}
 80117be:	b003      	add	sp, #12
 80117c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80117c4:	4c4c      	ldr	r4, [pc, #304]	; (80118f8 <RadioSetTxConfig+0x180>)
 80117c6:	f04f 0b00 	mov.w	fp, #0
 80117ca:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80117ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117d0:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80117d2:	230b      	movs	r3, #11
 80117d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80117d8:	4628      	mov	r0, r5
 80117da:	f001 f83f 	bl	801285c <SUBGRF_GetFskBandwidthRegValue>
 80117de:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80117e2:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80117e4:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80117e8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80117ec:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80117f0:	2304      	movs	r3, #4
 80117f2:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80117f4:	2318      	movs	r3, #24
 80117f6:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80117f8:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80117fc:	f089 0901 	eor.w	r9, r9, #1
 8011800:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8011804:	f1ba 0f00 	cmp.w	sl, #0
 8011808:	d01f      	beq.n	801184a <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801180a:	22f2      	movs	r2, #242	; 0xf2
 801180c:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801180e:	4c3a      	ldr	r4, [pc, #232]	; (80118f8 <RadioSetTxConfig+0x180>)
 8011810:	2301      	movs	r3, #1
 8011812:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8011814:	f7ff fc50 	bl	80110b8 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8011818:	2000      	movs	r0, #0
 801181a:	f7ff ff5d 	bl	80116d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801181e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011822:	f000 fdf1 	bl	8012408 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011826:	f104 000e 	add.w	r0, r4, #14
 801182a:	f000 fe75 	bl	8012518 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801182e:	4a33      	ldr	r2, [pc, #204]	; (80118fc <RadioSetTxConfig+0x184>)
 8011830:	466b      	mov	r3, sp
 8011832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011836:	e883 0003 	stmia.w	r3, {r0, r1}
 801183a:	4618      	mov	r0, r3
 801183c:	f000 fa56 	bl	8011cec <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8011840:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011844:	f000 fa29 	bl	8011c9a <SUBGRF_SetWhiteningSeed>
            break;
 8011848:	e7a8      	b.n	801179c <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801184a:	4b2b      	ldr	r3, [pc, #172]	; (80118f8 <RadioSetTxConfig+0x180>)
 801184c:	2201      	movs	r2, #1
 801184e:	75da      	strb	r2, [r3, #23]
 8011850:	e7dd      	b.n	801180e <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011852:	4a29      	ldr	r2, [pc, #164]	; (80118f8 <RadioSetTxConfig+0x180>)
 8011854:	2301      	movs	r3, #1
 8011856:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801185a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801185c:	b2db      	uxtb	r3, r3
 801185e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8011862:	4927      	ldr	r1, [pc, #156]	; (8011900 <RadioSetTxConfig+0x188>)
 8011864:	5d49      	ldrb	r1, [r1, r5]
 8011866:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801186a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 801186e:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011872:	b91d      	cbnz	r5, 801187c <RadioSetTxConfig+0x104>
 8011874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011876:	3a0b      	subs	r2, #11
 8011878:	2a01      	cmp	r2, #1
 801187a:	d92c      	bls.n	80118d6 <RadioSetTxConfig+0x15e>
 801187c:	2d01      	cmp	r5, #1
 801187e:	d027      	beq.n	80118d0 <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8011880:	4a1d      	ldr	r2, [pc, #116]	; (80118f8 <RadioSetTxConfig+0x180>)
 8011882:	2100      	movs	r1, #0
 8011884:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011888:	4a1b      	ldr	r2, [pc, #108]	; (80118f8 <RadioSetTxConfig+0x180>)
 801188a:	2101      	movs	r1, #1
 801188c:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801188e:	3b05      	subs	r3, #5
 8011890:	b2db      	uxtb	r3, r3
 8011892:	428b      	cmp	r3, r1
 8011894:	d924      	bls.n	80118e0 <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011896:	4b18      	ldr	r3, [pc, #96]	; (80118f8 <RadioSetTxConfig+0x180>)
 8011898:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801189c:	4c16      	ldr	r4, [pc, #88]	; (80118f8 <RadioSetTxConfig+0x180>)
 801189e:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80118a2:	4b18      	ldr	r3, [pc, #96]	; (8011904 <RadioSetTxConfig+0x18c>)
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80118a8:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80118ac:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80118b0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80118b4:	f7ff fc00 	bl	80110b8 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80118b8:	2001      	movs	r0, #1
 80118ba:	f7ff ff0d 	bl	80116d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80118be:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80118c2:	f000 fda1 	bl	8012408 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80118c6:	f104 000e 	add.w	r0, r4, #14
 80118ca:	f000 fe25 	bl	8012518 <SUBGRF_SetPacketParams>
            break;
 80118ce:	e765      	b.n	801179c <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80118d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118d2:	2a0c      	cmp	r2, #12
 80118d4:	d1d4      	bne.n	8011880 <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80118d6:	4a08      	ldr	r2, [pc, #32]	; (80118f8 <RadioSetTxConfig+0x180>)
 80118d8:	2101      	movs	r1, #1
 80118da:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80118de:	e7d3      	b.n	8011888 <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 80118e0:	f1b8 0f0b 	cmp.w	r8, #11
 80118e4:	d803      	bhi.n	80118ee <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80118e6:	4613      	mov	r3, r2
 80118e8:	220c      	movs	r2, #12
 80118ea:	839a      	strh	r2, [r3, #28]
 80118ec:	e7d6      	b.n	801189c <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80118ee:	4b02      	ldr	r3, [pc, #8]	; (80118f8 <RadioSetTxConfig+0x180>)
 80118f0:	f8a3 801c 	strh.w	r8, [r3, #28]
 80118f4:	e7d2      	b.n	801189c <RadioSetTxConfig+0x124>
 80118f6:	bf00      	nop
 80118f8:	2000101c 	.word	0x2000101c
 80118fc:	08013854 	.word	0x08013854
 8011900:	08014588 	.word	0x08014588
 8011904:	200000fc 	.word	0x200000fc

08011908 <RadioSetRxConfig>:
{
 8011908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801190c:	b085      	sub	sp, #20
 801190e:	4604      	mov	r4, r0
 8011910:	460d      	mov	r5, r1
 8011912:	4616      	mov	r6, r2
 8011914:	9301      	str	r3, [sp, #4]
 8011916:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 801191a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801191e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8011922:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8011926:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 801192a:	4b73      	ldr	r3, [pc, #460]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 801192c:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8011930:	f000 fff6 	bl	8012920 <RFW_DeInit>
    if( rxContinuous == true )
 8011934:	f1b8 0f00 	cmp.w	r8, #0
 8011938:	d001      	beq.n	801193e <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 801193a:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 801193e:	b14f      	cbz	r7, 8011954 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8011940:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8011944:	4b6d      	ldr	r3, [pc, #436]	; (8011afc <RadioSetRxConfig+0x1f4>)
 8011946:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8011948:	b144      	cbz	r4, 801195c <RadioSetRxConfig+0x54>
 801194a:	2c01      	cmp	r4, #1
 801194c:	d057      	beq.n	80119fe <RadioSetRxConfig+0xf6>
}
 801194e:	b005      	add	sp, #20
 8011950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8011954:	4b69      	ldr	r3, [pc, #420]	; (8011afc <RadioSetRxConfig+0x1f4>)
 8011956:	22ff      	movs	r2, #255	; 0xff
 8011958:	701a      	strb	r2, [r3, #0]
 801195a:	e7f5      	b.n	8011948 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801195c:	2000      	movs	r0, #0
 801195e:	f000 fb47 	bl	8011ff0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011962:	4c65      	ldr	r4, [pc, #404]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 8011964:	f04f 0800 	mov.w	r8, #0
 8011968:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801196c:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801196e:	230b      	movs	r3, #11
 8011970:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011974:	4628      	mov	r0, r5
 8011976:	f000 ff71 	bl	801285c <SUBGRF_GetFskBandwidthRegValue>
 801197a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801197e:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011982:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8011986:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801198a:	2304      	movs	r3, #4
 801198c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801198e:	2318      	movs	r3, #24
 8011990:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011992:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011996:	f087 0701 	eor.w	r7, r7, #1
 801199a:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801199c:	4b57      	ldr	r3, [pc, #348]	; (8011afc <RadioSetRxConfig+0x1f4>)
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 80119a2:	f1bb 0f00 	cmp.w	fp, #0
 80119a6:	d026      	beq.n	80119f6 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80119a8:	22f2      	movs	r2, #242	; 0xf2
 80119aa:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80119ac:	4c52      	ldr	r4, [pc, #328]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 80119ae:	2301      	movs	r3, #1
 80119b0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80119b2:	f7ff fb81 	bl	80110b8 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80119b6:	2000      	movs	r0, #0
 80119b8:	f7ff fe8e 	bl	80116d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80119bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80119c0:	f000 fd22 	bl	8012408 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80119c4:	f104 000e 	add.w	r0, r4, #14
 80119c8:	f000 fda6 	bl	8012518 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80119cc:	4a4c      	ldr	r2, [pc, #304]	; (8011b00 <RadioSetRxConfig+0x1f8>)
 80119ce:	ab02      	add	r3, sp, #8
 80119d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80119d8:	4618      	mov	r0, r3
 80119da:	f000 f987 	bl	8011cec <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80119de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80119e2:	f000 f95a 	bl	8011c9a <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80119e6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80119ea:	fb03 f30a 	mul.w	r3, r3, sl
 80119ee:	fbb3 f3f6 	udiv	r3, r3, r6
 80119f2:	60a3      	str	r3, [r4, #8]
            break;
 80119f4:	e7ab      	b.n	801194e <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80119f6:	4b40      	ldr	r3, [pc, #256]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 80119f8:	2201      	movs	r2, #1
 80119fa:	75da      	strb	r2, [r3, #23]
 80119fc:	e7d6      	b.n	80119ac <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80119fe:	2000      	movs	r0, #0
 8011a00:	f000 faf6 	bl	8011ff0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8011a04:	4a3c      	ldr	r2, [pc, #240]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 8011a06:	2301      	movs	r3, #1
 8011a08:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8011a0c:	b2f3      	uxtb	r3, r6
 8011a0e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8011a12:	493c      	ldr	r1, [pc, #240]	; (8011b04 <RadioSetRxConfig+0x1fc>)
 8011a14:	5d49      	ldrb	r1, [r1, r5]
 8011a16:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8011a1a:	9901      	ldr	r1, [sp, #4]
 8011a1c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011a20:	b91d      	cbnz	r5, 8011a2a <RadioSetRxConfig+0x122>
 8011a22:	f1a6 020b 	sub.w	r2, r6, #11
 8011a26:	2a01      	cmp	r2, #1
 8011a28:	d94b      	bls.n	8011ac2 <RadioSetRxConfig+0x1ba>
 8011a2a:	2d01      	cmp	r5, #1
 8011a2c:	d047      	beq.n	8011abe <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8011a2e:	4a32      	ldr	r2, [pc, #200]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 8011a30:	2100      	movs	r1, #0
 8011a32:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011a36:	4a30      	ldr	r2, [pc, #192]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 8011a38:	2101      	movs	r1, #1
 8011a3a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8011a3c:	3b05      	subs	r3, #5
 8011a3e:	b2db      	uxtb	r3, r3
 8011a40:	428b      	cmp	r3, r1
 8011a42:	d943      	bls.n	8011acc <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011a44:	4b2c      	ldr	r3, [pc, #176]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 8011a46:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8011a4a:	4c2b      	ldr	r4, [pc, #172]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 8011a4c:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8011a4e:	4b2b      	ldr	r3, [pc, #172]	; (8011afc <RadioSetRxConfig+0x1f4>)
 8011a50:	781b      	ldrb	r3, [r3, #0]
 8011a52:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8011a54:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8011a58:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011a5c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8011a60:	f7ff fb2a 	bl	80110b8 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8011a64:	2001      	movs	r0, #1
 8011a66:	f7ff fe37 	bl	80116d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011a6a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011a6e:	f000 fccb 	bl	8012408 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011a72:	f104 000e 	add.w	r0, r4, #14
 8011a76:	f000 fd4f 	bl	8012518 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8011a7a:	fa5f f08a 	uxtb.w	r0, sl
 8011a7e:	f000 fac4 	bl	801200a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8011a82:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8011a86:	f000 f8e5 	bl	8011c54 <SUBGRF_ReadRegister>
 8011a8a:	f000 0101 	and.w	r1, r0, #1
 8011a8e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8011a92:	f000 f8cf 	bl	8011c34 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8011a96:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8011a9a:	2b01      	cmp	r3, #1
 8011a9c:	d021      	beq.n	8011ae2 <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8011a9e:	f240 7036 	movw	r0, #1846	; 0x736
 8011aa2:	f000 f8d7 	bl	8011c54 <SUBGRF_ReadRegister>
 8011aa6:	f040 0104 	orr.w	r1, r0, #4
 8011aaa:	b2c9      	uxtb	r1, r1
 8011aac:	f240 7036 	movw	r0, #1846	; 0x736
 8011ab0:	f000 f8c0 	bl	8011c34 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8011ab4:	4b10      	ldr	r3, [pc, #64]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 8011ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011aba:	609a      	str	r2, [r3, #8]
}
 8011abc:	e747      	b.n	801194e <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8011abe:	2e0c      	cmp	r6, #12
 8011ac0:	d1b5      	bne.n	8011a2e <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8011ac2:	4a0d      	ldr	r2, [pc, #52]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 8011ac4:	2101      	movs	r1, #1
 8011ac6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8011aca:	e7b4      	b.n	8011a36 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8011acc:	f1b9 0f0b 	cmp.w	r9, #11
 8011ad0:	d803      	bhi.n	8011ada <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	220c      	movs	r2, #12
 8011ad6:	839a      	strh	r2, [r3, #28]
 8011ad8:	e7b7      	b.n	8011a4a <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011ada:	4b07      	ldr	r3, [pc, #28]	; (8011af8 <RadioSetRxConfig+0x1f0>)
 8011adc:	f8a3 901c 	strh.w	r9, [r3, #28]
 8011ae0:	e7b3      	b.n	8011a4a <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8011ae2:	f240 7036 	movw	r0, #1846	; 0x736
 8011ae6:	f000 f8b5 	bl	8011c54 <SUBGRF_ReadRegister>
 8011aea:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011aee:	f240 7036 	movw	r0, #1846	; 0x736
 8011af2:	f000 f89f 	bl	8011c34 <SUBGRF_WriteRegister>
 8011af6:	e7dd      	b.n	8011ab4 <RadioSetRxConfig+0x1ac>
 8011af8:	2000101c 	.word	0x2000101c
 8011afc:	200000fc 	.word	0x200000fc
 8011b00:	08013854 	.word	0x08013854
 8011b04:	08014588 	.word	0x08014588

08011b08 <RadioIsChannelFree>:
{
 8011b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b0a:	b08b      	sub	sp, #44	; 0x2c
 8011b0c:	4604      	mov	r4, r0
 8011b0e:	460f      	mov	r7, r1
 8011b10:	4616      	mov	r6, r2
 8011b12:	461d      	mov	r5, r3
    RadioStandby( );
 8011b14:	f7ff fad0 	bl	80110b8 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8011b18:	2000      	movs	r0, #0
 8011b1a:	f7ff fddd 	bl	80116d8 <RadioSetModem>
    RadioSetChannel( freq );
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f7ff fce4 	bl	80114ec <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8011b24:	2301      	movs	r3, #1
 8011b26:	9309      	str	r3, [sp, #36]	; 0x24
 8011b28:	2400      	movs	r4, #0
 8011b2a:	9408      	str	r4, [sp, #32]
 8011b2c:	9407      	str	r4, [sp, #28]
 8011b2e:	9406      	str	r4, [sp, #24]
 8011b30:	9405      	str	r4, [sp, #20]
 8011b32:	9404      	str	r4, [sp, #16]
 8011b34:	9403      	str	r4, [sp, #12]
 8011b36:	9402      	str	r4, [sp, #8]
 8011b38:	2303      	movs	r3, #3
 8011b3a:	9301      	str	r3, [sp, #4]
 8011b3c:	9700      	str	r7, [sp, #0]
 8011b3e:	4623      	mov	r3, r4
 8011b40:	f44f 7216 	mov.w	r2, #600	; 0x258
 8011b44:	4639      	mov	r1, r7
 8011b46:	4620      	mov	r0, r4
 8011b48:	f7ff fede 	bl	8011908 <RadioSetRxConfig>
    RadioRx( 0 );
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	f7ff fce5 	bl	801151c <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8011b52:	f7ff fc79 	bl	8011448 <RadioGetWakeupTime>
 8011b56:	f7f0 f85d 	bl	8001c14 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8011b5a:	f001 fadb 	bl	8013114 <UTIL_TIMER_GetCurrentTime>
 8011b5e:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8011b60:	4620      	mov	r0, r4
 8011b62:	f001 fae1 	bl	8013128 <UTIL_TIMER_GetElapsedTime>
 8011b66:	42a8      	cmp	r0, r5
 8011b68:	d206      	bcs.n	8011b78 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8011b6a:	2000      	movs	r0, #0
 8011b6c:	f7ff fc96 	bl	801149c <RadioRssi>
        if( rssi > rssiThresh )
 8011b70:	42b0      	cmp	r0, r6
 8011b72:	ddf5      	ble.n	8011b60 <RadioIsChannelFree+0x58>
            status = false;
 8011b74:	2400      	movs	r4, #0
 8011b76:	e000      	b.n	8011b7a <RadioIsChannelFree+0x72>
    bool status = true;
 8011b78:	2401      	movs	r4, #1
    RadioStandby( );
 8011b7a:	f7ff fa9d 	bl	80110b8 <RadioStandby>
}
 8011b7e:	4620      	mov	r0, r4
 8011b80:	b00b      	add	sp, #44	; 0x2c
 8011b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b84 <RadioInit>:
{
 8011b84:	b570      	push	{r4, r5, r6, lr}
 8011b86:	b082      	sub	sp, #8
    RadioEvents = events;
 8011b88:	4b1d      	ldr	r3, [pc, #116]	; (8011c00 <RadioInit+0x7c>)
 8011b8a:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8011b8c:	4d1d      	ldr	r5, [pc, #116]	; (8011c04 <RadioInit+0x80>)
 8011b8e:	2400      	movs	r4, #0
 8011b90:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8011b92:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8011b94:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011b96:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8011b98:	481b      	ldr	r0, [pc, #108]	; (8011c08 <RadioInit+0x84>)
 8011b9a:	f000 fb27 	bl	80121ec <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8011b9e:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8011ba0:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8011ba2:	f000 fa53 	bl	801204c <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8011ba6:	4621      	mov	r1, r4
 8011ba8:	4620      	mov	r0, r4
 8011baa:	f000 fd27 	bl	80125fc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8011bae:	2204      	movs	r2, #4
 8011bb0:	4621      	mov	r1, r4
 8011bb2:	2001      	movs	r0, #1
 8011bb4:	f000 fb9a 	bl	80122ec <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011bb8:	4623      	mov	r3, r4
 8011bba:	4622      	mov	r2, r4
 8011bbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011bc0:	4608      	mov	r0, r1
 8011bc2:	f000 fada 	bl	801217a <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8011bc6:	f7ff fce1 	bl	801158c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8011bca:	4e10      	ldr	r6, [pc, #64]	; (8011c0c <RadioInit+0x88>)
 8011bcc:	9400      	str	r4, [sp, #0]
 8011bce:	4b10      	ldr	r3, [pc, #64]	; (8011c10 <RadioInit+0x8c>)
 8011bd0:	4622      	mov	r2, r4
 8011bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8011bd6:	4630      	mov	r0, r6
 8011bd8:	f001 fa7e 	bl	80130d8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8011bdc:	4d0d      	ldr	r5, [pc, #52]	; (8011c14 <RadioInit+0x90>)
 8011bde:	9400      	str	r4, [sp, #0]
 8011be0:	4b0d      	ldr	r3, [pc, #52]	; (8011c18 <RadioInit+0x94>)
 8011be2:	4622      	mov	r2, r4
 8011be4:	f04f 31ff 	mov.w	r1, #4294967295
 8011be8:	4628      	mov	r0, r5
 8011bea:	f001 fa75 	bl	80130d8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8011bee:	4630      	mov	r0, r6
 8011bf0:	f001 fad0 	bl	8013194 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	f001 facd 	bl	8013194 <UTIL_TIMER_Stop>
}
 8011bfa:	b002      	add	sp, #8
 8011bfc:	bd70      	pop	{r4, r5, r6, pc}
 8011bfe:	bf00      	nop
 8011c00:	20001000 	.word	0x20001000
 8011c04:	2000101c 	.word	0x2000101c
 8011c08:	08011435 	.word	0x08011435
 8011c0c:	20001078 	.word	0x20001078
 8011c10:	08010f7d 	.word	0x08010f7d
 8011c14:	20001004 	.word	0x20001004
 8011c18:	08010fa5 	.word	0x08010fa5

08011c1c <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8011c1c:	4b01      	ldr	r3, [pc, #4]	; (8011c24 <SUBGRF_GetOperatingMode+0x8>)
 8011c1e:	7818      	ldrb	r0, [r3, #0]
 8011c20:	4770      	bx	lr
 8011c22:	bf00      	nop
 8011c24:	20001096 	.word	0x20001096

08011c28 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8011c28:	4b01      	ldr	r3, [pc, #4]	; (8011c30 <SUBGRF_GetPacketType+0x8>)
 8011c2a:	7818      	ldrb	r0, [r3, #0]
 8011c2c:	4770      	bx	lr
 8011c2e:	bf00      	nop
 8011c30:	20001097 	.word	0x20001097

08011c34 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8011c34:	b500      	push	{lr}
 8011c36:	b083      	sub	sp, #12
 8011c38:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	f10d 0207 	add.w	r2, sp, #7
 8011c42:	4601      	mov	r1, r0
 8011c44:	4802      	ldr	r0, [pc, #8]	; (8011c50 <SUBGRF_WriteRegister+0x1c>)
 8011c46:	f7f4 ffef 	bl	8006c28 <HAL_SUBGHZ_WriteRegisters>
}
 8011c4a:	b003      	add	sp, #12
 8011c4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c50:	2000021c 	.word	0x2000021c

08011c54 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8011c54:	b500      	push	{lr}
 8011c56:	b083      	sub	sp, #12
 8011c58:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	f10d 0207 	add.w	r2, sp, #7
 8011c60:	4803      	ldr	r0, [pc, #12]	; (8011c70 <SUBGRF_ReadRegister+0x1c>)
 8011c62:	f7f5 f831 	bl	8006cc8 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 8011c66:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011c6a:	b003      	add	sp, #12
 8011c6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c70:	2000021c 	.word	0x2000021c

08011c74 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8011c74:	b510      	push	{r4, lr}
 8011c76:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8011c78:	f7f1 f86c 	bl	8002d54 <RBI_IsDCDC>
 8011c7c:	2801      	cmp	r0, #1
 8011c7e:	d000      	beq.n	8011c82 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8011c80:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8011c82:	f640 1023 	movw	r0, #2339	; 0x923
 8011c86:	f7ff ffe5 	bl	8011c54 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8011c8a:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8011c8e:	4321      	orrs	r1, r4
 8011c90:	f640 1023 	movw	r0, #2339	; 0x923
 8011c94:	f7ff ffce 	bl	8011c34 <SUBGRF_WriteRegister>
}
 8011c98:	e7f2      	b.n	8011c80 <Radio_SMPS_Set+0xc>

08011c9a <SUBGRF_SetWhiteningSeed>:
{
 8011c9a:	b510      	push	{r4, lr}
 8011c9c:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8011c9e:	f7ff ffc3 	bl	8011c28 <SUBGRF_GetPacketType>
 8011ca2:	b100      	cbz	r0, 8011ca6 <SUBGRF_SetWhiteningSeed+0xc>
}
 8011ca4:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8011ca6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8011caa:	f7ff ffd3 	bl	8011c54 <SUBGRF_ReadRegister>
 8011cae:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8011cb2:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8011cb6:	4301      	orrs	r1, r0
 8011cb8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8011cbc:	f7ff ffba 	bl	8011c34 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8011cc0:	b2e1      	uxtb	r1, r4
 8011cc2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8011cc6:	f7ff ffb5 	bl	8011c34 <SUBGRF_WriteRegister>
}
 8011cca:	e7eb      	b.n	8011ca4 <SUBGRF_SetWhiteningSeed+0xa>

08011ccc <SUBGRF_WriteRegisters>:
{
 8011ccc:	b510      	push	{r4, lr}
 8011cce:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cd0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011cd4:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8011cd6:	460a      	mov	r2, r1
 8011cd8:	4601      	mov	r1, r0
 8011cda:	4803      	ldr	r0, [pc, #12]	; (8011ce8 <SUBGRF_WriteRegisters+0x1c>)
 8011cdc:	f7f4 ffa4 	bl	8006c28 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ce0:	f384 8810 	msr	PRIMASK, r4
}
 8011ce4:	bd10      	pop	{r4, pc}
 8011ce6:	bf00      	nop
 8011ce8:	2000021c 	.word	0x2000021c

08011cec <SUBGRF_SetSyncWord>:
{
 8011cec:	b508      	push	{r3, lr}
 8011cee:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8011cf0:	2208      	movs	r2, #8
 8011cf2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8011cf6:	f7ff ffe9 	bl	8011ccc <SUBGRF_WriteRegisters>
}
 8011cfa:	2000      	movs	r0, #0
 8011cfc:	bd08      	pop	{r3, pc}

08011cfe <SUBGRF_SetCrcSeed>:
{
 8011cfe:	b500      	push	{lr}
 8011d00:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8011d02:	0a03      	lsrs	r3, r0, #8
 8011d04:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8011d08:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8011d0c:	f7ff ff8c 	bl	8011c28 <SUBGRF_GetPacketType>
 8011d10:	b110      	cbz	r0, 8011d18 <SUBGRF_SetCrcSeed+0x1a>
}
 8011d12:	b003      	add	sp, #12
 8011d14:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8011d18:	2202      	movs	r2, #2
 8011d1a:	a901      	add	r1, sp, #4
 8011d1c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8011d20:	f7ff ffd4 	bl	8011ccc <SUBGRF_WriteRegisters>
}
 8011d24:	e7f5      	b.n	8011d12 <SUBGRF_SetCrcSeed+0x14>

08011d26 <SUBGRF_SetCrcPolynomial>:
{
 8011d26:	b500      	push	{lr}
 8011d28:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8011d2a:	0a03      	lsrs	r3, r0, #8
 8011d2c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8011d30:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8011d34:	f7ff ff78 	bl	8011c28 <SUBGRF_GetPacketType>
 8011d38:	b110      	cbz	r0, 8011d40 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8011d3a:	b003      	add	sp, #12
 8011d3c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8011d40:	2202      	movs	r2, #2
 8011d42:	a901      	add	r1, sp, #4
 8011d44:	f240 60be 	movw	r0, #1726	; 0x6be
 8011d48:	f7ff ffc0 	bl	8011ccc <SUBGRF_WriteRegisters>
}
 8011d4c:	e7f5      	b.n	8011d3a <SUBGRF_SetCrcPolynomial+0x14>
	...

08011d50 <SUBGRF_ReadRegisters>:
{
 8011d50:	b510      	push	{r4, lr}
 8011d52:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d54:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d58:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8011d5a:	460a      	mov	r2, r1
 8011d5c:	4601      	mov	r1, r0
 8011d5e:	4803      	ldr	r0, [pc, #12]	; (8011d6c <SUBGRF_ReadRegisters+0x1c>)
 8011d60:	f7f4 ffb2 	bl	8006cc8 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d64:	f384 8810 	msr	PRIMASK, r4
}
 8011d68:	bd10      	pop	{r4, pc}
 8011d6a:	bf00      	nop
 8011d6c:	2000021c 	.word	0x2000021c

08011d70 <SUBGRF_WriteBuffer>:
{
 8011d70:	b510      	push	{r4, lr}
 8011d72:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d74:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011d78:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8011d7a:	460a      	mov	r2, r1
 8011d7c:	4601      	mov	r1, r0
 8011d7e:	4803      	ldr	r0, [pc, #12]	; (8011d8c <SUBGRF_WriteBuffer+0x1c>)
 8011d80:	f7f5 f900 	bl	8006f84 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d84:	f384 8810 	msr	PRIMASK, r4
}
 8011d88:	bd10      	pop	{r4, pc}
 8011d8a:	bf00      	nop
 8011d8c:	2000021c 	.word	0x2000021c

08011d90 <SUBGRF_SetPayload>:
{
 8011d90:	b508      	push	{r3, lr}
 8011d92:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8011d94:	4601      	mov	r1, r0
 8011d96:	2000      	movs	r0, #0
 8011d98:	f7ff ffea 	bl	8011d70 <SUBGRF_WriteBuffer>
}
 8011d9c:	bd08      	pop	{r3, pc}
	...

08011da0 <SUBGRF_ReadBuffer>:
{
 8011da0:	b510      	push	{r4, lr}
 8011da2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011da4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011da8:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8011daa:	460a      	mov	r2, r1
 8011dac:	4601      	mov	r1, r0
 8011dae:	4803      	ldr	r0, [pc, #12]	; (8011dbc <SUBGRF_ReadBuffer+0x1c>)
 8011db0:	f7f5 f932 	bl	8007018 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011db4:	f384 8810 	msr	PRIMASK, r4
}
 8011db8:	bd10      	pop	{r4, pc}
 8011dba:	bf00      	nop
 8011dbc:	2000021c 	.word	0x2000021c

08011dc0 <SUBGRF_WriteCommand>:
{
 8011dc0:	b510      	push	{r4, lr}
 8011dc2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011dc4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011dc8:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8011dca:	460a      	mov	r2, r1
 8011dcc:	4601      	mov	r1, r0
 8011dce:	4803      	ldr	r0, [pc, #12]	; (8011ddc <SUBGRF_WriteCommand+0x1c>)
 8011dd0:	f7f4 ffce 	bl	8006d70 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dd4:	f384 8810 	msr	PRIMASK, r4
}
 8011dd8:	bd10      	pop	{r4, pc}
 8011dda:	bf00      	nop
 8011ddc:	2000021c 	.word	0x2000021c

08011de0 <SUBGRF_SetSleep>:
{
 8011de0:	b510      	push	{r4, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8011de6:	2000      	movs	r0, #0
 8011de8:	f7f0 ffa8 	bl	8002d3c <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8011dec:	2002      	movs	r0, #2
 8011dee:	f7ff ff41 	bl	8011c74 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8011df2:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8011df6:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8011dfa:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8011dfc:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8011e00:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8011e02:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8011e06:	2201      	movs	r2, #1
 8011e08:	f10d 0107 	add.w	r1, sp, #7
 8011e0c:	2084      	movs	r0, #132	; 0x84
 8011e0e:	f7ff ffd7 	bl	8011dc0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8011e12:	4b02      	ldr	r3, [pc, #8]	; (8011e1c <SUBGRF_SetSleep+0x3c>)
 8011e14:	2200      	movs	r2, #0
 8011e16:	701a      	strb	r2, [r3, #0]
}
 8011e18:	b002      	add	sp, #8
 8011e1a:	bd10      	pop	{r4, pc}
 8011e1c:	20001096 	.word	0x20001096

08011e20 <SUBGRF_SetStandby>:
{
 8011e20:	b500      	push	{lr}
 8011e22:	b083      	sub	sp, #12
 8011e24:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8011e28:	2201      	movs	r2, #1
 8011e2a:	f10d 0107 	add.w	r1, sp, #7
 8011e2e:	2080      	movs	r0, #128	; 0x80
 8011e30:	f7ff ffc6 	bl	8011dc0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8011e34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011e38:	b92b      	cbnz	r3, 8011e46 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8011e3a:	4b05      	ldr	r3, [pc, #20]	; (8011e50 <SUBGRF_SetStandby+0x30>)
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	701a      	strb	r2, [r3, #0]
}
 8011e40:	b003      	add	sp, #12
 8011e42:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8011e46:	4b02      	ldr	r3, [pc, #8]	; (8011e50 <SUBGRF_SetStandby+0x30>)
 8011e48:	2202      	movs	r2, #2
 8011e4a:	701a      	strb	r2, [r3, #0]
}
 8011e4c:	e7f8      	b.n	8011e40 <SUBGRF_SetStandby+0x20>
 8011e4e:	bf00      	nop
 8011e50:	20001096 	.word	0x20001096

08011e54 <SUBGRF_SetTx>:
{
 8011e54:	b500      	push	{lr}
 8011e56:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8011e58:	4b0a      	ldr	r3, [pc, #40]	; (8011e84 <SUBGRF_SetTx+0x30>)
 8011e5a:	2204      	movs	r2, #4
 8011e5c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011e5e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011e62:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011e66:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011e6a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011e6e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8011e72:	2203      	movs	r2, #3
 8011e74:	a901      	add	r1, sp, #4
 8011e76:	2083      	movs	r0, #131	; 0x83
 8011e78:	f7ff ffa2 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 8011e7c:	b003      	add	sp, #12
 8011e7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e82:	bf00      	nop
 8011e84:	20001096 	.word	0x20001096

08011e88 <SUBGRF_SendPayload>:
{
 8011e88:	b510      	push	{r4, lr}
 8011e8a:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8011e8c:	f7ff ff80 	bl	8011d90 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8011e90:	4620      	mov	r0, r4
 8011e92:	f7ff ffdf 	bl	8011e54 <SUBGRF_SetTx>
}
 8011e96:	bd10      	pop	{r4, pc}

08011e98 <SUBGRF_SetRx>:
{
 8011e98:	b500      	push	{lr}
 8011e9a:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8011e9c:	4b0a      	ldr	r3, [pc, #40]	; (8011ec8 <SUBGRF_SetRx+0x30>)
 8011e9e:	2205      	movs	r2, #5
 8011ea0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011ea2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011ea6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011eaa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011eae:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011eb2:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8011eb6:	2203      	movs	r2, #3
 8011eb8:	a901      	add	r1, sp, #4
 8011eba:	2082      	movs	r0, #130	; 0x82
 8011ebc:	f7ff ff80 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 8011ec0:	b003      	add	sp, #12
 8011ec2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ec6:	bf00      	nop
 8011ec8:	20001096 	.word	0x20001096

08011ecc <SUBGRF_GetRandom>:
{
 8011ecc:	b570      	push	{r4, r5, r6, lr}
 8011ece:	b082      	sub	sp, #8
    uint32_t number = 0;
 8011ed0:	2600      	movs	r6, #0
 8011ed2:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8011ed4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011ed8:	f7ff febc 	bl	8011c54 <SUBGRF_ReadRegister>
 8011edc:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8011ede:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8011ee2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011ee6:	f7ff fea5 	bl	8011c34 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8011eea:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011eee:	f7ff feb1 	bl	8011c54 <SUBGRF_ReadRegister>
 8011ef2:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8011ef4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8011ef8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011efc:	f7ff fe9a 	bl	8011c34 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011f00:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011f04:	f7ff ffc8 	bl	8011e98 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8011f08:	2204      	movs	r2, #4
 8011f0a:	eb0d 0102 	add.w	r1, sp, r2
 8011f0e:	f640 0019 	movw	r0, #2073	; 0x819
 8011f12:	f7ff ff1d 	bl	8011d50 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8011f16:	4630      	mov	r0, r6
 8011f18:	f7ff ff82 	bl	8011e20 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8011f1c:	4629      	mov	r1, r5
 8011f1e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011f22:	f7ff fe87 	bl	8011c34 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8011f26:	4621      	mov	r1, r4
 8011f28:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011f2c:	f7ff fe82 	bl	8011c34 <SUBGRF_WriteRegister>
}
 8011f30:	9801      	ldr	r0, [sp, #4]
 8011f32:	b002      	add	sp, #8
 8011f34:	bd70      	pop	{r4, r5, r6, pc}
	...

08011f38 <SUBGRF_SetRxBoosted>:
{
 8011f38:	b510      	push	{r4, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8011f3e:	4b0c      	ldr	r3, [pc, #48]	; (8011f70 <SUBGRF_SetRxBoosted+0x38>)
 8011f40:	2205      	movs	r2, #5
 8011f42:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8011f44:	2197      	movs	r1, #151	; 0x97
 8011f46:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8011f4a:	f7ff fe73 	bl	8011c34 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011f4e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8011f52:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011f56:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8011f5a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011f5e:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8011f62:	2203      	movs	r2, #3
 8011f64:	a901      	add	r1, sp, #4
 8011f66:	2082      	movs	r0, #130	; 0x82
 8011f68:	f7ff ff2a 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 8011f6c:	b002      	add	sp, #8
 8011f6e:	bd10      	pop	{r4, pc}
 8011f70:	20001096 	.word	0x20001096

08011f74 <SUBGRF_SetRxDutyCycle>:
{
 8011f74:	b500      	push	{lr}
 8011f76:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8011f78:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011f7c:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8011f80:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011f84:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8011f88:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8011f8c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011f90:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8011f94:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011f98:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8011f9c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8011fa0:	2206      	movs	r2, #6
 8011fa2:	4669      	mov	r1, sp
 8011fa4:	2094      	movs	r0, #148	; 0x94
 8011fa6:	f7ff ff0b 	bl	8011dc0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8011faa:	4b03      	ldr	r3, [pc, #12]	; (8011fb8 <SUBGRF_SetRxDutyCycle+0x44>)
 8011fac:	2206      	movs	r2, #6
 8011fae:	701a      	strb	r2, [r3, #0]
}
 8011fb0:	b003      	add	sp, #12
 8011fb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fb6:	bf00      	nop
 8011fb8:	20001096 	.word	0x20001096

08011fbc <SUBGRF_SetCad>:
{
 8011fbc:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	4611      	mov	r1, r2
 8011fc2:	20c5      	movs	r0, #197	; 0xc5
 8011fc4:	f7ff fefc 	bl	8011dc0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8011fc8:	4b01      	ldr	r3, [pc, #4]	; (8011fd0 <SUBGRF_SetCad+0x14>)
 8011fca:	2207      	movs	r2, #7
 8011fcc:	701a      	strb	r2, [r3, #0]
}
 8011fce:	bd08      	pop	{r3, pc}
 8011fd0:	20001096 	.word	0x20001096

08011fd4 <SUBGRF_SetTxContinuousWave>:
{
 8011fd4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	4611      	mov	r1, r2
 8011fda:	20d1      	movs	r0, #209	; 0xd1
 8011fdc:	f7ff fef0 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 8011fe0:	bd08      	pop	{r3, pc}

08011fe2 <SUBGRF_SetTxInfinitePreamble>:
{
 8011fe2:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	4611      	mov	r1, r2
 8011fe8:	20d2      	movs	r0, #210	; 0xd2
 8011fea:	f7ff fee9 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 8011fee:	bd08      	pop	{r3, pc}

08011ff0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8011ff0:	b500      	push	{lr}
 8011ff2:	b083      	sub	sp, #12
 8011ff4:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	f10d 0107 	add.w	r1, sp, #7
 8011ffe:	209f      	movs	r0, #159	; 0x9f
 8012000:	f7ff fede 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 8012004:	b003      	add	sp, #12
 8012006:	f85d fb04 	ldr.w	pc, [sp], #4

0801200a <SUBGRF_SetLoRaSymbNumTimeout>:
{
 801200a:	b500      	push	{lr}
 801200c:	b083      	sub	sp, #12
 801200e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8012012:	2201      	movs	r2, #1
 8012014:	f10d 0107 	add.w	r1, sp, #7
 8012018:	20a0      	movs	r0, #160	; 0xa0
 801201a:	f7ff fed1 	bl	8011dc0 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 801201e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012022:	2b3f      	cmp	r3, #63	; 0x3f
 8012024:	d90f      	bls.n	8012046 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8012026:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8012028:	2200      	movs	r2, #0
        while( mant > 31 )
 801202a:	e002      	b.n	8012032 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 801202c:	089b      	lsrs	r3, r3, #2
            exp++;
 801202e:	3201      	adds	r2, #1
 8012030:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 8012032:	2b1f      	cmp	r3, #31
 8012034:	d8fa      	bhi.n	801202c <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8012036:	00d9      	lsls	r1, r3, #3
 8012038:	b2c9      	uxtb	r1, r1
 801203a:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801203c:	b2c9      	uxtb	r1, r1
 801203e:	f240 7006 	movw	r0, #1798	; 0x706
 8012042:	f7ff fdf7 	bl	8011c34 <SUBGRF_WriteRegister>
}
 8012046:	b003      	add	sp, #12
 8012048:	f85d fb04 	ldr.w	pc, [sp], #4

0801204c <SUBGRF_SetRegulatorMode>:
{
 801204c:	b500      	push	{lr}
 801204e:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8012050:	f7f0 fe80 	bl	8002d54 <RBI_IsDCDC>
 8012054:	2801      	cmp	r0, #1
 8012056:	d00b      	beq.n	8012070 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8012058:	2300      	movs	r3, #0
 801205a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801205e:	2201      	movs	r2, #1
 8012060:	f10d 0107 	add.w	r1, sp, #7
 8012064:	2096      	movs	r0, #150	; 0x96
 8012066:	f7ff feab 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 801206a:	b003      	add	sp, #12
 801206c:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8012070:	2301      	movs	r3, #1
 8012072:	f88d 3007 	strb.w	r3, [sp, #7]
 8012076:	e7f2      	b.n	801205e <SUBGRF_SetRegulatorMode+0x12>

08012078 <SUBGRF_Calibrate>:
{
 8012078:	b500      	push	{lr}
 801207a:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801207c:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8012080:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8012084:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8012086:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801208a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801208c:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8012090:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8012092:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8012096:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8012098:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801209c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801209e:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80120a2:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80120a4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80120a8:	2201      	movs	r2, #1
 80120aa:	f10d 0107 	add.w	r1, sp, #7
 80120ae:	2089      	movs	r0, #137	; 0x89
 80120b0:	f7ff fe86 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 80120b4:	b003      	add	sp, #12
 80120b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080120bc <SUBGRF_CalibrateImage>:
{
 80120bc:	b500      	push	{lr}
 80120be:	b083      	sub	sp, #12
    if( freq > 900000000 )
 80120c0:	4b1f      	ldr	r3, [pc, #124]	; (8012140 <SUBGRF_CalibrateImage+0x84>)
 80120c2:	4298      	cmp	r0, r3
 80120c4:	d90d      	bls.n	80120e2 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 80120c6:	23e1      	movs	r3, #225	; 0xe1
 80120c8:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80120cc:	23e9      	movs	r3, #233	; 0xe9
 80120ce:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80120d2:	2202      	movs	r2, #2
 80120d4:	a901      	add	r1, sp, #4
 80120d6:	2098      	movs	r0, #152	; 0x98
 80120d8:	f7ff fe72 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 80120dc:	b003      	add	sp, #12
 80120de:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80120e2:	4b18      	ldr	r3, [pc, #96]	; (8012144 <SUBGRF_CalibrateImage+0x88>)
 80120e4:	4298      	cmp	r0, r3
 80120e6:	d906      	bls.n	80120f6 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80120e8:	23d7      	movs	r3, #215	; 0xd7
 80120ea:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80120ee:	23db      	movs	r3, #219	; 0xdb
 80120f0:	f88d 3005 	strb.w	r3, [sp, #5]
 80120f4:	e7ed      	b.n	80120d2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80120f6:	4b14      	ldr	r3, [pc, #80]	; (8012148 <SUBGRF_CalibrateImage+0x8c>)
 80120f8:	4298      	cmp	r0, r3
 80120fa:	d906      	bls.n	801210a <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80120fc:	23c1      	movs	r3, #193	; 0xc1
 80120fe:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8012102:	23c5      	movs	r3, #197	; 0xc5
 8012104:	f88d 3005 	strb.w	r3, [sp, #5]
 8012108:	e7e3      	b.n	80120d2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 801210a:	4b10      	ldr	r3, [pc, #64]	; (801214c <SUBGRF_CalibrateImage+0x90>)
 801210c:	4298      	cmp	r0, r3
 801210e:	d906      	bls.n	801211e <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8012110:	2375      	movs	r3, #117	; 0x75
 8012112:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8012116:	2381      	movs	r3, #129	; 0x81
 8012118:	f88d 3005 	strb.w	r3, [sp, #5]
 801211c:	e7d9      	b.n	80120d2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 801211e:	4b0c      	ldr	r3, [pc, #48]	; (8012150 <SUBGRF_CalibrateImage+0x94>)
 8012120:	4298      	cmp	r0, r3
 8012122:	d906      	bls.n	8012132 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8012124:	236b      	movs	r3, #107	; 0x6b
 8012126:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 801212a:	236f      	movs	r3, #111	; 0x6f
 801212c:	f88d 3005 	strb.w	r3, [sp, #5]
 8012130:	e7cf      	b.n	80120d2 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8012132:	2329      	movs	r3, #41	; 0x29
 8012134:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8012138:	232b      	movs	r3, #43	; 0x2b
 801213a:	f88d 3005 	strb.w	r3, [sp, #5]
 801213e:	e7c8      	b.n	80120d2 <SUBGRF_CalibrateImage+0x16>
 8012140:	35a4e900 	.word	0x35a4e900
 8012144:	32a9f880 	.word	0x32a9f880
 8012148:	2de54480 	.word	0x2de54480
 801214c:	1b6b0b00 	.word	0x1b6b0b00
 8012150:	1954fc40 	.word	0x1954fc40

08012154 <SUBGRF_SetPaConfig>:
{
 8012154:	b500      	push	{lr}
 8012156:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8012158:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 801215c:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8012160:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8012164:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8012168:	2204      	movs	r2, #4
 801216a:	eb0d 0102 	add.w	r1, sp, r2
 801216e:	2095      	movs	r0, #149	; 0x95
 8012170:	f7ff fe26 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 8012174:	b003      	add	sp, #12
 8012176:	f85d fb04 	ldr.w	pc, [sp], #4

0801217a <SUBGRF_SetDioIrqParams>:
{
 801217a:	b500      	push	{lr}
 801217c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801217e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8012182:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8012186:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801218a:	0a08      	lsrs	r0, r1, #8
 801218c:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8012190:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8012194:	0a11      	lsrs	r1, r2, #8
 8012196:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801219a:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801219e:	0a1a      	lsrs	r2, r3, #8
 80121a0:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80121a4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80121a8:	2208      	movs	r2, #8
 80121aa:	4669      	mov	r1, sp
 80121ac:	4610      	mov	r0, r2
 80121ae:	f7ff fe07 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 80121b2:	b003      	add	sp, #12
 80121b4:	f85d fb04 	ldr.w	pc, [sp], #4

080121b8 <SUBGRF_SetTcxoMode>:
{
 80121b8:	b500      	push	{lr}
 80121ba:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 80121bc:	f000 0007 	and.w	r0, r0, #7
 80121c0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80121c4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80121c8:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80121cc:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80121d0:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80121d4:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80121d8:	2204      	movs	r2, #4
 80121da:	eb0d 0102 	add.w	r1, sp, r2
 80121de:	2097      	movs	r0, #151	; 0x97
 80121e0:	f7ff fdee 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 80121e4:	b003      	add	sp, #12
 80121e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080121ec <SUBGRF_Init>:
{
 80121ec:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80121ee:	b108      	cbz	r0, 80121f4 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80121f0:	4a18      	ldr	r2, [pc, #96]	; (8012254 <SUBGRF_Init+0x68>)
 80121f2:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80121f4:	f7ef fbfe 	bl	80019f4 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80121f8:	2002      	movs	r0, #2
 80121fa:	f7ff fd3b 	bl	8011c74 <Radio_SMPS_Set>
    ImageCalibrated = false;
 80121fe:	2000      	movs	r0, #0
 8012200:	4b15      	ldr	r3, [pc, #84]	; (8012258 <SUBGRF_Init+0x6c>)
 8012202:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8012204:	f7ff fe0c 	bl	8011e20 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8012208:	f7f0 fda0 	bl	8002d4c <RBI_IsTCXO>
 801220c:	2801      	cmp	r0, #1
 801220e:	d014      	beq.n	801223a <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8012210:	2120      	movs	r1, #32
 8012212:	f640 1011 	movw	r0, #2321	; 0x911
 8012216:	f7ff fd0d 	bl	8011c34 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801221a:	2120      	movs	r1, #32
 801221c:	f640 1012 	movw	r0, #2322	; 0x912
 8012220:	f7ff fd08 	bl	8011c34 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8012224:	210e      	movs	r1, #14
 8012226:	f640 101f 	movw	r0, #2335	; 0x91f
 801222a:	f7ff fd03 	bl	8011c34 <SUBGRF_WriteRegister>
    RBI_Init();
 801222e:	f7f0 fd81 	bl	8002d34 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8012232:	4b0a      	ldr	r3, [pc, #40]	; (801225c <SUBGRF_Init+0x70>)
 8012234:	2201      	movs	r2, #1
 8012236:	701a      	strb	r2, [r3, #0]
}
 8012238:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801223a:	2140      	movs	r1, #64	; 0x40
 801223c:	f7ff ffbc 	bl	80121b8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8012240:	2100      	movs	r1, #0
 8012242:	f640 1011 	movw	r0, #2321	; 0x911
 8012246:	f7ff fcf5 	bl	8011c34 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 801224a:	f04f 007f 	mov.w	r0, #127	; 0x7f
 801224e:	f7ff ff13 	bl	8012078 <SUBGRF_Calibrate>
 8012252:	e7e7      	b.n	8012224 <SUBGRF_Init+0x38>
 8012254:	20001098 	.word	0x20001098
 8012258:	20001094 	.word	0x20001094
 801225c:	20001096 	.word	0x20001096

08012260 <SUBGRF_SetRfFrequency>:
{
 8012260:	b510      	push	{r4, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8012266:	4b12      	ldr	r3, [pc, #72]	; (80122b0 <SUBGRF_SetRfFrequency+0x50>)
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	b1d3      	cbz	r3, 80122a2 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801226c:	4a11      	ldr	r2, [pc, #68]	; (80122b4 <SUBGRF_SetRfFrequency+0x54>)
 801226e:	2300      	movs	r3, #0
 8012270:	0660      	lsls	r0, r4, #25
 8012272:	09e1      	lsrs	r1, r4, #7
 8012274:	f7ee fd0e 	bl	8000c94 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8012278:	0e03      	lsrs	r3, r0, #24
 801227a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801227e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012282:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8012286:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801228a:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801228e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8012292:	2204      	movs	r2, #4
 8012294:	eb0d 0102 	add.w	r1, sp, r2
 8012298:	2086      	movs	r0, #134	; 0x86
 801229a:	f7ff fd91 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 801229e:	b002      	add	sp, #8
 80122a0:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80122a2:	f7ff ff0b 	bl	80120bc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80122a6:	4b02      	ldr	r3, [pc, #8]	; (80122b0 <SUBGRF_SetRfFrequency+0x50>)
 80122a8:	2201      	movs	r2, #1
 80122aa:	701a      	strb	r2, [r3, #0]
 80122ac:	e7de      	b.n	801226c <SUBGRF_SetRfFrequency+0xc>
 80122ae:	bf00      	nop
 80122b0:	20001094 	.word	0x20001094
 80122b4:	01e84800 	.word	0x01e84800

080122b8 <SUBGRF_SetPacketType>:
{
 80122b8:	b500      	push	{lr}
 80122ba:	b083      	sub	sp, #12
 80122bc:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 80122c0:	b2c3      	uxtb	r3, r0
 80122c2:	4a09      	ldr	r2, [pc, #36]	; (80122e8 <SUBGRF_SetPacketType+0x30>)
 80122c4:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 80122c6:	b143      	cbz	r3, 80122da <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80122c8:	2201      	movs	r2, #1
 80122ca:	f10d 0107 	add.w	r1, sp, #7
 80122ce:	208a      	movs	r0, #138	; 0x8a
 80122d0:	f7ff fd76 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 80122d4:	b003      	add	sp, #12
 80122d6:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80122da:	2100      	movs	r1, #0
 80122dc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80122e0:	f7ff fca8 	bl	8011c34 <SUBGRF_WriteRegister>
 80122e4:	e7f0      	b.n	80122c8 <SUBGRF_SetPacketType+0x10>
 80122e6:	bf00      	nop
 80122e8:	20001097 	.word	0x20001097

080122ec <SUBGRF_SetTxParams>:
{
 80122ec:	b570      	push	{r4, r5, r6, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	460c      	mov	r4, r1
 80122f2:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80122f4:	2801      	cmp	r0, #1
 80122f6:	d035      	beq.n	8012364 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80122f8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80122fc:	f7ff fcaa 	bl	8011c54 <SUBGRF_ReadRegister>
 8012300:	f040 011e 	orr.w	r1, r0, #30
 8012304:	b2c9      	uxtb	r1, r1
 8012306:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801230a:	f7ff fc93 	bl	8011c34 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801230e:	2001      	movs	r0, #1
 8012310:	f7f0 fd24 	bl	8002d5c <RBI_GetRFOMaxPowerConfig>
 8012314:	4605      	mov	r5, r0
        if (power > max_power)
 8012316:	4284      	cmp	r4, r0
 8012318:	dd00      	ble.n	801231c <SUBGRF_SetTxParams+0x30>
            power = max_power;
 801231a:	b244      	sxtb	r4, r0
        if (max_power == 20)
 801231c:	2d14      	cmp	r5, #20
 801231e:	d054      	beq.n	80123ca <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8012320:	2d11      	cmp	r5, #17
 8012322:	d05c      	beq.n	80123de <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8012324:	2d0e      	cmp	r5, #14
 8012326:	d064      	beq.n	80123f2 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8012328:	2301      	movs	r3, #1
 801232a:	2200      	movs	r2, #0
 801232c:	2107      	movs	r1, #7
 801232e:	2004      	movs	r0, #4
 8012330:	f7ff ff10 	bl	8012154 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012334:	1b64      	subs	r4, r4, r5
 8012336:	3416      	adds	r4, #22
 8012338:	b265      	sxtb	r5, r4
        if (power < -9)
 801233a:	f115 0f09 	cmn.w	r5, #9
 801233e:	da01      	bge.n	8012344 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8012340:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8012344:	2138      	movs	r1, #56	; 0x38
 8012346:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801234a:	f7ff fc73 	bl	8011c34 <SUBGRF_WriteRegister>
    buf[0] = power;
 801234e:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8012352:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8012356:	2202      	movs	r2, #2
 8012358:	a901      	add	r1, sp, #4
 801235a:	208e      	movs	r0, #142	; 0x8e
 801235c:	f7ff fd30 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 8012360:	b002      	add	sp, #8
 8012362:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8012364:	2000      	movs	r0, #0
 8012366:	f7f0 fcf9 	bl	8002d5c <RBI_GetRFOMaxPowerConfig>
 801236a:	4605      	mov	r5, r0
        if (power >  max_power)
 801236c:	4284      	cmp	r4, r0
 801236e:	dd00      	ble.n	8012372 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8012370:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8012372:	2d0e      	cmp	r5, #14
 8012374:	d015      	beq.n	80123a2 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8012376:	2d0a      	cmp	r5, #10
 8012378:	d01d      	beq.n	80123b6 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801237a:	2301      	movs	r3, #1
 801237c:	461a      	mov	r2, r3
 801237e:	2100      	movs	r1, #0
 8012380:	2007      	movs	r0, #7
 8012382:	f7ff fee7 	bl	8012154 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012386:	1b65      	subs	r5, r4, r5
 8012388:	350e      	adds	r5, #14
 801238a:	b26d      	sxtb	r5, r5
        if (power < -17)
 801238c:	f115 0f11 	cmn.w	r5, #17
 8012390:	da01      	bge.n	8012396 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8012392:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8012396:	2118      	movs	r1, #24
 8012398:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801239c:	f7ff fc4a 	bl	8011c34 <SUBGRF_WriteRegister>
 80123a0:	e7d5      	b.n	801234e <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80123a2:	2301      	movs	r3, #1
 80123a4:	461a      	mov	r2, r3
 80123a6:	2100      	movs	r1, #0
 80123a8:	2004      	movs	r0, #4
 80123aa:	f7ff fed3 	bl	8012154 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80123ae:	1b65      	subs	r5, r4, r5
 80123b0:	350e      	adds	r5, #14
 80123b2:	b26d      	sxtb	r5, r5
 80123b4:	e7ea      	b.n	801238c <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80123b6:	2301      	movs	r3, #1
 80123b8:	461a      	mov	r2, r3
 80123ba:	2100      	movs	r1, #0
 80123bc:	4618      	mov	r0, r3
 80123be:	f7ff fec9 	bl	8012154 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80123c2:	1b65      	subs	r5, r4, r5
 80123c4:	350d      	adds	r5, #13
 80123c6:	b26d      	sxtb	r5, r5
 80123c8:	e7e0      	b.n	801238c <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80123ca:	2301      	movs	r3, #1
 80123cc:	2200      	movs	r2, #0
 80123ce:	2105      	movs	r1, #5
 80123d0:	2003      	movs	r0, #3
 80123d2:	f7ff febf 	bl	8012154 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80123d6:	1b65      	subs	r5, r4, r5
 80123d8:	3516      	adds	r5, #22
 80123da:	b26d      	sxtb	r5, r5
 80123dc:	e7ad      	b.n	801233a <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80123de:	2301      	movs	r3, #1
 80123e0:	2200      	movs	r2, #0
 80123e2:	2103      	movs	r1, #3
 80123e4:	2002      	movs	r0, #2
 80123e6:	f7ff feb5 	bl	8012154 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80123ea:	1b65      	subs	r5, r4, r5
 80123ec:	3516      	adds	r5, #22
 80123ee:	b26d      	sxtb	r5, r5
 80123f0:	e7a3      	b.n	801233a <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80123f2:	2301      	movs	r3, #1
 80123f4:	2200      	movs	r2, #0
 80123f6:	2102      	movs	r1, #2
 80123f8:	4608      	mov	r0, r1
 80123fa:	f7ff feab 	bl	8012154 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80123fe:	1b65      	subs	r5, r4, r5
 8012400:	350e      	adds	r5, #14
 8012402:	b26d      	sxtb	r5, r5
 8012404:	e799      	b.n	801233a <SUBGRF_SetTxParams+0x4e>
	...

08012408 <SUBGRF_SetModulationParams>:
{
 8012408:	b510      	push	{r4, lr}
 801240a:	b082      	sub	sp, #8
 801240c:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801240e:	4b3e      	ldr	r3, [pc, #248]	; (8012508 <SUBGRF_SetModulationParams+0x100>)
 8012410:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012414:	ab02      	add	r3, sp, #8
 8012416:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 801241a:	7820      	ldrb	r0, [r4, #0]
 801241c:	4b3b      	ldr	r3, [pc, #236]	; (801250c <SUBGRF_SetModulationParams+0x104>)
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	4298      	cmp	r0, r3
 8012422:	d106      	bne.n	8012432 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8012424:	7823      	ldrb	r3, [r4, #0]
 8012426:	2b03      	cmp	r3, #3
 8012428:	d82c      	bhi.n	8012484 <SUBGRF_SetModulationParams+0x7c>
 801242a:	e8df f003 	tbb	[pc, r3]
 801242e:	4205      	.short	0x4205
 8012430:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8012432:	f7ff ff41 	bl	80122b8 <SUBGRF_SetPacketType>
 8012436:	e7f5      	b.n	8012424 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8012438:	6862      	ldr	r2, [r4, #4]
 801243a:	4b35      	ldr	r3, [pc, #212]	; (8012510 <SUBGRF_SetModulationParams+0x108>)
 801243c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012440:	0c1a      	lsrs	r2, r3, #16
 8012442:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012446:	0a1a      	lsrs	r2, r3, #8
 8012448:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801244c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8012450:	7b23      	ldrb	r3, [r4, #12]
 8012452:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8012456:	7b63      	ldrb	r3, [r4, #13]
 8012458:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801245c:	68a1      	ldr	r1, [r4, #8]
 801245e:	4a2d      	ldr	r2, [pc, #180]	; (8012514 <SUBGRF_SetModulationParams+0x10c>)
 8012460:	2300      	movs	r3, #0
 8012462:	0648      	lsls	r0, r1, #25
 8012464:	09c9      	lsrs	r1, r1, #7
 8012466:	f7ee fc15 	bl	8000c94 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801246a:	0c03      	lsrs	r3, r0, #16
 801246c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8012470:	0a03      	lsrs	r3, r0, #8
 8012472:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8012476:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801247a:	2208      	movs	r2, #8
 801247c:	4669      	mov	r1, sp
 801247e:	208b      	movs	r0, #139	; 0x8b
 8012480:	f7ff fc9e 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 8012484:	b002      	add	sp, #8
 8012486:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8012488:	6922      	ldr	r2, [r4, #16]
 801248a:	4b21      	ldr	r3, [pc, #132]	; (8012510 <SUBGRF_SetModulationParams+0x108>)
 801248c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012490:	0c1a      	lsrs	r2, r3, #16
 8012492:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012496:	0a1a      	lsrs	r2, r3, #8
 8012498:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801249c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80124a0:	7d23      	ldrb	r3, [r4, #20]
 80124a2:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80124a6:	2204      	movs	r2, #4
 80124a8:	4669      	mov	r1, sp
 80124aa:	208b      	movs	r0, #139	; 0x8b
 80124ac:	f7ff fc88 	bl	8011dc0 <SUBGRF_WriteCommand>
        break;
 80124b0:	e7e8      	b.n	8012484 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80124b2:	7e23      	ldrb	r3, [r4, #24]
 80124b4:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80124b8:	7e63      	ldrb	r3, [r4, #25]
 80124ba:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80124be:	7ea3      	ldrb	r3, [r4, #26]
 80124c0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80124c4:	7ee3      	ldrb	r3, [r4, #27]
 80124c6:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80124ca:	2204      	movs	r2, #4
 80124cc:	4669      	mov	r1, sp
 80124ce:	208b      	movs	r0, #139	; 0x8b
 80124d0:	f7ff fc76 	bl	8011dc0 <SUBGRF_WriteCommand>
        break;
 80124d4:	e7d6      	b.n	8012484 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80124d6:	6862      	ldr	r2, [r4, #4]
 80124d8:	4b0d      	ldr	r3, [pc, #52]	; (8012510 <SUBGRF_SetModulationParams+0x108>)
 80124da:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80124de:	0c1a      	lsrs	r2, r3, #16
 80124e0:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80124e4:	0a1a      	lsrs	r2, r3, #8
 80124e6:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80124ea:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80124ee:	7b23      	ldrb	r3, [r4, #12]
 80124f0:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80124f4:	7b63      	ldrb	r3, [r4, #13]
 80124f6:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80124fa:	2205      	movs	r2, #5
 80124fc:	4669      	mov	r1, sp
 80124fe:	208b      	movs	r0, #139	; 0x8b
 8012500:	f7ff fc5e 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 8012504:	e7be      	b.n	8012484 <SUBGRF_SetModulationParams+0x7c>
 8012506:	bf00      	nop
 8012508:	0801385c 	.word	0x0801385c
 801250c:	20001097 	.word	0x20001097
 8012510:	3d090000 	.word	0x3d090000
 8012514:	01e84800 	.word	0x01e84800

08012518 <SUBGRF_SetPacketParams>:
{
 8012518:	b510      	push	{r4, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801251e:	ab01      	add	r3, sp, #4
 8012520:	4a33      	ldr	r2, [pc, #204]	; (80125f0 <SUBGRF_SetPacketParams+0xd8>)
 8012522:	ca07      	ldmia	r2, {r0, r1, r2}
 8012524:	c303      	stmia	r3!, {r0, r1}
 8012526:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8012528:	7820      	ldrb	r0, [r4, #0]
 801252a:	4b32      	ldr	r3, [pc, #200]	; (80125f4 <SUBGRF_SetPacketParams+0xdc>)
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	4298      	cmp	r0, r3
 8012530:	d106      	bne.n	8012540 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8012532:	7823      	ldrb	r3, [r4, #0]
 8012534:	2b03      	cmp	r3, #3
 8012536:	d82a      	bhi.n	801258e <SUBGRF_SetPacketParams+0x76>
 8012538:	e8df f003 	tbb	[pc, r3]
 801253c:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8012540:	f7ff feba 	bl	80122b8 <SUBGRF_SetPacketType>
 8012544:	e7f5      	b.n	8012532 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8012546:	7a63      	ldrb	r3, [r4, #9]
 8012548:	2bf1      	cmp	r3, #241	; 0xf1
 801254a:	d022      	beq.n	8012592 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801254c:	2bf2      	cmp	r3, #242	; 0xf2
 801254e:	d02a      	beq.n	80125a6 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8012550:	8862      	ldrh	r2, [r4, #2]
 8012552:	0a11      	lsrs	r1, r2, #8
 8012554:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8012558:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801255c:	7922      	ldrb	r2, [r4, #4]
 801255e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8012562:	7962      	ldrb	r2, [r4, #5]
 8012564:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8012568:	79a2      	ldrb	r2, [r4, #6]
 801256a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801256e:	79e2      	ldrb	r2, [r4, #7]
 8012570:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8012574:	7a22      	ldrb	r2, [r4, #8]
 8012576:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 801257a:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801257e:	7aa3      	ldrb	r3, [r4, #10]
 8012580:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8012584:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8012586:	a901      	add	r1, sp, #4
 8012588:	208c      	movs	r0, #140	; 0x8c
 801258a:	f7ff fc19 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 801258e:	b004      	add	sp, #16
 8012590:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8012592:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012596:	f7ff fbb2 	bl	8011cfe <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801259a:	f248 0005 	movw	r0, #32773	; 0x8005
 801259e:	f7ff fbc2 	bl	8011d26 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80125a2:	2302      	movs	r3, #2
 80125a4:	e7d4      	b.n	8012550 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80125a6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80125aa:	f7ff fba8 	bl	8011cfe <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80125ae:	f241 0021 	movw	r0, #4129	; 0x1021
 80125b2:	f7ff fbb8 	bl	8011d26 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80125b6:	2306      	movs	r3, #6
 80125b8:	e7ca      	b.n	8012550 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80125ba:	7b23      	ldrb	r3, [r4, #12]
 80125bc:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80125c0:	2201      	movs	r2, #1
        break;
 80125c2:	e7e0      	b.n	8012586 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80125c4:	89e3      	ldrh	r3, [r4, #14]
 80125c6:	0a1a      	lsrs	r2, r3, #8
 80125c8:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80125cc:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80125d0:	7c23      	ldrb	r3, [r4, #16]
 80125d2:	4a09      	ldr	r2, [pc, #36]	; (80125f8 <SUBGRF_SetPacketParams+0xe0>)
 80125d4:	7013      	strb	r3, [r2, #0]
 80125d6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80125da:	7c63      	ldrb	r3, [r4, #17]
 80125dc:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80125e0:	7ca3      	ldrb	r3, [r4, #18]
 80125e2:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80125e6:	7ce3      	ldrb	r3, [r4, #19]
 80125e8:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80125ec:	2206      	movs	r2, #6
        break;
 80125ee:	e7ca      	b.n	8012586 <SUBGRF_SetPacketParams+0x6e>
 80125f0:	08013864 	.word	0x08013864
 80125f4:	20001097 	.word	0x20001097
 80125f8:	20001095 	.word	0x20001095

080125fc <SUBGRF_SetBufferBaseAddress>:
{
 80125fc:	b500      	push	{lr}
 80125fe:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8012600:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8012604:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8012608:	2202      	movs	r2, #2
 801260a:	a901      	add	r1, sp, #4
 801260c:	208f      	movs	r0, #143	; 0x8f
 801260e:	f7ff fbd7 	bl	8011dc0 <SUBGRF_WriteCommand>
}
 8012612:	b003      	add	sp, #12
 8012614:	f85d fb04 	ldr.w	pc, [sp], #4

08012618 <SUBGRF_ReadCommand>:
{
 8012618:	b510      	push	{r4, lr}
 801261a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801261c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012620:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8012622:	460a      	mov	r2, r1
 8012624:	4601      	mov	r1, r0
 8012626:	4803      	ldr	r0, [pc, #12]	; (8012634 <SUBGRF_ReadCommand+0x1c>)
 8012628:	f7f4 fbf8 	bl	8006e1c <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801262c:	f384 8810 	msr	PRIMASK, r4
}
 8012630:	bd10      	pop	{r4, pc}
 8012632:	bf00      	nop
 8012634:	2000021c 	.word	0x2000021c

08012638 <SUBGRF_GetRssiInst>:
{
 8012638:	b500      	push	{lr}
 801263a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801263c:	2201      	movs	r2, #1
 801263e:	a901      	add	r1, sp, #4
 8012640:	2015      	movs	r0, #21
 8012642:	f7ff ffe9 	bl	8012618 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8012646:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801264a:	4240      	negs	r0, r0
}
 801264c:	1040      	asrs	r0, r0, #1
 801264e:	b003      	add	sp, #12
 8012650:	f85d fb04 	ldr.w	pc, [sp], #4

08012654 <SUBGRF_GetRxBufferStatus>:
{
 8012654:	b530      	push	{r4, r5, lr}
 8012656:	b083      	sub	sp, #12
 8012658:	4605      	mov	r5, r0
 801265a:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801265c:	2202      	movs	r2, #2
 801265e:	a901      	add	r1, sp, #4
 8012660:	2013      	movs	r0, #19
 8012662:	f7ff ffd9 	bl	8012618 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8012666:	f7ff fadf 	bl	8011c28 <SUBGRF_GetPacketType>
 801266a:	2801      	cmp	r0, #1
 801266c:	d007      	beq.n	801267e <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 801266e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012672:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8012674:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012678:	7023      	strb	r3, [r4, #0]
}
 801267a:	b003      	add	sp, #12
 801267c:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801267e:	4b05      	ldr	r3, [pc, #20]	; (8012694 <SUBGRF_GetRxBufferStatus+0x40>)
 8012680:	781b      	ldrb	r3, [r3, #0]
 8012682:	b2db      	uxtb	r3, r3
 8012684:	2b01      	cmp	r3, #1
 8012686:	d1f2      	bne.n	801266e <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8012688:	f240 7002 	movw	r0, #1794	; 0x702
 801268c:	f7ff fae2 	bl	8011c54 <SUBGRF_ReadRegister>
 8012690:	7028      	strb	r0, [r5, #0]
 8012692:	e7ef      	b.n	8012674 <SUBGRF_GetRxBufferStatus+0x20>
 8012694:	20001095 	.word	0x20001095

08012698 <SUBGRF_GetPayload>:
{
 8012698:	b570      	push	{r4, r5, r6, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	4606      	mov	r6, r0
 801269e:	460c      	mov	r4, r1
 80126a0:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80126a2:	2300      	movs	r3, #0
 80126a4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80126a8:	f10d 0107 	add.w	r1, sp, #7
 80126ac:	4620      	mov	r0, r4
 80126ae:	f7ff ffd1 	bl	8012654 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80126b2:	7822      	ldrb	r2, [r4, #0]
 80126b4:	42aa      	cmp	r2, r5
 80126b6:	d902      	bls.n	80126be <SUBGRF_GetPayload+0x26>
        return 1;
 80126b8:	2001      	movs	r0, #1
}
 80126ba:	b002      	add	sp, #8
 80126bc:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80126be:	4631      	mov	r1, r6
 80126c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80126c4:	f7ff fb6c 	bl	8011da0 <SUBGRF_ReadBuffer>
    return 0;
 80126c8:	2000      	movs	r0, #0
 80126ca:	e7f6      	b.n	80126ba <SUBGRF_GetPayload+0x22>

080126cc <SUBGRF_GetPacketStatus>:
{
 80126cc:	b510      	push	{r4, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80126d2:	2203      	movs	r2, #3
 80126d4:	a901      	add	r1, sp, #4
 80126d6:	2014      	movs	r0, #20
 80126d8:	f7ff ff9e 	bl	8012618 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 80126dc:	f7ff faa4 	bl	8011c28 <SUBGRF_GetPacketType>
 80126e0:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 80126e2:	b148      	cbz	r0, 80126f8 <SUBGRF_GetPacketStatus+0x2c>
 80126e4:	2801      	cmp	r0, #1
 80126e6:	d018      	beq.n	801271a <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80126e8:	2214      	movs	r2, #20
 80126ea:	2100      	movs	r1, #0
 80126ec:	4620      	mov	r0, r4
 80126ee:	f000 fb20 	bl	8012d32 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80126f2:	230f      	movs	r3, #15
 80126f4:	7023      	strb	r3, [r4, #0]
}
 80126f6:	e00e      	b.n	8012716 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80126f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80126fc:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80126fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012702:	425b      	negs	r3, r3
 8012704:	105b      	asrs	r3, r3, #1
 8012706:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8012708:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801270c:	425b      	negs	r3, r3
 801270e:	105b      	asrs	r3, r3, #1
 8012710:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8012712:	2300      	movs	r3, #0
 8012714:	60a3      	str	r3, [r4, #8]
}
 8012716:	b002      	add	sp, #8
 8012718:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801271a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801271e:	425b      	negs	r3, r3
 8012720:	105b      	asrs	r3, r3, #1
 8012722:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8012724:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8012728:	3302      	adds	r3, #2
 801272a:	109b      	asrs	r3, r3, #2
 801272c:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801272e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012732:	425b      	negs	r3, r3
 8012734:	105b      	asrs	r3, r3, #1
 8012736:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8012738:	4b01      	ldr	r3, [pc, #4]	; (8012740 <SUBGRF_GetPacketStatus+0x74>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	6123      	str	r3, [r4, #16]
            break;
 801273e:	e7ea      	b.n	8012716 <SUBGRF_GetPacketStatus+0x4a>
 8012740:	20001090 	.word	0x20001090

08012744 <SUBGRF_SetSwitch>:
{
 8012744:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8012746:	2901      	cmp	r1, #1
 8012748:	d003      	beq.n	8012752 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801274a:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 801274c:	f7f0 faf6 	bl	8002d3c <RBI_ConfigRFSwitch>
}
 8012750:	bd10      	pop	{r4, pc}
 8012752:	4604      	mov	r4, r0
 8012754:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8012756:	2c01      	cmp	r4, #1
 8012758:	d003      	beq.n	8012762 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 801275a:	2c02      	cmp	r4, #2
 801275c:	d1f6      	bne.n	801274c <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 801275e:	2003      	movs	r0, #3
 8012760:	e7f4      	b.n	801274c <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8012762:	2004      	movs	r0, #4
 8012764:	f7ff fa86 	bl	8011c74 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8012768:	2002      	movs	r0, #2
 801276a:	e7f6      	b.n	801275a <SUBGRF_SetSwitch+0x16>

0801276c <SUBGRF_SetRfTxPower>:
{
 801276c:	b538      	push	{r3, r4, r5, lr}
 801276e:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8012770:	f7f0 fae8 	bl	8002d44 <RBI_GetTxConfig>
    switch (TxConfig)
 8012774:	b148      	cbz	r0, 801278a <SUBGRF_SetRfTxPower+0x1e>
 8012776:	2802      	cmp	r0, #2
 8012778:	d10d      	bne.n	8012796 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 801277a:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801277c:	2202      	movs	r2, #2
 801277e:	4621      	mov	r1, r4
 8012780:	4628      	mov	r0, r5
 8012782:	f7ff fdb3 	bl	80122ec <SUBGRF_SetTxParams>
}
 8012786:	4628      	mov	r0, r5
 8012788:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 801278a:	2c0f      	cmp	r4, #15
 801278c:	dc01      	bgt.n	8012792 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 801278e:	2501      	movs	r5, #1
 8012790:	e7f4      	b.n	801277c <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8012792:	2502      	movs	r5, #2
 8012794:	e7f2      	b.n	801277c <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8012796:	2501      	movs	r5, #1
 8012798:	e7f0      	b.n	801277c <SUBGRF_SetRfTxPower+0x10>

0801279a <SUBGRF_GetRadioWakeUpTime>:
}
 801279a:	2001      	movs	r0, #1
 801279c:	4770      	bx	lr
	...

080127a0 <HAL_SUBGHZ_TxCpltCallback>:
{
 80127a0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80127a2:	4b02      	ldr	r3, [pc, #8]	; (80127ac <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	2001      	movs	r0, #1
 80127a8:	4798      	blx	r3
}
 80127aa:	bd08      	pop	{r3, pc}
 80127ac:	20001098 	.word	0x20001098

080127b0 <HAL_SUBGHZ_RxCpltCallback>:
{
 80127b0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80127b2:	4b02      	ldr	r3, [pc, #8]	; (80127bc <HAL_SUBGHZ_RxCpltCallback+0xc>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	2002      	movs	r0, #2
 80127b8:	4798      	blx	r3
}
 80127ba:	bd08      	pop	{r3, pc}
 80127bc:	20001098 	.word	0x20001098

080127c0 <HAL_SUBGHZ_CRCErrorCallback>:
{
 80127c0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80127c2:	4b02      	ldr	r3, [pc, #8]	; (80127cc <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	2040      	movs	r0, #64	; 0x40
 80127c8:	4798      	blx	r3
}
 80127ca:	bd08      	pop	{r3, pc}
 80127cc:	20001098 	.word	0x20001098

080127d0 <HAL_SUBGHZ_CADStatusCallback>:
{
 80127d0:	b508      	push	{r3, lr}
    switch (cadstatus)
 80127d2:	b111      	cbz	r1, 80127da <HAL_SUBGHZ_CADStatusCallback+0xa>
 80127d4:	2901      	cmp	r1, #1
 80127d6:	d005      	beq.n	80127e4 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 80127d8:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80127da:	4b05      	ldr	r3, [pc, #20]	; (80127f0 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	2080      	movs	r0, #128	; 0x80
 80127e0:	4798      	blx	r3
            break;
 80127e2:	e7f9      	b.n	80127d8 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80127e4:	4b02      	ldr	r3, [pc, #8]	; (80127f0 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80127ec:	4798      	blx	r3
}
 80127ee:	e7f3      	b.n	80127d8 <HAL_SUBGHZ_CADStatusCallback+0x8>
 80127f0:	20001098 	.word	0x20001098

080127f4 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80127f4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80127f6:	4b03      	ldr	r3, [pc, #12]	; (8012804 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80127fe:	4798      	blx	r3
}
 8012800:	bd08      	pop	{r3, pc}
 8012802:	bf00      	nop
 8012804:	20001098 	.word	0x20001098

08012808 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8012808:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801280a:	4b02      	ldr	r3, [pc, #8]	; (8012814 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	2020      	movs	r0, #32
 8012810:	4798      	blx	r3
}
 8012812:	bd08      	pop	{r3, pc}
 8012814:	20001098 	.word	0x20001098

08012818 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8012818:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801281a:	4b02      	ldr	r3, [pc, #8]	; (8012824 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	2004      	movs	r0, #4
 8012820:	4798      	blx	r3
}
 8012822:	bd08      	pop	{r3, pc}
 8012824:	20001098 	.word	0x20001098

08012828 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8012828:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801282a:	4b02      	ldr	r3, [pc, #8]	; (8012834 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	2008      	movs	r0, #8
 8012830:	4798      	blx	r3
}
 8012832:	bd08      	pop	{r3, pc}
 8012834:	20001098 	.word	0x20001098

08012838 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8012838:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801283a:	4b02      	ldr	r3, [pc, #8]	; (8012844 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	2010      	movs	r0, #16
 8012840:	4798      	blx	r3
}
 8012842:	bd08      	pop	{r3, pc}
 8012844:	20001098 	.word	0x20001098

08012848 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8012848:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801284a:	4b03      	ldr	r3, [pc, #12]	; (8012858 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012852:	4798      	blx	r3
}
 8012854:	bd08      	pop	{r3, pc}
 8012856:	bf00      	nop
 8012858:	20001098 	.word	0x20001098

0801285c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 801285c:	4601      	mov	r1, r0
 801285e:	b188      	cbz	r0, 8012884 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8012860:	2300      	movs	r3, #0
 8012862:	2b15      	cmp	r3, #21
 8012864:	d80d      	bhi.n	8012882 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8012866:	4618      	mov	r0, r3
 8012868:	4a07      	ldr	r2, [pc, #28]	; (8012888 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801286a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801286e:	428a      	cmp	r2, r1
 8012870:	d802      	bhi.n	8012878 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8012872:	3301      	adds	r3, #1
 8012874:	b2db      	uxtb	r3, r3
 8012876:	e7f4      	b.n	8012862 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8012878:	4b03      	ldr	r3, [pc, #12]	; (8012888 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801287a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801287e:	7918      	ldrb	r0, [r3, #4]
 8012880:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8012882:	e7fe      	b.n	8012882 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8012884:	201f      	movs	r0, #31
}
 8012886:	4770      	bx	lr
 8012888:	08014618 	.word	0x08014618

0801288c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801288c:	b570      	push	{r4, r5, r6, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	4605      	mov	r5, r0
 8012892:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8012894:	4b1d      	ldr	r3, [pc, #116]	; (801290c <SUBGRF_GetCFO+0x80>)
 8012896:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8012898:	f640 0007 	movw	r0, #2055	; 0x807
 801289c:	f7ff f9da 	bl	8011c54 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80128a0:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80128a4:	3308      	adds	r3, #8
 80128a6:	446b      	add	r3, sp
 80128a8:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80128ac:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 80128b0:	3301      	adds	r3, #1
 80128b2:	fa02 f303 	lsl.w	r3, r2, r3
 80128b6:	4a16      	ldr	r2, [pc, #88]	; (8012910 <SUBGRF_GetCFO+0x84>)
 80128b8:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 80128bc:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80128c0:	2807      	cmp	r0, #7
 80128c2:	d921      	bls.n	8012908 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 80128c4:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 80128c6:	fb03 f000 	mul.w	r0, r3, r0
 80128ca:	2803      	cmp	r0, #3
 80128cc:	d800      	bhi.n	80128d0 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80128ce:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80128d0:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80128d4:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80128d8:	f7ff f9bc 	bl	8011c54 <SUBGRF_ReadRegister>
 80128dc:	0206      	lsls	r6, r0, #8
 80128de:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80128e2:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80128e6:	f7ff f9b5 	bl	8011c54 <SUBGRF_ReadRegister>
 80128ea:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80128ec:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80128f0:	d003      	beq.n	80128fa <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80128f2:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80128f6:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80128fa:	096b      	lsrs	r3, r5, #5
 80128fc:	fb03 f000 	mul.w	r0, r3, r0
 8012900:	11c0      	asrs	r0, r0, #7
 8012902:	6020      	str	r0, [r4, #0]
}
 8012904:	b002      	add	sp, #8
 8012906:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8012908:	2302      	movs	r3, #2
 801290a:	e7dc      	b.n	80128c6 <SUBGRF_GetCFO+0x3a>
 801290c:	0c0a0804 	.word	0x0c0a0804
 8012910:	01e84800 	.word	0x01e84800

08012914 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8012914:	f04f 30ff 	mov.w	r0, #4294967295
 8012918:	4770      	bx	lr

0801291a <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 801291a:	f04f 30ff 	mov.w	r0, #4294967295
 801291e:	4770      	bx	lr

08012920 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8012920:	4770      	bx	lr

08012922 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8012922:	2000      	movs	r0, #0
 8012924:	4770      	bx	lr

08012926 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8012926:	2000      	movs	r0, #0
 8012928:	4770      	bx	lr

0801292a <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801292a:	4770      	bx	lr

0801292c <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 801292c:	f04f 30ff 	mov.w	r0, #4294967295
 8012930:	4770      	bx	lr

08012932 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8012932:	f04f 30ff 	mov.w	r0, #4294967295
 8012936:	4770      	bx	lr

08012938 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8012938:	4770      	bx	lr

0801293a <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801293a:	4770      	bx	lr

0801293c <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801293c:	4770      	bx	lr
	...

08012940 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8012940:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012942:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012946:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8012948:	4b1e      	ldr	r3, [pc, #120]	; (80129c4 <TRACE_AllocateBufer+0x84>)
 801294a:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 801294e:	8a1a      	ldrh	r2, [r3, #16]
 8012950:	4596      	cmp	lr, r2
 8012952:	d011      	beq.n	8012978 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012954:	4596      	cmp	lr, r2
 8012956:	d921      	bls.n	801299c <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012958:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 801295c:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801295e:	4283      	cmp	r3, r0
 8012960:	d81f      	bhi.n	80129a2 <TRACE_AllocateBufer+0x62>
 8012962:	4282      	cmp	r2, r0
 8012964:	d91d      	bls.n	80129a2 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012966:	4b17      	ldr	r3, [pc, #92]	; (80129c4 <TRACE_AllocateBufer+0x84>)
 8012968:	2401      	movs	r4, #1
 801296a:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801296c:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012970:	2400      	movs	r4, #0
 8012972:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8012974:	4613      	mov	r3, r2
 8012976:	e014      	b.n	80129a2 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012978:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 801297c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801297e:	4298      	cmp	r0, r3
 8012980:	d30f      	bcc.n	80129a2 <TRACE_AllocateBufer+0x62>
 8012982:	4282      	cmp	r2, r0
 8012984:	d90d      	bls.n	80129a2 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012986:	4b0f      	ldr	r3, [pc, #60]	; (80129c4 <TRACE_AllocateBufer+0x84>)
 8012988:	2401      	movs	r4, #1
 801298a:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801298c:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8012990:	f04f 0e00 	mov.w	lr, #0
 8012994:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8012998:	4613      	mov	r3, r2
 801299a:	e002      	b.n	80129a2 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801299c:	eba2 020e 	sub.w	r2, r2, lr
 80129a0:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80129a2:	4283      	cmp	r3, r0
 80129a4:	d90a      	bls.n	80129bc <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80129a6:	4a07      	ldr	r2, [pc, #28]	; (80129c4 <TRACE_AllocateBufer+0x84>)
 80129a8:	8a53      	ldrh	r3, [r2, #18]
 80129aa:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80129ac:	4403      	add	r3, r0
 80129ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80129b2:	8253      	strh	r3, [r2, #18]
    ret = 0;
 80129b4:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129b6:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 80129ba:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 80129bc:	f04f 30ff 	mov.w	r0, #4294967295
 80129c0:	e7f9      	b.n	80129b6 <TRACE_AllocateBufer+0x76>
 80129c2:	bf00      	nop
 80129c4:	2000149c 	.word	0x2000149c

080129c8 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129c8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80129cc:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80129ce:	4a03      	ldr	r2, [pc, #12]	; (80129dc <TRACE_Lock+0x14>)
 80129d0:	8ad3      	ldrh	r3, [r2, #22]
 80129d2:	3301      	adds	r3, #1
 80129d4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129d6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80129da:	4770      	bx	lr
 80129dc:	2000149c 	.word	0x2000149c

080129e0 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80129e4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80129e6:	4a03      	ldr	r2, [pc, #12]	; (80129f4 <TRACE_UnLock+0x14>)
 80129e8:	8ad3      	ldrh	r3, [r2, #22]
 80129ea:	3b01      	subs	r3, #1
 80129ec:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129ee:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80129f2:	4770      	bx	lr
 80129f4:	2000149c 	.word	0x2000149c

080129f8 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80129f8:	4b02      	ldr	r3, [pc, #8]	; (8012a04 <TRACE_IsLocked+0xc>)
 80129fa:	8ad8      	ldrh	r0, [r3, #22]
}
 80129fc:	3800      	subs	r0, #0
 80129fe:	bf18      	it	ne
 8012a00:	2001      	movne	r0, #1
 8012a02:	4770      	bx	lr
 8012a04:	2000149c 	.word	0x2000149c

08012a08 <UTIL_ADV_TRACE_Init>:
{
 8012a08:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8012a0a:	2218      	movs	r2, #24
 8012a0c:	2100      	movs	r1, #0
 8012a0e:	4807      	ldr	r0, [pc, #28]	; (8012a2c <UTIL_ADV_TRACE_Init+0x24>)
 8012a10:	f000 f98f 	bl	8012d32 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8012a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012a18:	2100      	movs	r1, #0
 8012a1a:	4805      	ldr	r0, [pc, #20]	; (8012a30 <UTIL_ADV_TRACE_Init+0x28>)
 8012a1c:	f000 f989 	bl	8012d32 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8012a20:	4b04      	ldr	r3, [pc, #16]	; (8012a34 <UTIL_ADV_TRACE_Init+0x2c>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4804      	ldr	r0, [pc, #16]	; (8012a38 <UTIL_ADV_TRACE_Init+0x30>)
 8012a26:	4798      	blx	r3
}
 8012a28:	bd08      	pop	{r3, pc}
 8012a2a:	bf00      	nop
 8012a2c:	2000149c 	.word	0x2000149c
 8012a30:	2000109c 	.word	0x2000109c
 8012a34:	080138d4 	.word	0x080138d4
 8012a38:	08012bb9 	.word	0x08012bb9

08012a3c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8012a3c:	4b01      	ldr	r3, [pc, #4]	; (8012a44 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8012a3e:	6058      	str	r0, [r3, #4]
}
 8012a40:	4770      	bx	lr
 8012a42:	bf00      	nop
 8012a44:	2000149c 	.word	0x2000149c

08012a48 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8012a48:	4b01      	ldr	r3, [pc, #4]	; (8012a50 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8012a4a:	7218      	strb	r0, [r3, #8]
}
 8012a4c:	4770      	bx	lr
 8012a4e:	bf00      	nop
 8012a50:	2000149c 	.word	0x2000149c

08012a54 <TRACE_Send>:
{
 8012a54:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a56:	f3ef 8310 	mrs	r3, PRIMASK
 8012a5a:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012a5c:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8012a5e:	f7ff ffcb 	bl	80129f8 <TRACE_IsLocked>
 8012a62:	b118      	cbz	r0, 8012a6c <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a64:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012a68:	2000      	movs	r0, #0
}
 8012a6a:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8012a6c:	f7ff ffac 	bl	80129c8 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8012a70:	4b1c      	ldr	r3, [pc, #112]	; (8012ae4 <TRACE_Send+0x90>)
 8012a72:	8a1a      	ldrh	r2, [r3, #16]
 8012a74:	8a5b      	ldrh	r3, [r3, #18]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d02e      	beq.n	8012ad8 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012a7a:	491a      	ldr	r1, [pc, #104]	; (8012ae4 <TRACE_Send+0x90>)
 8012a7c:	7889      	ldrb	r1, [r1, #2]
 8012a7e:	2901      	cmp	r1, #1
 8012a80:	d017      	beq.n	8012ab2 <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012a82:	4a18      	ldr	r2, [pc, #96]	; (8012ae4 <TRACE_Send+0x90>)
 8012a84:	7892      	ldrb	r2, [r2, #2]
 8012a86:	b932      	cbnz	r2, 8012a96 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012a88:	4a16      	ldr	r2, [pc, #88]	; (8012ae4 <TRACE_Send+0x90>)
 8012a8a:	8a12      	ldrh	r2, [r2, #16]
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d91e      	bls.n	8012ace <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012a90:	1a9b      	subs	r3, r3, r2
 8012a92:	4a14      	ldr	r2, [pc, #80]	; (8012ae4 <TRACE_Send+0x90>)
 8012a94:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012a96:	4e13      	ldr	r6, [pc, #76]	; (8012ae4 <TRACE_Send+0x90>)
 8012a98:	8a33      	ldrh	r3, [r6, #16]
 8012a9a:	4d13      	ldr	r5, [pc, #76]	; (8012ae8 <TRACE_Send+0x94>)
 8012a9c:	441d      	add	r5, r3
 8012a9e:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8012aa2:	f7ef f89d 	bl	8001be0 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012aa6:	4b11      	ldr	r3, [pc, #68]	; (8012aec <TRACE_Send+0x98>)
 8012aa8:	68db      	ldr	r3, [r3, #12]
 8012aaa:	8ab1      	ldrh	r1, [r6, #20]
 8012aac:	4628      	mov	r0, r5
 8012aae:	4798      	blx	r3
 8012ab0:	e7db      	b.n	8012a6a <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8012ab2:	480c      	ldr	r0, [pc, #48]	; (8012ae4 <TRACE_Send+0x90>)
 8012ab4:	8801      	ldrh	r1, [r0, #0]
 8012ab6:	1a8a      	subs	r2, r1, r2
 8012ab8:	b292      	uxth	r2, r2
 8012aba:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012abc:	2102      	movs	r1, #2
 8012abe:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012ac0:	2100      	movs	r1, #0
 8012ac2:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012ac4:	2a00      	cmp	r2, #0
 8012ac6:	d1dc      	bne.n	8012a82 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012ac8:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012aca:	8201      	strh	r1, [r0, #16]
 8012acc:	e7d9      	b.n	8012a82 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012ace:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8012ad2:	4b04      	ldr	r3, [pc, #16]	; (8012ae4 <TRACE_Send+0x90>)
 8012ad4:	829a      	strh	r2, [r3, #20]
 8012ad6:	e7de      	b.n	8012a96 <TRACE_Send+0x42>
      TRACE_UnLock();
 8012ad8:	f7ff ff82 	bl	80129e0 <TRACE_UnLock>
 8012adc:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012ae0:	2000      	movs	r0, #0
}
 8012ae2:	e7c2      	b.n	8012a6a <TRACE_Send+0x16>
 8012ae4:	2000149c 	.word	0x2000149c
 8012ae8:	2000109c 	.word	0x2000109c
 8012aec:	080138d4 	.word	0x080138d4

08012af0 <UTIL_ADV_TRACE_COND_FSend>:
{
 8012af0:	b408      	push	{r3}
 8012af2:	b530      	push	{r4, r5, lr}
 8012af4:	b086      	sub	sp, #24
 8012af6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8012af8:	2300      	movs	r3, #0
 8012afa:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8012afe:	4b2b      	ldr	r3, [pc, #172]	; (8012bac <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8012b00:	7a1b      	ldrb	r3, [r3, #8]
 8012b02:	4283      	cmp	r3, r0
 8012b04:	d34c      	bcc.n	8012ba0 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8012b06:	4b29      	ldr	r3, [pc, #164]	; (8012bac <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8012b08:	68db      	ldr	r3, [r3, #12]
 8012b0a:	4399      	bics	r1, r3
 8012b0c:	d14b      	bne.n	8012ba6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8012b0e:	4b27      	ldr	r3, [pc, #156]	; (8012bac <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8012b10:	685b      	ldr	r3, [r3, #4]
 8012b12:	b123      	cbz	r3, 8012b1e <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8012b14:	b11a      	cbz	r2, 8012b1e <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8012b16:	f10d 0102 	add.w	r1, sp, #2
 8012b1a:	a801      	add	r0, sp, #4
 8012b1c:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8012b1e:	ab0a      	add	r3, sp, #40	; 0x28
 8012b20:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012b22:	4622      	mov	r2, r4
 8012b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012b28:	4821      	ldr	r0, [pc, #132]	; (8012bb0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012b2a:	f000 fcd1 	bl	80134d0 <tiny_vsnprintf_like>
 8012b2e:	b285      	uxth	r5, r0
  TRACE_Lock();
 8012b30:	f7ff ff4a 	bl	80129c8 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8012b34:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012b38:	18e8      	adds	r0, r5, r3
 8012b3a:	4669      	mov	r1, sp
 8012b3c:	b280      	uxth	r0, r0
 8012b3e:	f7ff feff 	bl	8012940 <TRACE_AllocateBufer>
 8012b42:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012b46:	d026      	beq.n	8012b96 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8012b48:	2300      	movs	r3, #0
 8012b4a:	e00d      	b.n	8012b68 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8012b4c:	f8bd 2000 	ldrh.w	r2, [sp]
 8012b50:	f103 0118 	add.w	r1, r3, #24
 8012b54:	4469      	add	r1, sp
 8012b56:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8012b5a:	4916      	ldr	r1, [pc, #88]	; (8012bb4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8012b5c:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8012b5e:	3201      	adds	r2, #1
 8012b60:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8012b64:	3301      	adds	r3, #1
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d8ed      	bhi.n	8012b4c <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012b70:	f8bd 0000 	ldrh.w	r0, [sp]
 8012b74:	9b05      	ldr	r3, [sp, #20]
 8012b76:	4622      	mov	r2, r4
 8012b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012b7c:	4c0d      	ldr	r4, [pc, #52]	; (8012bb4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8012b7e:	4420      	add	r0, r4
 8012b80:	f000 fca6 	bl	80134d0 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8012b84:	f7ff ff2c 	bl	80129e0 <TRACE_UnLock>
    return TRACE_Send();
 8012b88:	f7ff ff64 	bl	8012a54 <TRACE_Send>
}
 8012b8c:	b006      	add	sp, #24
 8012b8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b92:	b001      	add	sp, #4
 8012b94:	4770      	bx	lr
  TRACE_UnLock();
 8012b96:	f7ff ff23 	bl	80129e0 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8012b9a:	f06f 0002 	mvn.w	r0, #2
 8012b9e:	e7f5      	b.n	8012b8c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8012ba0:	f06f 0004 	mvn.w	r0, #4
 8012ba4:	e7f2      	b.n	8012b8c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8012ba6:	f06f 0005 	mvn.w	r0, #5
 8012baa:	e7ef      	b.n	8012b8c <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8012bac:	2000149c 	.word	0x2000149c
 8012bb0:	200014b4 	.word	0x200014b4
 8012bb4:	2000109c 	.word	0x2000109c

08012bb8 <TRACE_TxCpltCallback>:
{
 8012bb8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bba:	f3ef 8310 	mrs	r3, PRIMASK
 8012bbe:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8012bc0:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8012bc2:	4b26      	ldr	r3, [pc, #152]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012bc4:	789b      	ldrb	r3, [r3, #2]
 8012bc6:	2b02      	cmp	r3, #2
 8012bc8:	d016      	beq.n	8012bf8 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012bca:	4a24      	ldr	r2, [pc, #144]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012bcc:	8a13      	ldrh	r3, [r2, #16]
 8012bce:	8a90      	ldrh	r0, [r2, #20]
 8012bd0:	4403      	add	r3, r0
 8012bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012bd6:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8012bd8:	4b20      	ldr	r3, [pc, #128]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012bda:	8a1a      	ldrh	r2, [r3, #16]
 8012bdc:	8a5b      	ldrh	r3, [r3, #18]
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d003      	beq.n	8012bea <TRACE_TxCpltCallback+0x32>
 8012be2:	481e      	ldr	r0, [pc, #120]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012be4:	8ac0      	ldrh	r0, [r0, #22]
 8012be6:	2801      	cmp	r0, #1
 8012be8:	d00b      	beq.n	8012c02 <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bea:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8012bee:	f7ee fffd 	bl	8001bec <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8012bf2:	f7ff fef5 	bl	80129e0 <TRACE_UnLock>
}
 8012bf6:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012bf8:	4b18      	ldr	r3, [pc, #96]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012bfe:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8012c00:	e7ea      	b.n	8012bd8 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012c02:	4816      	ldr	r0, [pc, #88]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012c04:	7880      	ldrb	r0, [r0, #2]
 8012c06:	2801      	cmp	r0, #1
 8012c08:	d014      	beq.n	8012c34 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012c0a:	4a14      	ldr	r2, [pc, #80]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012c0c:	7892      	ldrb	r2, [r2, #2]
 8012c0e:	b932      	cbnz	r2, 8012c1e <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012c10:	4a12      	ldr	r2, [pc, #72]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012c12:	8a12      	ldrh	r2, [r2, #16]
 8012c14:	4293      	cmp	r3, r2
 8012c16:	d91b      	bls.n	8012c50 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012c18:	1a9b      	subs	r3, r3, r2
 8012c1a:	4a10      	ldr	r2, [pc, #64]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012c1c:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012c1e:	4b0f      	ldr	r3, [pc, #60]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012c20:	8a1a      	ldrh	r2, [r3, #16]
 8012c22:	480f      	ldr	r0, [pc, #60]	; (8012c60 <TRACE_TxCpltCallback+0xa8>)
 8012c24:	4410      	add	r0, r2
 8012c26:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012c2a:	4a0e      	ldr	r2, [pc, #56]	; (8012c64 <TRACE_TxCpltCallback+0xac>)
 8012c2c:	68d2      	ldr	r2, [r2, #12]
 8012c2e:	8a99      	ldrh	r1, [r3, #20]
 8012c30:	4790      	blx	r2
 8012c32:	e7e0      	b.n	8012bf6 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8012c34:	4c09      	ldr	r4, [pc, #36]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012c36:	8820      	ldrh	r0, [r4, #0]
 8012c38:	1a82      	subs	r2, r0, r2
 8012c3a:	b292      	uxth	r2, r2
 8012c3c:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012c3e:	2002      	movs	r0, #2
 8012c40:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012c42:	2000      	movs	r0, #0
 8012c44:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012c46:	2a00      	cmp	r2, #0
 8012c48:	d1df      	bne.n	8012c0a <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012c4a:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012c4c:	8220      	strh	r0, [r4, #16]
 8012c4e:	e7dc      	b.n	8012c0a <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012c50:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8012c54:	4b01      	ldr	r3, [pc, #4]	; (8012c5c <TRACE_TxCpltCallback+0xa4>)
 8012c56:	829a      	strh	r2, [r3, #20]
 8012c58:	e7e1      	b.n	8012c1e <TRACE_TxCpltCallback+0x66>
 8012c5a:	bf00      	nop
 8012c5c:	2000149c 	.word	0x2000149c
 8012c60:	2000109c 	.word	0x2000109c
 8012c64:	080138d4 	.word	0x080138d4

08012c68 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	4a02      	ldr	r2, [pc, #8]	; (8012c74 <UTIL_LPM_Init+0xc>)
 8012c6c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8012c6e:	4a02      	ldr	r2, [pc, #8]	; (8012c78 <UTIL_LPM_Init+0x10>)
 8012c70:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012c72:	4770      	bx	lr
 8012c74:	200016b8 	.word	0x200016b8
 8012c78:	200016b4 	.word	0x200016b4

08012c7c <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c7c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012c80:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8012c82:	b141      	cbz	r1, 8012c96 <UTIL_LPM_SetStopMode+0x1a>
 8012c84:	2901      	cmp	r1, #1
 8012c86:	d103      	bne.n	8012c90 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8012c88:	4906      	ldr	r1, [pc, #24]	; (8012ca4 <UTIL_LPM_SetStopMode+0x28>)
 8012c8a:	680a      	ldr	r2, [r1, #0]
 8012c8c:	4302      	orrs	r2, r0
 8012c8e:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c90:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012c94:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8012c96:	4903      	ldr	r1, [pc, #12]	; (8012ca4 <UTIL_LPM_SetStopMode+0x28>)
 8012c98:	680a      	ldr	r2, [r1, #0]
 8012c9a:	ea22 0200 	bic.w	r2, r2, r0
 8012c9e:	600a      	str	r2, [r1, #0]
      break;
 8012ca0:	e7f6      	b.n	8012c90 <UTIL_LPM_SetStopMode+0x14>
 8012ca2:	bf00      	nop
 8012ca4:	200016b8 	.word	0x200016b8

08012ca8 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ca8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012cac:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8012cae:	b141      	cbz	r1, 8012cc2 <UTIL_LPM_SetOffMode+0x1a>
 8012cb0:	2901      	cmp	r1, #1
 8012cb2:	d103      	bne.n	8012cbc <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8012cb4:	4906      	ldr	r1, [pc, #24]	; (8012cd0 <UTIL_LPM_SetOffMode+0x28>)
 8012cb6:	680a      	ldr	r2, [r1, #0]
 8012cb8:	4302      	orrs	r2, r0
 8012cba:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cbc:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012cc0:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8012cc2:	4903      	ldr	r1, [pc, #12]	; (8012cd0 <UTIL_LPM_SetOffMode+0x28>)
 8012cc4:	680a      	ldr	r2, [r1, #0]
 8012cc6:	ea22 0200 	bic.w	r2, r2, r0
 8012cca:	600a      	str	r2, [r1, #0]
      break;
 8012ccc:	e7f6      	b.n	8012cbc <UTIL_LPM_SetOffMode+0x14>
 8012cce:	bf00      	nop
 8012cd0:	200016b4 	.word	0x200016b4

08012cd4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8012cd4:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cd6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012cda:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8012cdc:	4b0c      	ldr	r3, [pc, #48]	; (8012d10 <UTIL_LPM_EnterLowPower+0x3c>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	b13b      	cbz	r3, 8012cf2 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8012ce2:	4d0c      	ldr	r5, [pc, #48]	; (8012d14 <UTIL_LPM_EnterLowPower+0x40>)
 8012ce4:	682b      	ldr	r3, [r5, #0]
 8012ce6:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8012ce8:	686b      	ldr	r3, [r5, #4]
 8012cea:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cec:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8012cf0:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8012cf2:	4b09      	ldr	r3, [pc, #36]	; (8012d18 <UTIL_LPM_EnterLowPower+0x44>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	b12b      	cbz	r3, 8012d04 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8012cf8:	4d06      	ldr	r5, [pc, #24]	; (8012d14 <UTIL_LPM_EnterLowPower+0x40>)
 8012cfa:	68ab      	ldr	r3, [r5, #8]
 8012cfc:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8012cfe:	68eb      	ldr	r3, [r5, #12]
 8012d00:	4798      	blx	r3
 8012d02:	e7f3      	b.n	8012cec <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8012d04:	4d03      	ldr	r5, [pc, #12]	; (8012d14 <UTIL_LPM_EnterLowPower+0x40>)
 8012d06:	692b      	ldr	r3, [r5, #16]
 8012d08:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8012d0a:	696b      	ldr	r3, [r5, #20]
 8012d0c:	4798      	blx	r3
 8012d0e:	e7ed      	b.n	8012cec <UTIL_LPM_EnterLowPower+0x18>
 8012d10:	200016b8 	.word	0x200016b8
 8012d14:	08013870 	.word	0x08013870
 8012d18:	200016b4 	.word	0x200016b4

08012d1c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8012d1c:	e004      	b.n	8012d28 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8012d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d22:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8012d26:	461a      	mov	r2, r3
 8012d28:	1e53      	subs	r3, r2, #1
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	2a00      	cmp	r2, #0
 8012d2e:	d1f6      	bne.n	8012d1e <UTIL_MEM_cpy_8+0x2>
    }
}
 8012d30:	4770      	bx	lr

08012d32 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8012d32:	e002      	b.n	8012d3a <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8012d34:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8012d38:	461a      	mov	r2, r3
 8012d3a:	1e53      	subs	r3, r2, #1
 8012d3c:	b29b      	uxth	r3, r3
 8012d3e:	2a00      	cmp	r2, #0
 8012d40:	d1f8      	bne.n	8012d34 <UTIL_MEM_set_8+0x2>
  }
}
 8012d42:	4770      	bx	lr

08012d44 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d44:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012d48:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8012d4a:	4a06      	ldr	r2, [pc, #24]	; (8012d64 <UTIL_SEQ_SetTask+0x20>)
 8012d4c:	6813      	ldr	r3, [r2, #0]
 8012d4e:	4303      	orrs	r3, r0
 8012d50:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012d52:	4a05      	ldr	r2, [pc, #20]	; (8012d68 <UTIL_SEQ_SetTask+0x24>)
 8012d54:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8012d58:	4303      	orrs	r3, r0
 8012d5a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d5e:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8012d62:	4770      	bx	lr
 8012d64:	200016e0 	.word	0x200016e0
 8012d68:	200016d8 	.word	0x200016d8

08012d6c <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8012d6c:	4770      	bx	lr

08012d6e <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8012d6e:	4770      	bx	lr

08012d70 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8012d70:	0c03      	lsrs	r3, r0, #16
 8012d72:	041b      	lsls	r3, r3, #16
 8012d74:	b9b3      	cbnz	r3, 8012da4 <SEQ_BitPosition+0x34>
 8012d76:	0400      	lsls	r0, r0, #16
 8012d78:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8012d7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012d7e:	d102      	bne.n	8012d86 <SEQ_BitPosition+0x16>
 8012d80:	3308      	adds	r3, #8
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8012d86:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012d8a:	d102      	bne.n	8012d92 <SEQ_BitPosition+0x22>
 8012d8c:	3304      	adds	r3, #4
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8012d92:	0f00      	lsrs	r0, r0, #28
 8012d94:	4a04      	ldr	r2, [pc, #16]	; (8012da8 <SEQ_BitPosition+0x38>)
 8012d96:	5c10      	ldrb	r0, [r2, r0]
 8012d98:	4418      	add	r0, r3
 8012d9a:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8012d9c:	f1c0 001f 	rsb	r0, r0, #31
}
 8012da0:	b2c0      	uxtb	r0, r0
 8012da2:	4770      	bx	lr
uint8_t n = 0U;
 8012da4:	2300      	movs	r3, #0
 8012da6:	e7e8      	b.n	8012d7a <SEQ_BitPosition+0xa>
 8012da8:	080146c8 	.word	0x080146c8

08012dac <UTIL_SEQ_Run>:
{
 8012dac:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8012dae:	4b42      	ldr	r3, [pc, #264]	; (8012eb8 <UTIL_SEQ_Run+0x10c>)
 8012db0:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8012db2:	4020      	ands	r0, r4
 8012db4:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8012db6:	4b41      	ldr	r3, [pc, #260]	; (8012ebc <UTIL_SEQ_Run+0x110>)
 8012db8:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 8012dba:	4b41      	ldr	r3, [pc, #260]	; (8012ec0 <UTIL_SEQ_Run+0x114>)
 8012dbc:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8012dbe:	4941      	ldr	r1, [pc, #260]	; (8012ec4 <UTIL_SEQ_Run+0x118>)
 8012dc0:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 8012dc2:	4941      	ldr	r1, [pc, #260]	; (8012ec8 <UTIL_SEQ_Run+0x11c>)
 8012dc4:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012dc6:	e02f      	b.n	8012e28 <UTIL_SEQ_Run+0x7c>
      counter++;
 8012dc8:	3301      	adds	r3, #1
 8012dca:	e034      	b.n	8012e36 <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012dcc:	4d3f      	ldr	r5, [pc, #252]	; (8012ecc <UTIL_SEQ_Run+0x120>)
 8012dce:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8012dd2:	6868      	ldr	r0, [r5, #4]
 8012dd4:	4010      	ands	r0, r2
 8012dd6:	f7ff ffcb 	bl	8012d70 <SEQ_BitPosition>
 8012dda:	4e3d      	ldr	r6, [pc, #244]	; (8012ed0 <UTIL_SEQ_Run+0x124>)
 8012ddc:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012dde:	686a      	ldr	r2, [r5, #4]
 8012de0:	2301      	movs	r3, #1
 8012de2:	fa03 f000 	lsl.w	r0, r3, r0
 8012de6:	ea22 0200 	bic.w	r2, r2, r0
 8012dea:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012df0:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012df2:	6832      	ldr	r2, [r6, #0]
 8012df4:	fa03 f202 	lsl.w	r2, r3, r2
 8012df8:	43d6      	mvns	r6, r2
 8012dfa:	4d30      	ldr	r5, [pc, #192]	; (8012ebc <UTIL_SEQ_Run+0x110>)
 8012dfc:	6828      	ldr	r0, [r5, #0]
 8012dfe:	ea20 0202 	bic.w	r2, r0, r2
 8012e02:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d12d      	bne.n	8012e64 <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e08:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8012e0c:	4b30      	ldr	r3, [pc, #192]	; (8012ed0 <UTIL_SEQ_Run+0x124>)
 8012e0e:	681a      	ldr	r2, [r3, #0]
 8012e10:	4b30      	ldr	r3, [pc, #192]	; (8012ed4 <UTIL_SEQ_Run+0x128>)
 8012e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e16:	4798      	blx	r3
    local_taskset = TaskSet;
 8012e18:	4b28      	ldr	r3, [pc, #160]	; (8012ebc <UTIL_SEQ_Run+0x110>)
 8012e1a:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 8012e1c:	4b28      	ldr	r3, [pc, #160]	; (8012ec0 <UTIL_SEQ_Run+0x114>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8012e20:	4928      	ldr	r1, [pc, #160]	; (8012ec4 <UTIL_SEQ_Run+0x118>)
 8012e22:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 8012e24:	4928      	ldr	r1, [pc, #160]	; (8012ec8 <UTIL_SEQ_Run+0x11c>)
 8012e26:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012e28:	4002      	ands	r2, r0
 8012e2a:	4d23      	ldr	r5, [pc, #140]	; (8012eb8 <UTIL_SEQ_Run+0x10c>)
 8012e2c:	682d      	ldr	r5, [r5, #0]
 8012e2e:	422a      	tst	r2, r5
 8012e30:	d020      	beq.n	8012e74 <UTIL_SEQ_Run+0xc8>
 8012e32:	400b      	ands	r3, r1
 8012e34:	d11e      	bne.n	8012e74 <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8012e36:	4a25      	ldr	r2, [pc, #148]	; (8012ecc <UTIL_SEQ_Run+0x120>)
 8012e38:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012e3c:	4002      	ands	r2, r0
 8012e3e:	422a      	tst	r2, r5
 8012e40:	d0c2      	beq.n	8012dc8 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8012e42:	4922      	ldr	r1, [pc, #136]	; (8012ecc <UTIL_SEQ_Run+0x120>)
 8012e44:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8012e48:	4002      	ands	r2, r0
 8012e4a:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012e4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012e50:	6849      	ldr	r1, [r1, #4]
 8012e52:	4211      	tst	r1, r2
 8012e54:	d1ba      	bne.n	8012dcc <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8012e56:	491d      	ldr	r1, [pc, #116]	; (8012ecc <UTIL_SEQ_Run+0x120>)
 8012e58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e60:	6048      	str	r0, [r1, #4]
 8012e62:	e7b3      	b.n	8012dcc <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8012e64:	3b01      	subs	r3, #1
 8012e66:	4819      	ldr	r0, [pc, #100]	; (8012ecc <UTIL_SEQ_Run+0x120>)
 8012e68:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 8012e6c:	4032      	ands	r2, r6
 8012e6e:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012e72:	e7c7      	b.n	8012e04 <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012e74:	4b16      	ldr	r3, [pc, #88]	; (8012ed0 <UTIL_SEQ_Run+0x124>)
 8012e76:	f04f 32ff 	mov.w	r2, #4294967295
 8012e7a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012e7c:	f7ff ff76 	bl	8012d6c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e80:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012e84:	b672      	cpsid	i
  local_taskset = TaskSet;
 8012e86:	4b0d      	ldr	r3, [pc, #52]	; (8012ebc <UTIL_SEQ_Run+0x110>)
 8012e88:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8012e8a:	4a0d      	ldr	r2, [pc, #52]	; (8012ec0 <UTIL_SEQ_Run+0x114>)
 8012e8c:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8012e8e:	4a0d      	ldr	r2, [pc, #52]	; (8012ec4 <UTIL_SEQ_Run+0x118>)
 8012e90:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8012e92:	4013      	ands	r3, r2
 8012e94:	4a08      	ldr	r2, [pc, #32]	; (8012eb8 <UTIL_SEQ_Run+0x10c>)
 8012e96:	6812      	ldr	r2, [r2, #0]
 8012e98:	4213      	tst	r3, r2
 8012e9a:	d103      	bne.n	8012ea4 <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8012e9c:	4b0a      	ldr	r3, [pc, #40]	; (8012ec8 <UTIL_SEQ_Run+0x11c>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	420b      	tst	r3, r1
 8012ea2:	d006      	beq.n	8012eb2 <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ea4:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8012ea8:	f7ff ff61 	bl	8012d6e <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8012eac:	4b02      	ldr	r3, [pc, #8]	; (8012eb8 <UTIL_SEQ_Run+0x10c>)
 8012eae:	601c      	str	r4, [r3, #0]
}
 8012eb0:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 8012eb2:	f7ee fe1b 	bl	8001aec <UTIL_SEQ_Idle>
 8012eb6:	e7f5      	b.n	8012ea4 <UTIL_SEQ_Run+0xf8>
 8012eb8:	20000100 	.word	0x20000100
 8012ebc:	200016e0 	.word	0x200016e0
 8012ec0:	200016c0 	.word	0x200016c0
 8012ec4:	20000104 	.word	0x20000104
 8012ec8:	200016c4 	.word	0x200016c4
 8012ecc:	200016d8 	.word	0x200016d8
 8012ed0:	200016bc 	.word	0x200016bc
 8012ed4:	200016c8 	.word	0x200016c8

08012ed8 <UTIL_SEQ_RegTask>:
{
 8012ed8:	b538      	push	{r3, r4, r5, lr}
 8012eda:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012edc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012ee0:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8012ee2:	f7ff ff45 	bl	8012d70 <SEQ_BitPosition>
 8012ee6:	4b03      	ldr	r3, [pc, #12]	; (8012ef4 <UTIL_SEQ_RegTask+0x1c>)
 8012ee8:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012eec:	f385 8810 	msr	PRIMASK, r5
}
 8012ef0:	bd38      	pop	{r3, r4, r5, pc}
 8012ef2:	bf00      	nop
 8012ef4:	200016c8 	.word	0x200016c8

08012ef8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8012ef8:	b082      	sub	sp, #8
 8012efa:	b082      	sub	sp, #8
 8012efc:	f10d 0c08 	add.w	ip, sp, #8
 8012f00:	e90c 0006 	stmdb	ip, {r1, r2}
 8012f04:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8012f06:	2200      	movs	r2, #0
 8012f08:	6002      	str	r2, [r0, #0]
 8012f0a:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8012f0c:	440b      	add	r3, r1
 8012f0e:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012f10:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012f14:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012f18:	440a      	add	r2, r1
 8012f1a:	b291      	uxth	r1, r2
 8012f1c:	b212      	sxth	r2, r2
 8012f1e:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8012f20:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8012f24:	db04      	blt.n	8012f30 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8012f26:	3301      	adds	r3, #1
 8012f28:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8012f2a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8012f2e:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8012f30:	b002      	add	sp, #8
 8012f32:	b002      	add	sp, #8
 8012f34:	4770      	bx	lr

08012f36 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8012f36:	b082      	sub	sp, #8
 8012f38:	b082      	sub	sp, #8
 8012f3a:	f10d 0c08 	add.w	ip, sp, #8
 8012f3e:	e90c 0006 	stmdb	ip, {r1, r2}
 8012f42:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8012f44:	2200      	movs	r2, #0
 8012f46:	6002      	str	r2, [r0, #0]
 8012f48:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8012f4a:	1acb      	subs	r3, r1, r3
 8012f4c:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012f4e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012f52:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012f56:	1a52      	subs	r2, r2, r1
 8012f58:	b291      	uxth	r1, r2
 8012f5a:	b212      	sxth	r2, r2
 8012f5c:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8012f5e:	2a00      	cmp	r2, #0
 8012f60:	db02      	blt.n	8012f68 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8012f62:	b002      	add	sp, #8
 8012f64:	b002      	add	sp, #8
 8012f66:	4770      	bx	lr
    c.Seconds--;
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8012f6c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8012f70:	8081      	strh	r1, [r0, #4]
  return c;
 8012f72:	e7f6      	b.n	8012f62 <SysTimeSub+0x2c>

08012f74 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8012f74:	b530      	push	{r4, r5, lr}
 8012f76:	b089      	sub	sp, #36	; 0x24
 8012f78:	ac02      	add	r4, sp, #8
 8012f7a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012f7e:	2300      	movs	r3, #0
 8012f80:	9304      	str	r3, [sp, #16]
 8012f82:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012f86:	4d0b      	ldr	r5, [pc, #44]	; (8012fb4 <SysTimeSet+0x40>)
 8012f88:	692b      	ldr	r3, [r5, #16]
 8012f8a:	a805      	add	r0, sp, #20
 8012f8c:	4798      	blx	r3
 8012f8e:	4603      	mov	r3, r0
 8012f90:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8012f92:	9a05      	ldr	r2, [sp, #20]
 8012f94:	9200      	str	r2, [sp, #0]
 8012f96:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012f9a:	a806      	add	r0, sp, #24
 8012f9c:	f7ff ffcb 	bl	8012f36 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8012fa0:	682b      	ldr	r3, [r5, #0]
 8012fa2:	9806      	ldr	r0, [sp, #24]
 8012fa4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8012fa6:	68ab      	ldr	r3, [r5, #8]
 8012fa8:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012fac:	4798      	blx	r3
}
 8012fae:	b009      	add	sp, #36	; 0x24
 8012fb0:	bd30      	pop	{r4, r5, pc}
 8012fb2:	bf00      	nop
 8012fb4:	08013894 	.word	0x08013894

08012fb8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8012fb8:	b530      	push	{r4, r5, lr}
 8012fba:	b087      	sub	sp, #28
 8012fbc:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	9304      	str	r3, [sp, #16]
 8012fc2:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8012fc6:	6003      	str	r3, [r0, #0]
 8012fc8:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012fca:	4d0b      	ldr	r5, [pc, #44]	; (8012ff8 <SysTimeGet+0x40>)
 8012fcc:	692b      	ldr	r3, [r5, #16]
 8012fce:	a805      	add	r0, sp, #20
 8012fd0:	4798      	blx	r3
 8012fd2:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012fd4:	68eb      	ldr	r3, [r5, #12]
 8012fd6:	4798      	blx	r3
 8012fd8:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012fdc:	686b      	ldr	r3, [r5, #4]
 8012fde:	4798      	blx	r3
 8012fe0:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8012fe2:	9b05      	ldr	r3, [sp, #20]
 8012fe4:	9300      	str	r3, [sp, #0]
 8012fe6:	9b04      	ldr	r3, [sp, #16]
 8012fe8:	aa02      	add	r2, sp, #8
 8012fea:	ca06      	ldmia	r2, {r1, r2}
 8012fec:	4620      	mov	r0, r4
 8012fee:	f7ff ff83 	bl	8012ef8 <SysTimeAdd>

  return sysTime;
}
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	b007      	add	sp, #28
 8012ff6:	bd30      	pop	{r4, r5, pc}
 8012ff8:	08013894 	.word	0x08013894

08012ffc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8012ffc:	b530      	push	{r4, r5, lr}
 8012ffe:	b083      	sub	sp, #12
 8013000:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8013002:	2300      	movs	r3, #0
 8013004:	9300      	str	r3, [sp, #0]
 8013006:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801300a:	4b06      	ldr	r3, [pc, #24]	; (8013024 <SysTimeGetMcuTime+0x28>)
 801300c:	691b      	ldr	r3, [r3, #16]
 801300e:	466d      	mov	r5, sp
 8013010:	a801      	add	r0, sp, #4
 8013012:	4798      	blx	r3
 8013014:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8013016:	e895 0003 	ldmia.w	r5, {r0, r1}
 801301a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 801301e:	4620      	mov	r0, r4
 8013020:	b003      	add	sp, #12
 8013022:	bd30      	pop	{r4, r5, pc}
 8013024:	08013894 	.word	0x08013894

08013028 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8013028:	b530      	push	{r4, r5, lr}
 801302a:	b089      	sub	sp, #36	; 0x24
 801302c:	ac02      	add	r4, sp, #8
 801302e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8013032:	4d0c      	ldr	r5, [pc, #48]	; (8013064 <SysTimeToMs+0x3c>)
 8013034:	68eb      	ldr	r3, [r5, #12]
 8013036:	4798      	blx	r3
 8013038:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801303c:	686b      	ldr	r3, [r5, #4]
 801303e:	4798      	blx	r3
 8013040:	4603      	mov	r3, r0
 8013042:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8013044:	9a07      	ldr	r2, [sp, #28]
 8013046:	9200      	str	r2, [sp, #0]
 8013048:	e894 0006 	ldmia.w	r4, {r1, r2}
 801304c:	a804      	add	r0, sp, #16
 801304e:	f7ff ff72 	bl	8012f36 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8013052:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8013056:	9a04      	ldr	r2, [sp, #16]
 8013058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801305c:	fb00 3002 	mla	r0, r0, r2, r3
 8013060:	b009      	add	sp, #36	; 0x24
 8013062:	bd30      	pop	{r4, r5, pc}
 8013064:	08013894 	.word	0x08013894

08013068 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8013068:	b530      	push	{r4, r5, lr}
 801306a:	b087      	sub	sp, #28
 801306c:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 801306e:	4b12      	ldr	r3, [pc, #72]	; (80130b8 <SysTimeFromMs+0x50>)
 8013070:	fba3 2301 	umull	r2, r3, r3, r1
 8013074:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8013076:	9304      	str	r3, [sp, #16]
 8013078:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801307c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013080:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8013084:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8013088:	2300      	movs	r3, #0
 801308a:	9302      	str	r3, [sp, #8]
 801308c:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801308e:	4d0b      	ldr	r5, [pc, #44]	; (80130bc <SysTimeFromMs+0x54>)
 8013090:	68eb      	ldr	r3, [r5, #12]
 8013092:	4798      	blx	r3
 8013094:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013098:	686b      	ldr	r3, [r5, #4]
 801309a:	4798      	blx	r3
 801309c:	4603      	mov	r3, r0
 801309e:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 80130a0:	9a03      	ldr	r2, [sp, #12]
 80130a2:	9200      	str	r2, [sp, #0]
 80130a4:	aa06      	add	r2, sp, #24
 80130a6:	e912 0006 	ldmdb	r2, {r1, r2}
 80130aa:	4620      	mov	r0, r4
 80130ac:	f7ff ff24 	bl	8012ef8 <SysTimeAdd>
}
 80130b0:	4620      	mov	r0, r4
 80130b2:	b007      	add	sp, #28
 80130b4:	bd30      	pop	{r4, r5, pc}
 80130b6:	bf00      	nop
 80130b8:	10624dd3 	.word	0x10624dd3
 80130bc:	08013894 	.word	0x08013894

080130c0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80130c0:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80130c2:	4b03      	ldr	r3, [pc, #12]	; (80130d0 <UTIL_TIMER_Init+0x10>)
 80130c4:	2200      	movs	r2, #0
 80130c6:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80130c8:	4b02      	ldr	r3, [pc, #8]	; (80130d4 <UTIL_TIMER_Init+0x14>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	4798      	blx	r3
}
 80130ce:	bd08      	pop	{r3, pc}
 80130d0:	200016e4 	.word	0x200016e4
 80130d4:	080138a8 	.word	0x080138a8

080130d8 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80130d8:	b1a8      	cbz	r0, 8013106 <UTIL_TIMER_Create+0x2e>
{
 80130da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130dc:	4617      	mov	r7, r2
 80130de:	461e      	mov	r6, r3
 80130e0:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80130e2:	b193      	cbz	r3, 801310a <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80130e4:	2500      	movs	r5, #0
 80130e6:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80130e8:	4b09      	ldr	r3, [pc, #36]	; (8013110 <UTIL_TIMER_Create+0x38>)
 80130ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ec:	4608      	mov	r0, r1
 80130ee:	4798      	blx	r3
 80130f0:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80130f2:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80130f4:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80130f6:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80130f8:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80130fa:	9b06      	ldr	r3, [sp, #24]
 80130fc:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80130fe:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8013100:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8013102:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8013104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8013106:	2001      	movs	r0, #1
}
 8013108:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 801310a:	2001      	movs	r0, #1
 801310c:	e7fa      	b.n	8013104 <UTIL_TIMER_Create+0x2c>
 801310e:	bf00      	nop
 8013110:	080138a8 	.word	0x080138a8

08013114 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8013114:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8013116:	4c03      	ldr	r4, [pc, #12]	; (8013124 <UTIL_TIMER_GetCurrentTime+0x10>)
 8013118:	69e3      	ldr	r3, [r4, #28]
 801311a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 801311c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801311e:	4798      	blx	r3
}
 8013120:	bd10      	pop	{r4, pc}
 8013122:	bf00      	nop
 8013124:	080138a8 	.word	0x080138a8

08013128 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8013128:	b570      	push	{r4, r5, r6, lr}
 801312a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801312c:	4d05      	ldr	r5, [pc, #20]	; (8013144 <UTIL_TIMER_GetElapsedTime+0x1c>)
 801312e:	69eb      	ldr	r3, [r5, #28]
 8013130:	4798      	blx	r3
 8013132:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8013134:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013136:	4630      	mov	r0, r6
 8013138:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801313a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801313c:	1a20      	subs	r0, r4, r0
 801313e:	4798      	blx	r3
}
 8013140:	bd70      	pop	{r4, r5, r6, pc}
 8013142:	bf00      	nop
 8013144:	080138a8 	.word	0x080138a8

08013148 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013148:	4b05      	ldr	r3, [pc, #20]	; (8013160 <TimerExists+0x18>)
 801314a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 801314c:	e000      	b.n	8013150 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 801314e:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8013150:	b11b      	cbz	r3, 801315a <TimerExists+0x12>
    if( cur == TimerObject )
 8013152:	4283      	cmp	r3, r0
 8013154:	d1fb      	bne.n	801314e <TimerExists+0x6>
      return true;
 8013156:	2001      	movs	r0, #1
  }
  return false;
}
 8013158:	4770      	bx	lr
  return false;
 801315a:	2000      	movs	r0, #0
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop
 8013160:	200016e4 	.word	0x200016e4

08013164 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8013164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013166:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8013168:	4e09      	ldr	r6, [pc, #36]	; (8013190 <TimerSetTimeout+0x2c>)
 801316a:	6a33      	ldr	r3, [r6, #32]
 801316c:	4798      	blx	r3
 801316e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8013170:	2301      	movs	r3, #1
 8013172:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8013174:	6827      	ldr	r7, [r4, #0]
 8013176:	69b6      	ldr	r6, [r6, #24]
 8013178:	47b0      	blx	r6
 801317a:	4428      	add	r0, r5
 801317c:	4287      	cmp	r7, r0
 801317e:	d202      	bcs.n	8013186 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8013180:	47b0      	blx	r6
 8013182:	4428      	add	r0, r5
 8013184:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8013186:	4b02      	ldr	r3, [pc, #8]	; (8013190 <TimerSetTimeout+0x2c>)
 8013188:	689b      	ldr	r3, [r3, #8]
 801318a:	6820      	ldr	r0, [r4, #0]
 801318c:	4798      	blx	r3
}
 801318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013190:	080138a8 	.word	0x080138a8

08013194 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8013194:	b368      	cbz	r0, 80131f2 <UTIL_TIMER_Stop+0x5e>
{
 8013196:	b510      	push	{r4, lr}
 8013198:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801319a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801319e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80131a0:	4b15      	ldr	r3, [pc, #84]	; (80131f8 <UTIL_TIMER_Stop+0x64>)
 80131a2:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 80131a4:	2301      	movs	r3, #1
 80131a6:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 80131a8:	b1e1      	cbz	r1, 80131e4 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 80131aa:	2300      	movs	r3, #0
 80131ac:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80131ae:	4288      	cmp	r0, r1
 80131b0:	d006      	beq.n	80131c0 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80131b2:	460b      	mov	r3, r1
        while( cur != NULL )
 80131b4:	b1b3      	cbz	r3, 80131e4 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d011      	beq.n	80131de <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80131ba:	4619      	mov	r1, r3
            cur = cur->Next;
 80131bc:	695b      	ldr	r3, [r3, #20]
 80131be:	e7f9      	b.n	80131b4 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80131c0:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80131c2:	6948      	ldr	r0, [r1, #20]
 80131c4:	b120      	cbz	r0, 80131d0 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80131c6:	4b0c      	ldr	r3, [pc, #48]	; (80131f8 <UTIL_TIMER_Stop+0x64>)
 80131c8:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80131ca:	f7ff ffcb 	bl	8013164 <TimerSetTimeout>
 80131ce:	e009      	b.n	80131e4 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80131d0:	4b0a      	ldr	r3, [pc, #40]	; (80131fc <UTIL_TIMER_Stop+0x68>)
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	4798      	blx	r3
            TimerListHead = NULL;
 80131d6:	4b08      	ldr	r3, [pc, #32]	; (80131f8 <UTIL_TIMER_Stop+0x64>)
 80131d8:	2200      	movs	r2, #0
 80131da:	601a      	str	r2, [r3, #0]
 80131dc:	e002      	b.n	80131e4 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80131de:	695b      	ldr	r3, [r3, #20]
 80131e0:	b123      	cbz	r3, 80131ec <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80131e2:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131e4:	f384 8810 	msr	PRIMASK, r4
}
 80131e8:	2000      	movs	r0, #0
}
 80131ea:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80131ec:	2300      	movs	r3, #0
 80131ee:	614b      	str	r3, [r1, #20]
 80131f0:	e7f8      	b.n	80131e4 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80131f2:	2001      	movs	r0, #1
}
 80131f4:	4770      	bx	lr
 80131f6:	bf00      	nop
 80131f8:	200016e4 	.word	0x200016e4
 80131fc:	080138a8 	.word	0x080138a8

08013200 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013200:	4b09      	ldr	r3, [pc, #36]	; (8013228 <TimerInsertTimer+0x28>)
 8013202:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8013204:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8013206:	e001      	b.n	801320c <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8013208:	461a      	mov	r2, r3
        next = next->Next;
 801320a:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 801320c:	6951      	ldr	r1, [r2, #20]
 801320e:	b139      	cbz	r1, 8013220 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8013210:	6819      	ldr	r1, [r3, #0]
 8013212:	f8d0 c000 	ldr.w	ip, [r0]
 8013216:	458c      	cmp	ip, r1
 8013218:	d8f6      	bhi.n	8013208 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 801321a:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 801321c:	6143      	str	r3, [r0, #20]
        return;
 801321e:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8013220:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8013222:	2300      	movs	r3, #0
 8013224:	6143      	str	r3, [r0, #20]
}
 8013226:	4770      	bx	lr
 8013228:	200016e4 	.word	0x200016e4

0801322c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801322c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801322e:	4b05      	ldr	r3, [pc, #20]	; (8013244 <TimerInsertNewHeadTimer+0x18>)
 8013230:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8013232:	b10b      	cbz	r3, 8013238 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8013234:	2200      	movs	r2, #0
 8013236:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8013238:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 801323a:	4b02      	ldr	r3, [pc, #8]	; (8013244 <TimerInsertNewHeadTimer+0x18>)
 801323c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801323e:	f7ff ff91 	bl	8013164 <TimerSetTimeout>
}
 8013242:	bd08      	pop	{r3, pc}
 8013244:	200016e4 	.word	0x200016e4

08013248 <UTIL_TIMER_Start>:
{
 8013248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801324a:	2800      	cmp	r0, #0
 801324c:	d036      	beq.n	80132bc <UTIL_TIMER_Start+0x74>
 801324e:	4604      	mov	r4, r0
 8013250:	f7ff ff7a 	bl	8013148 <TimerExists>
 8013254:	2800      	cmp	r0, #0
 8013256:	d134      	bne.n	80132c2 <UTIL_TIMER_Start+0x7a>
 8013258:	7a65      	ldrb	r5, [r4, #9]
 801325a:	2d00      	cmp	r5, #0
 801325c:	d133      	bne.n	80132c6 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801325e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013262:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8013264:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8013266:	4b19      	ldr	r3, [pc, #100]	; (80132cc <UTIL_TIMER_Start+0x84>)
 8013268:	6a1b      	ldr	r3, [r3, #32]
 801326a:	4798      	blx	r3
    if( ticks < minValue )
 801326c:	4287      	cmp	r7, r0
 801326e:	d300      	bcc.n	8013272 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8013270:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8013272:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8013274:	2300      	movs	r3, #0
 8013276:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8013278:	2201      	movs	r2, #1
 801327a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801327c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801327e:	4b14      	ldr	r3, [pc, #80]	; (80132d0 <UTIL_TIMER_Start+0x88>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	b183      	cbz	r3, 80132a6 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8013284:	4b11      	ldr	r3, [pc, #68]	; (80132cc <UTIL_TIMER_Start+0x84>)
 8013286:	699b      	ldr	r3, [r3, #24]
 8013288:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 801328a:	6823      	ldr	r3, [r4, #0]
 801328c:	4418      	add	r0, r3
 801328e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8013290:	4b0f      	ldr	r3, [pc, #60]	; (80132d0 <UTIL_TIMER_Start+0x88>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	4298      	cmp	r0, r3
 8013298:	d20c      	bcs.n	80132b4 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801329a:	4620      	mov	r0, r4
 801329c:	f7ff ffc6 	bl	801322c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80132a0:	f386 8810 	msr	PRIMASK, r6
}
 80132a4:	e00b      	b.n	80132be <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80132a6:	4b09      	ldr	r3, [pc, #36]	; (80132cc <UTIL_TIMER_Start+0x84>)
 80132a8:	691b      	ldr	r3, [r3, #16]
 80132aa:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80132ac:	4620      	mov	r0, r4
 80132ae:	f7ff ffbd 	bl	801322c <TimerInsertNewHeadTimer>
 80132b2:	e7f5      	b.n	80132a0 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80132b4:	4620      	mov	r0, r4
 80132b6:	f7ff ffa3 	bl	8013200 <TimerInsertTimer>
 80132ba:	e7f1      	b.n	80132a0 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80132bc:	2501      	movs	r5, #1
}
 80132be:	4628      	mov	r0, r5
 80132c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80132c2:	2501      	movs	r5, #1
 80132c4:	e7fb      	b.n	80132be <UTIL_TIMER_Start+0x76>
 80132c6:	2501      	movs	r5, #1
 80132c8:	e7f9      	b.n	80132be <UTIL_TIMER_Start+0x76>
 80132ca:	bf00      	nop
 80132cc:	080138a8 	.word	0x080138a8
 80132d0:	200016e4 	.word	0x200016e4

080132d4 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80132d4:	b198      	cbz	r0, 80132fe <UTIL_TIMER_SetPeriod+0x2a>
{
 80132d6:	b510      	push	{r4, lr}
 80132d8:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80132da:	4b0a      	ldr	r3, [pc, #40]	; (8013304 <UTIL_TIMER_SetPeriod+0x30>)
 80132dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132de:	4608      	mov	r0, r1
 80132e0:	4798      	blx	r3
 80132e2:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80132e4:	4620      	mov	r0, r4
 80132e6:	f7ff ff2f 	bl	8013148 <TimerExists>
 80132ea:	b908      	cbnz	r0, 80132f0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80132ec:	2000      	movs	r0, #0
}
 80132ee:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80132f0:	4620      	mov	r0, r4
 80132f2:	f7ff ff4f 	bl	8013194 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80132f6:	4620      	mov	r0, r4
 80132f8:	f7ff ffa6 	bl	8013248 <UTIL_TIMER_Start>
 80132fc:	e7f7      	b.n	80132ee <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80132fe:	2001      	movs	r0, #1
}
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop
 8013304:	080138a8 	.word	0x080138a8

08013308 <UTIL_TIMER_IRQ_Handler>:
{
 8013308:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801330a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801330e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8013310:	4c1e      	ldr	r4, [pc, #120]	; (801338c <UTIL_TIMER_IRQ_Handler+0x84>)
 8013312:	6963      	ldr	r3, [r4, #20]
 8013314:	4798      	blx	r3
 8013316:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8013318:	6923      	ldr	r3, [r4, #16]
 801331a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 801331c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 801331e:	4b1c      	ldr	r3, [pc, #112]	; (8013390 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	b923      	cbnz	r3, 801332e <UTIL_TIMER_IRQ_Handler+0x26>
 8013324:	e018      	b.n	8013358 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8013326:	2200      	movs	r2, #0
 8013328:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 801332a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 801332c:	b1a3      	cbz	r3, 8013358 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 801332e:	681a      	ldr	r2, [r3, #0]
 8013330:	42a2      	cmp	r2, r4
 8013332:	d9f8      	bls.n	8013326 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8013334:	1a31      	subs	r1, r6, r0
 8013336:	440a      	add	r2, r1
 8013338:	601a      	str	r2, [r3, #0]
 801333a:	e7f6      	b.n	801332a <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 801333c:	4b14      	ldr	r3, [pc, #80]	; (8013390 <UTIL_TIMER_IRQ_Handler+0x88>)
 801333e:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8013340:	6962      	ldr	r2, [r4, #20]
 8013342:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8013344:	2300      	movs	r3, #0
 8013346:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8013348:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 801334a:	68e3      	ldr	r3, [r4, #12]
 801334c:	6920      	ldr	r0, [r4, #16]
 801334e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8013350:	8963      	ldrh	r3, [r4, #10]
 8013352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013356:	d012      	beq.n	801337e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8013358:	4b0d      	ldr	r3, [pc, #52]	; (8013390 <UTIL_TIMER_IRQ_Handler+0x88>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	b13b      	cbz	r3, 801336e <UTIL_TIMER_IRQ_Handler+0x66>
 801335e:	681c      	ldr	r4, [r3, #0]
 8013360:	2c00      	cmp	r4, #0
 8013362:	d0eb      	beq.n	801333c <UTIL_TIMER_IRQ_Handler+0x34>
 8013364:	4b09      	ldr	r3, [pc, #36]	; (801338c <UTIL_TIMER_IRQ_Handler+0x84>)
 8013366:	699b      	ldr	r3, [r3, #24]
 8013368:	4798      	blx	r3
 801336a:	4284      	cmp	r4, r0
 801336c:	d3e6      	bcc.n	801333c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801336e:	4b08      	ldr	r3, [pc, #32]	; (8013390 <UTIL_TIMER_IRQ_Handler+0x88>)
 8013370:	6818      	ldr	r0, [r3, #0]
 8013372:	b108      	cbz	r0, 8013378 <UTIL_TIMER_IRQ_Handler+0x70>
 8013374:	7a03      	ldrb	r3, [r0, #8]
 8013376:	b133      	cbz	r3, 8013386 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013378:	f385 8810 	msr	PRIMASK, r5
}
 801337c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801337e:	4620      	mov	r0, r4
 8013380:	f7ff ff62 	bl	8013248 <UTIL_TIMER_Start>
 8013384:	e7e8      	b.n	8013358 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8013386:	f7ff feed 	bl	8013164 <TimerSetTimeout>
 801338a:	e7f5      	b.n	8013378 <UTIL_TIMER_IRQ_Handler+0x70>
 801338c:	080138a8 	.word	0x080138a8
 8013390:	200016e4 	.word	0x200016e4

08013394 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8013394:	4601      	mov	r1, r0
  int i = 0;
 8013396:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8013398:	e008      	b.n	80133ac <ee_skip_atoi+0x18>
 801339a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801339e:	1c53      	adds	r3, r2, #1
 80133a0:	600b      	str	r3, [r1, #0]
 80133a2:	7813      	ldrb	r3, [r2, #0]
 80133a4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80133a8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80133ac:	680a      	ldr	r2, [r1, #0]
 80133ae:	7813      	ldrb	r3, [r2, #0]
 80133b0:	3b30      	subs	r3, #48	; 0x30
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	2b09      	cmp	r3, #9
 80133b6:	d9f0      	bls.n	801339a <ee_skip_atoi+0x6>
  return i;
}
 80133b8:	4770      	bx	lr
	...

080133bc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80133bc:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80133c0:	b093      	sub	sp, #76	; 0x4c
 80133c2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80133c4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80133c6:	f016 0f40 	tst.w	r6, #64	; 0x40
 80133ca:	d110      	bne.n	80133ee <ee_number+0x32>
  char *dig = lower_digits;
 80133cc:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80134c8 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80133d0:	1e9f      	subs	r7, r3, #2
 80133d2:	2f22      	cmp	r7, #34	; 0x22
 80133d4:	d875      	bhi.n	80134c2 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80133d6:	f016 0401 	ands.w	r4, r6, #1
 80133da:	d00b      	beq.n	80133f4 <ee_number+0x38>
 80133dc:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 80133e0:	f016 0f02 	tst.w	r6, #2
 80133e4:	d00f      	beq.n	8013406 <ee_number+0x4a>
  {
    if (num < 0)
 80133e6:	2a00      	cmp	r2, #0
 80133e8:	db07      	blt.n	80133fa <ee_number+0x3e>
  sign = 0;
 80133ea:	2700      	movs	r7, #0
 80133ec:	e00c      	b.n	8013408 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80133ee:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80134cc <ee_number+0x110>
 80133f2:	e7ed      	b.n	80133d0 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80133f4:	f04f 0e20 	mov.w	lr, #32
 80133f8:	e7f2      	b.n	80133e0 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80133fa:	4252      	negs	r2, r2
      size--;
 80133fc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80133fe:	3e01      	subs	r6, #1
 8013400:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8013402:	272d      	movs	r7, #45	; 0x2d
 8013404:	e000      	b.n	8013408 <ee_number+0x4c>
  sign = 0;
 8013406:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8013408:	bb5a      	cbnz	r2, 8013462 <ee_number+0xa6>
    tmp[i++] = '0';
 801340a:	2330      	movs	r3, #48	; 0x30
 801340c:	f88d 3004 	strb.w	r3, [sp, #4]
 8013410:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8013414:	45ac      	cmp	ip, r5
 8013416:	dd00      	ble.n	801341a <ee_number+0x5e>
 8013418:	4665      	mov	r5, ip
  size -= precision;
 801341a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801341c:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801341e:	b31c      	cbz	r4, 8013468 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8013420:	b11f      	cbz	r7, 801342a <ee_number+0x6e>
 8013422:	f800 7b01 	strb.w	r7, [r0], #1
 8013426:	3901      	subs	r1, #1
 8013428:	d007      	beq.n	801343a <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801342a:	2b00      	cmp	r3, #0
 801342c:	f103 33ff 	add.w	r3, r3, #4294967295
 8013430:	dd24      	ble.n	801347c <ee_number+0xc0>
 8013432:	f800 eb01 	strb.w	lr, [r0], #1
 8013436:	3901      	subs	r1, #1
 8013438:	d1f7      	bne.n	801342a <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 801343a:	b013      	add	sp, #76	; 0x4c
 801343c:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8013440:	fbb2 f6f3 	udiv	r6, r2, r3
 8013444:	fb03 2216 	mls	r2, r3, r6, r2
 8013448:	f81a 8002 	ldrb.w	r8, [sl, r2]
 801344c:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8013450:	446a      	add	r2, sp
 8013452:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8013456:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8013458:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 801345c:	2a00      	cmp	r2, #0
 801345e:	d1ef      	bne.n	8013440 <ee_number+0x84>
 8013460:	e7d8      	b.n	8013414 <ee_number+0x58>
  i = 0;
 8013462:	f04f 0c00 	mov.w	ip, #0
 8013466:	e7f9      	b.n	801345c <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8013468:	2b00      	cmp	r3, #0
 801346a:	f103 33ff 	add.w	r3, r3, #4294967295
 801346e:	ddd7      	ble.n	8013420 <ee_number+0x64>
 8013470:	2220      	movs	r2, #32
 8013472:	f800 2b01 	strb.w	r2, [r0], #1
 8013476:	3901      	subs	r1, #1
 8013478:	d1f6      	bne.n	8013468 <ee_number+0xac>
 801347a:	e7de      	b.n	801343a <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 801347c:	4565      	cmp	r5, ip
 801347e:	f105 35ff 	add.w	r5, r5, #4294967295
 8013482:	dd05      	ble.n	8013490 <ee_number+0xd4>
 8013484:	2230      	movs	r2, #48	; 0x30
 8013486:	f800 2b01 	strb.w	r2, [r0], #1
 801348a:	3901      	subs	r1, #1
 801348c:	d1f6      	bne.n	801347c <ee_number+0xc0>
 801348e:	e7d4      	b.n	801343a <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8013490:	4662      	mov	r2, ip
 8013492:	2a00      	cmp	r2, #0
 8013494:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013498:	dd09      	ble.n	80134ae <ee_number+0xf2>
 801349a:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 801349e:	446a      	add	r2, sp
 80134a0:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80134a4:	f800 2b01 	strb.w	r2, [r0], #1
 80134a8:	3901      	subs	r1, #1
 80134aa:	d1f1      	bne.n	8013490 <ee_number+0xd4>
 80134ac:	e7c5      	b.n	801343a <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80134b4:	ddc1      	ble.n	801343a <ee_number+0x7e>
 80134b6:	2220      	movs	r2, #32
 80134b8:	f800 2b01 	strb.w	r2, [r0], #1
 80134bc:	3901      	subs	r1, #1
 80134be:	d1f6      	bne.n	80134ae <ee_number+0xf2>
 80134c0:	e7bb      	b.n	801343a <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 80134c2:	2000      	movs	r0, #0
 80134c4:	e7b9      	b.n	801343a <ee_number+0x7e>
 80134c6:	bf00      	nop
 80134c8:	080146d8 	.word	0x080146d8
 80134cc:	08014700 	.word	0x08014700

080134d0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80134d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134d4:	b087      	sub	sp, #28
 80134d6:	9205      	str	r2, [sp, #20]
 80134d8:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80134da:	1e0f      	subs	r7, r1, #0
 80134dc:	f340 80b8 	ble.w	8013650 <tiny_vsnprintf_like+0x180>
 80134e0:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80134e2:	4604      	mov	r4, r0
 80134e4:	e004      	b.n	80134f0 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 80134e6:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80134ea:	9b05      	ldr	r3, [sp, #20]
 80134ec:	3301      	adds	r3, #1
 80134ee:	9305      	str	r3, [sp, #20]
 80134f0:	9905      	ldr	r1, [sp, #20]
 80134f2:	780a      	ldrb	r2, [r1, #0]
 80134f4:	b922      	cbnz	r2, 8013500 <tiny_vsnprintf_like+0x30>
 80134f6:	1ba3      	subs	r3, r4, r6
 80134f8:	1e78      	subs	r0, r7, #1
 80134fa:	4283      	cmp	r3, r0
 80134fc:	f2c0 80a2 	blt.w	8013644 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8013500:	1ba3      	subs	r3, r4, r6
 8013502:	f107 38ff 	add.w	r8, r7, #4294967295
 8013506:	4543      	cmp	r3, r8
 8013508:	f280 809c 	bge.w	8013644 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 801350c:	2a25      	cmp	r2, #37	; 0x25
 801350e:	d1ea      	bne.n	80134e6 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8013510:	1c4b      	adds	r3, r1, #1
 8013512:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8013514:	784b      	ldrb	r3, [r1, #1]
 8013516:	2b30      	cmp	r3, #48	; 0x30
 8013518:	d020      	beq.n	801355c <tiny_vsnprintf_like+0x8c>
    flags = 0;
 801351a:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 801351e:	3b30      	subs	r3, #48	; 0x30
 8013520:	b2db      	uxtb	r3, r3
 8013522:	2b09      	cmp	r3, #9
 8013524:	d91d      	bls.n	8013562 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8013526:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 801352a:	9b05      	ldr	r3, [sp, #20]
 801352c:	781a      	ldrb	r2, [r3, #0]
 801352e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8013532:	2b20      	cmp	r3, #32
 8013534:	d867      	bhi.n	8013606 <tiny_vsnprintf_like+0x136>
 8013536:	e8df f003 	tbb	[pc, r3]
 801353a:	664a      	.short	0x664a
 801353c:	66666666 	.word	0x66666666
 8013540:	66666666 	.word	0x66666666
 8013544:	66621e66 	.word	0x66621e66
 8013548:	62666666 	.word	0x62666666
 801354c:	66666666 	.word	0x66666666
 8013550:	66666666 	.word	0x66666666
 8013554:	19662866 	.word	0x19662866
 8013558:	6666      	.short	0x6666
 801355a:	7c          	.byte	0x7c
 801355b:	00          	.byte	0x00
      flags |= ZEROPAD;
 801355c:	f04f 0901 	mov.w	r9, #1
 8013560:	e7dd      	b.n	801351e <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8013562:	a805      	add	r0, sp, #20
 8013564:	f7ff ff16 	bl	8013394 <ee_skip_atoi>
 8013568:	4605      	mov	r5, r0
 801356a:	e7de      	b.n	801352a <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 801356c:	230a      	movs	r3, #10
 801356e:	e031      	b.n	80135d4 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8013570:	2320      	movs	r3, #32
 8013572:	f804 3b01 	strb.w	r3, [r4], #1
 8013576:	3d01      	subs	r5, #1
 8013578:	2d00      	cmp	r5, #0
 801357a:	dcf9      	bgt.n	8013570 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 801357c:	9b04      	ldr	r3, [sp, #16]
 801357e:	1d1a      	adds	r2, r3, #4
 8013580:	9204      	str	r2, [sp, #16]
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8013588:	e7af      	b.n	80134ea <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 801358a:	9b04      	ldr	r3, [sp, #16]
 801358c:	1d1a      	adds	r2, r3, #4
 801358e:	9204      	str	r2, [sp, #16]
 8013590:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8013594:	f1b8 0f00 	cmp.w	r8, #0
 8013598:	d003      	beq.n	80135a2 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 801359a:	4640      	mov	r0, r8
 801359c:	f7ec fdec 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80135a0:	e006      	b.n	80135b0 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 80135a2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013654 <tiny_vsnprintf_like+0x184>
 80135a6:	e7f8      	b.n	801359a <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 80135a8:	2220      	movs	r2, #32
 80135aa:	f804 2b01 	strb.w	r2, [r4], #1
 80135ae:	461d      	mov	r5, r3
 80135b0:	1e6b      	subs	r3, r5, #1
 80135b2:	4285      	cmp	r5, r0
 80135b4:	dcf8      	bgt.n	80135a8 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80135b6:	2200      	movs	r2, #0
 80135b8:	e006      	b.n	80135c8 <tiny_vsnprintf_like+0xf8>
 80135ba:	4643      	mov	r3, r8
 80135bc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80135c0:	f804 1b01 	strb.w	r1, [r4], #1
 80135c4:	3201      	adds	r2, #1
 80135c6:	4698      	mov	r8, r3
 80135c8:	4282      	cmp	r2, r0
 80135ca:	dbf6      	blt.n	80135ba <tiny_vsnprintf_like+0xea>
 80135cc:	e78d      	b.n	80134ea <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80135ce:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80135d2:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80135d4:	f019 0f02 	tst.w	r9, #2
 80135d8:	d02f      	beq.n	801363a <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80135da:	9a04      	ldr	r2, [sp, #16]
 80135dc:	1d11      	adds	r1, r2, #4
 80135de:	9104      	str	r1, [sp, #16]
 80135e0:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80135e2:	1ba1      	subs	r1, r4, r6
 80135e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80135e8:	f04f 30ff 	mov.w	r0, #4294967295
 80135ec:	9001      	str	r0, [sp, #4]
 80135ee:	9500      	str	r5, [sp, #0]
 80135f0:	eba8 0101 	sub.w	r1, r8, r1
 80135f4:	4620      	mov	r0, r4
 80135f6:	f7ff fee1 	bl	80133bc <ee_number>
 80135fa:	4604      	mov	r4, r0
 80135fc:	e775      	b.n	80134ea <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80135fe:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8013602:	230a      	movs	r3, #10
 8013604:	e7e6      	b.n	80135d4 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8013606:	2a25      	cmp	r2, #37	; 0x25
 8013608:	d002      	beq.n	8013610 <tiny_vsnprintf_like+0x140>
 801360a:	2325      	movs	r3, #37	; 0x25
 801360c:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013610:	1ba3      	subs	r3, r4, r6
 8013612:	4598      	cmp	r8, r3
 8013614:	dd0f      	ble.n	8013636 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8013616:	9b05      	ldr	r3, [sp, #20]
 8013618:	781a      	ldrb	r2, [r3, #0]
 801361a:	b13a      	cbz	r2, 801362c <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 801361c:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013620:	1ba3      	subs	r3, r4, r6
 8013622:	4598      	cmp	r8, r3
 8013624:	f73f af61 	bgt.w	80134ea <tiny_vsnprintf_like+0x1a>
    base = 10;
 8013628:	230a      	movs	r3, #10
 801362a:	e7d3      	b.n	80135d4 <tiny_vsnprintf_like+0x104>
          --fmt;
 801362c:	3b01      	subs	r3, #1
 801362e:	9305      	str	r3, [sp, #20]
 8013630:	e7f6      	b.n	8013620 <tiny_vsnprintf_like+0x150>
        base = 16;
 8013632:	2310      	movs	r3, #16
 8013634:	e7ce      	b.n	80135d4 <tiny_vsnprintf_like+0x104>
    base = 10;
 8013636:	230a      	movs	r3, #10
 8013638:	e7cc      	b.n	80135d4 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 801363a:	9a04      	ldr	r2, [sp, #16]
 801363c:	1d11      	adds	r1, r2, #4
 801363e:	9104      	str	r1, [sp, #16]
 8013640:	6812      	ldr	r2, [r2, #0]
 8013642:	e7ce      	b.n	80135e2 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8013644:	2300      	movs	r3, #0
 8013646:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8013648:	1ba0      	subs	r0, r4, r6
}
 801364a:	b007      	add	sp, #28
 801364c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8013650:	2000      	movs	r0, #0
 8013652:	e7fa      	b.n	801364a <tiny_vsnprintf_like+0x17a>
 8013654:	08014728 	.word	0x08014728

08013658 <memset>:
 8013658:	4402      	add	r2, r0
 801365a:	4603      	mov	r3, r0
 801365c:	4293      	cmp	r3, r2
 801365e:	d100      	bne.n	8013662 <memset+0xa>
 8013660:	4770      	bx	lr
 8013662:	f803 1b01 	strb.w	r1, [r3], #1
 8013666:	e7f9      	b.n	801365c <memset+0x4>

08013668 <__libc_init_array>:
 8013668:	b570      	push	{r4, r5, r6, lr}
 801366a:	4d0d      	ldr	r5, [pc, #52]	; (80136a0 <__libc_init_array+0x38>)
 801366c:	4c0d      	ldr	r4, [pc, #52]	; (80136a4 <__libc_init_array+0x3c>)
 801366e:	1b64      	subs	r4, r4, r5
 8013670:	10a4      	asrs	r4, r4, #2
 8013672:	2600      	movs	r6, #0
 8013674:	42a6      	cmp	r6, r4
 8013676:	d109      	bne.n	801368c <__libc_init_array+0x24>
 8013678:	4d0b      	ldr	r5, [pc, #44]	; (80136a8 <__libc_init_array+0x40>)
 801367a:	4c0c      	ldr	r4, [pc, #48]	; (80136ac <__libc_init_array+0x44>)
 801367c:	f000 f8a8 	bl	80137d0 <_init>
 8013680:	1b64      	subs	r4, r4, r5
 8013682:	10a4      	asrs	r4, r4, #2
 8013684:	2600      	movs	r6, #0
 8013686:	42a6      	cmp	r6, r4
 8013688:	d105      	bne.n	8013696 <__libc_init_array+0x2e>
 801368a:	bd70      	pop	{r4, r5, r6, pc}
 801368c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013690:	4798      	blx	r3
 8013692:	3601      	adds	r6, #1
 8013694:	e7ee      	b.n	8013674 <__libc_init_array+0xc>
 8013696:	f855 3b04 	ldr.w	r3, [r5], #4
 801369a:	4798      	blx	r3
 801369c:	3601      	adds	r6, #1
 801369e:	e7f2      	b.n	8013686 <__libc_init_array+0x1e>
 80136a0:	08014738 	.word	0x08014738
 80136a4:	08014738 	.word	0x08014738
 80136a8:	08014738 	.word	0x08014738
 80136ac:	0801473c 	.word	0x0801473c

080136b0 <memcpy>:
 80136b0:	440a      	add	r2, r1
 80136b2:	4291      	cmp	r1, r2
 80136b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80136b8:	d100      	bne.n	80136bc <memcpy+0xc>
 80136ba:	4770      	bx	lr
 80136bc:	b510      	push	{r4, lr}
 80136be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80136c6:	4291      	cmp	r1, r2
 80136c8:	d1f9      	bne.n	80136be <memcpy+0xe>
 80136ca:	bd10      	pop	{r4, pc}
 80136cc:	0000      	movs	r0, r0
	...

080136d0 <floor>:
 80136d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80136d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136d8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80136dc:	2e13      	cmp	r6, #19
 80136de:	460b      	mov	r3, r1
 80136e0:	4607      	mov	r7, r0
 80136e2:	460c      	mov	r4, r1
 80136e4:	4605      	mov	r5, r0
 80136e6:	dc32      	bgt.n	801374e <floor+0x7e>
 80136e8:	2e00      	cmp	r6, #0
 80136ea:	da14      	bge.n	8013716 <floor+0x46>
 80136ec:	a334      	add	r3, pc, #208	; (adr r3, 80137c0 <floor+0xf0>)
 80136ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f2:	f7ec fd4f 	bl	8000194 <__adddf3>
 80136f6:	2200      	movs	r2, #0
 80136f8:	2300      	movs	r3, #0
 80136fa:	f7ec ff7f 	bl	80005fc <__aeabi_dcmpgt>
 80136fe:	b138      	cbz	r0, 8013710 <floor+0x40>
 8013700:	2c00      	cmp	r4, #0
 8013702:	da56      	bge.n	80137b2 <floor+0xe2>
 8013704:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8013708:	4325      	orrs	r5, r4
 801370a:	d055      	beq.n	80137b8 <floor+0xe8>
 801370c:	4c2e      	ldr	r4, [pc, #184]	; (80137c8 <floor+0xf8>)
 801370e:	2500      	movs	r5, #0
 8013710:	4623      	mov	r3, r4
 8013712:	462f      	mov	r7, r5
 8013714:	e025      	b.n	8013762 <floor+0x92>
 8013716:	4a2d      	ldr	r2, [pc, #180]	; (80137cc <floor+0xfc>)
 8013718:	fa42 f806 	asr.w	r8, r2, r6
 801371c:	ea01 0208 	and.w	r2, r1, r8
 8013720:	4302      	orrs	r2, r0
 8013722:	d01e      	beq.n	8013762 <floor+0x92>
 8013724:	a326      	add	r3, pc, #152	; (adr r3, 80137c0 <floor+0xf0>)
 8013726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801372a:	f7ec fd33 	bl	8000194 <__adddf3>
 801372e:	2200      	movs	r2, #0
 8013730:	2300      	movs	r3, #0
 8013732:	f7ec ff63 	bl	80005fc <__aeabi_dcmpgt>
 8013736:	2800      	cmp	r0, #0
 8013738:	d0ea      	beq.n	8013710 <floor+0x40>
 801373a:	2c00      	cmp	r4, #0
 801373c:	bfbe      	ittt	lt
 801373e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013742:	4133      	asrlt	r3, r6
 8013744:	18e4      	addlt	r4, r4, r3
 8013746:	ea24 0408 	bic.w	r4, r4, r8
 801374a:	2500      	movs	r5, #0
 801374c:	e7e0      	b.n	8013710 <floor+0x40>
 801374e:	2e33      	cmp	r6, #51	; 0x33
 8013750:	dd0b      	ble.n	801376a <floor+0x9a>
 8013752:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013756:	d104      	bne.n	8013762 <floor+0x92>
 8013758:	4602      	mov	r2, r0
 801375a:	f7ec fd1b 	bl	8000194 <__adddf3>
 801375e:	4607      	mov	r7, r0
 8013760:	460b      	mov	r3, r1
 8013762:	4638      	mov	r0, r7
 8013764:	4619      	mov	r1, r3
 8013766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801376a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801376e:	f04f 38ff 	mov.w	r8, #4294967295
 8013772:	fa28 f802 	lsr.w	r8, r8, r2
 8013776:	ea10 0f08 	tst.w	r0, r8
 801377a:	d0f2      	beq.n	8013762 <floor+0x92>
 801377c:	a310      	add	r3, pc, #64	; (adr r3, 80137c0 <floor+0xf0>)
 801377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013782:	f7ec fd07 	bl	8000194 <__adddf3>
 8013786:	2200      	movs	r2, #0
 8013788:	2300      	movs	r3, #0
 801378a:	f7ec ff37 	bl	80005fc <__aeabi_dcmpgt>
 801378e:	2800      	cmp	r0, #0
 8013790:	d0be      	beq.n	8013710 <floor+0x40>
 8013792:	2c00      	cmp	r4, #0
 8013794:	da0a      	bge.n	80137ac <floor+0xdc>
 8013796:	2e14      	cmp	r6, #20
 8013798:	d101      	bne.n	801379e <floor+0xce>
 801379a:	3401      	adds	r4, #1
 801379c:	e006      	b.n	80137ac <floor+0xdc>
 801379e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80137a2:	2301      	movs	r3, #1
 80137a4:	40b3      	lsls	r3, r6
 80137a6:	441d      	add	r5, r3
 80137a8:	42af      	cmp	r7, r5
 80137aa:	d8f6      	bhi.n	801379a <floor+0xca>
 80137ac:	ea25 0508 	bic.w	r5, r5, r8
 80137b0:	e7ae      	b.n	8013710 <floor+0x40>
 80137b2:	2500      	movs	r5, #0
 80137b4:	462c      	mov	r4, r5
 80137b6:	e7ab      	b.n	8013710 <floor+0x40>
 80137b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80137bc:	e7a8      	b.n	8013710 <floor+0x40>
 80137be:	bf00      	nop
 80137c0:	8800759c 	.word	0x8800759c
 80137c4:	7e37e43c 	.word	0x7e37e43c
 80137c8:	bff00000 	.word	0xbff00000
 80137cc:	000fffff 	.word	0x000fffff

080137d0 <_init>:
 80137d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137d2:	bf00      	nop
 80137d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137d6:	bc08      	pop	{r3}
 80137d8:	469e      	mov	lr, r3
 80137da:	4770      	bx	lr

080137dc <_fini>:
 80137dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137de:	bf00      	nop
 80137e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137e2:	bc08      	pop	{r3}
 80137e4:	469e      	mov	lr, r3
 80137e6:	4770      	bx	lr
